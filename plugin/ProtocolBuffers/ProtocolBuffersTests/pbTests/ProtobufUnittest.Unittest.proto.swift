// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file unittest.proto

import Foundation
import ProtocolBuffers


public struct ProtobufUnittest { }

public func == (lhs: ProtobufUnittest.TestAllTypes, rhs: ProtobufUnittest.TestAllTypes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalInt32 == rhs.hasOptionalInt32) && (!lhs.hasOptionalInt32 || lhs.optionalInt32 == rhs.optionalInt32)
  fieldCheck = fieldCheck && (lhs.hasOptionalInt64 == rhs.hasOptionalInt64) && (!lhs.hasOptionalInt64 || lhs.optionalInt64 == rhs.optionalInt64)
  fieldCheck = fieldCheck && (lhs.hasOptionalUint32 == rhs.hasOptionalUint32) && (!lhs.hasOptionalUint32 || lhs.optionalUint32 == rhs.optionalUint32)
  fieldCheck = fieldCheck && (lhs.hasOptionalUint64 == rhs.hasOptionalUint64) && (!lhs.hasOptionalUint64 || lhs.optionalUint64 == rhs.optionalUint64)
  fieldCheck = fieldCheck && (lhs.hasOptionalSint32 == rhs.hasOptionalSint32) && (!lhs.hasOptionalSint32 || lhs.optionalSint32 == rhs.optionalSint32)
  fieldCheck = fieldCheck && (lhs.hasOptionalSint64 == rhs.hasOptionalSint64) && (!lhs.hasOptionalSint64 || lhs.optionalSint64 == rhs.optionalSint64)
  fieldCheck = fieldCheck && (lhs.hasOptionalFixed32 == rhs.hasOptionalFixed32) && (!lhs.hasOptionalFixed32 || lhs.optionalFixed32 == rhs.optionalFixed32)
  fieldCheck = fieldCheck && (lhs.hasOptionalFixed64 == rhs.hasOptionalFixed64) && (!lhs.hasOptionalFixed64 || lhs.optionalFixed64 == rhs.optionalFixed64)
  fieldCheck = fieldCheck && (lhs.hasOptionalSfixed32 == rhs.hasOptionalSfixed32) && (!lhs.hasOptionalSfixed32 || lhs.optionalSfixed32 == rhs.optionalSfixed32)
  fieldCheck = fieldCheck && (lhs.hasOptionalSfixed64 == rhs.hasOptionalSfixed64) && (!lhs.hasOptionalSfixed64 || lhs.optionalSfixed64 == rhs.optionalSfixed64)
  fieldCheck = fieldCheck && (lhs.hasOptionalFloat == rhs.hasOptionalFloat) && (!lhs.hasOptionalFloat || lhs.optionalFloat == rhs.optionalFloat)
  fieldCheck = fieldCheck && (lhs.hasOptionalDouble == rhs.hasOptionalDouble) && (!lhs.hasOptionalDouble || lhs.optionalDouble == rhs.optionalDouble)
  fieldCheck = fieldCheck && (lhs.hasOptionalBool == rhs.hasOptionalBool) && (!lhs.hasOptionalBool || lhs.optionalBool == rhs.optionalBool)
  fieldCheck = fieldCheck && (lhs.hasOptionalString == rhs.hasOptionalString) && (!lhs.hasOptionalString || lhs.optionalString == rhs.optionalString)
  fieldCheck = fieldCheck && (lhs.hasOptionalBytes == rhs.hasOptionalBytes) && (!lhs.hasOptionalBytes || lhs.optionalBytes == rhs.optionalBytes)
  fieldCheck = fieldCheck && (lhs.hasOptionalGroup == rhs.hasOptionalGroup) && (!lhs.hasOptionalGroup || lhs.optionalGroup == rhs.optionalGroup)
  fieldCheck = fieldCheck && (lhs.hasOptionalNestedMessage == rhs.hasOptionalNestedMessage) && (!lhs.hasOptionalNestedMessage || lhs.optionalNestedMessage == rhs.optionalNestedMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalForeignMessage == rhs.hasOptionalForeignMessage) && (!lhs.hasOptionalForeignMessage || lhs.optionalForeignMessage == rhs.optionalForeignMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalImportMessage == rhs.hasOptionalImportMessage) && (!lhs.hasOptionalImportMessage || lhs.optionalImportMessage == rhs.optionalImportMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalNestedEnum == rhs.hasOptionalNestedEnum) && (!lhs.hasOptionalNestedEnum || lhs.optionalNestedEnum == rhs.optionalNestedEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalForeignEnum == rhs.hasOptionalForeignEnum) && (!lhs.hasOptionalForeignEnum || lhs.optionalForeignEnum == rhs.optionalForeignEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalImportEnum == rhs.hasOptionalImportEnum) && (!lhs.hasOptionalImportEnum || lhs.optionalImportEnum == rhs.optionalImportEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalStringPiece == rhs.hasOptionalStringPiece) && (!lhs.hasOptionalStringPiece || lhs.optionalStringPiece == rhs.optionalStringPiece)
  fieldCheck = fieldCheck && (lhs.hasOptionalCord == rhs.hasOptionalCord) && (!lhs.hasOptionalCord || lhs.optionalCord == rhs.optionalCord)
  fieldCheck = fieldCheck && (lhs.hasOptionalPublicImportMessage == rhs.hasOptionalPublicImportMessage) && (!lhs.hasOptionalPublicImportMessage || lhs.optionalPublicImportMessage == rhs.optionalPublicImportMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalLazyMessage == rhs.hasOptionalLazyMessage) && (!lhs.hasOptionalLazyMessage || lhs.optionalLazyMessage == rhs.optionalLazyMessage)
  fieldCheck = fieldCheck && (lhs.repeatedInt32 == rhs.repeatedInt32)
  fieldCheck = fieldCheck && (lhs.repeatedInt64 == rhs.repeatedInt64)
  fieldCheck = fieldCheck && (lhs.repeatedUint32 == rhs.repeatedUint32)
  fieldCheck = fieldCheck && (lhs.repeatedUint64 == rhs.repeatedUint64)
  fieldCheck = fieldCheck && (lhs.repeatedSint32 == rhs.repeatedSint32)
  fieldCheck = fieldCheck && (lhs.repeatedSint64 == rhs.repeatedSint64)
  fieldCheck = fieldCheck && (lhs.repeatedFixed32 == rhs.repeatedFixed32)
  fieldCheck = fieldCheck && (lhs.repeatedFixed64 == rhs.repeatedFixed64)
  fieldCheck = fieldCheck && (lhs.repeatedSfixed32 == rhs.repeatedSfixed32)
  fieldCheck = fieldCheck && (lhs.repeatedSfixed64 == rhs.repeatedSfixed64)
  fieldCheck = fieldCheck && (lhs.repeatedFloat == rhs.repeatedFloat)
  fieldCheck = fieldCheck && (lhs.repeatedDouble == rhs.repeatedDouble)
  fieldCheck = fieldCheck && (lhs.repeatedBool == rhs.repeatedBool)
  fieldCheck = fieldCheck && (lhs.repeatedString == rhs.repeatedString)
  fieldCheck = fieldCheck && (lhs.repeatedBytes == rhs.repeatedBytes)
  fieldCheck = fieldCheck && (lhs.repeatedGroup == rhs.repeatedGroup)
  fieldCheck = fieldCheck && (lhs.repeatedNestedMessage == rhs.repeatedNestedMessage)
  fieldCheck = fieldCheck && (lhs.repeatedForeignMessage == rhs.repeatedForeignMessage)
  fieldCheck = fieldCheck && (lhs.repeatedImportMessage == rhs.repeatedImportMessage)
  fieldCheck = fieldCheck && (lhs.repeatedNestedEnum == rhs.repeatedNestedEnum)
  fieldCheck = fieldCheck && (lhs.repeatedForeignEnum == rhs.repeatedForeignEnum)
  fieldCheck = fieldCheck && (lhs.repeatedImportEnum == rhs.repeatedImportEnum)
  fieldCheck = fieldCheck && (lhs.repeatedStringPiece == rhs.repeatedStringPiece)
  fieldCheck = fieldCheck && (lhs.repeatedCord == rhs.repeatedCord)
  fieldCheck = fieldCheck && (lhs.repeatedLazyMessage == rhs.repeatedLazyMessage)
  fieldCheck = fieldCheck && (lhs.hasDefaultInt32 == rhs.hasDefaultInt32) && (!lhs.hasDefaultInt32 || lhs.defaultInt32 == rhs.defaultInt32)
  fieldCheck = fieldCheck && (lhs.hasDefaultInt64 == rhs.hasDefaultInt64) && (!lhs.hasDefaultInt64 || lhs.defaultInt64 == rhs.defaultInt64)
  fieldCheck = fieldCheck && (lhs.hasDefaultUint32 == rhs.hasDefaultUint32) && (!lhs.hasDefaultUint32 || lhs.defaultUint32 == rhs.defaultUint32)
  fieldCheck = fieldCheck && (lhs.hasDefaultUint64 == rhs.hasDefaultUint64) && (!lhs.hasDefaultUint64 || lhs.defaultUint64 == rhs.defaultUint64)
  fieldCheck = fieldCheck && (lhs.hasDefaultSint32 == rhs.hasDefaultSint32) && (!lhs.hasDefaultSint32 || lhs.defaultSint32 == rhs.defaultSint32)
  fieldCheck = fieldCheck && (lhs.hasDefaultSint64 == rhs.hasDefaultSint64) && (!lhs.hasDefaultSint64 || lhs.defaultSint64 == rhs.defaultSint64)
  fieldCheck = fieldCheck && (lhs.hasDefaultFixed32 == rhs.hasDefaultFixed32) && (!lhs.hasDefaultFixed32 || lhs.defaultFixed32 == rhs.defaultFixed32)
  fieldCheck = fieldCheck && (lhs.hasDefaultFixed64 == rhs.hasDefaultFixed64) && (!lhs.hasDefaultFixed64 || lhs.defaultFixed64 == rhs.defaultFixed64)
  fieldCheck = fieldCheck && (lhs.hasDefaultSfixed32 == rhs.hasDefaultSfixed32) && (!lhs.hasDefaultSfixed32 || lhs.defaultSfixed32 == rhs.defaultSfixed32)
  fieldCheck = fieldCheck && (lhs.hasDefaultSfixed64 == rhs.hasDefaultSfixed64) && (!lhs.hasDefaultSfixed64 || lhs.defaultSfixed64 == rhs.defaultSfixed64)
  fieldCheck = fieldCheck && (lhs.hasDefaultFloat == rhs.hasDefaultFloat) && (!lhs.hasDefaultFloat || lhs.defaultFloat == rhs.defaultFloat)
  fieldCheck = fieldCheck && (lhs.hasDefaultDouble == rhs.hasDefaultDouble) && (!lhs.hasDefaultDouble || lhs.defaultDouble == rhs.defaultDouble)
  fieldCheck = fieldCheck && (lhs.hasDefaultBool == rhs.hasDefaultBool) && (!lhs.hasDefaultBool || lhs.defaultBool == rhs.defaultBool)
  fieldCheck = fieldCheck && (lhs.hasDefaultString == rhs.hasDefaultString) && (!lhs.hasDefaultString || lhs.defaultString == rhs.defaultString)
  fieldCheck = fieldCheck && (lhs.hasDefaultBytes == rhs.hasDefaultBytes) && (!lhs.hasDefaultBytes || lhs.defaultBytes == rhs.defaultBytes)
  fieldCheck = fieldCheck && (lhs.hasDefaultNestedEnum == rhs.hasDefaultNestedEnum) && (!lhs.hasDefaultNestedEnum || lhs.defaultNestedEnum == rhs.defaultNestedEnum)
  fieldCheck = fieldCheck && (lhs.hasDefaultForeignEnum == rhs.hasDefaultForeignEnum) && (!lhs.hasDefaultForeignEnum || lhs.defaultForeignEnum == rhs.defaultForeignEnum)
  fieldCheck = fieldCheck && (lhs.hasDefaultImportEnum == rhs.hasDefaultImportEnum) && (!lhs.hasDefaultImportEnum || lhs.defaultImportEnum == rhs.defaultImportEnum)
  fieldCheck = fieldCheck && (lhs.hasDefaultStringPiece == rhs.hasDefaultStringPiece) && (!lhs.hasDefaultStringPiece || lhs.defaultStringPiece == rhs.defaultStringPiece)
  fieldCheck = fieldCheck && (lhs.hasDefaultCord == rhs.hasDefaultCord) && (!lhs.hasDefaultCord || lhs.defaultCord == rhs.defaultCord)
  fieldCheck = fieldCheck && (lhs.hasOneofUint32 == rhs.hasOneofUint32) && (!lhs.hasOneofUint32 || lhs.oneofUint32 == rhs.oneofUint32)
  fieldCheck = fieldCheck && (lhs.hasOneofNestedMessage == rhs.hasOneofNestedMessage) && (!lhs.hasOneofNestedMessage || lhs.oneofNestedMessage == rhs.oneofNestedMessage)
  fieldCheck = fieldCheck && (lhs.hasOneofString == rhs.hasOneofString) && (!lhs.hasOneofString || lhs.oneofString == rhs.oneofString)
  fieldCheck = fieldCheck && (lhs.hasOneofBytes == rhs.hasOneofBytes) && (!lhs.hasOneofBytes || lhs.oneofBytes == rhs.oneofBytes)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestAllTypes.NestedMessage, rhs: ProtobufUnittest.TestAllTypes.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestAllTypes.OptionalGroup, rhs: ProtobufUnittest.TestAllTypes.OptionalGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestAllTypes.RepeatedGroup, rhs: ProtobufUnittest.TestAllTypes.RepeatedGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.NestedTestAllTypes, rhs: ProtobufUnittest.NestedTestAllTypes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasChild == rhs.hasChild) && (!lhs.hasChild || lhs.child == rhs.child)
  fieldCheck = fieldCheck && (lhs.hasPayload == rhs.hasPayload) && (!lhs.hasPayload || lhs.payload == rhs.payload)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestDeprecatedFields, rhs: ProtobufUnittest.TestDeprecatedFields) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDeprecatedInt32 == rhs.hasDeprecatedInt32) && (!lhs.hasDeprecatedInt32 || lhs.deprecatedInt32 == rhs.deprecatedInt32)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.ForeignMessage, rhs: ProtobufUnittest.ForeignMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasC == rhs.hasC) && (!lhs.hasC || lhs.c == rhs.c)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestAllExtensions, rhs: ProtobufUnittest.TestAllExtensions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.OptionalGroupExtension, rhs: ProtobufUnittest.OptionalGroupExtension) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.RepeatedGroupExtension, rhs: ProtobufUnittest.RepeatedGroupExtension) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestNestedExtension, rhs: ProtobufUnittest.TestNestedExtension) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestRequired, rhs: ProtobufUnittest.TestRequired) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasDummy2 == rhs.hasDummy2) && (!lhs.hasDummy2 || lhs.dummy2 == rhs.dummy2)
  fieldCheck = fieldCheck && (lhs.hasB == rhs.hasB) && (!lhs.hasB || lhs.b == rhs.b)
  fieldCheck = fieldCheck && (lhs.hasDummy4 == rhs.hasDummy4) && (!lhs.hasDummy4 || lhs.dummy4 == rhs.dummy4)
  fieldCheck = fieldCheck && (lhs.hasDummy5 == rhs.hasDummy5) && (!lhs.hasDummy5 || lhs.dummy5 == rhs.dummy5)
  fieldCheck = fieldCheck && (lhs.hasDummy6 == rhs.hasDummy6) && (!lhs.hasDummy6 || lhs.dummy6 == rhs.dummy6)
  fieldCheck = fieldCheck && (lhs.hasDummy7 == rhs.hasDummy7) && (!lhs.hasDummy7 || lhs.dummy7 == rhs.dummy7)
  fieldCheck = fieldCheck && (lhs.hasDummy8 == rhs.hasDummy8) && (!lhs.hasDummy8 || lhs.dummy8 == rhs.dummy8)
  fieldCheck = fieldCheck && (lhs.hasDummy9 == rhs.hasDummy9) && (!lhs.hasDummy9 || lhs.dummy9 == rhs.dummy9)
  fieldCheck = fieldCheck && (lhs.hasDummy10 == rhs.hasDummy10) && (!lhs.hasDummy10 || lhs.dummy10 == rhs.dummy10)
  fieldCheck = fieldCheck && (lhs.hasDummy11 == rhs.hasDummy11) && (!lhs.hasDummy11 || lhs.dummy11 == rhs.dummy11)
  fieldCheck = fieldCheck && (lhs.hasDummy12 == rhs.hasDummy12) && (!lhs.hasDummy12 || lhs.dummy12 == rhs.dummy12)
  fieldCheck = fieldCheck && (lhs.hasDummy13 == rhs.hasDummy13) && (!lhs.hasDummy13 || lhs.dummy13 == rhs.dummy13)
  fieldCheck = fieldCheck && (lhs.hasDummy14 == rhs.hasDummy14) && (!lhs.hasDummy14 || lhs.dummy14 == rhs.dummy14)
  fieldCheck = fieldCheck && (lhs.hasDummy15 == rhs.hasDummy15) && (!lhs.hasDummy15 || lhs.dummy15 == rhs.dummy15)
  fieldCheck = fieldCheck && (lhs.hasDummy16 == rhs.hasDummy16) && (!lhs.hasDummy16 || lhs.dummy16 == rhs.dummy16)
  fieldCheck = fieldCheck && (lhs.hasDummy17 == rhs.hasDummy17) && (!lhs.hasDummy17 || lhs.dummy17 == rhs.dummy17)
  fieldCheck = fieldCheck && (lhs.hasDummy18 == rhs.hasDummy18) && (!lhs.hasDummy18 || lhs.dummy18 == rhs.dummy18)
  fieldCheck = fieldCheck && (lhs.hasDummy19 == rhs.hasDummy19) && (!lhs.hasDummy19 || lhs.dummy19 == rhs.dummy19)
  fieldCheck = fieldCheck && (lhs.hasDummy20 == rhs.hasDummy20) && (!lhs.hasDummy20 || lhs.dummy20 == rhs.dummy20)
  fieldCheck = fieldCheck && (lhs.hasDummy21 == rhs.hasDummy21) && (!lhs.hasDummy21 || lhs.dummy21 == rhs.dummy21)
  fieldCheck = fieldCheck && (lhs.hasDummy22 == rhs.hasDummy22) && (!lhs.hasDummy22 || lhs.dummy22 == rhs.dummy22)
  fieldCheck = fieldCheck && (lhs.hasDummy23 == rhs.hasDummy23) && (!lhs.hasDummy23 || lhs.dummy23 == rhs.dummy23)
  fieldCheck = fieldCheck && (lhs.hasDummy24 == rhs.hasDummy24) && (!lhs.hasDummy24 || lhs.dummy24 == rhs.dummy24)
  fieldCheck = fieldCheck && (lhs.hasDummy25 == rhs.hasDummy25) && (!lhs.hasDummy25 || lhs.dummy25 == rhs.dummy25)
  fieldCheck = fieldCheck && (lhs.hasDummy26 == rhs.hasDummy26) && (!lhs.hasDummy26 || lhs.dummy26 == rhs.dummy26)
  fieldCheck = fieldCheck && (lhs.hasDummy27 == rhs.hasDummy27) && (!lhs.hasDummy27 || lhs.dummy27 == rhs.dummy27)
  fieldCheck = fieldCheck && (lhs.hasDummy28 == rhs.hasDummy28) && (!lhs.hasDummy28 || lhs.dummy28 == rhs.dummy28)
  fieldCheck = fieldCheck && (lhs.hasDummy29 == rhs.hasDummy29) && (!lhs.hasDummy29 || lhs.dummy29 == rhs.dummy29)
  fieldCheck = fieldCheck && (lhs.hasDummy30 == rhs.hasDummy30) && (!lhs.hasDummy30 || lhs.dummy30 == rhs.dummy30)
  fieldCheck = fieldCheck && (lhs.hasDummy31 == rhs.hasDummy31) && (!lhs.hasDummy31 || lhs.dummy31 == rhs.dummy31)
  fieldCheck = fieldCheck && (lhs.hasDummy32 == rhs.hasDummy32) && (!lhs.hasDummy32 || lhs.dummy32 == rhs.dummy32)
  fieldCheck = fieldCheck && (lhs.hasC == rhs.hasC) && (!lhs.hasC || lhs.c == rhs.c)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestRequiredForeign, rhs: ProtobufUnittest.TestRequiredForeign) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalMessage == rhs.hasOptionalMessage) && (!lhs.hasOptionalMessage || lhs.optionalMessage == rhs.optionalMessage)
  fieldCheck = fieldCheck && (lhs.repeatedMessage == rhs.repeatedMessage)
  fieldCheck = fieldCheck && (lhs.hasDummy == rhs.hasDummy) && (!lhs.hasDummy || lhs.dummy == rhs.dummy)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestForeignNested, rhs: ProtobufUnittest.TestForeignNested) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasForeignNested == rhs.hasForeignNested) && (!lhs.hasForeignNested || lhs.foreignNested == rhs.foreignNested)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestEmptyMessage, rhs: ProtobufUnittest.TestEmptyMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestEmptyMessageWithExtensions, rhs: ProtobufUnittest.TestEmptyMessageWithExtensions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestMultipleExtensionRanges, rhs: ProtobufUnittest.TestMultipleExtensionRanges) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(42), endExclusive:Int32(43))
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(4143), endExclusive:Int32(4244))
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(65536), endExclusive:Int32(536870912))
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestReallyLargeTagNumber, rhs: ProtobufUnittest.TestReallyLargeTagNumber) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestRecursiveMessage, rhs: ProtobufUnittest.TestRecursiveMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasI == rhs.hasI) && (!lhs.hasI || lhs.i == rhs.i)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestMutualRecursionA, rhs: ProtobufUnittest.TestMutualRecursionA) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestMutualRecursionB, rhs: ProtobufUnittest.TestMutualRecursionB) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasOptionalInt32 == rhs.hasOptionalInt32) && (!lhs.hasOptionalInt32 || lhs.optionalInt32 == rhs.optionalInt32)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestDupFieldNumber, rhs: ProtobufUnittest.TestDupFieldNumber) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasFoo == rhs.hasFoo) && (!lhs.hasFoo || lhs.foo == rhs.foo)
  fieldCheck = fieldCheck && (lhs.hasBar == rhs.hasBar) && (!lhs.hasBar || lhs.bar == rhs.bar)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestDupFieldNumber.Foo, rhs: ProtobufUnittest.TestDupFieldNumber.Foo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestDupFieldNumber.Bar, rhs: ProtobufUnittest.TestDupFieldNumber.Bar) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestEagerMessage, rhs: ProtobufUnittest.TestEagerMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSubMessage == rhs.hasSubMessage) && (!lhs.hasSubMessage || lhs.subMessage == rhs.subMessage)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestLazyMessage, rhs: ProtobufUnittest.TestLazyMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSubMessage == rhs.hasSubMessage) && (!lhs.hasSubMessage || lhs.subMessage == rhs.subMessage)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestNestedMessageHasBits, rhs: ProtobufUnittest.TestNestedMessageHasBits) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalNestedMessage == rhs.hasOptionalNestedMessage) && (!lhs.hasOptionalNestedMessage || lhs.optionalNestedMessage == rhs.optionalNestedMessage)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestNestedMessageHasBits.NestedMessage, rhs: ProtobufUnittest.TestNestedMessageHasBits.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.nestedmessageRepeatedInt32 == rhs.nestedmessageRepeatedInt32)
  fieldCheck = fieldCheck && (lhs.nestedmessageRepeatedForeignmessage == rhs.nestedmessageRepeatedForeignmessage)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestCamelCaseFieldNames, rhs: ProtobufUnittest.TestCamelCaseFieldNames) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPrimitiveField == rhs.hasPrimitiveField) && (!lhs.hasPrimitiveField || lhs.primitiveField == rhs.primitiveField)
  fieldCheck = fieldCheck && (lhs.hasStringField == rhs.hasStringField) && (!lhs.hasStringField || lhs.stringField == rhs.stringField)
  fieldCheck = fieldCheck && (lhs.hasEnumField == rhs.hasEnumField) && (!lhs.hasEnumField || lhs.enumField == rhs.enumField)
  fieldCheck = fieldCheck && (lhs.hasMessageField == rhs.hasMessageField) && (!lhs.hasMessageField || lhs.messageField == rhs.messageField)
  fieldCheck = fieldCheck && (lhs.hasStringPieceField == rhs.hasStringPieceField) && (!lhs.hasStringPieceField || lhs.stringPieceField == rhs.stringPieceField)
  fieldCheck = fieldCheck && (lhs.hasCordField == rhs.hasCordField) && (!lhs.hasCordField || lhs.cordField == rhs.cordField)
  fieldCheck = fieldCheck && (lhs.repeatedPrimitiveField == rhs.repeatedPrimitiveField)
  fieldCheck = fieldCheck && (lhs.repeatedStringField == rhs.repeatedStringField)
  fieldCheck = fieldCheck && (lhs.repeatedEnumField == rhs.repeatedEnumField)
  fieldCheck = fieldCheck && (lhs.repeatedMessageField == rhs.repeatedMessageField)
  fieldCheck = fieldCheck && (lhs.repeatedStringPieceField == rhs.repeatedStringPieceField)
  fieldCheck = fieldCheck && (lhs.repeatedCordField == rhs.repeatedCordField)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestFieldOrderings, rhs: ProtobufUnittest.TestFieldOrderings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMyInt == rhs.hasMyInt) && (!lhs.hasMyInt || lhs.myInt == rhs.myInt)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(2), endExclusive:Int32(11))
  fieldCheck = fieldCheck && (lhs.hasMyString == rhs.hasMyString) && (!lhs.hasMyString || lhs.myString == rhs.myString)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(12), endExclusive:Int32(101))
  fieldCheck = fieldCheck && (lhs.hasMyFloat == rhs.hasMyFloat) && (!lhs.hasMyFloat || lhs.myFloat == rhs.myFloat)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestExtremeDefaultValues, rhs: ProtobufUnittest.TestExtremeDefaultValues) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEscapedBytes == rhs.hasEscapedBytes) && (!lhs.hasEscapedBytes || lhs.escapedBytes == rhs.escapedBytes)
  fieldCheck = fieldCheck && (lhs.hasLargeUint32 == rhs.hasLargeUint32) && (!lhs.hasLargeUint32 || lhs.largeUint32 == rhs.largeUint32)
  fieldCheck = fieldCheck && (lhs.hasLargeUint64 == rhs.hasLargeUint64) && (!lhs.hasLargeUint64 || lhs.largeUint64 == rhs.largeUint64)
  fieldCheck = fieldCheck && (lhs.hasSmallInt32 == rhs.hasSmallInt32) && (!lhs.hasSmallInt32 || lhs.smallInt32 == rhs.smallInt32)
  fieldCheck = fieldCheck && (lhs.hasSmallInt64 == rhs.hasSmallInt64) && (!lhs.hasSmallInt64 || lhs.smallInt64 == rhs.smallInt64)
  fieldCheck = fieldCheck && (lhs.hasUtf8String == rhs.hasUtf8String) && (!lhs.hasUtf8String || lhs.utf8String == rhs.utf8String)
  fieldCheck = fieldCheck && (lhs.hasZeroFloat == rhs.hasZeroFloat) && (!lhs.hasZeroFloat || lhs.zeroFloat == rhs.zeroFloat)
  fieldCheck = fieldCheck && (lhs.hasOneFloat == rhs.hasOneFloat) && (!lhs.hasOneFloat || lhs.oneFloat == rhs.oneFloat)
  fieldCheck = fieldCheck && (lhs.hasSmallFloat == rhs.hasSmallFloat) && (!lhs.hasSmallFloat || lhs.smallFloat == rhs.smallFloat)
  fieldCheck = fieldCheck && (lhs.hasNegativeOneFloat == rhs.hasNegativeOneFloat) && (!lhs.hasNegativeOneFloat || lhs.negativeOneFloat == rhs.negativeOneFloat)
  fieldCheck = fieldCheck && (lhs.hasNegativeFloat == rhs.hasNegativeFloat) && (!lhs.hasNegativeFloat || lhs.negativeFloat == rhs.negativeFloat)
  fieldCheck = fieldCheck && (lhs.hasLargeFloat == rhs.hasLargeFloat) && (!lhs.hasLargeFloat || lhs.largeFloat == rhs.largeFloat)
  fieldCheck = fieldCheck && (lhs.hasSmallNegativeFloat == rhs.hasSmallNegativeFloat) && (!lhs.hasSmallNegativeFloat || lhs.smallNegativeFloat == rhs.smallNegativeFloat)
  fieldCheck = fieldCheck && (lhs.hasInfDouble == rhs.hasInfDouble) && (!lhs.hasInfDouble || lhs.infDouble == rhs.infDouble)
  fieldCheck = fieldCheck && (lhs.hasNegInfDouble == rhs.hasNegInfDouble) && (!lhs.hasNegInfDouble || lhs.negInfDouble == rhs.negInfDouble)
  fieldCheck = fieldCheck && (lhs.hasNanDouble == rhs.hasNanDouble) && (!lhs.hasNanDouble || lhs.nanDouble == rhs.nanDouble)
  fieldCheck = fieldCheck && (lhs.hasInfFloat == rhs.hasInfFloat) && (!lhs.hasInfFloat || lhs.infFloat == rhs.infFloat)
  fieldCheck = fieldCheck && (lhs.hasNegInfFloat == rhs.hasNegInfFloat) && (!lhs.hasNegInfFloat || lhs.negInfFloat == rhs.negInfFloat)
  fieldCheck = fieldCheck && (lhs.hasNanFloat == rhs.hasNanFloat) && (!lhs.hasNanFloat || lhs.nanFloat == rhs.nanFloat)
  fieldCheck = fieldCheck && (lhs.hasCppTrigraph == rhs.hasCppTrigraph) && (!lhs.hasCppTrigraph || lhs.cppTrigraph == rhs.cppTrigraph)
  fieldCheck = fieldCheck && (lhs.hasReallySmallInt32 == rhs.hasReallySmallInt32) && (!lhs.hasReallySmallInt32 || lhs.reallySmallInt32 == rhs.reallySmallInt32)
  fieldCheck = fieldCheck && (lhs.hasReallySmallInt64 == rhs.hasReallySmallInt64) && (!lhs.hasReallySmallInt64 || lhs.reallySmallInt64 == rhs.reallySmallInt64)
  fieldCheck = fieldCheck && (lhs.hasStringWithZero == rhs.hasStringWithZero) && (!lhs.hasStringWithZero || lhs.stringWithZero == rhs.stringWithZero)
  fieldCheck = fieldCheck && (lhs.hasBytesWithZero == rhs.hasBytesWithZero) && (!lhs.hasBytesWithZero || lhs.bytesWithZero == rhs.bytesWithZero)
  fieldCheck = fieldCheck && (lhs.hasStringPieceWithZero == rhs.hasStringPieceWithZero) && (!lhs.hasStringPieceWithZero || lhs.stringPieceWithZero == rhs.stringPieceWithZero)
  fieldCheck = fieldCheck && (lhs.hasCordWithZero == rhs.hasCordWithZero) && (!lhs.hasCordWithZero || lhs.cordWithZero == rhs.cordWithZero)
  fieldCheck = fieldCheck && (lhs.hasReplacementString == rhs.hasReplacementString) && (!lhs.hasReplacementString || lhs.replacementString == rhs.replacementString)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.SparseEnumMessage, rhs: ProtobufUnittest.SparseEnumMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSparseEnum == rhs.hasSparseEnum) && (!lhs.hasSparseEnum || lhs.sparseEnum == rhs.sparseEnum)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.OneString, rhs: ProtobufUnittest.OneString) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.MoreString, rhs: ProtobufUnittest.MoreString) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.OneBytes, rhs: ProtobufUnittest.OneBytes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.MoreBytes, rhs: ProtobufUnittest.MoreBytes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.Int32Message, rhs: ProtobufUnittest.Int32Message) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.Uint32Message, rhs: ProtobufUnittest.Uint32Message) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.Int64Message, rhs: ProtobufUnittest.Int64Message) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.Uint64Message, rhs: ProtobufUnittest.Uint64Message) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.BoolMessage, rhs: ProtobufUnittest.BoolMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestOneof, rhs: ProtobufUnittest.TestOneof) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFooInt == rhs.hasFooInt) && (!lhs.hasFooInt || lhs.fooInt == rhs.fooInt)
  fieldCheck = fieldCheck && (lhs.hasFooString == rhs.hasFooString) && (!lhs.hasFooString || lhs.fooString == rhs.fooString)
  fieldCheck = fieldCheck && (lhs.hasFooMessage == rhs.hasFooMessage) && (!lhs.hasFooMessage || lhs.fooMessage == rhs.fooMessage)
  fieldCheck = fieldCheck && (lhs.hasFooGroup == rhs.hasFooGroup) && (!lhs.hasFooGroup || lhs.fooGroup == rhs.fooGroup)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestOneof.FooGroup, rhs: ProtobufUnittest.TestOneof.FooGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasB == rhs.hasB) && (!lhs.hasB || lhs.b == rhs.b)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestOneofBackwardsCompatible, rhs: ProtobufUnittest.TestOneofBackwardsCompatible) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFooInt == rhs.hasFooInt) && (!lhs.hasFooInt || lhs.fooInt == rhs.fooInt)
  fieldCheck = fieldCheck && (lhs.hasFooString == rhs.hasFooString) && (!lhs.hasFooString || lhs.fooString == rhs.fooString)
  fieldCheck = fieldCheck && (lhs.hasFooMessage == rhs.hasFooMessage) && (!lhs.hasFooMessage || lhs.fooMessage == rhs.fooMessage)
  fieldCheck = fieldCheck && (lhs.hasFooGroup == rhs.hasFooGroup) && (!lhs.hasFooGroup || lhs.fooGroup == rhs.fooGroup)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup, rhs: ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasB == rhs.hasB) && (!lhs.hasB || lhs.b == rhs.b)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestOneof2, rhs: ProtobufUnittest.TestOneof2) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFooInt == rhs.hasFooInt) && (!lhs.hasFooInt || lhs.fooInt == rhs.fooInt)
  fieldCheck = fieldCheck && (lhs.hasFooString == rhs.hasFooString) && (!lhs.hasFooString || lhs.fooString == rhs.fooString)
  fieldCheck = fieldCheck && (lhs.hasFooCord == rhs.hasFooCord) && (!lhs.hasFooCord || lhs.fooCord == rhs.fooCord)
  fieldCheck = fieldCheck && (lhs.hasFooStringPiece == rhs.hasFooStringPiece) && (!lhs.hasFooStringPiece || lhs.fooStringPiece == rhs.fooStringPiece)
  fieldCheck = fieldCheck && (lhs.hasFooBytes == rhs.hasFooBytes) && (!lhs.hasFooBytes || lhs.fooBytes == rhs.fooBytes)
  fieldCheck = fieldCheck && (lhs.hasFooEnum == rhs.hasFooEnum) && (!lhs.hasFooEnum || lhs.fooEnum == rhs.fooEnum)
  fieldCheck = fieldCheck && (lhs.hasFooMessage == rhs.hasFooMessage) && (!lhs.hasFooMessage || lhs.fooMessage == rhs.fooMessage)
  fieldCheck = fieldCheck && (lhs.hasFooGroup == rhs.hasFooGroup) && (!lhs.hasFooGroup || lhs.fooGroup == rhs.fooGroup)
  fieldCheck = fieldCheck && (lhs.hasFooLazyMessage == rhs.hasFooLazyMessage) && (!lhs.hasFooLazyMessage || lhs.fooLazyMessage == rhs.fooLazyMessage)
  fieldCheck = fieldCheck && (lhs.hasBarInt == rhs.hasBarInt) && (!lhs.hasBarInt || lhs.barInt == rhs.barInt)
  fieldCheck = fieldCheck && (lhs.hasBarString == rhs.hasBarString) && (!lhs.hasBarString || lhs.barString == rhs.barString)
  fieldCheck = fieldCheck && (lhs.hasBarCord == rhs.hasBarCord) && (!lhs.hasBarCord || lhs.barCord == rhs.barCord)
  fieldCheck = fieldCheck && (lhs.hasBarStringPiece == rhs.hasBarStringPiece) && (!lhs.hasBarStringPiece || lhs.barStringPiece == rhs.barStringPiece)
  fieldCheck = fieldCheck && (lhs.hasBarBytes == rhs.hasBarBytes) && (!lhs.hasBarBytes || lhs.barBytes == rhs.barBytes)
  fieldCheck = fieldCheck && (lhs.hasBarEnum == rhs.hasBarEnum) && (!lhs.hasBarEnum || lhs.barEnum == rhs.barEnum)
  fieldCheck = fieldCheck && (lhs.hasBazInt == rhs.hasBazInt) && (!lhs.hasBazInt || lhs.bazInt == rhs.bazInt)
  fieldCheck = fieldCheck && (lhs.hasBazString == rhs.hasBazString) && (!lhs.hasBazString || lhs.bazString == rhs.bazString)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestOneof2.FooGroup, rhs: ProtobufUnittest.TestOneof2.FooGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasB == rhs.hasB) && (!lhs.hasB || lhs.b == rhs.b)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestOneof2.NestedMessage, rhs: ProtobufUnittest.TestOneof2.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasQuxInt == rhs.hasQuxInt) && (!lhs.hasQuxInt || lhs.quxInt == rhs.quxInt)
  fieldCheck = fieldCheck && (lhs.corgeInt == rhs.corgeInt)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestRequiredOneof, rhs: ProtobufUnittest.TestRequiredOneof) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFooInt == rhs.hasFooInt) && (!lhs.hasFooInt || lhs.fooInt == rhs.fooInt)
  fieldCheck = fieldCheck && (lhs.hasFooString == rhs.hasFooString) && (!lhs.hasFooString || lhs.fooString == rhs.fooString)
  fieldCheck = fieldCheck && (lhs.hasFooMessage == rhs.hasFooMessage) && (!lhs.hasFooMessage || lhs.fooMessage == rhs.fooMessage)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestRequiredOneof.NestedMessage, rhs: ProtobufUnittest.TestRequiredOneof.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRequiredDouble == rhs.hasRequiredDouble) && (!lhs.hasRequiredDouble || lhs.requiredDouble == rhs.requiredDouble)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestPackedTypes, rhs: ProtobufUnittest.TestPackedTypes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.packedInt32 == rhs.packedInt32)
  fieldCheck = fieldCheck && (lhs.packedInt64 == rhs.packedInt64)
  fieldCheck = fieldCheck && (lhs.packedUint32 == rhs.packedUint32)
  fieldCheck = fieldCheck && (lhs.packedUint64 == rhs.packedUint64)
  fieldCheck = fieldCheck && (lhs.packedSint32 == rhs.packedSint32)
  fieldCheck = fieldCheck && (lhs.packedSint64 == rhs.packedSint64)
  fieldCheck = fieldCheck && (lhs.packedFixed32 == rhs.packedFixed32)
  fieldCheck = fieldCheck && (lhs.packedFixed64 == rhs.packedFixed64)
  fieldCheck = fieldCheck && (lhs.packedSfixed32 == rhs.packedSfixed32)
  fieldCheck = fieldCheck && (lhs.packedSfixed64 == rhs.packedSfixed64)
  fieldCheck = fieldCheck && (lhs.packedFloat == rhs.packedFloat)
  fieldCheck = fieldCheck && (lhs.packedDouble == rhs.packedDouble)
  fieldCheck = fieldCheck && (lhs.packedBool == rhs.packedBool)
  fieldCheck = fieldCheck && (lhs.packedEnum == rhs.packedEnum)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestUnpackedTypes, rhs: ProtobufUnittest.TestUnpackedTypes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.unpackedInt32 == rhs.unpackedInt32)
  fieldCheck = fieldCheck && (lhs.unpackedInt64 == rhs.unpackedInt64)
  fieldCheck = fieldCheck && (lhs.unpackedUint32 == rhs.unpackedUint32)
  fieldCheck = fieldCheck && (lhs.unpackedUint64 == rhs.unpackedUint64)
  fieldCheck = fieldCheck && (lhs.unpackedSint32 == rhs.unpackedSint32)
  fieldCheck = fieldCheck && (lhs.unpackedSint64 == rhs.unpackedSint64)
  fieldCheck = fieldCheck && (lhs.unpackedFixed32 == rhs.unpackedFixed32)
  fieldCheck = fieldCheck && (lhs.unpackedFixed64 == rhs.unpackedFixed64)
  fieldCheck = fieldCheck && (lhs.unpackedSfixed32 == rhs.unpackedSfixed32)
  fieldCheck = fieldCheck && (lhs.unpackedSfixed64 == rhs.unpackedSfixed64)
  fieldCheck = fieldCheck && (lhs.unpackedFloat == rhs.unpackedFloat)
  fieldCheck = fieldCheck && (lhs.unpackedDouble == rhs.unpackedDouble)
  fieldCheck = fieldCheck && (lhs.unpackedBool == rhs.unpackedBool)
  fieldCheck = fieldCheck && (lhs.unpackedEnum == rhs.unpackedEnum)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestPackedExtensions, rhs: ProtobufUnittest.TestPackedExtensions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestUnpackedExtensions, rhs: ProtobufUnittest.TestUnpackedExtensions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestDynamicExtensions, rhs: ProtobufUnittest.TestDynamicExtensions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasScalarExtension == rhs.hasScalarExtension) && (!lhs.hasScalarExtension || lhs.scalarExtension == rhs.scalarExtension)
  fieldCheck = fieldCheck && (lhs.hasEnumExtension == rhs.hasEnumExtension) && (!lhs.hasEnumExtension || lhs.enumExtension == rhs.enumExtension)
  fieldCheck = fieldCheck && (lhs.hasDynamicEnumExtension == rhs.hasDynamicEnumExtension) && (!lhs.hasDynamicEnumExtension || lhs.dynamicEnumExtension == rhs.dynamicEnumExtension)
  fieldCheck = fieldCheck && (lhs.hasMessageExtension == rhs.hasMessageExtension) && (!lhs.hasMessageExtension || lhs.messageExtension == rhs.messageExtension)
  fieldCheck = fieldCheck && (lhs.hasDynamicMessageExtension == rhs.hasDynamicMessageExtension) && (!lhs.hasDynamicMessageExtension || lhs.dynamicMessageExtension == rhs.dynamicMessageExtension)
  fieldCheck = fieldCheck && (lhs.repeatedExtension == rhs.repeatedExtension)
  fieldCheck = fieldCheck && (lhs.packedExtension == rhs.packedExtension)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestDynamicExtensions.DynamicMessageType, rhs: ProtobufUnittest.TestDynamicExtensions.DynamicMessageType) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDynamicField == rhs.hasDynamicField) && (!lhs.hasDynamicField || lhs.dynamicField == rhs.dynamicField)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestRepeatedScalarDifferentTagSizes, rhs: ProtobufUnittest.TestRepeatedScalarDifferentTagSizes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.repeatedFixed32 == rhs.repeatedFixed32)
  fieldCheck = fieldCheck && (lhs.repeatedInt32 == rhs.repeatedInt32)
  fieldCheck = fieldCheck && (lhs.repeatedFixed64 == rhs.repeatedFixed64)
  fieldCheck = fieldCheck && (lhs.repeatedInt64 == rhs.repeatedInt64)
  fieldCheck = fieldCheck && (lhs.repeatedFloat == rhs.repeatedFloat)
  fieldCheck = fieldCheck && (lhs.repeatedUint64 == rhs.repeatedUint64)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestParsingMerge, rhs: ProtobufUnittest.TestParsingMerge) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRequiredAllTypes == rhs.hasRequiredAllTypes) && (!lhs.hasRequiredAllTypes || lhs.requiredAllTypes == rhs.requiredAllTypes)
  fieldCheck = fieldCheck && (lhs.hasOptionalAllTypes == rhs.hasOptionalAllTypes) && (!lhs.hasOptionalAllTypes || lhs.optionalAllTypes == rhs.optionalAllTypes)
  fieldCheck = fieldCheck && (lhs.repeatedAllTypes == rhs.repeatedAllTypes)
  fieldCheck = fieldCheck && (lhs.hasOptionalGroup == rhs.hasOptionalGroup) && (!lhs.hasOptionalGroup || lhs.optionalGroup == rhs.optionalGroup)
  fieldCheck = fieldCheck && (lhs.repeatedGroup == rhs.repeatedGroup)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator, rhs: ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.field1 == rhs.field1)
  fieldCheck = fieldCheck && (lhs.field2 == rhs.field2)
  fieldCheck = fieldCheck && (lhs.field3 == rhs.field3)
  fieldCheck = fieldCheck && (lhs.group1 == rhs.group1)
  fieldCheck = fieldCheck && (lhs.group2 == rhs.group2)
  fieldCheck = fieldCheck && (lhs.ext1 == rhs.ext1)
  fieldCheck = fieldCheck && (lhs.ext2 == rhs.ext2)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1, rhs: ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasField1 == rhs.hasField1) && (!lhs.hasField1 || lhs.field1 == rhs.field1)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2, rhs: ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasField1 == rhs.hasField1) && (!lhs.hasField1 || lhs.field1 == rhs.field1)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestParsingMerge.OptionalGroup, rhs: ProtobufUnittest.TestParsingMerge.OptionalGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalGroupAllTypes == rhs.hasOptionalGroupAllTypes) && (!lhs.hasOptionalGroupAllTypes || lhs.optionalGroupAllTypes == rhs.optionalGroupAllTypes)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestParsingMerge.RepeatedGroup, rhs: ProtobufUnittest.TestParsingMerge.RepeatedGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRepeatedGroupAllTypes == rhs.hasRepeatedGroupAllTypes) && (!lhs.hasRepeatedGroupAllTypes || lhs.repeatedGroupAllTypes == rhs.repeatedGroupAllTypes)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestCommentInjectionMessage, rhs: ProtobufUnittest.TestCommentInjectionMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.FooRequest, rhs: ProtobufUnittest.FooRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.FooResponse, rhs: ProtobufUnittest.FooResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.FooClientMessage, rhs: ProtobufUnittest.FooClientMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.FooServerMessage, rhs: ProtobufUnittest.FooServerMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.BarRequest, rhs: ProtobufUnittest.BarRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.BarResponse, rhs: ProtobufUnittest.BarResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

// Singular
public var UnittestRootoptionalInt32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalInt32ExtensionStatic
   }
}
public var UnittestRootoptionalInt64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalInt64ExtensionStatic
   }
}
public var UnittestRootoptionalUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalUint32ExtensionStatic
   }
}
public var UnittestRootoptionalUint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalUint64ExtensionStatic
   }
}
public var UnittestRootoptionalSint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalSint32ExtensionStatic
   }
}
public var UnittestRootoptionalSint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalSint64ExtensionStatic
   }
}
public var UnittestRootoptionalFixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalFixed32ExtensionStatic
   }
}
public var UnittestRootoptionalFixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalFixed64ExtensionStatic
   }
}
public var UnittestRootoptionalSfixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalSfixed32ExtensionStatic
   }
}
public var UnittestRootoptionalSfixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalSfixed64ExtensionStatic
   }
}
public var UnittestRootoptionalFloatExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalFloatExtensionStatic
   }
}
public var UnittestRootoptionalDoubleExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalDoubleExtensionStatic
   }
}
public var UnittestRootoptionalBoolExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalBoolExtensionStatic
   }
}
public var UnittestRootoptionalStringExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalStringExtensionStatic
   }
}
public var UnittestRootoptionalBytesExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalBytesExtensionStatic
   }
}
public var UnittestRootoptionalGroupExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalGroupExtensionStatic
   }
}
public var UnittestRootoptionalNestedMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalNestedMessageExtensionStatic
   }
}
public var UnittestRootoptionalForeignMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalForeignMessageExtensionStatic
   }
}
public var UnittestRootoptionalImportMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalImportMessageExtensionStatic
   }
}
public var UnittestRootoptionalNestedEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalNestedEnumExtensionStatic
   }
}
public var UnittestRootoptionalForeignEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalForeignEnumExtensionStatic
   }
}
public var UnittestRootoptionalImportEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalImportEnumExtensionStatic
   }
}
public var UnittestRootoptionalStringPieceExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalStringPieceExtensionStatic
   }
}
public var UnittestRootoptionalCordExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalCordExtensionStatic
   }
}
public var UnittestRootoptionalPublicImportMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalPublicImportMessageExtensionStatic
   }
}
public var UnittestRootoptionalLazyMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalLazyMessageExtensionStatic
   }
}
// Repeated
public var UnittestRootrepeatedInt32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedInt32ExtensionStatic
   }
}
public var UnittestRootrepeatedInt64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedInt64ExtensionStatic
   }
}
public var UnittestRootrepeatedUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedUint32ExtensionStatic
   }
}
public var UnittestRootrepeatedUint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedUint64ExtensionStatic
   }
}
public var UnittestRootrepeatedSint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedSint32ExtensionStatic
   }
}
public var UnittestRootrepeatedSint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedSint64ExtensionStatic
   }
}
public var UnittestRootrepeatedFixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedFixed32ExtensionStatic
   }
}
public var UnittestRootrepeatedFixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedFixed64ExtensionStatic
   }
}
public var UnittestRootrepeatedSfixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedSfixed32ExtensionStatic
   }
}
public var UnittestRootrepeatedSfixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedSfixed64ExtensionStatic
   }
}
public var UnittestRootrepeatedFloatExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedFloatExtensionStatic
   }
}
public var UnittestRootrepeatedDoubleExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedDoubleExtensionStatic
   }
}
public var UnittestRootrepeatedBoolExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedBoolExtensionStatic
   }
}
public var UnittestRootrepeatedStringExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedStringExtensionStatic
   }
}
public var UnittestRootrepeatedBytesExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedBytesExtensionStatic
   }
}
public var UnittestRootrepeatedGroupExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedGroupExtensionStatic
   }
}
public var UnittestRootrepeatedNestedMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedNestedMessageExtensionStatic
   }
}
public var UnittestRootrepeatedForeignMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedForeignMessageExtensionStatic
   }
}
public var UnittestRootrepeatedImportMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedImportMessageExtensionStatic
   }
}
public var UnittestRootrepeatedNestedEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedNestedEnumExtensionStatic
   }
}
public var UnittestRootrepeatedForeignEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedForeignEnumExtensionStatic
   }
}
public var UnittestRootrepeatedImportEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedImportEnumExtensionStatic
   }
}
public var UnittestRootrepeatedStringPieceExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedStringPieceExtensionStatic
   }
}
public var UnittestRootrepeatedCordExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedCordExtensionStatic
   }
}
public var UnittestRootrepeatedLazyMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedLazyMessageExtensionStatic
   }
}
// Singular with defaults
public var UnittestRootdefaultInt32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultInt32ExtensionStatic
   }
}
public var UnittestRootdefaultInt64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultInt64ExtensionStatic
   }
}
public var UnittestRootdefaultUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultUint32ExtensionStatic
   }
}
public var UnittestRootdefaultUint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultUint64ExtensionStatic
   }
}
public var UnittestRootdefaultSint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultSint32ExtensionStatic
   }
}
public var UnittestRootdefaultSint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultSint64ExtensionStatic
   }
}
public var UnittestRootdefaultFixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultFixed32ExtensionStatic
   }
}
public var UnittestRootdefaultFixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultFixed64ExtensionStatic
   }
}
public var UnittestRootdefaultSfixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultSfixed32ExtensionStatic
   }
}
public var UnittestRootdefaultSfixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultSfixed64ExtensionStatic
   }
}
public var UnittestRootdefaultFloatExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultFloatExtensionStatic
   }
}
public var UnittestRootdefaultDoubleExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultDoubleExtensionStatic
   }
}
public var UnittestRootdefaultBoolExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultBoolExtensionStatic
   }
}
public var UnittestRootdefaultStringExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultStringExtensionStatic
   }
}
public var UnittestRootdefaultBytesExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultBytesExtensionStatic
   }
}
public var UnittestRootdefaultNestedEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultNestedEnumExtensionStatic
   }
}
public var UnittestRootdefaultForeignEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultForeignEnumExtensionStatic
   }
}
public var UnittestRootdefaultImportEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultImportEnumExtensionStatic
   }
}
public var UnittestRootdefaultStringPieceExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultStringPieceExtensionStatic
   }
}
public var UnittestRootdefaultCordExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultCordExtensionStatic
   }
}
// For oneof test
public var UnittestRootoneofUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoneofUint32ExtensionStatic
   }
}
public var UnittestRootoneofNestedMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoneofNestedMessageExtensionStatic
   }
}
public var UnittestRootoneofStringExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoneofStringExtensionStatic
   }
}
public var UnittestRootoneofBytesExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoneofBytesExtensionStatic
   }
}
public var UnittestRootmyExtensionString:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootmyExtensionStringStatic
   }
}
public var UnittestRootmyExtensionInt:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootmyExtensionIntStatic
   }
}
public var UnittestRootpackedInt32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedInt32ExtensionStatic
   }
}
public var UnittestRootpackedInt64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedInt64ExtensionStatic
   }
}
public var UnittestRootpackedUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedUint32ExtensionStatic
   }
}
public var UnittestRootpackedUint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedUint64ExtensionStatic
   }
}
public var UnittestRootpackedSint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedSint32ExtensionStatic
   }
}
public var UnittestRootpackedSint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedSint64ExtensionStatic
   }
}
public var UnittestRootpackedFixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedFixed32ExtensionStatic
   }
}
public var UnittestRootpackedFixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedFixed64ExtensionStatic
   }
}
public var UnittestRootpackedSfixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedSfixed32ExtensionStatic
   }
}
public var UnittestRootpackedSfixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedSfixed64ExtensionStatic
   }
}
public var UnittestRootpackedFloatExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedFloatExtensionStatic
   }
}
public var UnittestRootpackedDoubleExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedDoubleExtensionStatic
   }
}
public var UnittestRootpackedBoolExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedBoolExtensionStatic
   }
}
public var UnittestRootpackedEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedEnumExtensionStatic
   }
}
public var UnittestRootunpackedInt32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedInt32ExtensionStatic
   }
}
public var UnittestRootunpackedInt64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedInt64ExtensionStatic
   }
}
public var UnittestRootunpackedUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedUint32ExtensionStatic
   }
}
public var UnittestRootunpackedUint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedUint64ExtensionStatic
   }
}
public var UnittestRootunpackedSint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedSint32ExtensionStatic
   }
}
public var UnittestRootunpackedSint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedSint64ExtensionStatic
   }
}
public var UnittestRootunpackedFixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedFixed32ExtensionStatic
   }
}
public var UnittestRootunpackedFixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedFixed64ExtensionStatic
   }
}
public var UnittestRootunpackedSfixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedSfixed32ExtensionStatic
   }
}
public var UnittestRootunpackedSfixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedSfixed64ExtensionStatic
   }
}
public var UnittestRootunpackedFloatExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedFloatExtensionStatic
   }
}
public var UnittestRootunpackedDoubleExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedDoubleExtensionStatic
   }
}
public var UnittestRootunpackedBoolExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedBoolExtensionStatic
   }
}
public var UnittestRootunpackedEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedEnumExtensionStatic
   }
}
// Check for bug where string extensions declared in tested scope did not
// compile.
public var TestNestedExtensiontest:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestNestedExtensiontestStatic
   }
}
// Used to test if generated extension name is correct when there are
// underscores.
public var TestNestedExtensionnestedStringExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestNestedExtensionnestedStringExtensionStatic
   }
}
public var TestRequiredsingle:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestRequiredsingleStatic
   }
}
public var TestRequiredmulti:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestRequiredmultiStatic
   }
}
public var TestParsingMergeoptionalExt:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestParsingMergeoptionalExtStatic
   }
}
public var TestParsingMergerepeatedExt:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestParsingMergerepeatedExtStatic
   }
}
public extension ProtobufUnittest {
  public struct UnittestRoot {
    public static var sharedInstance : UnittestRoot {
     struct Static {
         static let instance : UnittestRoot = UnittestRoot()
     }
     return Static.instance
    }
    var UnittestRootoptionalInt32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalInt64ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalUint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalSint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalSint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalFixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalFixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalSfixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalSfixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalFloatExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalDoubleExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalBoolExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalStringExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalBytesExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalGroupExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalNestedMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalForeignMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalImportMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalNestedEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalForeignEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalImportEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalStringPieceExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalCordExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalPublicImportMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalLazyMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedInt32ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedInt64ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedUint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedSint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedSint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedFixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedFixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedSfixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedSfixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedFloatExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedDoubleExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedBoolExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedStringExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedBytesExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedGroupExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedNestedMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedForeignMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedImportMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedNestedEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedForeignEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedImportEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedStringPieceExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedCordExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedLazyMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultInt32ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultInt64ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultUint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultSint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultSint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultFixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultFixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultSfixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultSfixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultFloatExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultDoubleExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultBoolExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultStringExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultBytesExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultNestedEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultForeignEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultImportEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultStringPieceExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultCordExtensionStatic:ConcreateExtensionField
    var UnittestRootoneofUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoneofNestedMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootoneofStringExtensionStatic:ConcreateExtensionField
    var UnittestRootoneofBytesExtensionStatic:ConcreateExtensionField
    var UnittestRootmyExtensionStringStatic:ConcreateExtensionField
    var UnittestRootmyExtensionIntStatic:ConcreateExtensionField
    var UnittestRootpackedInt32ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedInt64ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedUint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedSint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedSint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedFixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedFixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedSfixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedSfixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedFloatExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedDoubleExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedBoolExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedInt32ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedInt64ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedUint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedSint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedSint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedFixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedFixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedSfixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedSfixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedFloatExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedDoubleExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedBoolExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedEnumExtensionStatic:ConcreateExtensionField
    var TestNestedExtensiontestStatic:ConcreateExtensionField
    var TestNestedExtensionnestedStringExtensionStatic:ConcreateExtensionField
    var TestRequiredsingleStatic:ConcreateExtensionField
    var TestRequiredmultiStatic:ConcreateExtensionField
    var TestParsingMergeoptionalExtStatic:ConcreateExtensionField
    var TestParsingMergerepeatedExtStatic:ConcreateExtensionField
    public var extensionRegistry:ExtensionRegistry

    init() {
      UnittestRootoptionalInt32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 1, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalInt64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 2, defaultValue:Int64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 3, defaultValue:UInt32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalUint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 4, defaultValue:UInt64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalSint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 5, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalSint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 6, defaultValue:Int64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalFixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 7, defaultValue:UInt32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalFixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 8, defaultValue:UInt64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalSfixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 9, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalSfixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 10, defaultValue:Int64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalFloatExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 11, defaultValue:Float(0), messageOrGroupClass:Float.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalDoubleExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 12, defaultValue:Double(0), messageOrGroupClass:Double.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalBoolExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 13, defaultValue:false, messageOrGroupClass:Bool.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalStringExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 14, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalBytesExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBytes, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 15, defaultValue:NSData(), messageOrGroupClass:NSData.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalGroupExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeGroup, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 16, defaultValue:ProtobufUnittest.OptionalGroupExtension(), messageOrGroupClass:ProtobufUnittest.OptionalGroupExtension.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalNestedMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 18, defaultValue:ProtobufUnittest.TestAllTypes.NestedMessage(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.NestedMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalForeignMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 19, defaultValue:ProtobufUnittest.ForeignMessage(), messageOrGroupClass:ProtobufUnittest.ForeignMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalImportMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 20, defaultValue:ProtobufUnittestImport.ImportMessage(), messageOrGroupClass:ProtobufUnittestImport.ImportMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalNestedEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 21, defaultValue:ProtobufUnittest.TestAllTypes.NestedEnum.Foo.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalForeignEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 22, defaultValue:ProtobufUnittest.ForeignEnum.ForeignFoo.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalImportEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 23, defaultValue:ProtobufUnittestImport.ImportEnum.ImportFoo.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalStringPieceExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 24, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalCordExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 25, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalPublicImportMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 26, defaultValue:ProtobufUnittestImport.PublicImportMessage(), messageOrGroupClass:ProtobufUnittestImport.PublicImportMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalLazyMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 27, defaultValue:ProtobufUnittest.TestAllTypes.NestedMessage(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.NestedMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedInt32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 31, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedInt64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 32, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 33, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedUint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 34, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedSint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 35, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedSint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 36, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedFixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 37, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedFixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 38, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedSfixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 39, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedSfixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 40, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedFloatExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 41, defaultValue:Array<Float>(), messageOrGroupClass:Float.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedDoubleExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 42, defaultValue:Array<Double>(), messageOrGroupClass:Double.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedBoolExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 43, defaultValue:Array<Bool>(), messageOrGroupClass:Bool.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedStringExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 44, defaultValue:Array<String>(), messageOrGroupClass:String.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedBytesExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBytes, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 45, defaultValue:Array<NSData>(), messageOrGroupClass:NSData.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedGroupExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeGroup, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 46, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.RepeatedGroupExtension.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedNestedMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 48, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.NestedMessage.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedForeignMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 49, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.ForeignMessage.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedImportMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 50, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittestImport.ImportMessage.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedNestedEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 51, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedForeignEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 52, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedImportEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 53, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedStringPieceExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 54, defaultValue:Array<String>(), messageOrGroupClass:String.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedCordExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 55, defaultValue:Array<String>(), messageOrGroupClass:String.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedLazyMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 57, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.NestedMessage.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultInt32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 61, defaultValue:Int32(41), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultInt64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 62, defaultValue:Int64(42), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 63, defaultValue:UInt32(43), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultUint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 64, defaultValue:UInt64(44), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultSint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 65, defaultValue:Int32(-45), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultSint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 66, defaultValue:Int64(46), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultFixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 67, defaultValue:UInt32(47), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultFixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 68, defaultValue:UInt64(48), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultSfixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 69, defaultValue:Int32(49), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultSfixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 70, defaultValue:Int64(-50), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultFloatExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 71, defaultValue:Float(51.5), messageOrGroupClass:Float.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultDoubleExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 72, defaultValue:Double(52000), messageOrGroupClass:Double.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultBoolExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 73, defaultValue:true, messageOrGroupClass:Bool.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultStringExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 74, defaultValue:"hello", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultBytesExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBytes, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 75, defaultValue:NSData(bytes:([UInt8]() + "world".utf8), length:5), messageOrGroupClass:NSData.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultNestedEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 81, defaultValue:ProtobufUnittest.TestAllTypes.NestedEnum.Bar.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultForeignEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 82, defaultValue:ProtobufUnittest.ForeignEnum.ForeignBar.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultImportEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 83, defaultValue:ProtobufUnittestImport.ImportEnum.ImportBar.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultStringPieceExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 84, defaultValue:"abc", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultCordExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 85, defaultValue:"123", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoneofUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 111, defaultValue:UInt32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoneofNestedMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 112, defaultValue:ProtobufUnittest.TestAllTypes.NestedMessage(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.NestedMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoneofStringExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 113, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoneofBytesExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBytes, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 114, defaultValue:NSData(), messageOrGroupClass:NSData.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootmyExtensionStringStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestFieldOrderings.self, fieldNumber: 50, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootmyExtensionIntStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestFieldOrderings.self, fieldNumber: 5, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootpackedInt32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 90, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedInt64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 91, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 92, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedUint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 93, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedSint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 94, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedSint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 95, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedFixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 96, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedFixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 97, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedSfixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 98, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedSfixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 99, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedFloatExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 100, defaultValue:Array<Float>(), messageOrGroupClass:Float.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedDoubleExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 101, defaultValue:Array<Double>(), messageOrGroupClass:Double.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedBoolExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 102, defaultValue:Array<Bool>(), messageOrGroupClass:Bool.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 103, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootunpackedInt32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 90, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedInt64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 91, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 92, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedUint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 93, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedSint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 94, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedSint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 95, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedFixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 96, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedFixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 97, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedSfixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 98, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedSfixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 99, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedFloatExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 100, defaultValue:Array<Float>(), messageOrGroupClass:Float.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedDoubleExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 101, defaultValue:Array<Double>(), messageOrGroupClass:Double.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedBoolExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 102, defaultValue:Array<Bool>(), messageOrGroupClass:Bool.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 103, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      TestNestedExtensiontestStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 1002, defaultValue:"test", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      TestNestedExtensionnestedStringExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 1003, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      TestRequiredsingleStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 1000, defaultValue:ProtobufUnittest.TestRequired(), messageOrGroupClass:ProtobufUnittest.TestRequired.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      TestRequiredmultiStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 1001, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.TestRequired.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      TestParsingMergeoptionalExtStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestParsingMerge.self, fieldNumber: 1000, defaultValue:ProtobufUnittest.TestAllTypes(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      TestParsingMergerepeatedExtStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestParsingMerge.self, fieldNumber: 1001, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      ProtobufUnittestImport.UnittestImportRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(_ registry:ExtensionRegistry) {
      registry.addExtension(UnittestRootoptionalInt32ExtensionStatic)
      registry.addExtension(UnittestRootoptionalInt64ExtensionStatic)
      registry.addExtension(UnittestRootoptionalUint32ExtensionStatic)
      registry.addExtension(UnittestRootoptionalUint64ExtensionStatic)
      registry.addExtension(UnittestRootoptionalSint32ExtensionStatic)
      registry.addExtension(UnittestRootoptionalSint64ExtensionStatic)
      registry.addExtension(UnittestRootoptionalFixed32ExtensionStatic)
      registry.addExtension(UnittestRootoptionalFixed64ExtensionStatic)
      registry.addExtension(UnittestRootoptionalSfixed32ExtensionStatic)
      registry.addExtension(UnittestRootoptionalSfixed64ExtensionStatic)
      registry.addExtension(UnittestRootoptionalFloatExtensionStatic)
      registry.addExtension(UnittestRootoptionalDoubleExtensionStatic)
      registry.addExtension(UnittestRootoptionalBoolExtensionStatic)
      registry.addExtension(UnittestRootoptionalStringExtensionStatic)
      registry.addExtension(UnittestRootoptionalBytesExtensionStatic)
      registry.addExtension(UnittestRootoptionalGroupExtensionStatic)
      registry.addExtension(UnittestRootoptionalNestedMessageExtensionStatic)
      registry.addExtension(UnittestRootoptionalForeignMessageExtensionStatic)
      registry.addExtension(UnittestRootoptionalImportMessageExtensionStatic)
      registry.addExtension(UnittestRootoptionalNestedEnumExtensionStatic)
      registry.addExtension(UnittestRootoptionalForeignEnumExtensionStatic)
      registry.addExtension(UnittestRootoptionalImportEnumExtensionStatic)
      registry.addExtension(UnittestRootoptionalStringPieceExtensionStatic)
      registry.addExtension(UnittestRootoptionalCordExtensionStatic)
      registry.addExtension(UnittestRootoptionalPublicImportMessageExtensionStatic)
      registry.addExtension(UnittestRootoptionalLazyMessageExtensionStatic)
      registry.addExtension(UnittestRootrepeatedInt32ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedInt64ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedUint32ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedUint64ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedSint32ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedSint64ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedFixed32ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedFixed64ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedSfixed32ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedSfixed64ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedFloatExtensionStatic)
      registry.addExtension(UnittestRootrepeatedDoubleExtensionStatic)
      registry.addExtension(UnittestRootrepeatedBoolExtensionStatic)
      registry.addExtension(UnittestRootrepeatedStringExtensionStatic)
      registry.addExtension(UnittestRootrepeatedBytesExtensionStatic)
      registry.addExtension(UnittestRootrepeatedGroupExtensionStatic)
      registry.addExtension(UnittestRootrepeatedNestedMessageExtensionStatic)
      registry.addExtension(UnittestRootrepeatedForeignMessageExtensionStatic)
      registry.addExtension(UnittestRootrepeatedImportMessageExtensionStatic)
      registry.addExtension(UnittestRootrepeatedNestedEnumExtensionStatic)
      registry.addExtension(UnittestRootrepeatedForeignEnumExtensionStatic)
      registry.addExtension(UnittestRootrepeatedImportEnumExtensionStatic)
      registry.addExtension(UnittestRootrepeatedStringPieceExtensionStatic)
      registry.addExtension(UnittestRootrepeatedCordExtensionStatic)
      registry.addExtension(UnittestRootrepeatedLazyMessageExtensionStatic)
      registry.addExtension(UnittestRootdefaultInt32ExtensionStatic)
      registry.addExtension(UnittestRootdefaultInt64ExtensionStatic)
      registry.addExtension(UnittestRootdefaultUint32ExtensionStatic)
      registry.addExtension(UnittestRootdefaultUint64ExtensionStatic)
      registry.addExtension(UnittestRootdefaultSint32ExtensionStatic)
      registry.addExtension(UnittestRootdefaultSint64ExtensionStatic)
      registry.addExtension(UnittestRootdefaultFixed32ExtensionStatic)
      registry.addExtension(UnittestRootdefaultFixed64ExtensionStatic)
      registry.addExtension(UnittestRootdefaultSfixed32ExtensionStatic)
      registry.addExtension(UnittestRootdefaultSfixed64ExtensionStatic)
      registry.addExtension(UnittestRootdefaultFloatExtensionStatic)
      registry.addExtension(UnittestRootdefaultDoubleExtensionStatic)
      registry.addExtension(UnittestRootdefaultBoolExtensionStatic)
      registry.addExtension(UnittestRootdefaultStringExtensionStatic)
      registry.addExtension(UnittestRootdefaultBytesExtensionStatic)
      registry.addExtension(UnittestRootdefaultNestedEnumExtensionStatic)
      registry.addExtension(UnittestRootdefaultForeignEnumExtensionStatic)
      registry.addExtension(UnittestRootdefaultImportEnumExtensionStatic)
      registry.addExtension(UnittestRootdefaultStringPieceExtensionStatic)
      registry.addExtension(UnittestRootdefaultCordExtensionStatic)
      registry.addExtension(UnittestRootoneofUint32ExtensionStatic)
      registry.addExtension(UnittestRootoneofNestedMessageExtensionStatic)
      registry.addExtension(UnittestRootoneofStringExtensionStatic)
      registry.addExtension(UnittestRootoneofBytesExtensionStatic)
      registry.addExtension(UnittestRootmyExtensionStringStatic)
      registry.addExtension(UnittestRootmyExtensionIntStatic)
      registry.addExtension(UnittestRootpackedInt32ExtensionStatic)
      registry.addExtension(UnittestRootpackedInt64ExtensionStatic)
      registry.addExtension(UnittestRootpackedUint32ExtensionStatic)
      registry.addExtension(UnittestRootpackedUint64ExtensionStatic)
      registry.addExtension(UnittestRootpackedSint32ExtensionStatic)
      registry.addExtension(UnittestRootpackedSint64ExtensionStatic)
      registry.addExtension(UnittestRootpackedFixed32ExtensionStatic)
      registry.addExtension(UnittestRootpackedFixed64ExtensionStatic)
      registry.addExtension(UnittestRootpackedSfixed32ExtensionStatic)
      registry.addExtension(UnittestRootpackedSfixed64ExtensionStatic)
      registry.addExtension(UnittestRootpackedFloatExtensionStatic)
      registry.addExtension(UnittestRootpackedDoubleExtensionStatic)
      registry.addExtension(UnittestRootpackedBoolExtensionStatic)
      registry.addExtension(UnittestRootpackedEnumExtensionStatic)
      registry.addExtension(UnittestRootunpackedInt32ExtensionStatic)
      registry.addExtension(UnittestRootunpackedInt64ExtensionStatic)
      registry.addExtension(UnittestRootunpackedUint32ExtensionStatic)
      registry.addExtension(UnittestRootunpackedUint64ExtensionStatic)
      registry.addExtension(UnittestRootunpackedSint32ExtensionStatic)
      registry.addExtension(UnittestRootunpackedSint64ExtensionStatic)
      registry.addExtension(UnittestRootunpackedFixed32ExtensionStatic)
      registry.addExtension(UnittestRootunpackedFixed64ExtensionStatic)
      registry.addExtension(UnittestRootunpackedSfixed32ExtensionStatic)
      registry.addExtension(UnittestRootunpackedSfixed64ExtensionStatic)
      registry.addExtension(UnittestRootunpackedFloatExtensionStatic)
      registry.addExtension(UnittestRootunpackedDoubleExtensionStatic)
      registry.addExtension(UnittestRootunpackedBoolExtensionStatic)
      registry.addExtension(UnittestRootunpackedEnumExtensionStatic)
      registry.addExtension(TestNestedExtensiontestStatic)
      registry.addExtension(TestNestedExtensionnestedStringExtensionStatic)
      registry.addExtension(TestRequiredsingleStatic)
      registry.addExtension(TestRequiredmultiStatic)
      registry.addExtension(TestParsingMergeoptionalExtStatic)
      registry.addExtension(TestParsingMergerepeatedExtStatic)
    }
    public static func optionalInt32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalInt32ExtensionStatic
    }
    public static func optionalInt64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalInt64ExtensionStatic
    }
    public static func optionalUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalUint32ExtensionStatic
    }
    public static func optionalUint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalUint64ExtensionStatic
    }
    public static func optionalSint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalSint32ExtensionStatic
    }
    public static func optionalSint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalSint64ExtensionStatic
    }
    public static func optionalFixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalFixed32ExtensionStatic
    }
    public static func optionalFixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalFixed64ExtensionStatic
    }
    public static func optionalSfixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalSfixed32ExtensionStatic
    }
    public static func optionalSfixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalSfixed64ExtensionStatic
    }
    public static func optionalFloatExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalFloatExtensionStatic
    }
    public static func optionalDoubleExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalDoubleExtensionStatic
    }
    public static func optionalBoolExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalBoolExtensionStatic
    }
    public static func optionalStringExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalStringExtensionStatic
    }
    public static func optionalBytesExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalBytesExtensionStatic
    }
    public static func optionalGroupExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalGroupExtensionStatic
    }
    public static func optionalNestedMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalNestedMessageExtensionStatic
    }
    public static func optionalForeignMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalForeignMessageExtensionStatic
    }
    public static func optionalImportMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalImportMessageExtensionStatic
    }
    public static func optionalNestedEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalNestedEnumExtensionStatic
    }
    public static func optionalForeignEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalForeignEnumExtensionStatic
    }
    public static func optionalImportEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalImportEnumExtensionStatic
    }
    public static func optionalStringPieceExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalStringPieceExtensionStatic
    }
    public static func optionalCordExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalCordExtensionStatic
    }
    public static func optionalPublicImportMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalPublicImportMessageExtensionStatic
    }
    public static func optionalLazyMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalLazyMessageExtensionStatic
    }
    public static func repeatedInt32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedInt32ExtensionStatic
    }
    public static func repeatedInt64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedInt64ExtensionStatic
    }
    public static func repeatedUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedUint32ExtensionStatic
    }
    public static func repeatedUint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedUint64ExtensionStatic
    }
    public static func repeatedSint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedSint32ExtensionStatic
    }
    public static func repeatedSint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedSint64ExtensionStatic
    }
    public static func repeatedFixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedFixed32ExtensionStatic
    }
    public static func repeatedFixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedFixed64ExtensionStatic
    }
    public static func repeatedSfixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedSfixed32ExtensionStatic
    }
    public static func repeatedSfixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedSfixed64ExtensionStatic
    }
    public static func repeatedFloatExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedFloatExtensionStatic
    }
    public static func repeatedDoubleExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedDoubleExtensionStatic
    }
    public static func repeatedBoolExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedBoolExtensionStatic
    }
    public static func repeatedStringExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedStringExtensionStatic
    }
    public static func repeatedBytesExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedBytesExtensionStatic
    }
    public static func repeatedGroupExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedGroupExtensionStatic
    }
    public static func repeatedNestedMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedNestedMessageExtensionStatic
    }
    public static func repeatedForeignMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedForeignMessageExtensionStatic
    }
    public static func repeatedImportMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedImportMessageExtensionStatic
    }
    public static func repeatedNestedEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedNestedEnumExtensionStatic
    }
    public static func repeatedForeignEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedForeignEnumExtensionStatic
    }
    public static func repeatedImportEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedImportEnumExtensionStatic
    }
    public static func repeatedStringPieceExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedStringPieceExtensionStatic
    }
    public static func repeatedCordExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedCordExtensionStatic
    }
    public static func repeatedLazyMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedLazyMessageExtensionStatic
    }
    public static func defaultInt32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultInt32ExtensionStatic
    }
    public static func defaultInt64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultInt64ExtensionStatic
    }
    public static func defaultUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultUint32ExtensionStatic
    }
    public static func defaultUint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultUint64ExtensionStatic
    }
    public static func defaultSint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultSint32ExtensionStatic
    }
    public static func defaultSint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultSint64ExtensionStatic
    }
    public static func defaultFixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultFixed32ExtensionStatic
    }
    public static func defaultFixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultFixed64ExtensionStatic
    }
    public static func defaultSfixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultSfixed32ExtensionStatic
    }
    public static func defaultSfixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultSfixed64ExtensionStatic
    }
    public static func defaultFloatExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultFloatExtensionStatic
    }
    public static func defaultDoubleExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultDoubleExtensionStatic
    }
    public static func defaultBoolExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultBoolExtensionStatic
    }
    public static func defaultStringExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultStringExtensionStatic
    }
    public static func defaultBytesExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultBytesExtensionStatic
    }
    public static func defaultNestedEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultNestedEnumExtensionStatic
    }
    public static func defaultForeignEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultForeignEnumExtensionStatic
    }
    public static func defaultImportEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultImportEnumExtensionStatic
    }
    public static func defaultStringPieceExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultStringPieceExtensionStatic
    }
    public static func defaultCordExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultCordExtensionStatic
    }
    public static func oneofUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoneofUint32ExtensionStatic
    }
    public static func oneofNestedMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoneofNestedMessageExtensionStatic
    }
    public static func oneofStringExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoneofStringExtensionStatic
    }
    public static func oneofBytesExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoneofBytesExtensionStatic
    }
    public static func myExtensionString() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootmyExtensionStringStatic
    }
    public static func myExtensionInt() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootmyExtensionIntStatic
    }
    public static func packedInt32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedInt32ExtensionStatic
    }
    public static func packedInt64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedInt64ExtensionStatic
    }
    public static func packedUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedUint32ExtensionStatic
    }
    public static func packedUint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedUint64ExtensionStatic
    }
    public static func packedSint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedSint32ExtensionStatic
    }
    public static func packedSint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedSint64ExtensionStatic
    }
    public static func packedFixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedFixed32ExtensionStatic
    }
    public static func packedFixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedFixed64ExtensionStatic
    }
    public static func packedSfixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedSfixed32ExtensionStatic
    }
    public static func packedSfixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedSfixed64ExtensionStatic
    }
    public static func packedFloatExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedFloatExtensionStatic
    }
    public static func packedDoubleExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedDoubleExtensionStatic
    }
    public static func packedBoolExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedBoolExtensionStatic
    }
    public static func packedEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedEnumExtensionStatic
    }
    public static func unpackedInt32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedInt32ExtensionStatic
    }
    public static func unpackedInt64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedInt64ExtensionStatic
    }
    public static func unpackedUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedUint32ExtensionStatic
    }
    public static func unpackedUint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedUint64ExtensionStatic
    }
    public static func unpackedSint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedSint32ExtensionStatic
    }
    public static func unpackedSint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedSint64ExtensionStatic
    }
    public static func unpackedFixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedFixed32ExtensionStatic
    }
    public static func unpackedFixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedFixed64ExtensionStatic
    }
    public static func unpackedSfixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedSfixed32ExtensionStatic
    }
    public static func unpackedSfixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedSfixed64ExtensionStatic
    }
    public static func unpackedFloatExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedFloatExtensionStatic
    }
    public static func unpackedDoubleExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedDoubleExtensionStatic
    }
    public static func unpackedBoolExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedBoolExtensionStatic
    }
    public static func unpackedEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedEnumExtensionStatic
    }
  }



  //Enum type declaration start 

  public enum ForeignEnum:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case ForeignFoo = 4
    case ForeignBar = 5
    case ForeignBaz = 6

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .ForeignFoo: return ".ForeignFoo"
            case .ForeignBar: return ".ForeignBar"
            case .ForeignBaz: return ".ForeignBaz"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  // Test an enum that has multiple values with the same number.
  public enum TestEnumWithDupValue:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case Foo1 = 1
    case Bar1 = 2
    case Baz = 3

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .Foo1: return ".Foo1"
            case .Bar1: return ".Bar1"
            case .Baz: return ".Baz"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  // Test an enum with large, unordered values.
  public enum TestSparseEnum:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case SparseA = 123
    case SparseB = 62374
    case SparseC = 12589234
    case SparseD = -15
    case SparseE = -53452
    case SparseF = 0
    case SparseG = 2

    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .SparseA: return ".SparseA"
            case .SparseB: return ".SparseB"
            case .SparseC: return ".SparseC"
            case .SparseD: return ".SparseD"
            case .SparseE: return ".SparseE"
            case .SparseF: return ".SparseF"
            case .SparseG: return ".SparseG"
        }
    }
  }

  //Enum type declaration end 

  // This proto includes every type of field in both singular and repeated
  // forms.
  final public class TestAllTypes : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
        // The field name "b" fails to compile in proto1 because it conflicts with
        // a local variable named "b" in one of the generated methods.  Doh.
        // This file needs to compile in proto1 to test backwards-compatibility.
        public private(set) var bb:Int32 = Int32(0)

        public private(set) var hasBb:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasBb {
            try output.writeInt32(1, value:bb)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasBb {
            serialize_size += bb.computeInt32Size(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestAllTypes.NestedMessage> {
          var mergedArray = Array<ProtobufUnittest.TestAllTypes.NestedMessage>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestAllTypes.NestedMessage? {
          return try ProtobufUnittest.TestAllTypes.NestedMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return try ProtobufUnittest.TestAllTypes.NestedMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return try ProtobufUnittest.TestAllTypes.NestedMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return try ProtobufUnittest.TestAllTypes.NestedMessage.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return try ProtobufUnittest.TestAllTypes.NestedMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return try ProtobufUnittest.TestAllTypes.NestedMessage.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return try ProtobufUnittest.TestAllTypes.NestedMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
          return ProtobufUnittest.TestAllTypes.NestedMessage.classBuilder() as! ProtobufUnittest.TestAllTypes.NestedMessage.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
          return classBuilder() as! ProtobufUnittest.TestAllTypes.NestedMessage.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
          return try ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestAllTypes.NestedMessage) throws -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
          return try ProtobufUnittest.TestAllTypes.NestedMessage.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasBb {
            output += "\(indent) bb: \(bb) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasBb {
                   hashCode = (hashCode &* 31) &+ bb.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestAllTypes.NestedMessage"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestAllTypes.NestedMessage"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestAllTypes.NestedMessage.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestAllTypes.NestedMessage = ProtobufUnittest.TestAllTypes.NestedMessage()
          public func getMessage() -> ProtobufUnittest.TestAllTypes.NestedMessage {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasBb:Bool {
               get {
                    return builderResult.hasBb
               }
          }
          public var bb:Int32 {
               get {
                    return builderResult.bb
               }
               set (value) {
                   builderResult.hasBb = true
                   builderResult.bb = value
               }
          }
          public func setBb(_ value:Int32) -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
            self.bb = value
            return self
          }
          public func clearBb() -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder{
               builderResult.hasBb = false
               builderResult.bb = Int32(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
            builderResult = ProtobufUnittest.TestAllTypes.NestedMessage()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
            return try ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestAllTypes.NestedMessage {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestAllTypes.NestedMessage {
            let returnMe:ProtobufUnittest.TestAllTypes.NestedMessage = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestAllTypes.NestedMessage) throws -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
            if other == ProtobufUnittest.TestAllTypes.NestedMessage() {
             return self
            }
            if other.hasBb {
                 bb = other.bb
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8 :
                bb = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class OptionalGroup : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var a:Int32 = Int32(0)

        public private(set) var hasA:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasA {
            try output.writeInt32(17, value:a)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(17)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestAllTypes.OptionalGroup> {
          var mergedArray = Array<ProtobufUnittest.TestAllTypes.OptionalGroup>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup? {
          return try ProtobufUnittest.TestAllTypes.OptionalGroup.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return try ProtobufUnittest.TestAllTypes.OptionalGroup.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return try ProtobufUnittest.TestAllTypes.OptionalGroup.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return try ProtobufUnittest.TestAllTypes.OptionalGroup.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return try ProtobufUnittest.TestAllTypes.OptionalGroup.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return try ProtobufUnittest.TestAllTypes.OptionalGroup.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return try ProtobufUnittest.TestAllTypes.OptionalGroup.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.classBuilder() as! ProtobufUnittest.TestAllTypes.OptionalGroup.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
          return classBuilder() as! ProtobufUnittest.TestAllTypes.OptionalGroup.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
          return try ProtobufUnittest.TestAllTypes.OptionalGroup.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestAllTypes.OptionalGroup) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
          return try ProtobufUnittest.TestAllTypes.OptionalGroup.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestAllTypes.OptionalGroup"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestAllTypes.OptionalGroup"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestAllTypes.OptionalGroup.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestAllTypes.OptionalGroup = ProtobufUnittest.TestAllTypes.OptionalGroup()
          public func getMessage() -> ProtobufUnittest.TestAllTypes.OptionalGroup {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasA:Bool {
               get {
                    return builderResult.hasA
               }
          }
          public var a:Int32 {
               get {
                    return builderResult.a
               }
               set (value) {
                   builderResult.hasA = true
                   builderResult.a = value
               }
          }
          public func setA(_ value:Int32) -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
            self.a = value
            return self
          }
          public func clearA() -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder{
               builderResult.hasA = false
               builderResult.a = Int32(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
            builderResult = ProtobufUnittest.TestAllTypes.OptionalGroup()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
            return try ProtobufUnittest.TestAllTypes.OptionalGroup.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestAllTypes.OptionalGroup {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestAllTypes.OptionalGroup {
            let returnMe:ProtobufUnittest.TestAllTypes.OptionalGroup = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestAllTypes.OptionalGroup) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
            if other == ProtobufUnittest.TestAllTypes.OptionalGroup() {
             return self
            }
            if other.hasA {
                 a = other.a
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 136 :
                a = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class RepeatedGroup : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var a:Int32 = Int32(0)

        public private(set) var hasA:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasA {
            try output.writeInt32(47, value:a)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(47)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestAllTypes.RepeatedGroup> {
          var mergedArray = Array<ProtobufUnittest.TestAllTypes.RepeatedGroup>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup? {
          return try ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return try ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return try ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return try ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return try ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return try ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return try ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.classBuilder() as! ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder {
          return classBuilder() as! ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder {
          return try ProtobufUnittest.TestAllTypes.RepeatedGroup.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestAllTypes.RepeatedGroup) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder {
          return try ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestAllTypes.RepeatedGroup"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestAllTypes.RepeatedGroup"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestAllTypes.RepeatedGroup.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestAllTypes.RepeatedGroup = ProtobufUnittest.TestAllTypes.RepeatedGroup()
          public func getMessage() -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasA:Bool {
               get {
                    return builderResult.hasA
               }
          }
          public var a:Int32 {
               get {
                    return builderResult.a
               }
               set (value) {
                   builderResult.hasA = true
                   builderResult.a = value
               }
          }
          public func setA(_ value:Int32) -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder {
            self.a = value
            return self
          }
          public func clearA() -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder{
               builderResult.hasA = false
               builderResult.a = Int32(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder {
            builderResult = ProtobufUnittest.TestAllTypes.RepeatedGroup()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder {
            return try ProtobufUnittest.TestAllTypes.RepeatedGroup.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
            let returnMe:ProtobufUnittest.TestAllTypes.RepeatedGroup = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestAllTypes.RepeatedGroup) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder {
            if other == ProtobufUnittest.TestAllTypes.RepeatedGroup() {
             return self
            }
            if other.hasA {
                 a = other.a
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 376 :
                a = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //OneOf declaration start

    // For oneof test
    public enum OneofField {
      case OneofFieldOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .OneofFieldOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case OneofUint32(UInt32)

      public static func getOneofUint32(_ value:OneofField) -> UInt32? {
           switch value {
           case .OneofUint32(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofNestedMessage(ProtobufUnittest.TestAllTypes.NestedMessage)

      public static func getOneofNestedMessage(_ value:OneofField) -> ProtobufUnittest.TestAllTypes.NestedMessage? {
           switch value {
           case .OneofNestedMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofString(String)

      public static func getOneofString(_ value:OneofField) -> String? {
           switch value {
           case .OneofString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofBytes(NSData)

      public static func getOneofBytes(_ value:OneofField) -> NSData? {
           switch value {
           case .OneofBytes(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageOneofField:TestAllTypes.OneofField =  TestAllTypes.OneofField.OneofFieldOneOfNotSet


      //Enum type declaration start 

      public enum NestedEnum:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case Foo = 1
        case Bar = 2
        case Baz = 3

        // Intentionally negative.
        case Neg = -1

        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .Foo: return ".Foo"
                case .Bar: return ".Bar"
                case .Baz: return ".Baz"
                case .Neg: return ".Neg"
            }
        }
      }

      //Enum type declaration end 

    // Singular
    public private(set) var optionalInt32:Int32 = Int32(0)

    public private(set) var hasOptionalInt32:Bool = false
    public private(set) var optionalInt64:Int64 = Int64(0)

    public private(set) var hasOptionalInt64:Bool = false
    public private(set) var optionalUint32:UInt32 = UInt32(0)

    public private(set) var hasOptionalUint32:Bool = false
    public private(set) var optionalUint64:UInt64 = UInt64(0)

    public private(set) var hasOptionalUint64:Bool = false
    public private(set) var optionalSint32:Int32 = Int32(0)

    public private(set) var hasOptionalSint32:Bool = false
    public private(set) var optionalSint64:Int64 = Int64(0)

    public private(set) var hasOptionalSint64:Bool = false
    public private(set) var optionalFixed32:UInt32 = UInt32(0)

    public private(set) var hasOptionalFixed32:Bool = false
    public private(set) var optionalFixed64:UInt64 = UInt64(0)

    public private(set) var hasOptionalFixed64:Bool = false
    public private(set) var optionalSfixed32:Int32 = Int32(0)

    public private(set) var hasOptionalSfixed32:Bool = false
    public private(set) var optionalSfixed64:Int64 = Int64(0)

    public private(set) var hasOptionalSfixed64:Bool = false
    public private(set) var optionalFloat:Float = Float(0)

    public private(set) var hasOptionalFloat:Bool = false
    public private(set) var optionalDouble:Double = Double(0)

    public private(set) var hasOptionalDouble:Bool = false
    public private(set) var optionalBool:Bool = false

    public private(set) var hasOptionalBool:Bool = false
    public private(set) var optionalString:String = ""

    public private(set) var hasOptionalString:Bool = false
    public private(set) var optionalBytes:NSData = NSData()

    public private(set) var hasOptionalBytes:Bool = false
    public private(set) var optionalGroup:ProtobufUnittest.TestAllTypes.OptionalGroup!
    public private(set) var hasOptionalGroup:Bool = false
    public private(set) var optionalNestedMessage:ProtobufUnittest.TestAllTypes.NestedMessage!
    public private(set) var hasOptionalNestedMessage:Bool = false
    public private(set) var optionalForeignMessage:ProtobufUnittest.ForeignMessage!
    public private(set) var hasOptionalForeignMessage:Bool = false
    public private(set) var optionalImportMessage:ProtobufUnittestImport.ImportMessage!
    public private(set) var hasOptionalImportMessage:Bool = false
    public private(set) var optionalNestedEnum:ProtobufUnittest.TestAllTypes.NestedEnum = ProtobufUnittest.TestAllTypes.NestedEnum.Foo
    public private(set) var hasOptionalNestedEnum:Bool = false
    public private(set) var optionalForeignEnum:ProtobufUnittest.ForeignEnum = ProtobufUnittest.ForeignEnum.ForeignFoo
    public private(set) var hasOptionalForeignEnum:Bool = false
    public private(set) var optionalImportEnum:ProtobufUnittestImport.ImportEnum = ProtobufUnittestImport.ImportEnum.ImportFoo
    public private(set) var hasOptionalImportEnum:Bool = false
    public private(set) var optionalStringPiece:String = ""

    public private(set) var hasOptionalStringPiece:Bool = false
    public private(set) var optionalCord:String = ""

    public private(set) var hasOptionalCord:Bool = false
    public private(set) var optionalPublicImportMessage:ProtobufUnittestImport.PublicImportMessage!
    public private(set) var hasOptionalPublicImportMessage:Bool = false
    public private(set) var optionalLazyMessage:ProtobufUnittest.TestAllTypes.NestedMessage!
    public private(set) var hasOptionalLazyMessage:Bool = false
    // Repeated
    public private(set) var repeatedInt32:Array<Int32> = Array<Int32>()
    public private(set) var repeatedInt64:Array<Int64> = Array<Int64>()
    public private(set) var repeatedUint32:Array<UInt32> = Array<UInt32>()
    public private(set) var repeatedUint64:Array<UInt64> = Array<UInt64>()
    public private(set) var repeatedSint32:Array<Int32> = Array<Int32>()
    public private(set) var repeatedSint64:Array<Int64> = Array<Int64>()
    public private(set) var repeatedFixed32:Array<UInt32> = Array<UInt32>()
    public private(set) var repeatedFixed64:Array<UInt64> = Array<UInt64>()
    public private(set) var repeatedSfixed32:Array<Int32> = Array<Int32>()
    public private(set) var repeatedSfixed64:Array<Int64> = Array<Int64>()
    public private(set) var repeatedFloat:Array<Float> = Array<Float>()
    public private(set) var repeatedDouble:Array<Double> = Array<Double>()
    public private(set) var repeatedBool:Array<Bool> = Array<Bool>()
    public private(set) var repeatedString:Array<String> = Array<String>()
    public private(set) var repeatedBytes:Array<NSData> = Array<NSData>()
    public private(set) var repeatedGroup:Array<ProtobufUnittest.TestAllTypes.RepeatedGroup>  = Array<ProtobufUnittest.TestAllTypes.RepeatedGroup>()
    public private(set) var repeatedNestedMessage:Array<ProtobufUnittest.TestAllTypes.NestedMessage>  = Array<ProtobufUnittest.TestAllTypes.NestedMessage>()
    public private(set) var repeatedForeignMessage:Array<ProtobufUnittest.ForeignMessage>  = Array<ProtobufUnittest.ForeignMessage>()
    public private(set) var repeatedImportMessage:Array<ProtobufUnittestImport.ImportMessage>  = Array<ProtobufUnittestImport.ImportMessage>()
    private var repeatedNestedEnumMemoizedSerializedSize:Int32 = 0
    public private(set) var repeatedNestedEnum:Array<ProtobufUnittest.TestAllTypes.NestedEnum> = Array<ProtobufUnittest.TestAllTypes.NestedEnum>()
    private var repeatedForeignEnumMemoizedSerializedSize:Int32 = 0
    public private(set) var repeatedForeignEnum:Array<ProtobufUnittest.ForeignEnum> = Array<ProtobufUnittest.ForeignEnum>()
    private var repeatedImportEnumMemoizedSerializedSize:Int32 = 0
    public private(set) var repeatedImportEnum:Array<ProtobufUnittestImport.ImportEnum> = Array<ProtobufUnittestImport.ImportEnum>()
    public private(set) var repeatedStringPiece:Array<String> = Array<String>()
    public private(set) var repeatedCord:Array<String> = Array<String>()
    public private(set) var repeatedLazyMessage:Array<ProtobufUnittest.TestAllTypes.NestedMessage>  = Array<ProtobufUnittest.TestAllTypes.NestedMessage>()
    // Singular with defaults
    public private(set) var defaultInt32:Int32 = Int32(41)

    public private(set) var hasDefaultInt32:Bool = false
    public private(set) var defaultInt64:Int64 = Int64(42)

    public private(set) var hasDefaultInt64:Bool = false
    public private(set) var defaultUint32:UInt32 = UInt32(43)

    public private(set) var hasDefaultUint32:Bool = false
    public private(set) var defaultUint64:UInt64 = UInt64(44)

    public private(set) var hasDefaultUint64:Bool = false
    public private(set) var defaultSint32:Int32 = Int32(-45)

    public private(set) var hasDefaultSint32:Bool = false
    public private(set) var defaultSint64:Int64 = Int64(46)

    public private(set) var hasDefaultSint64:Bool = false
    public private(set) var defaultFixed32:UInt32 = UInt32(47)

    public private(set) var hasDefaultFixed32:Bool = false
    public private(set) var defaultFixed64:UInt64 = UInt64(48)

    public private(set) var hasDefaultFixed64:Bool = false
    public private(set) var defaultSfixed32:Int32 = Int32(49)

    public private(set) var hasDefaultSfixed32:Bool = false
    public private(set) var defaultSfixed64:Int64 = Int64(-50)

    public private(set) var hasDefaultSfixed64:Bool = false
    public private(set) var defaultFloat:Float = Float(51.5)

    public private(set) var hasDefaultFloat:Bool = false
    public private(set) var defaultDouble:Double = Double(52000)

    public private(set) var hasDefaultDouble:Bool = false
    public private(set) var defaultBool:Bool = true

    public private(set) var hasDefaultBool:Bool = false
    public private(set) var defaultString:String = "hello"

    public private(set) var hasDefaultString:Bool = false
    public private(set) var defaultBytes:NSData = NSData(bytes:([UInt8]() + "world".utf8), length:5)

    public private(set) var hasDefaultBytes:Bool = false
    public private(set) var defaultNestedEnum:ProtobufUnittest.TestAllTypes.NestedEnum = ProtobufUnittest.TestAllTypes.NestedEnum.Bar
    public private(set) var hasDefaultNestedEnum:Bool = false
    public private(set) var defaultForeignEnum:ProtobufUnittest.ForeignEnum = ProtobufUnittest.ForeignEnum.ForeignBar
    public private(set) var hasDefaultForeignEnum:Bool = false
    public private(set) var defaultImportEnum:ProtobufUnittestImport.ImportEnum = ProtobufUnittestImport.ImportEnum.ImportBar
    public private(set) var hasDefaultImportEnum:Bool = false
    public private(set) var defaultStringPiece:String = "abc"

    public private(set) var hasDefaultStringPiece:Bool = false
    public private(set) var defaultCord:String = "123"

    public private(set) var hasDefaultCord:Bool = false
    public private(set) var oneofUint32:UInt32!{
         get {
              return TestAllTypes.OneofField.getOneofUint32(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofUint32(newvalue)
         }
    }
    public private(set) var hasOneofUint32:Bool {
          get {
               if TestAllTypes.OneofField.getOneofUint32(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var oneofNestedMessage:ProtobufUnittest.TestAllTypes.NestedMessage!{
         get {
              return TestAllTypes.OneofField.getOneofNestedMessage(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofNestedMessage(newvalue)
         }
    }
    public private(set) var hasOneofNestedMessage:Bool {
          get {
               if TestAllTypes.OneofField.getOneofNestedMessage(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var oneofString:String!{
         get {
              return TestAllTypes.OneofField.getOneofString(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofString(newvalue)
         }
    }
    public private(set) var hasOneofString:Bool {
          get {
               if TestAllTypes.OneofField.getOneofString(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var oneofBytes:NSData!{
         get {
              return TestAllTypes.OneofField.getOneofBytes(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofBytes(newvalue)
         }
    }
    public private(set) var hasOneofBytes:Bool {
          get {
               if TestAllTypes.OneofField.getOneofBytes(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasOptionalInt32 {
        try output.writeInt32(1, value:optionalInt32)
      }
      if hasOptionalInt64 {
        try output.writeInt64(2, value:optionalInt64)
      }
      if hasOptionalUint32 {
        try output.writeUInt32(3, value:optionalUint32)
      }
      if hasOptionalUint64 {
        try output.writeUInt64(4, value:optionalUint64)
      }
      if hasOptionalSint32 {
        try output.writeSInt32(5, value:optionalSint32)
      }
      if hasOptionalSint64 {
        try output.writeSInt64(6, value:optionalSint64)
      }
      if hasOptionalFixed32 {
        try output.writeFixed32(7, value:optionalFixed32)
      }
      if hasOptionalFixed64 {
        try output.writeFixed64(8, value:optionalFixed64)
      }
      if hasOptionalSfixed32 {
        try output.writeSFixed32(9, value:optionalSfixed32)
      }
      if hasOptionalSfixed64 {
        try output.writeSFixed64(10, value:optionalSfixed64)
      }
      if hasOptionalFloat {
        try output.writeFloat(11, value:optionalFloat)
      }
      if hasOptionalDouble {
        try output.writeDouble(12, value:optionalDouble)
      }
      if hasOptionalBool {
        try output.writeBool(13, value:optionalBool)
      }
      if hasOptionalString {
        try output.writeString(14, value:optionalString)
      }
      if hasOptionalBytes {
        try output.writeData(15, value:optionalBytes)
      }
      if hasOptionalGroup {
        try output.writeGroup(16, value:optionalGroup)
      }
      if hasOptionalNestedMessage {
        try output.writeMessage(18, value:optionalNestedMessage)
      }
      if hasOptionalForeignMessage {
        try output.writeMessage(19, value:optionalForeignMessage)
      }
      if hasOptionalImportMessage {
        try output.writeMessage(20, value:optionalImportMessage)
      }
      if hasOptionalNestedEnum {
        try output.writeEnum(21, value:optionalNestedEnum.rawValue)
      }
      if hasOptionalForeignEnum {
        try output.writeEnum(22, value:optionalForeignEnum.rawValue)
      }
      if hasOptionalImportEnum {
        try output.writeEnum(23, value:optionalImportEnum.rawValue)
      }
      if hasOptionalStringPiece {
        try output.writeString(24, value:optionalStringPiece)
      }
      if hasOptionalCord {
        try output.writeString(25, value:optionalCord)
      }
      if hasOptionalPublicImportMessage {
        try output.writeMessage(26, value:optionalPublicImportMessage)
      }
      if hasOptionalLazyMessage {
        try output.writeMessage(27, value:optionalLazyMessage)
      }
      if !repeatedInt32.isEmpty {
        for oneValuerepeatedInt32 in repeatedInt32 {
          try output.writeInt32(31, value:oneValuerepeatedInt32)
        }
      }
      if !repeatedInt64.isEmpty {
        for oneValuerepeatedInt64 in repeatedInt64 {
          try output.writeInt64(32, value:oneValuerepeatedInt64)
        }
      }
      if !repeatedUint32.isEmpty {
        for oneValuerepeatedUint32 in repeatedUint32 {
          try output.writeUInt32(33, value:oneValuerepeatedUint32)
        }
      }
      if !repeatedUint64.isEmpty {
        for oneValuerepeatedUint64 in repeatedUint64 {
          try output.writeUInt64(34, value:oneValuerepeatedUint64)
        }
      }
      if !repeatedSint32.isEmpty {
        for oneValuerepeatedSint32 in repeatedSint32 {
          try output.writeSInt32(35, value:oneValuerepeatedSint32)
        }
      }
      if !repeatedSint64.isEmpty {
        for oneValuerepeatedSint64 in repeatedSint64 {
          try output.writeSInt64(36, value:oneValuerepeatedSint64)
        }
      }
      if !repeatedFixed32.isEmpty {
        for oneValuerepeatedFixed32 in repeatedFixed32 {
          try output.writeFixed32(37, value:oneValuerepeatedFixed32)
        }
      }
      if !repeatedFixed64.isEmpty {
        for oneValuerepeatedFixed64 in repeatedFixed64 {
          try output.writeFixed64(38, value:oneValuerepeatedFixed64)
        }
      }
      if !repeatedSfixed32.isEmpty {
        for oneValuerepeatedSfixed32 in repeatedSfixed32 {
          try output.writeSFixed32(39, value:oneValuerepeatedSfixed32)
        }
      }
      if !repeatedSfixed64.isEmpty {
        for oneValuerepeatedSfixed64 in repeatedSfixed64 {
          try output.writeSFixed64(40, value:oneValuerepeatedSfixed64)
        }
      }
      if !repeatedFloat.isEmpty {
        for oneValuerepeatedFloat in repeatedFloat {
          try output.writeFloat(41, value:oneValuerepeatedFloat)
        }
      }
      if !repeatedDouble.isEmpty {
        for oneValuerepeatedDouble in repeatedDouble {
          try output.writeDouble(42, value:oneValuerepeatedDouble)
        }
      }
      if !repeatedBool.isEmpty {
        for oneValuerepeatedBool in repeatedBool {
          try output.writeBool(43, value:oneValuerepeatedBool)
        }
      }
      if !repeatedString.isEmpty {
        for oneValuerepeatedString in repeatedString {
          try output.writeString(44, value:oneValuerepeatedString)
        }
      }
      if !repeatedBytes.isEmpty {
        for oneValuerepeatedBytes in repeatedBytes {
          try output.writeData(45, value:oneValuerepeatedBytes)
        }
      }
      for oneElementrepeatedGroup in repeatedGroup {
          try output.writeGroup(46, value:oneElementrepeatedGroup)
      }
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          try output.writeMessage(48, value:oneElementrepeatedNestedMessage)
      }
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          try output.writeMessage(49, value:oneElementrepeatedForeignMessage)
      }
      for oneElementrepeatedImportMessage in repeatedImportMessage {
          try output.writeMessage(50, value:oneElementrepeatedImportMessage)
      }
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          try output.writeEnum(51, value:oneValueOfrepeatedNestedEnum.rawValue)
      }
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          try output.writeEnum(52, value:oneValueOfrepeatedForeignEnum.rawValue)
      }
      for oneValueOfrepeatedImportEnum in repeatedImportEnum {
          try output.writeEnum(53, value:oneValueOfrepeatedImportEnum.rawValue)
      }
      if !repeatedStringPiece.isEmpty {
        for oneValuerepeatedStringPiece in repeatedStringPiece {
          try output.writeString(54, value:oneValuerepeatedStringPiece)
        }
      }
      if !repeatedCord.isEmpty {
        for oneValuerepeatedCord in repeatedCord {
          try output.writeString(55, value:oneValuerepeatedCord)
        }
      }
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          try output.writeMessage(57, value:oneElementrepeatedLazyMessage)
      }
      if hasDefaultInt32 {
        try output.writeInt32(61, value:defaultInt32)
      }
      if hasDefaultInt64 {
        try output.writeInt64(62, value:defaultInt64)
      }
      if hasDefaultUint32 {
        try output.writeUInt32(63, value:defaultUint32)
      }
      if hasDefaultUint64 {
        try output.writeUInt64(64, value:defaultUint64)
      }
      if hasDefaultSint32 {
        try output.writeSInt32(65, value:defaultSint32)
      }
      if hasDefaultSint64 {
        try output.writeSInt64(66, value:defaultSint64)
      }
      if hasDefaultFixed32 {
        try output.writeFixed32(67, value:defaultFixed32)
      }
      if hasDefaultFixed64 {
        try output.writeFixed64(68, value:defaultFixed64)
      }
      if hasDefaultSfixed32 {
        try output.writeSFixed32(69, value:defaultSfixed32)
      }
      if hasDefaultSfixed64 {
        try output.writeSFixed64(70, value:defaultSfixed64)
      }
      if hasDefaultFloat {
        try output.writeFloat(71, value:defaultFloat)
      }
      if hasDefaultDouble {
        try output.writeDouble(72, value:defaultDouble)
      }
      if hasDefaultBool {
        try output.writeBool(73, value:defaultBool)
      }
      if hasDefaultString {
        try output.writeString(74, value:defaultString)
      }
      if hasDefaultBytes {
        try output.writeData(75, value:defaultBytes)
      }
      if hasDefaultNestedEnum {
        try output.writeEnum(81, value:defaultNestedEnum.rawValue)
      }
      if hasDefaultForeignEnum {
        try output.writeEnum(82, value:defaultForeignEnum.rawValue)
      }
      if hasDefaultImportEnum {
        try output.writeEnum(83, value:defaultImportEnum.rawValue)
      }
      if hasDefaultStringPiece {
        try output.writeString(84, value:defaultStringPiece)
      }
      if hasDefaultCord {
        try output.writeString(85, value:defaultCord)
      }
      if hasOneofUint32 {
        try output.writeUInt32(111, value:oneofUint32)
      }
      if hasOneofNestedMessage {
        try output.writeMessage(112, value:oneofNestedMessage)
      }
      if hasOneofString {
        try output.writeString(113, value:oneofString)
      }
      if hasOneofBytes {
        try output.writeData(114, value:oneofBytes)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOptionalInt32 {
        serialize_size += optionalInt32.computeInt32Size(1)
      }
      if hasOptionalInt64 {
        serialize_size += optionalInt64.computeInt64Size(2)
      }
      if hasOptionalUint32 {
        serialize_size += optionalUint32.computeUInt32Size(3)
      }
      if hasOptionalUint64 {
        serialize_size += optionalUint64.computeUInt64Size(4)
      }
      if hasOptionalSint32 {
        serialize_size += optionalSint32.computeSInt32Size(5)
      }
      if hasOptionalSint64 {
        serialize_size += optionalSint64.computeSInt64Size(6)
      }
      if hasOptionalFixed32 {
        serialize_size += optionalFixed32.computeFixed32Size(7)
      }
      if hasOptionalFixed64 {
        serialize_size += optionalFixed64.computeFixed64Size(8)
      }
      if hasOptionalSfixed32 {
        serialize_size += optionalSfixed32.computeSFixed32Size(9)
      }
      if hasOptionalSfixed64 {
        serialize_size += optionalSfixed64.computeSFixed64Size(10)
      }
      if hasOptionalFloat {
        serialize_size += optionalFloat.computeFloatSize(11)
      }
      if hasOptionalDouble {
        serialize_size += optionalDouble.computeDoubleSize(12)
      }
      if hasOptionalBool {
        serialize_size += optionalBool.computeBoolSize(13)
      }
      if hasOptionalString {
        serialize_size += optionalString.computeStringSize(14)
      }
      if hasOptionalBytes {
        serialize_size += optionalBytes.computeDataSize(15)
      }
      if hasOptionalGroup {
          if let varSizeoptionalGroup = optionalGroup?.computeGroupSize(16) {
              serialize_size += varSizeoptionalGroup
          }
      }
      if hasOptionalNestedMessage {
          if let varSizeoptionalNestedMessage = optionalNestedMessage?.computeMessageSize(18) {
              serialize_size += varSizeoptionalNestedMessage
          }
      }
      if hasOptionalForeignMessage {
          if let varSizeoptionalForeignMessage = optionalForeignMessage?.computeMessageSize(19) {
              serialize_size += varSizeoptionalForeignMessage
          }
      }
      if hasOptionalImportMessage {
          if let varSizeoptionalImportMessage = optionalImportMessage?.computeMessageSize(20) {
              serialize_size += varSizeoptionalImportMessage
          }
      }
      if (hasOptionalNestedEnum) {
        serialize_size += optionalNestedEnum.rawValue.computeEnumSize(21)
      }
      if (hasOptionalForeignEnum) {
        serialize_size += optionalForeignEnum.rawValue.computeEnumSize(22)
      }
      if (hasOptionalImportEnum) {
        serialize_size += optionalImportEnum.rawValue.computeEnumSize(23)
      }
      if hasOptionalStringPiece {
        serialize_size += optionalStringPiece.computeStringSize(24)
      }
      if hasOptionalCord {
        serialize_size += optionalCord.computeStringSize(25)
      }
      if hasOptionalPublicImportMessage {
          if let varSizeoptionalPublicImportMessage = optionalPublicImportMessage?.computeMessageSize(26) {
              serialize_size += varSizeoptionalPublicImportMessage
          }
      }
      if hasOptionalLazyMessage {
          if let varSizeoptionalLazyMessage = optionalLazyMessage?.computeMessageSize(27) {
              serialize_size += varSizeoptionalLazyMessage
          }
      }
      var dataSizeRepeatedInt32:Int32 = 0
      for oneValuerepeatedInt32 in repeatedInt32 {
          dataSizeRepeatedInt32 += oneValuerepeatedInt32.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt32
      serialize_size += 2 * Int32(repeatedInt32.count)
      var dataSizeRepeatedInt64:Int32 = 0
      for oneValuerepeatedInt64 in repeatedInt64 {
          dataSizeRepeatedInt64 += oneValuerepeatedInt64.computeInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt64
      serialize_size += 2 * Int32(repeatedInt64.count)
      var dataSizeRepeatedUint32:Int32 = 0
      for oneValuerepeatedUint32 in repeatedUint32 {
          dataSizeRepeatedUint32 += oneValuerepeatedUint32.computeUInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedUint32
      serialize_size += 2 * Int32(repeatedUint32.count)
      var dataSizeRepeatedUint64:Int32 = 0
      for oneValuerepeatedUint64 in repeatedUint64 {
          dataSizeRepeatedUint64 += oneValuerepeatedUint64.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedUint64
      serialize_size += 2 * Int32(repeatedUint64.count)
      var dataSizeRepeatedSint32:Int32 = 0
      for oneValuerepeatedSint32 in repeatedSint32 {
          dataSizeRepeatedSint32 += oneValuerepeatedSint32.computeSInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedSint32
      serialize_size += 2 * Int32(repeatedSint32.count)
      var dataSizeRepeatedSint64:Int32 = 0
      for oneValuerepeatedSint64 in repeatedSint64 {
          dataSizeRepeatedSint64 += oneValuerepeatedSint64.computeSInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedSint64
      serialize_size += 2 * Int32(repeatedSint64.count)
      var dataSizeRepeatedFixed32:Int32 = 0
      dataSizeRepeatedFixed32 = 4 * Int32(repeatedFixed32.count)
      serialize_size += dataSizeRepeatedFixed32
      serialize_size += 2 * Int32(repeatedFixed32.count)
      var dataSizeRepeatedFixed64:Int32 = 0
      dataSizeRepeatedFixed64 = 8 * Int32(repeatedFixed64.count)
      serialize_size += dataSizeRepeatedFixed64
      serialize_size += 2 * Int32(repeatedFixed64.count)
      var dataSizeRepeatedSfixed32:Int32 = 0
      dataSizeRepeatedSfixed32 = 4 * Int32(repeatedSfixed32.count)
      serialize_size += dataSizeRepeatedSfixed32
      serialize_size += 2 * Int32(repeatedSfixed32.count)
      var dataSizeRepeatedSfixed64:Int32 = 0
      dataSizeRepeatedSfixed64 = 8 * Int32(repeatedSfixed64.count)
      serialize_size += dataSizeRepeatedSfixed64
      serialize_size += 2 * Int32(repeatedSfixed64.count)
      var dataSizeRepeatedFloat:Int32 = 0
      dataSizeRepeatedFloat = 4 * Int32(repeatedFloat.count)
      serialize_size += dataSizeRepeatedFloat
      serialize_size += 2 * Int32(repeatedFloat.count)
      var dataSizeRepeatedDouble:Int32 = 0
      dataSizeRepeatedDouble = 8 * Int32(repeatedDouble.count)
      serialize_size += dataSizeRepeatedDouble
      serialize_size += 2 * Int32(repeatedDouble.count)
      var dataSizeRepeatedBool:Int32 = 0
      dataSizeRepeatedBool = 1 * Int32(repeatedBool.count)
      serialize_size += dataSizeRepeatedBool
      serialize_size += 2 * Int32(repeatedBool.count)
      var dataSizeRepeatedString:Int32 = 0
      for oneValuerepeatedString in repeatedString {
          dataSizeRepeatedString += oneValuerepeatedString.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedString
      serialize_size += 2 * Int32(repeatedString.count)
      var dataSizeRepeatedBytes:Int32 = 0
      for oneValuerepeatedBytes in repeatedBytes {
          dataSizeRepeatedBytes += oneValuerepeatedBytes.computeDataSizeNoTag()
      }
      serialize_size += dataSizeRepeatedBytes
      serialize_size += 2 * Int32(repeatedBytes.count)
      for oneElementrepeatedGroup in repeatedGroup {
          serialize_size += oneElementrepeatedGroup.computeGroupSize(46)
      }
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          serialize_size += oneElementrepeatedNestedMessage.computeMessageSize(48)
      }
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          serialize_size += oneElementrepeatedForeignMessage.computeMessageSize(49)
      }
      for oneElementrepeatedImportMessage in repeatedImportMessage {
          serialize_size += oneElementrepeatedImportMessage.computeMessageSize(50)
      }
      var dataSizerepeatedNestedEnum:Int32 = 0
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          dataSizerepeatedNestedEnum += oneValueOfrepeatedNestedEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedNestedEnum
      serialize_size += (2 * Int32(repeatedNestedEnum.count))
      var dataSizerepeatedForeignEnum:Int32 = 0
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          dataSizerepeatedForeignEnum += oneValueOfrepeatedForeignEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedForeignEnum
      serialize_size += (2 * Int32(repeatedForeignEnum.count))
      var dataSizerepeatedImportEnum:Int32 = 0
      for oneValueOfrepeatedImportEnum in repeatedImportEnum {
          dataSizerepeatedImportEnum += oneValueOfrepeatedImportEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedImportEnum
      serialize_size += (2 * Int32(repeatedImportEnum.count))
      var dataSizeRepeatedStringPiece:Int32 = 0
      for oneValuerepeatedStringPiece in repeatedStringPiece {
          dataSizeRepeatedStringPiece += oneValuerepeatedStringPiece.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedStringPiece
      serialize_size += 2 * Int32(repeatedStringPiece.count)
      var dataSizeRepeatedCord:Int32 = 0
      for oneValuerepeatedCord in repeatedCord {
          dataSizeRepeatedCord += oneValuerepeatedCord.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedCord
      serialize_size += 2 * Int32(repeatedCord.count)
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          serialize_size += oneElementrepeatedLazyMessage.computeMessageSize(57)
      }
      if hasDefaultInt32 {
        serialize_size += defaultInt32.computeInt32Size(61)
      }
      if hasDefaultInt64 {
        serialize_size += defaultInt64.computeInt64Size(62)
      }
      if hasDefaultUint32 {
        serialize_size += defaultUint32.computeUInt32Size(63)
      }
      if hasDefaultUint64 {
        serialize_size += defaultUint64.computeUInt64Size(64)
      }
      if hasDefaultSint32 {
        serialize_size += defaultSint32.computeSInt32Size(65)
      }
      if hasDefaultSint64 {
        serialize_size += defaultSint64.computeSInt64Size(66)
      }
      if hasDefaultFixed32 {
        serialize_size += defaultFixed32.computeFixed32Size(67)
      }
      if hasDefaultFixed64 {
        serialize_size += defaultFixed64.computeFixed64Size(68)
      }
      if hasDefaultSfixed32 {
        serialize_size += defaultSfixed32.computeSFixed32Size(69)
      }
      if hasDefaultSfixed64 {
        serialize_size += defaultSfixed64.computeSFixed64Size(70)
      }
      if hasDefaultFloat {
        serialize_size += defaultFloat.computeFloatSize(71)
      }
      if hasDefaultDouble {
        serialize_size += defaultDouble.computeDoubleSize(72)
      }
      if hasDefaultBool {
        serialize_size += defaultBool.computeBoolSize(73)
      }
      if hasDefaultString {
        serialize_size += defaultString.computeStringSize(74)
      }
      if hasDefaultBytes {
        serialize_size += defaultBytes.computeDataSize(75)
      }
      if (hasDefaultNestedEnum) {
        serialize_size += defaultNestedEnum.rawValue.computeEnumSize(81)
      }
      if (hasDefaultForeignEnum) {
        serialize_size += defaultForeignEnum.rawValue.computeEnumSize(82)
      }
      if (hasDefaultImportEnum) {
        serialize_size += defaultImportEnum.rawValue.computeEnumSize(83)
      }
      if hasDefaultStringPiece {
        serialize_size += defaultStringPiece.computeStringSize(84)
      }
      if hasDefaultCord {
        serialize_size += defaultCord.computeStringSize(85)
      }
      if hasOneofUint32 {
        serialize_size += oneofUint32.computeUInt32Size(111)
      }
      if hasOneofNestedMessage {
          if let varSizeoneofNestedMessage = oneofNestedMessage?.computeMessageSize(112) {
              serialize_size += varSizeoneofNestedMessage
          }
      }
      if hasOneofString {
        serialize_size += oneofString.computeStringSize(113)
      }
      if hasOneofBytes {
        serialize_size += oneofBytes.computeDataSize(114)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestAllTypes> {
      var mergedArray = Array<ProtobufUnittest.TestAllTypes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestAllTypes? {
      return try ProtobufUnittest.TestAllTypes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestAllTypes {
      return try ProtobufUnittest.TestAllTypes.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes {
      return try ProtobufUnittest.TestAllTypes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestAllTypes {
      return try ProtobufUnittest.TestAllTypes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes {
      return try ProtobufUnittest.TestAllTypes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestAllTypes {
      return try ProtobufUnittest.TestAllTypes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes {
      return try ProtobufUnittest.TestAllTypes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
      return ProtobufUnittest.TestAllTypes.classBuilder() as! ProtobufUnittest.TestAllTypes.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
      return classBuilder() as! ProtobufUnittest.TestAllTypes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestAllTypes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestAllTypes.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestAllTypes.Builder {
      return try ProtobufUnittest.TestAllTypes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestAllTypes.Builder {
      return try ProtobufUnittest.TestAllTypes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasOptionalInt32 {
        output += "\(indent) optionalInt32: \(optionalInt32) \n"
      }
      if hasOptionalInt64 {
        output += "\(indent) optionalInt64: \(optionalInt64) \n"
      }
      if hasOptionalUint32 {
        output += "\(indent) optionalUint32: \(optionalUint32) \n"
      }
      if hasOptionalUint64 {
        output += "\(indent) optionalUint64: \(optionalUint64) \n"
      }
      if hasOptionalSint32 {
        output += "\(indent) optionalSint32: \(optionalSint32) \n"
      }
      if hasOptionalSint64 {
        output += "\(indent) optionalSint64: \(optionalSint64) \n"
      }
      if hasOptionalFixed32 {
        output += "\(indent) optionalFixed32: \(optionalFixed32) \n"
      }
      if hasOptionalFixed64 {
        output += "\(indent) optionalFixed64: \(optionalFixed64) \n"
      }
      if hasOptionalSfixed32 {
        output += "\(indent) optionalSfixed32: \(optionalSfixed32) \n"
      }
      if hasOptionalSfixed64 {
        output += "\(indent) optionalSfixed64: \(optionalSfixed64) \n"
      }
      if hasOptionalFloat {
        output += "\(indent) optionalFloat: \(optionalFloat) \n"
      }
      if hasOptionalDouble {
        output += "\(indent) optionalDouble: \(optionalDouble) \n"
      }
      if hasOptionalBool {
        output += "\(indent) optionalBool: \(optionalBool) \n"
      }
      if hasOptionalString {
        output += "\(indent) optionalString: \(optionalString) \n"
      }
      if hasOptionalBytes {
        output += "\(indent) optionalBytes: \(optionalBytes) \n"
      }
      if hasOptionalGroup {
        output += "\(indent) optionalGroup {\n"
        if let outDescOptionalGroup = optionalGroup {
          output += try outDescOptionalGroup.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasOptionalNestedMessage {
        output += "\(indent) optionalNestedMessage {\n"
        if let outDescOptionalNestedMessage = optionalNestedMessage {
          output += try outDescOptionalNestedMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasOptionalForeignMessage {
        output += "\(indent) optionalForeignMessage {\n"
        if let outDescOptionalForeignMessage = optionalForeignMessage {
          output += try outDescOptionalForeignMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasOptionalImportMessage {
        output += "\(indent) optionalImportMessage {\n"
        if let outDescOptionalImportMessage = optionalImportMessage {
          output += try outDescOptionalImportMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if (hasOptionalNestedEnum) {
        output += "\(indent) optionalNestedEnum: \(optionalNestedEnum.description)\n"
      }
      if (hasOptionalForeignEnum) {
        output += "\(indent) optionalForeignEnum: \(optionalForeignEnum.description)\n"
      }
      if (hasOptionalImportEnum) {
        output += "\(indent) optionalImportEnum: \(optionalImportEnum.description)\n"
      }
      if hasOptionalStringPiece {
        output += "\(indent) optionalStringPiece: \(optionalStringPiece) \n"
      }
      if hasOptionalCord {
        output += "\(indent) optionalCord: \(optionalCord) \n"
      }
      if hasOptionalPublicImportMessage {
        output += "\(indent) optionalPublicImportMessage {\n"
        if let outDescOptionalPublicImportMessage = optionalPublicImportMessage {
          output += try outDescOptionalPublicImportMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasOptionalLazyMessage {
        output += "\(indent) optionalLazyMessage {\n"
        if let outDescOptionalLazyMessage = optionalLazyMessage {
          output += try outDescOptionalLazyMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var repeatedInt32ElementIndex:Int = 0
      for oneValuerepeatedInt32 in repeatedInt32  {
          output += "\(indent) repeatedInt32[\(repeatedInt32ElementIndex)]: \(oneValuerepeatedInt32)\n"
          repeatedInt32ElementIndex += 1
      }
      var repeatedInt64ElementIndex:Int = 0
      for oneValuerepeatedInt64 in repeatedInt64  {
          output += "\(indent) repeatedInt64[\(repeatedInt64ElementIndex)]: \(oneValuerepeatedInt64)\n"
          repeatedInt64ElementIndex += 1
      }
      var repeatedUint32ElementIndex:Int = 0
      for oneValuerepeatedUint32 in repeatedUint32  {
          output += "\(indent) repeatedUint32[\(repeatedUint32ElementIndex)]: \(oneValuerepeatedUint32)\n"
          repeatedUint32ElementIndex += 1
      }
      var repeatedUint64ElementIndex:Int = 0
      for oneValuerepeatedUint64 in repeatedUint64  {
          output += "\(indent) repeatedUint64[\(repeatedUint64ElementIndex)]: \(oneValuerepeatedUint64)\n"
          repeatedUint64ElementIndex += 1
      }
      var repeatedSint32ElementIndex:Int = 0
      for oneValuerepeatedSint32 in repeatedSint32  {
          output += "\(indent) repeatedSint32[\(repeatedSint32ElementIndex)]: \(oneValuerepeatedSint32)\n"
          repeatedSint32ElementIndex += 1
      }
      var repeatedSint64ElementIndex:Int = 0
      for oneValuerepeatedSint64 in repeatedSint64  {
          output += "\(indent) repeatedSint64[\(repeatedSint64ElementIndex)]: \(oneValuerepeatedSint64)\n"
          repeatedSint64ElementIndex += 1
      }
      var repeatedFixed32ElementIndex:Int = 0
      for oneValuerepeatedFixed32 in repeatedFixed32  {
          output += "\(indent) repeatedFixed32[\(repeatedFixed32ElementIndex)]: \(oneValuerepeatedFixed32)\n"
          repeatedFixed32ElementIndex += 1
      }
      var repeatedFixed64ElementIndex:Int = 0
      for oneValuerepeatedFixed64 in repeatedFixed64  {
          output += "\(indent) repeatedFixed64[\(repeatedFixed64ElementIndex)]: \(oneValuerepeatedFixed64)\n"
          repeatedFixed64ElementIndex += 1
      }
      var repeatedSfixed32ElementIndex:Int = 0
      for oneValuerepeatedSfixed32 in repeatedSfixed32  {
          output += "\(indent) repeatedSfixed32[\(repeatedSfixed32ElementIndex)]: \(oneValuerepeatedSfixed32)\n"
          repeatedSfixed32ElementIndex += 1
      }
      var repeatedSfixed64ElementIndex:Int = 0
      for oneValuerepeatedSfixed64 in repeatedSfixed64  {
          output += "\(indent) repeatedSfixed64[\(repeatedSfixed64ElementIndex)]: \(oneValuerepeatedSfixed64)\n"
          repeatedSfixed64ElementIndex += 1
      }
      var repeatedFloatElementIndex:Int = 0
      for oneValuerepeatedFloat in repeatedFloat  {
          output += "\(indent) repeatedFloat[\(repeatedFloatElementIndex)]: \(oneValuerepeatedFloat)\n"
          repeatedFloatElementIndex += 1
      }
      var repeatedDoubleElementIndex:Int = 0
      for oneValuerepeatedDouble in repeatedDouble  {
          output += "\(indent) repeatedDouble[\(repeatedDoubleElementIndex)]: \(oneValuerepeatedDouble)\n"
          repeatedDoubleElementIndex += 1
      }
      var repeatedBoolElementIndex:Int = 0
      for oneValuerepeatedBool in repeatedBool  {
          output += "\(indent) repeatedBool[\(repeatedBoolElementIndex)]: \(oneValuerepeatedBool)\n"
          repeatedBoolElementIndex += 1
      }
      var repeatedStringElementIndex:Int = 0
      for oneValuerepeatedString in repeatedString  {
          output += "\(indent) repeatedString[\(repeatedStringElementIndex)]: \(oneValuerepeatedString)\n"
          repeatedStringElementIndex += 1
      }
      var repeatedBytesElementIndex:Int = 0
      for oneValuerepeatedBytes in repeatedBytes  {
          output += "\(indent) repeatedBytes[\(repeatedBytesElementIndex)]: \(oneValuerepeatedBytes)\n"
          repeatedBytesElementIndex += 1
      }
      var repeatedGroupElementIndex:Int = 0
      for oneElementrepeatedGroup in repeatedGroup {
          output += "\(indent) repeatedGroup[\(repeatedGroupElementIndex)] {\n"
          output += try oneElementrepeatedGroup.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedGroupElementIndex += 1
      }
      var repeatedNestedMessageElementIndex:Int = 0
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          output += "\(indent) repeatedNestedMessage[\(repeatedNestedMessageElementIndex)] {\n"
          output += try oneElementrepeatedNestedMessage.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedNestedMessageElementIndex += 1
      }
      var repeatedForeignMessageElementIndex:Int = 0
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          output += "\(indent) repeatedForeignMessage[\(repeatedForeignMessageElementIndex)] {\n"
          output += try oneElementrepeatedForeignMessage.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedForeignMessageElementIndex += 1
      }
      var repeatedImportMessageElementIndex:Int = 0
      for oneElementrepeatedImportMessage in repeatedImportMessage {
          output += "\(indent) repeatedImportMessage[\(repeatedImportMessageElementIndex)] {\n"
          output += try oneElementrepeatedImportMessage.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedImportMessageElementIndex += 1
      }
      var repeatedNestedEnumElementIndex:Int = 0
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          output += "\(indent) repeatedNestedEnum[\(repeatedNestedEnumElementIndex)]: \(oneValueOfrepeatedNestedEnum.description)\n"
          repeatedNestedEnumElementIndex += 1
      }
      var repeatedForeignEnumElementIndex:Int = 0
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          output += "\(indent) repeatedForeignEnum[\(repeatedForeignEnumElementIndex)]: \(oneValueOfrepeatedForeignEnum.description)\n"
          repeatedForeignEnumElementIndex += 1
      }
      var repeatedImportEnumElementIndex:Int = 0
      for oneValueOfrepeatedImportEnum in repeatedImportEnum {
          output += "\(indent) repeatedImportEnum[\(repeatedImportEnumElementIndex)]: \(oneValueOfrepeatedImportEnum.description)\n"
          repeatedImportEnumElementIndex += 1
      }
      var repeatedStringPieceElementIndex:Int = 0
      for oneValuerepeatedStringPiece in repeatedStringPiece  {
          output += "\(indent) repeatedStringPiece[\(repeatedStringPieceElementIndex)]: \(oneValuerepeatedStringPiece)\n"
          repeatedStringPieceElementIndex += 1
      }
      var repeatedCordElementIndex:Int = 0
      for oneValuerepeatedCord in repeatedCord  {
          output += "\(indent) repeatedCord[\(repeatedCordElementIndex)]: \(oneValuerepeatedCord)\n"
          repeatedCordElementIndex += 1
      }
      var repeatedLazyMessageElementIndex:Int = 0
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          output += "\(indent) repeatedLazyMessage[\(repeatedLazyMessageElementIndex)] {\n"
          output += try oneElementrepeatedLazyMessage.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedLazyMessageElementIndex += 1
      }
      if hasDefaultInt32 {
        output += "\(indent) defaultInt32: \(defaultInt32) \n"
      }
      if hasDefaultInt64 {
        output += "\(indent) defaultInt64: \(defaultInt64) \n"
      }
      if hasDefaultUint32 {
        output += "\(indent) defaultUint32: \(defaultUint32) \n"
      }
      if hasDefaultUint64 {
        output += "\(indent) defaultUint64: \(defaultUint64) \n"
      }
      if hasDefaultSint32 {
        output += "\(indent) defaultSint32: \(defaultSint32) \n"
      }
      if hasDefaultSint64 {
        output += "\(indent) defaultSint64: \(defaultSint64) \n"
      }
      if hasDefaultFixed32 {
        output += "\(indent) defaultFixed32: \(defaultFixed32) \n"
      }
      if hasDefaultFixed64 {
        output += "\(indent) defaultFixed64: \(defaultFixed64) \n"
      }
      if hasDefaultSfixed32 {
        output += "\(indent) defaultSfixed32: \(defaultSfixed32) \n"
      }
      if hasDefaultSfixed64 {
        output += "\(indent) defaultSfixed64: \(defaultSfixed64) \n"
      }
      if hasDefaultFloat {
        output += "\(indent) defaultFloat: \(defaultFloat) \n"
      }
      if hasDefaultDouble {
        output += "\(indent) defaultDouble: \(defaultDouble) \n"
      }
      if hasDefaultBool {
        output += "\(indent) defaultBool: \(defaultBool) \n"
      }
      if hasDefaultString {
        output += "\(indent) defaultString: \(defaultString) \n"
      }
      if hasDefaultBytes {
        output += "\(indent) defaultBytes: \(defaultBytes) \n"
      }
      if (hasDefaultNestedEnum) {
        output += "\(indent) defaultNestedEnum: \(defaultNestedEnum.description)\n"
      }
      if (hasDefaultForeignEnum) {
        output += "\(indent) defaultForeignEnum: \(defaultForeignEnum.description)\n"
      }
      if (hasDefaultImportEnum) {
        output += "\(indent) defaultImportEnum: \(defaultImportEnum.description)\n"
      }
      if hasDefaultStringPiece {
        output += "\(indent) defaultStringPiece: \(defaultStringPiece) \n"
      }
      if hasDefaultCord {
        output += "\(indent) defaultCord: \(defaultCord) \n"
      }
      if hasOneofUint32 {
        output += "\(indent) oneofUint32: \(oneofUint32) \n"
      }
      if hasOneofNestedMessage {
        output += "\(indent) oneofNestedMessage {\n"
        if let outDescOneofNestedMessage = oneofNestedMessage {
          output += try outDescOneofNestedMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasOneofString {
        output += "\(indent) oneofString: \(oneofString) \n"
      }
      if hasOneofBytes {
        output += "\(indent) oneofBytes: \(oneofBytes) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOptionalInt32 {
               hashCode = (hashCode &* 31) &+ optionalInt32.hashValue
            }
            if hasOptionalInt64 {
               hashCode = (hashCode &* 31) &+ optionalInt64.hashValue
            }
            if hasOptionalUint32 {
               hashCode = (hashCode &* 31) &+ optionalUint32.hashValue
            }
            if hasOptionalUint64 {
               hashCode = (hashCode &* 31) &+ optionalUint64.hashValue
            }
            if hasOptionalSint32 {
               hashCode = (hashCode &* 31) &+ optionalSint32.hashValue
            }
            if hasOptionalSint64 {
               hashCode = (hashCode &* 31) &+ optionalSint64.hashValue
            }
            if hasOptionalFixed32 {
               hashCode = (hashCode &* 31) &+ optionalFixed32.hashValue
            }
            if hasOptionalFixed64 {
               hashCode = (hashCode &* 31) &+ optionalFixed64.hashValue
            }
            if hasOptionalSfixed32 {
               hashCode = (hashCode &* 31) &+ optionalSfixed32.hashValue
            }
            if hasOptionalSfixed64 {
               hashCode = (hashCode &* 31) &+ optionalSfixed64.hashValue
            }
            if hasOptionalFloat {
               hashCode = (hashCode &* 31) &+ optionalFloat.hashValue
            }
            if hasOptionalDouble {
               hashCode = (hashCode &* 31) &+ optionalDouble.hashValue
            }
            if hasOptionalBool {
               hashCode = (hashCode &* 31) &+ optionalBool.hashValue
            }
            if hasOptionalString {
               hashCode = (hashCode &* 31) &+ optionalString.hashValue
            }
            if hasOptionalBytes {
               hashCode = (hashCode &* 31) &+ optionalBytes.hashValue
            }
            if hasOptionalGroup {
                if let hashValueoptionalGroup = optionalGroup?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalGroup
                }
            }
            if hasOptionalNestedMessage {
                if let hashValueoptionalNestedMessage = optionalNestedMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalNestedMessage
                }
            }
            if hasOptionalForeignMessage {
                if let hashValueoptionalForeignMessage = optionalForeignMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalForeignMessage
                }
            }
            if hasOptionalImportMessage {
                if let hashValueoptionalImportMessage = optionalImportMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalImportMessage
                }
            }
            if hasOptionalNestedEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalNestedEnum.rawValue)
            }
            if hasOptionalForeignEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalForeignEnum.rawValue)
            }
            if hasOptionalImportEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalImportEnum.rawValue)
            }
            if hasOptionalStringPiece {
               hashCode = (hashCode &* 31) &+ optionalStringPiece.hashValue
            }
            if hasOptionalCord {
               hashCode = (hashCode &* 31) &+ optionalCord.hashValue
            }
            if hasOptionalPublicImportMessage {
                if let hashValueoptionalPublicImportMessage = optionalPublicImportMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalPublicImportMessage
                }
            }
            if hasOptionalLazyMessage {
                if let hashValueoptionalLazyMessage = optionalLazyMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalLazyMessage
                }
            }
            for oneValuerepeatedInt32 in repeatedInt32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt32.hashValue
            }
            for oneValuerepeatedInt64 in repeatedInt64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt64.hashValue
            }
            for oneValuerepeatedUint32 in repeatedUint32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedUint32.hashValue
            }
            for oneValuerepeatedUint64 in repeatedUint64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedUint64.hashValue
            }
            for oneValuerepeatedSint32 in repeatedSint32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSint32.hashValue
            }
            for oneValuerepeatedSint64 in repeatedSint64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSint64.hashValue
            }
            for oneValuerepeatedFixed32 in repeatedFixed32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed32.hashValue
            }
            for oneValuerepeatedFixed64 in repeatedFixed64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed64.hashValue
            }
            for oneValuerepeatedSfixed32 in repeatedSfixed32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSfixed32.hashValue
            }
            for oneValuerepeatedSfixed64 in repeatedSfixed64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSfixed64.hashValue
            }
            for oneValuerepeatedFloat in repeatedFloat {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFloat.hashValue
            }
            for oneValuerepeatedDouble in repeatedDouble {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedDouble.hashValue
            }
            for oneValuerepeatedBool in repeatedBool {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedBool.hashValue
            }
            for oneValuerepeatedString in repeatedString {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedString.hashValue
            }
            for oneValuerepeatedBytes in repeatedBytes {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedBytes.hashValue
            }
            for oneElementrepeatedGroup in repeatedGroup {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedGroup.hashValue
            }
            for oneElementrepeatedNestedMessage in repeatedNestedMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedNestedMessage.hashValue
            }
            for oneElementrepeatedForeignMessage in repeatedForeignMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedForeignMessage.hashValue
            }
            for oneElementrepeatedImportMessage in repeatedImportMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedImportMessage.hashValue
            }
            for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedNestedEnum.rawValue)
            }
            for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedForeignEnum.rawValue)
            }
            for oneValueOfrepeatedImportEnum in repeatedImportEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedImportEnum.rawValue)
            }
            for oneValuerepeatedStringPiece in repeatedStringPiece {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedStringPiece.hashValue
            }
            for oneValuerepeatedCord in repeatedCord {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedCord.hashValue
            }
            for oneElementrepeatedLazyMessage in repeatedLazyMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedLazyMessage.hashValue
            }
            if hasDefaultInt32 {
               hashCode = (hashCode &* 31) &+ defaultInt32.hashValue
            }
            if hasDefaultInt64 {
               hashCode = (hashCode &* 31) &+ defaultInt64.hashValue
            }
            if hasDefaultUint32 {
               hashCode = (hashCode &* 31) &+ defaultUint32.hashValue
            }
            if hasDefaultUint64 {
               hashCode = (hashCode &* 31) &+ defaultUint64.hashValue
            }
            if hasDefaultSint32 {
               hashCode = (hashCode &* 31) &+ defaultSint32.hashValue
            }
            if hasDefaultSint64 {
               hashCode = (hashCode &* 31) &+ defaultSint64.hashValue
            }
            if hasDefaultFixed32 {
               hashCode = (hashCode &* 31) &+ defaultFixed32.hashValue
            }
            if hasDefaultFixed64 {
               hashCode = (hashCode &* 31) &+ defaultFixed64.hashValue
            }
            if hasDefaultSfixed32 {
               hashCode = (hashCode &* 31) &+ defaultSfixed32.hashValue
            }
            if hasDefaultSfixed64 {
               hashCode = (hashCode &* 31) &+ defaultSfixed64.hashValue
            }
            if hasDefaultFloat {
               hashCode = (hashCode &* 31) &+ defaultFloat.hashValue
            }
            if hasDefaultDouble {
               hashCode = (hashCode &* 31) &+ defaultDouble.hashValue
            }
            if hasDefaultBool {
               hashCode = (hashCode &* 31) &+ defaultBool.hashValue
            }
            if hasDefaultString {
               hashCode = (hashCode &* 31) &+ defaultString.hashValue
            }
            if hasDefaultBytes {
               hashCode = (hashCode &* 31) &+ defaultBytes.hashValue
            }
            if hasDefaultNestedEnum {
               hashCode = (hashCode &* 31) &+ Int(defaultNestedEnum.rawValue)
            }
            if hasDefaultForeignEnum {
               hashCode = (hashCode &* 31) &+ Int(defaultForeignEnum.rawValue)
            }
            if hasDefaultImportEnum {
               hashCode = (hashCode &* 31) &+ Int(defaultImportEnum.rawValue)
            }
            if hasDefaultStringPiece {
               hashCode = (hashCode &* 31) &+ defaultStringPiece.hashValue
            }
            if hasDefaultCord {
               hashCode = (hashCode &* 31) &+ defaultCord.hashValue
            }
            if hasOneofUint32 {
               hashCode = (hashCode &* 31) &+ oneofUint32.hashValue
            }
            if hasOneofNestedMessage {
                if let hashValueoneofNestedMessage = oneofNestedMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoneofNestedMessage
                }
            }
            if hasOneofString {
               hashCode = (hashCode &* 31) &+ oneofString.hashValue
            }
            if hasOneofBytes {
               hashCode = (hashCode &* 31) &+ oneofBytes.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestAllTypes"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestAllTypes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestAllTypes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
      public func getMessage() -> ProtobufUnittest.TestAllTypes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasOptionalInt32:Bool {
           get {
                return builderResult.hasOptionalInt32
           }
      }
      public var optionalInt32:Int32 {
           get {
                return builderResult.optionalInt32
           }
           set (value) {
               builderResult.hasOptionalInt32 = true
               builderResult.optionalInt32 = value
           }
      }
      public func setOptionalInt32(_ value:Int32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalInt32 = value
        return self
      }
      public func clearOptionalInt32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalInt32 = false
           builderResult.optionalInt32 = Int32(0)
           return self
      }
      public var hasOptionalInt64:Bool {
           get {
                return builderResult.hasOptionalInt64
           }
      }
      public var optionalInt64:Int64 {
           get {
                return builderResult.optionalInt64
           }
           set (value) {
               builderResult.hasOptionalInt64 = true
               builderResult.optionalInt64 = value
           }
      }
      public func setOptionalInt64(_ value:Int64) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalInt64 = value
        return self
      }
      public func clearOptionalInt64() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalInt64 = false
           builderResult.optionalInt64 = Int64(0)
           return self
      }
      public var hasOptionalUint32:Bool {
           get {
                return builderResult.hasOptionalUint32
           }
      }
      public var optionalUint32:UInt32 {
           get {
                return builderResult.optionalUint32
           }
           set (value) {
               builderResult.hasOptionalUint32 = true
               builderResult.optionalUint32 = value
           }
      }
      public func setOptionalUint32(_ value:UInt32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalUint32 = value
        return self
      }
      public func clearOptionalUint32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalUint32 = false
           builderResult.optionalUint32 = UInt32(0)
           return self
      }
      public var hasOptionalUint64:Bool {
           get {
                return builderResult.hasOptionalUint64
           }
      }
      public var optionalUint64:UInt64 {
           get {
                return builderResult.optionalUint64
           }
           set (value) {
               builderResult.hasOptionalUint64 = true
               builderResult.optionalUint64 = value
           }
      }
      public func setOptionalUint64(_ value:UInt64) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalUint64 = value
        return self
      }
      public func clearOptionalUint64() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalUint64 = false
           builderResult.optionalUint64 = UInt64(0)
           return self
      }
      public var hasOptionalSint32:Bool {
           get {
                return builderResult.hasOptionalSint32
           }
      }
      public var optionalSint32:Int32 {
           get {
                return builderResult.optionalSint32
           }
           set (value) {
               builderResult.hasOptionalSint32 = true
               builderResult.optionalSint32 = value
           }
      }
      public func setOptionalSint32(_ value:Int32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalSint32 = value
        return self
      }
      public func clearOptionalSint32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalSint32 = false
           builderResult.optionalSint32 = Int32(0)
           return self
      }
      public var hasOptionalSint64:Bool {
           get {
                return builderResult.hasOptionalSint64
           }
      }
      public var optionalSint64:Int64 {
           get {
                return builderResult.optionalSint64
           }
           set (value) {
               builderResult.hasOptionalSint64 = true
               builderResult.optionalSint64 = value
           }
      }
      public func setOptionalSint64(_ value:Int64) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalSint64 = value
        return self
      }
      public func clearOptionalSint64() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalSint64 = false
           builderResult.optionalSint64 = Int64(0)
           return self
      }
      public var hasOptionalFixed32:Bool {
           get {
                return builderResult.hasOptionalFixed32
           }
      }
      public var optionalFixed32:UInt32 {
           get {
                return builderResult.optionalFixed32
           }
           set (value) {
               builderResult.hasOptionalFixed32 = true
               builderResult.optionalFixed32 = value
           }
      }
      public func setOptionalFixed32(_ value:UInt32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalFixed32 = value
        return self
      }
      public func clearOptionalFixed32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalFixed32 = false
           builderResult.optionalFixed32 = UInt32(0)
           return self
      }
      public var hasOptionalFixed64:Bool {
           get {
                return builderResult.hasOptionalFixed64
           }
      }
      public var optionalFixed64:UInt64 {
           get {
                return builderResult.optionalFixed64
           }
           set (value) {
               builderResult.hasOptionalFixed64 = true
               builderResult.optionalFixed64 = value
           }
      }
      public func setOptionalFixed64(_ value:UInt64) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalFixed64 = value
        return self
      }
      public func clearOptionalFixed64() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalFixed64 = false
           builderResult.optionalFixed64 = UInt64(0)
           return self
      }
      public var hasOptionalSfixed32:Bool {
           get {
                return builderResult.hasOptionalSfixed32
           }
      }
      public var optionalSfixed32:Int32 {
           get {
                return builderResult.optionalSfixed32
           }
           set (value) {
               builderResult.hasOptionalSfixed32 = true
               builderResult.optionalSfixed32 = value
           }
      }
      public func setOptionalSfixed32(_ value:Int32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalSfixed32 = value
        return self
      }
      public func clearOptionalSfixed32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalSfixed32 = false
           builderResult.optionalSfixed32 = Int32(0)
           return self
      }
      public var hasOptionalSfixed64:Bool {
           get {
                return builderResult.hasOptionalSfixed64
           }
      }
      public var optionalSfixed64:Int64 {
           get {
                return builderResult.optionalSfixed64
           }
           set (value) {
               builderResult.hasOptionalSfixed64 = true
               builderResult.optionalSfixed64 = value
           }
      }
      public func setOptionalSfixed64(_ value:Int64) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalSfixed64 = value
        return self
      }
      public func clearOptionalSfixed64() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalSfixed64 = false
           builderResult.optionalSfixed64 = Int64(0)
           return self
      }
      public var hasOptionalFloat:Bool {
           get {
                return builderResult.hasOptionalFloat
           }
      }
      public var optionalFloat:Float {
           get {
                return builderResult.optionalFloat
           }
           set (value) {
               builderResult.hasOptionalFloat = true
               builderResult.optionalFloat = value
           }
      }
      public func setOptionalFloat(_ value:Float) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalFloat = value
        return self
      }
      public func clearOptionalFloat() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalFloat = false
           builderResult.optionalFloat = Float(0)
           return self
      }
      public var hasOptionalDouble:Bool {
           get {
                return builderResult.hasOptionalDouble
           }
      }
      public var optionalDouble:Double {
           get {
                return builderResult.optionalDouble
           }
           set (value) {
               builderResult.hasOptionalDouble = true
               builderResult.optionalDouble = value
           }
      }
      public func setOptionalDouble(_ value:Double) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalDouble = value
        return self
      }
      public func clearOptionalDouble() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalDouble = false
           builderResult.optionalDouble = Double(0)
           return self
      }
      public var hasOptionalBool:Bool {
           get {
                return builderResult.hasOptionalBool
           }
      }
      public var optionalBool:Bool {
           get {
                return builderResult.optionalBool
           }
           set (value) {
               builderResult.hasOptionalBool = true
               builderResult.optionalBool = value
           }
      }
      public func setOptionalBool(_ value:Bool) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalBool = value
        return self
      }
      public func clearOptionalBool() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalBool = false
           builderResult.optionalBool = false
           return self
      }
      public var hasOptionalString:Bool {
           get {
                return builderResult.hasOptionalString
           }
      }
      public var optionalString:String {
           get {
                return builderResult.optionalString
           }
           set (value) {
               builderResult.hasOptionalString = true
               builderResult.optionalString = value
           }
      }
      public func setOptionalString(_ value:String) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalString = value
        return self
      }
      public func clearOptionalString() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalString = false
           builderResult.optionalString = ""
           return self
      }
      public var hasOptionalBytes:Bool {
           get {
                return builderResult.hasOptionalBytes
           }
      }
      public var optionalBytes:NSData {
           get {
                return builderResult.optionalBytes
           }
           set (value) {
               builderResult.hasOptionalBytes = true
               builderResult.optionalBytes = value
           }
      }
      public func setOptionalBytes(_ value:NSData) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalBytes = value
        return self
      }
      public func clearOptionalBytes() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalBytes = false
           builderResult.optionalBytes = NSData()
           return self
      }
      public var hasOptionalGroup:Bool {
           get {
               return builderResult.hasOptionalGroup
           }
      }
      public var optionalGroup:ProtobufUnittest.TestAllTypes.OptionalGroup! {
           get {
               if optionalGroupBuilder_ != nil {
                  builderResult.optionalGroup = optionalGroupBuilder_.getMessage()
               }
               return builderResult.optionalGroup
           }
           set (value) {
               builderResult.hasOptionalGroup = true
               builderResult.optionalGroup = value
           }
      }
      private var optionalGroupBuilder_:ProtobufUnittest.TestAllTypes.OptionalGroup.Builder! {
           didSet {
              builderResult.hasOptionalGroup = true
           }
      }
      public func getOptionalGroupBuilder() -> ProtobufUnittest.TestAllTypes.OptionalGroup.Builder {
        if optionalGroupBuilder_ == nil {
           optionalGroupBuilder_ = ProtobufUnittest.TestAllTypes.OptionalGroup.Builder()
           builderResult.optionalGroup = optionalGroupBuilder_.getMessage()
           if optionalGroup != nil {
              try! optionalGroupBuilder_.mergeFrom(optionalGroup)
           }
        }
        return optionalGroupBuilder_
      }
      public func setOptionalGroup(_ value:ProtobufUnittest.TestAllTypes.OptionalGroup!) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalGroup = value
        return self
      }
      public func mergeOptionalGroup(_ value:ProtobufUnittest.TestAllTypes.OptionalGroup) throws -> ProtobufUnittest.TestAllTypes.Builder {
        if builderResult.hasOptionalGroup {
          builderResult.optionalGroup = try ProtobufUnittest.TestAllTypes.OptionalGroup.builderWithPrototype(builderResult.optionalGroup).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalGroup = value
        }
        builderResult.hasOptionalGroup = true
        return self
      }
      public func clearOptionalGroup() -> ProtobufUnittest.TestAllTypes.Builder {
        optionalGroupBuilder_ = nil
        builderResult.hasOptionalGroup = false
        builderResult.optionalGroup = nil
        return self
      }
      public var hasOptionalNestedMessage:Bool {
           get {
               return builderResult.hasOptionalNestedMessage
           }
      }
      public var optionalNestedMessage:ProtobufUnittest.TestAllTypes.NestedMessage! {
           get {
               if optionalNestedMessageBuilder_ != nil {
                  builderResult.optionalNestedMessage = optionalNestedMessageBuilder_.getMessage()
               }
               return builderResult.optionalNestedMessage
           }
           set (value) {
               builderResult.hasOptionalNestedMessage = true
               builderResult.optionalNestedMessage = value
           }
      }
      private var optionalNestedMessageBuilder_:ProtobufUnittest.TestAllTypes.NestedMessage.Builder! {
           didSet {
              builderResult.hasOptionalNestedMessage = true
           }
      }
      public func getOptionalNestedMessageBuilder() -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
        if optionalNestedMessageBuilder_ == nil {
           optionalNestedMessageBuilder_ = ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
           builderResult.optionalNestedMessage = optionalNestedMessageBuilder_.getMessage()
           if optionalNestedMessage != nil {
              try! optionalNestedMessageBuilder_.mergeFrom(optionalNestedMessage)
           }
        }
        return optionalNestedMessageBuilder_
      }
      public func setOptionalNestedMessage(_ value:ProtobufUnittest.TestAllTypes.NestedMessage!) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalNestedMessage = value
        return self
      }
      public func mergeOptionalNestedMessage(_ value:ProtobufUnittest.TestAllTypes.NestedMessage) throws -> ProtobufUnittest.TestAllTypes.Builder {
        if builderResult.hasOptionalNestedMessage {
          builderResult.optionalNestedMessage = try ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.optionalNestedMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalNestedMessage = value
        }
        builderResult.hasOptionalNestedMessage = true
        return self
      }
      public func clearOptionalNestedMessage() -> ProtobufUnittest.TestAllTypes.Builder {
        optionalNestedMessageBuilder_ = nil
        builderResult.hasOptionalNestedMessage = false
        builderResult.optionalNestedMessage = nil
        return self
      }
      public var hasOptionalForeignMessage:Bool {
           get {
               return builderResult.hasOptionalForeignMessage
           }
      }
      public var optionalForeignMessage:ProtobufUnittest.ForeignMessage! {
           get {
               if optionalForeignMessageBuilder_ != nil {
                  builderResult.optionalForeignMessage = optionalForeignMessageBuilder_.getMessage()
               }
               return builderResult.optionalForeignMessage
           }
           set (value) {
               builderResult.hasOptionalForeignMessage = true
               builderResult.optionalForeignMessage = value
           }
      }
      private var optionalForeignMessageBuilder_:ProtobufUnittest.ForeignMessage.Builder! {
           didSet {
              builderResult.hasOptionalForeignMessage = true
           }
      }
      public func getOptionalForeignMessageBuilder() -> ProtobufUnittest.ForeignMessage.Builder {
        if optionalForeignMessageBuilder_ == nil {
           optionalForeignMessageBuilder_ = ProtobufUnittest.ForeignMessage.Builder()
           builderResult.optionalForeignMessage = optionalForeignMessageBuilder_.getMessage()
           if optionalForeignMessage != nil {
              try! optionalForeignMessageBuilder_.mergeFrom(optionalForeignMessage)
           }
        }
        return optionalForeignMessageBuilder_
      }
      public func setOptionalForeignMessage(_ value:ProtobufUnittest.ForeignMessage!) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalForeignMessage = value
        return self
      }
      public func mergeOptionalForeignMessage(_ value:ProtobufUnittest.ForeignMessage) throws -> ProtobufUnittest.TestAllTypes.Builder {
        if builderResult.hasOptionalForeignMessage {
          builderResult.optionalForeignMessage = try ProtobufUnittest.ForeignMessage.builderWithPrototype(builderResult.optionalForeignMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalForeignMessage = value
        }
        builderResult.hasOptionalForeignMessage = true
        return self
      }
      public func clearOptionalForeignMessage() -> ProtobufUnittest.TestAllTypes.Builder {
        optionalForeignMessageBuilder_ = nil
        builderResult.hasOptionalForeignMessage = false
        builderResult.optionalForeignMessage = nil
        return self
      }
      public var hasOptionalImportMessage:Bool {
           get {
               return builderResult.hasOptionalImportMessage
           }
      }
      public var optionalImportMessage:ProtobufUnittestImport.ImportMessage! {
           get {
               if optionalImportMessageBuilder_ != nil {
                  builderResult.optionalImportMessage = optionalImportMessageBuilder_.getMessage()
               }
               return builderResult.optionalImportMessage
           }
           set (value) {
               builderResult.hasOptionalImportMessage = true
               builderResult.optionalImportMessage = value
           }
      }
      private var optionalImportMessageBuilder_:ProtobufUnittestImport.ImportMessage.Builder! {
           didSet {
              builderResult.hasOptionalImportMessage = true
           }
      }
      public func getOptionalImportMessageBuilder() -> ProtobufUnittestImport.ImportMessage.Builder {
        if optionalImportMessageBuilder_ == nil {
           optionalImportMessageBuilder_ = ProtobufUnittestImport.ImportMessage.Builder()
           builderResult.optionalImportMessage = optionalImportMessageBuilder_.getMessage()
           if optionalImportMessage != nil {
              try! optionalImportMessageBuilder_.mergeFrom(optionalImportMessage)
           }
        }
        return optionalImportMessageBuilder_
      }
      public func setOptionalImportMessage(_ value:ProtobufUnittestImport.ImportMessage!) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalImportMessage = value
        return self
      }
      public func mergeOptionalImportMessage(_ value:ProtobufUnittestImport.ImportMessage) throws -> ProtobufUnittest.TestAllTypes.Builder {
        if builderResult.hasOptionalImportMessage {
          builderResult.optionalImportMessage = try ProtobufUnittestImport.ImportMessage.builderWithPrototype(builderResult.optionalImportMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalImportMessage = value
        }
        builderResult.hasOptionalImportMessage = true
        return self
      }
      public func clearOptionalImportMessage() -> ProtobufUnittest.TestAllTypes.Builder {
        optionalImportMessageBuilder_ = nil
        builderResult.hasOptionalImportMessage = false
        builderResult.optionalImportMessage = nil
        return self
      }
        public var hasOptionalNestedEnum:Bool{
            get {
                return builderResult.hasOptionalNestedEnum
            }
        }
        public var optionalNestedEnum:ProtobufUnittest.TestAllTypes.NestedEnum {
            get {
                return builderResult.optionalNestedEnum
            }
            set (value) {
                builderResult.hasOptionalNestedEnum = true
                builderResult.optionalNestedEnum = value
            }
        }
        public func setOptionalNestedEnum(_ value:ProtobufUnittest.TestAllTypes.NestedEnum) -> ProtobufUnittest.TestAllTypes.Builder {
          self.optionalNestedEnum = value
          return self
        }
        public func clearOptionalNestedEnum() -> ProtobufUnittest.TestAllTypes.Builder {
           builderResult.hasOptionalNestedEnum = false
           builderResult.optionalNestedEnum = .Foo
           return self
        }
        public var hasOptionalForeignEnum:Bool{
            get {
                return builderResult.hasOptionalForeignEnum
            }
        }
        public var optionalForeignEnum:ProtobufUnittest.ForeignEnum {
            get {
                return builderResult.optionalForeignEnum
            }
            set (value) {
                builderResult.hasOptionalForeignEnum = true
                builderResult.optionalForeignEnum = value
            }
        }
        public func setOptionalForeignEnum(_ value:ProtobufUnittest.ForeignEnum) -> ProtobufUnittest.TestAllTypes.Builder {
          self.optionalForeignEnum = value
          return self
        }
        public func clearOptionalForeignEnum() -> ProtobufUnittest.TestAllTypes.Builder {
           builderResult.hasOptionalForeignEnum = false
           builderResult.optionalForeignEnum = .ForeignFoo
           return self
        }
        public var hasOptionalImportEnum:Bool{
            get {
                return builderResult.hasOptionalImportEnum
            }
        }
        public var optionalImportEnum:ProtobufUnittestImport.ImportEnum {
            get {
                return builderResult.optionalImportEnum
            }
            set (value) {
                builderResult.hasOptionalImportEnum = true
                builderResult.optionalImportEnum = value
            }
        }
        public func setOptionalImportEnum(_ value:ProtobufUnittestImport.ImportEnum) -> ProtobufUnittest.TestAllTypes.Builder {
          self.optionalImportEnum = value
          return self
        }
        public func clearOptionalImportEnum() -> ProtobufUnittest.TestAllTypes.Builder {
           builderResult.hasOptionalImportEnum = false
           builderResult.optionalImportEnum = .ImportFoo
           return self
        }
      public var hasOptionalStringPiece:Bool {
           get {
                return builderResult.hasOptionalStringPiece
           }
      }
      public var optionalStringPiece:String {
           get {
                return builderResult.optionalStringPiece
           }
           set (value) {
               builderResult.hasOptionalStringPiece = true
               builderResult.optionalStringPiece = value
           }
      }
      public func setOptionalStringPiece(_ value:String) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalStringPiece = value
        return self
      }
      public func clearOptionalStringPiece() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalStringPiece = false
           builderResult.optionalStringPiece = ""
           return self
      }
      public var hasOptionalCord:Bool {
           get {
                return builderResult.hasOptionalCord
           }
      }
      public var optionalCord:String {
           get {
                return builderResult.optionalCord
           }
           set (value) {
               builderResult.hasOptionalCord = true
               builderResult.optionalCord = value
           }
      }
      public func setOptionalCord(_ value:String) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalCord = value
        return self
      }
      public func clearOptionalCord() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalCord = false
           builderResult.optionalCord = ""
           return self
      }
      public var hasOptionalPublicImportMessage:Bool {
           get {
               return builderResult.hasOptionalPublicImportMessage
           }
      }
      public var optionalPublicImportMessage:ProtobufUnittestImport.PublicImportMessage! {
           get {
               if optionalPublicImportMessageBuilder_ != nil {
                  builderResult.optionalPublicImportMessage = optionalPublicImportMessageBuilder_.getMessage()
               }
               return builderResult.optionalPublicImportMessage
           }
           set (value) {
               builderResult.hasOptionalPublicImportMessage = true
               builderResult.optionalPublicImportMessage = value
           }
      }
      private var optionalPublicImportMessageBuilder_:ProtobufUnittestImport.PublicImportMessage.Builder! {
           didSet {
              builderResult.hasOptionalPublicImportMessage = true
           }
      }
      public func getOptionalPublicImportMessageBuilder() -> ProtobufUnittestImport.PublicImportMessage.Builder {
        if optionalPublicImportMessageBuilder_ == nil {
           optionalPublicImportMessageBuilder_ = ProtobufUnittestImport.PublicImportMessage.Builder()
           builderResult.optionalPublicImportMessage = optionalPublicImportMessageBuilder_.getMessage()
           if optionalPublicImportMessage != nil {
              try! optionalPublicImportMessageBuilder_.mergeFrom(optionalPublicImportMessage)
           }
        }
        return optionalPublicImportMessageBuilder_
      }
      public func setOptionalPublicImportMessage(_ value:ProtobufUnittestImport.PublicImportMessage!) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalPublicImportMessage = value
        return self
      }
      public func mergeOptionalPublicImportMessage(_ value:ProtobufUnittestImport.PublicImportMessage) throws -> ProtobufUnittest.TestAllTypes.Builder {
        if builderResult.hasOptionalPublicImportMessage {
          builderResult.optionalPublicImportMessage = try ProtobufUnittestImport.PublicImportMessage.builderWithPrototype(builderResult.optionalPublicImportMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalPublicImportMessage = value
        }
        builderResult.hasOptionalPublicImportMessage = true
        return self
      }
      public func clearOptionalPublicImportMessage() -> ProtobufUnittest.TestAllTypes.Builder {
        optionalPublicImportMessageBuilder_ = nil
        builderResult.hasOptionalPublicImportMessage = false
        builderResult.optionalPublicImportMessage = nil
        return self
      }
      public var hasOptionalLazyMessage:Bool {
           get {
               return builderResult.hasOptionalLazyMessage
           }
      }
      public var optionalLazyMessage:ProtobufUnittest.TestAllTypes.NestedMessage! {
           get {
               if optionalLazyMessageBuilder_ != nil {
                  builderResult.optionalLazyMessage = optionalLazyMessageBuilder_.getMessage()
               }
               return builderResult.optionalLazyMessage
           }
           set (value) {
               builderResult.hasOptionalLazyMessage = true
               builderResult.optionalLazyMessage = value
           }
      }
      private var optionalLazyMessageBuilder_:ProtobufUnittest.TestAllTypes.NestedMessage.Builder! {
           didSet {
              builderResult.hasOptionalLazyMessage = true
           }
      }
      public func getOptionalLazyMessageBuilder() -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
        if optionalLazyMessageBuilder_ == nil {
           optionalLazyMessageBuilder_ = ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
           builderResult.optionalLazyMessage = optionalLazyMessageBuilder_.getMessage()
           if optionalLazyMessage != nil {
              try! optionalLazyMessageBuilder_.mergeFrom(optionalLazyMessage)
           }
        }
        return optionalLazyMessageBuilder_
      }
      public func setOptionalLazyMessage(_ value:ProtobufUnittest.TestAllTypes.NestedMessage!) -> ProtobufUnittest.TestAllTypes.Builder {
        self.optionalLazyMessage = value
        return self
      }
      public func mergeOptionalLazyMessage(_ value:ProtobufUnittest.TestAllTypes.NestedMessage) throws -> ProtobufUnittest.TestAllTypes.Builder {
        if builderResult.hasOptionalLazyMessage {
          builderResult.optionalLazyMessage = try ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.optionalLazyMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalLazyMessage = value
        }
        builderResult.hasOptionalLazyMessage = true
        return self
      }
      public func clearOptionalLazyMessage() -> ProtobufUnittest.TestAllTypes.Builder {
        optionalLazyMessageBuilder_ = nil
        builderResult.hasOptionalLazyMessage = false
        builderResult.optionalLazyMessage = nil
        return self
      }
      public var repeatedInt32:Array<Int32> {
           get {
               return builderResult.repeatedInt32
           }
           set (array) {
               builderResult.repeatedInt32 = array
           }
      }
      public func setRepeatedInt32(_ value:Array<Int32>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedInt32 = value
        return self
      }
      public func clearRepeatedInt32() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedInt32.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedInt64:Array<Int64> {
           get {
               return builderResult.repeatedInt64
           }
           set (array) {
               builderResult.repeatedInt64 = array
           }
      }
      public func setRepeatedInt64(_ value:Array<Int64>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedInt64 = value
        return self
      }
      public func clearRepeatedInt64() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedInt64.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedUint32:Array<UInt32> {
           get {
               return builderResult.repeatedUint32
           }
           set (array) {
               builderResult.repeatedUint32 = array
           }
      }
      public func setRepeatedUint32(_ value:Array<UInt32>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedUint32 = value
        return self
      }
      public func clearRepeatedUint32() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedUint32.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedUint64:Array<UInt64> {
           get {
               return builderResult.repeatedUint64
           }
           set (array) {
               builderResult.repeatedUint64 = array
           }
      }
      public func setRepeatedUint64(_ value:Array<UInt64>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedUint64 = value
        return self
      }
      public func clearRepeatedUint64() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedUint64.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedSint32:Array<Int32> {
           get {
               return builderResult.repeatedSint32
           }
           set (array) {
               builderResult.repeatedSint32 = array
           }
      }
      public func setRepeatedSint32(_ value:Array<Int32>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedSint32 = value
        return self
      }
      public func clearRepeatedSint32() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedSint32.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedSint64:Array<Int64> {
           get {
               return builderResult.repeatedSint64
           }
           set (array) {
               builderResult.repeatedSint64 = array
           }
      }
      public func setRepeatedSint64(_ value:Array<Int64>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedSint64 = value
        return self
      }
      public func clearRepeatedSint64() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedSint64.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedFixed32:Array<UInt32> {
           get {
               return builderResult.repeatedFixed32
           }
           set (array) {
               builderResult.repeatedFixed32 = array
           }
      }
      public func setRepeatedFixed32(_ value:Array<UInt32>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedFixed32 = value
        return self
      }
      public func clearRepeatedFixed32() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedFixed32.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedFixed64:Array<UInt64> {
           get {
               return builderResult.repeatedFixed64
           }
           set (array) {
               builderResult.repeatedFixed64 = array
           }
      }
      public func setRepeatedFixed64(_ value:Array<UInt64>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedFixed64 = value
        return self
      }
      public func clearRepeatedFixed64() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedFixed64.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedSfixed32:Array<Int32> {
           get {
               return builderResult.repeatedSfixed32
           }
           set (array) {
               builderResult.repeatedSfixed32 = array
           }
      }
      public func setRepeatedSfixed32(_ value:Array<Int32>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedSfixed32 = value
        return self
      }
      public func clearRepeatedSfixed32() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedSfixed32.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedSfixed64:Array<Int64> {
           get {
               return builderResult.repeatedSfixed64
           }
           set (array) {
               builderResult.repeatedSfixed64 = array
           }
      }
      public func setRepeatedSfixed64(_ value:Array<Int64>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedSfixed64 = value
        return self
      }
      public func clearRepeatedSfixed64() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedSfixed64.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedFloat:Array<Float> {
           get {
               return builderResult.repeatedFloat
           }
           set (array) {
               builderResult.repeatedFloat = array
           }
      }
      public func setRepeatedFloat(_ value:Array<Float>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedFloat = value
        return self
      }
      public func clearRepeatedFloat() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedFloat.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedDouble:Array<Double> {
           get {
               return builderResult.repeatedDouble
           }
           set (array) {
               builderResult.repeatedDouble = array
           }
      }
      public func setRepeatedDouble(_ value:Array<Double>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedDouble = value
        return self
      }
      public func clearRepeatedDouble() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedDouble.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedBool:Array<Bool> {
           get {
               return builderResult.repeatedBool
           }
           set (array) {
               builderResult.repeatedBool = array
           }
      }
      public func setRepeatedBool(_ value:Array<Bool>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedBool = value
        return self
      }
      public func clearRepeatedBool() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedBool.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedString:Array<String> {
           get {
               return builderResult.repeatedString
           }
           set (array) {
               builderResult.repeatedString = array
           }
      }
      public func setRepeatedString(_ value:Array<String>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedString = value
        return self
      }
      public func clearRepeatedString() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedString.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedBytes:Array<NSData> {
           get {
               return builderResult.repeatedBytes
           }
           set (array) {
               builderResult.repeatedBytes = array
           }
      }
      public func setRepeatedBytes(_ value:Array<NSData>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedBytes = value
        return self
      }
      public func clearRepeatedBytes() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedBytes.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedGroup:Array<ProtobufUnittest.TestAllTypes.RepeatedGroup> {
           get {
               return builderResult.repeatedGroup
           }
           set (value) {
               builderResult.repeatedGroup = value
           }
      }
      public func setRepeatedGroup(_ value:Array<ProtobufUnittest.TestAllTypes.RepeatedGroup>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedGroup = value
        return self
      }
      public func clearRepeatedGroup() -> ProtobufUnittest.TestAllTypes.Builder {
        builderResult.repeatedGroup.removeAll(keepingCapacity: false)
        return self
      }
      public var repeatedNestedMessage:Array<ProtobufUnittest.TestAllTypes.NestedMessage> {
           get {
               return builderResult.repeatedNestedMessage
           }
           set (value) {
               builderResult.repeatedNestedMessage = value
           }
      }
      public func setRepeatedNestedMessage(_ value:Array<ProtobufUnittest.TestAllTypes.NestedMessage>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedNestedMessage = value
        return self
      }
      public func clearRepeatedNestedMessage() -> ProtobufUnittest.TestAllTypes.Builder {
        builderResult.repeatedNestedMessage.removeAll(keepingCapacity: false)
        return self
      }
      public var repeatedForeignMessage:Array<ProtobufUnittest.ForeignMessage> {
           get {
               return builderResult.repeatedForeignMessage
           }
           set (value) {
               builderResult.repeatedForeignMessage = value
           }
      }
      public func setRepeatedForeignMessage(_ value:Array<ProtobufUnittest.ForeignMessage>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedForeignMessage = value
        return self
      }
      public func clearRepeatedForeignMessage() -> ProtobufUnittest.TestAllTypes.Builder {
        builderResult.repeatedForeignMessage.removeAll(keepingCapacity: false)
        return self
      }
      public var repeatedImportMessage:Array<ProtobufUnittestImport.ImportMessage> {
           get {
               return builderResult.repeatedImportMessage
           }
           set (value) {
               builderResult.repeatedImportMessage = value
           }
      }
      public func setRepeatedImportMessage(_ value:Array<ProtobufUnittestImport.ImportMessage>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedImportMessage = value
        return self
      }
      public func clearRepeatedImportMessage() -> ProtobufUnittest.TestAllTypes.Builder {
        builderResult.repeatedImportMessage.removeAll(keepingCapacity: false)
        return self
      }
      public var repeatedNestedEnum:Array<ProtobufUnittest.TestAllTypes.NestedEnum> {
          get {
              return builderResult.repeatedNestedEnum
          }
          set (value) {
              builderResult.repeatedNestedEnum = value
          }
      }
      public func setRepeatedNestedEnum(_ value:Array<ProtobufUnittest.TestAllTypes.NestedEnum>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedNestedEnum = value
        return self
      }
      public func clearRepeatedNestedEnum() -> ProtobufUnittest.TestAllTypes.Builder {
        builderResult.repeatedNestedEnum.removeAll(keepingCapacity: false)
        return self
      }
      public var repeatedForeignEnum:Array<ProtobufUnittest.ForeignEnum> {
          get {
              return builderResult.repeatedForeignEnum
          }
          set (value) {
              builderResult.repeatedForeignEnum = value
          }
      }
      public func setRepeatedForeignEnum(_ value:Array<ProtobufUnittest.ForeignEnum>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedForeignEnum = value
        return self
      }
      public func clearRepeatedForeignEnum() -> ProtobufUnittest.TestAllTypes.Builder {
        builderResult.repeatedForeignEnum.removeAll(keepingCapacity: false)
        return self
      }
      public var repeatedImportEnum:Array<ProtobufUnittestImport.ImportEnum> {
          get {
              return builderResult.repeatedImportEnum
          }
          set (value) {
              builderResult.repeatedImportEnum = value
          }
      }
      public func setRepeatedImportEnum(_ value:Array<ProtobufUnittestImport.ImportEnum>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedImportEnum = value
        return self
      }
      public func clearRepeatedImportEnum() -> ProtobufUnittest.TestAllTypes.Builder {
        builderResult.repeatedImportEnum.removeAll(keepingCapacity: false)
        return self
      }
      public var repeatedStringPiece:Array<String> {
           get {
               return builderResult.repeatedStringPiece
           }
           set (array) {
               builderResult.repeatedStringPiece = array
           }
      }
      public func setRepeatedStringPiece(_ value:Array<String>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedStringPiece = value
        return self
      }
      public func clearRepeatedStringPiece() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedStringPiece.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedCord:Array<String> {
           get {
               return builderResult.repeatedCord
           }
           set (array) {
               builderResult.repeatedCord = array
           }
      }
      public func setRepeatedCord(_ value:Array<String>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedCord = value
        return self
      }
      public func clearRepeatedCord() -> ProtobufUnittest.TestAllTypes.Builder {
         builderResult.repeatedCord.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedLazyMessage:Array<ProtobufUnittest.TestAllTypes.NestedMessage> {
           get {
               return builderResult.repeatedLazyMessage
           }
           set (value) {
               builderResult.repeatedLazyMessage = value
           }
      }
      public func setRepeatedLazyMessage(_ value:Array<ProtobufUnittest.TestAllTypes.NestedMessage>) -> ProtobufUnittest.TestAllTypes.Builder {
        self.repeatedLazyMessage = value
        return self
      }
      public func clearRepeatedLazyMessage() -> ProtobufUnittest.TestAllTypes.Builder {
        builderResult.repeatedLazyMessage.removeAll(keepingCapacity: false)
        return self
      }
      public var hasDefaultInt32:Bool {
           get {
                return builderResult.hasDefaultInt32
           }
      }
      public var defaultInt32:Int32 {
           get {
                return builderResult.defaultInt32
           }
           set (value) {
               builderResult.hasDefaultInt32 = true
               builderResult.defaultInt32 = value
           }
      }
      public func setDefaultInt32(_ value:Int32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultInt32 = value
        return self
      }
      public func clearDefaultInt32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultInt32 = false
           builderResult.defaultInt32 = Int32(41)
           return self
      }
      public var hasDefaultInt64:Bool {
           get {
                return builderResult.hasDefaultInt64
           }
      }
      public var defaultInt64:Int64 {
           get {
                return builderResult.defaultInt64
           }
           set (value) {
               builderResult.hasDefaultInt64 = true
               builderResult.defaultInt64 = value
           }
      }
      public func setDefaultInt64(_ value:Int64) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultInt64 = value
        return self
      }
      public func clearDefaultInt64() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultInt64 = false
           builderResult.defaultInt64 = Int64(42)
           return self
      }
      public var hasDefaultUint32:Bool {
           get {
                return builderResult.hasDefaultUint32
           }
      }
      public var defaultUint32:UInt32 {
           get {
                return builderResult.defaultUint32
           }
           set (value) {
               builderResult.hasDefaultUint32 = true
               builderResult.defaultUint32 = value
           }
      }
      public func setDefaultUint32(_ value:UInt32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultUint32 = value
        return self
      }
      public func clearDefaultUint32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultUint32 = false
           builderResult.defaultUint32 = UInt32(43)
           return self
      }
      public var hasDefaultUint64:Bool {
           get {
                return builderResult.hasDefaultUint64
           }
      }
      public var defaultUint64:UInt64 {
           get {
                return builderResult.defaultUint64
           }
           set (value) {
               builderResult.hasDefaultUint64 = true
               builderResult.defaultUint64 = value
           }
      }
      public func setDefaultUint64(_ value:UInt64) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultUint64 = value
        return self
      }
      public func clearDefaultUint64() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultUint64 = false
           builderResult.defaultUint64 = UInt64(44)
           return self
      }
      public var hasDefaultSint32:Bool {
           get {
                return builderResult.hasDefaultSint32
           }
      }
      public var defaultSint32:Int32 {
           get {
                return builderResult.defaultSint32
           }
           set (value) {
               builderResult.hasDefaultSint32 = true
               builderResult.defaultSint32 = value
           }
      }
      public func setDefaultSint32(_ value:Int32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultSint32 = value
        return self
      }
      public func clearDefaultSint32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultSint32 = false
           builderResult.defaultSint32 = Int32(-45)
           return self
      }
      public var hasDefaultSint64:Bool {
           get {
                return builderResult.hasDefaultSint64
           }
      }
      public var defaultSint64:Int64 {
           get {
                return builderResult.defaultSint64
           }
           set (value) {
               builderResult.hasDefaultSint64 = true
               builderResult.defaultSint64 = value
           }
      }
      public func setDefaultSint64(_ value:Int64) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultSint64 = value
        return self
      }
      public func clearDefaultSint64() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultSint64 = false
           builderResult.defaultSint64 = Int64(46)
           return self
      }
      public var hasDefaultFixed32:Bool {
           get {
                return builderResult.hasDefaultFixed32
           }
      }
      public var defaultFixed32:UInt32 {
           get {
                return builderResult.defaultFixed32
           }
           set (value) {
               builderResult.hasDefaultFixed32 = true
               builderResult.defaultFixed32 = value
           }
      }
      public func setDefaultFixed32(_ value:UInt32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultFixed32 = value
        return self
      }
      public func clearDefaultFixed32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultFixed32 = false
           builderResult.defaultFixed32 = UInt32(47)
           return self
      }
      public var hasDefaultFixed64:Bool {
           get {
                return builderResult.hasDefaultFixed64
           }
      }
      public var defaultFixed64:UInt64 {
           get {
                return builderResult.defaultFixed64
           }
           set (value) {
               builderResult.hasDefaultFixed64 = true
               builderResult.defaultFixed64 = value
           }
      }
      public func setDefaultFixed64(_ value:UInt64) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultFixed64 = value
        return self
      }
      public func clearDefaultFixed64() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultFixed64 = false
           builderResult.defaultFixed64 = UInt64(48)
           return self
      }
      public var hasDefaultSfixed32:Bool {
           get {
                return builderResult.hasDefaultSfixed32
           }
      }
      public var defaultSfixed32:Int32 {
           get {
                return builderResult.defaultSfixed32
           }
           set (value) {
               builderResult.hasDefaultSfixed32 = true
               builderResult.defaultSfixed32 = value
           }
      }
      public func setDefaultSfixed32(_ value:Int32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultSfixed32 = value
        return self
      }
      public func clearDefaultSfixed32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultSfixed32 = false
           builderResult.defaultSfixed32 = Int32(49)
           return self
      }
      public var hasDefaultSfixed64:Bool {
           get {
                return builderResult.hasDefaultSfixed64
           }
      }
      public var defaultSfixed64:Int64 {
           get {
                return builderResult.defaultSfixed64
           }
           set (value) {
               builderResult.hasDefaultSfixed64 = true
               builderResult.defaultSfixed64 = value
           }
      }
      public func setDefaultSfixed64(_ value:Int64) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultSfixed64 = value
        return self
      }
      public func clearDefaultSfixed64() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultSfixed64 = false
           builderResult.defaultSfixed64 = Int64(-50)
           return self
      }
      public var hasDefaultFloat:Bool {
           get {
                return builderResult.hasDefaultFloat
           }
      }
      public var defaultFloat:Float {
           get {
                return builderResult.defaultFloat
           }
           set (value) {
               builderResult.hasDefaultFloat = true
               builderResult.defaultFloat = value
           }
      }
      public func setDefaultFloat(_ value:Float) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultFloat = value
        return self
      }
      public func clearDefaultFloat() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultFloat = false
           builderResult.defaultFloat = Float(51.5)
           return self
      }
      public var hasDefaultDouble:Bool {
           get {
                return builderResult.hasDefaultDouble
           }
      }
      public var defaultDouble:Double {
           get {
                return builderResult.defaultDouble
           }
           set (value) {
               builderResult.hasDefaultDouble = true
               builderResult.defaultDouble = value
           }
      }
      public func setDefaultDouble(_ value:Double) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultDouble = value
        return self
      }
      public func clearDefaultDouble() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultDouble = false
           builderResult.defaultDouble = Double(52000)
           return self
      }
      public var hasDefaultBool:Bool {
           get {
                return builderResult.hasDefaultBool
           }
      }
      public var defaultBool:Bool {
           get {
                return builderResult.defaultBool
           }
           set (value) {
               builderResult.hasDefaultBool = true
               builderResult.defaultBool = value
           }
      }
      public func setDefaultBool(_ value:Bool) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultBool = value
        return self
      }
      public func clearDefaultBool() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultBool = false
           builderResult.defaultBool = true
           return self
      }
      public var hasDefaultString:Bool {
           get {
                return builderResult.hasDefaultString
           }
      }
      public var defaultString:String {
           get {
                return builderResult.defaultString
           }
           set (value) {
               builderResult.hasDefaultString = true
               builderResult.defaultString = value
           }
      }
      public func setDefaultString(_ value:String) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultString = value
        return self
      }
      public func clearDefaultString() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultString = false
           builderResult.defaultString = "hello"
           return self
      }
      public var hasDefaultBytes:Bool {
           get {
                return builderResult.hasDefaultBytes
           }
      }
      public var defaultBytes:NSData {
           get {
                return builderResult.defaultBytes
           }
           set (value) {
               builderResult.hasDefaultBytes = true
               builderResult.defaultBytes = value
           }
      }
      public func setDefaultBytes(_ value:NSData) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultBytes = value
        return self
      }
      public func clearDefaultBytes() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultBytes = false
           builderResult.defaultBytes = NSData(bytes:([UInt8]() + "world".utf8), length:5)
           return self
      }
        public var hasDefaultNestedEnum:Bool{
            get {
                return builderResult.hasDefaultNestedEnum
            }
        }
        public var defaultNestedEnum:ProtobufUnittest.TestAllTypes.NestedEnum {
            get {
                return builderResult.defaultNestedEnum
            }
            set (value) {
                builderResult.hasDefaultNestedEnum = true
                builderResult.defaultNestedEnum = value
            }
        }
        public func setDefaultNestedEnum(_ value:ProtobufUnittest.TestAllTypes.NestedEnum) -> ProtobufUnittest.TestAllTypes.Builder {
          self.defaultNestedEnum = value
          return self
        }
        public func clearDefaultNestedEnum() -> ProtobufUnittest.TestAllTypes.Builder {
           builderResult.hasDefaultNestedEnum = false
           builderResult.defaultNestedEnum = .Bar
           return self
        }
        public var hasDefaultForeignEnum:Bool{
            get {
                return builderResult.hasDefaultForeignEnum
            }
        }
        public var defaultForeignEnum:ProtobufUnittest.ForeignEnum {
            get {
                return builderResult.defaultForeignEnum
            }
            set (value) {
                builderResult.hasDefaultForeignEnum = true
                builderResult.defaultForeignEnum = value
            }
        }
        public func setDefaultForeignEnum(_ value:ProtobufUnittest.ForeignEnum) -> ProtobufUnittest.TestAllTypes.Builder {
          self.defaultForeignEnum = value
          return self
        }
        public func clearDefaultForeignEnum() -> ProtobufUnittest.TestAllTypes.Builder {
           builderResult.hasDefaultForeignEnum = false
           builderResult.defaultForeignEnum = .ForeignBar
           return self
        }
        public var hasDefaultImportEnum:Bool{
            get {
                return builderResult.hasDefaultImportEnum
            }
        }
        public var defaultImportEnum:ProtobufUnittestImport.ImportEnum {
            get {
                return builderResult.defaultImportEnum
            }
            set (value) {
                builderResult.hasDefaultImportEnum = true
                builderResult.defaultImportEnum = value
            }
        }
        public func setDefaultImportEnum(_ value:ProtobufUnittestImport.ImportEnum) -> ProtobufUnittest.TestAllTypes.Builder {
          self.defaultImportEnum = value
          return self
        }
        public func clearDefaultImportEnum() -> ProtobufUnittest.TestAllTypes.Builder {
           builderResult.hasDefaultImportEnum = false
           builderResult.defaultImportEnum = .ImportBar
           return self
        }
      public var hasDefaultStringPiece:Bool {
           get {
                return builderResult.hasDefaultStringPiece
           }
      }
      public var defaultStringPiece:String {
           get {
                return builderResult.defaultStringPiece
           }
           set (value) {
               builderResult.hasDefaultStringPiece = true
               builderResult.defaultStringPiece = value
           }
      }
      public func setDefaultStringPiece(_ value:String) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultStringPiece = value
        return self
      }
      public func clearDefaultStringPiece() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultStringPiece = false
           builderResult.defaultStringPiece = "abc"
           return self
      }
      public var hasDefaultCord:Bool {
           get {
                return builderResult.hasDefaultCord
           }
      }
      public var defaultCord:String {
           get {
                return builderResult.defaultCord
           }
           set (value) {
               builderResult.hasDefaultCord = true
               builderResult.defaultCord = value
           }
      }
      public func setDefaultCord(_ value:String) -> ProtobufUnittest.TestAllTypes.Builder {
        self.defaultCord = value
        return self
      }
      public func clearDefaultCord() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasDefaultCord = false
           builderResult.defaultCord = "123"
           return self
      }
      public var hasOneofUint32:Bool {
           get {
                return builderResult.hasOneofUint32
           }
      }
      public var oneofUint32:UInt32 {
           get {
                return builderResult.oneofUint32
           }
           set (value) {
               builderResult.hasOneofUint32 = true
               builderResult.oneofUint32 = value
           }
      }
      public func setOneofUint32(_ value:UInt32) -> ProtobufUnittest.TestAllTypes.Builder {
        self.oneofUint32 = value
        return self
      }
      public func clearOneofUint32() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOneofUint32 = false
           builderResult.oneofUint32 = UInt32(0)
           return self
      }
      public var hasOneofNestedMessage:Bool {
           get {
               return builderResult.hasOneofNestedMessage
           }
      }
      public var oneofNestedMessage:ProtobufUnittest.TestAllTypes.NestedMessage! {
           get {
               if oneofNestedMessageBuilder_ != nil {
                  builderResult.oneofNestedMessage = oneofNestedMessageBuilder_.getMessage()
               }
               return builderResult.oneofNestedMessage
           }
           set (value) {
               builderResult.hasOneofNestedMessage = true
               builderResult.oneofNestedMessage = value
           }
      }
      private var oneofNestedMessageBuilder_:ProtobufUnittest.TestAllTypes.NestedMessage.Builder! {
           didSet {
              builderResult.hasOneofNestedMessage = true
           }
      }
      public func getOneofNestedMessageBuilder() -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
        if oneofNestedMessageBuilder_ == nil {
           oneofNestedMessageBuilder_ = ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
           builderResult.oneofNestedMessage = oneofNestedMessageBuilder_.getMessage()
           if oneofNestedMessage != nil {
              try! oneofNestedMessageBuilder_.mergeFrom(oneofNestedMessage)
           }
        }
        return oneofNestedMessageBuilder_
      }
      public func setOneofNestedMessage(_ value:ProtobufUnittest.TestAllTypes.NestedMessage!) -> ProtobufUnittest.TestAllTypes.Builder {
        self.oneofNestedMessage = value
        return self
      }
      public func mergeOneofNestedMessage(_ value:ProtobufUnittest.TestAllTypes.NestedMessage) throws -> ProtobufUnittest.TestAllTypes.Builder {
        if builderResult.hasOneofNestedMessage {
          builderResult.oneofNestedMessage = try ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.oneofNestedMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.oneofNestedMessage = value
        }
        builderResult.hasOneofNestedMessage = true
        return self
      }
      public func clearOneofNestedMessage() -> ProtobufUnittest.TestAllTypes.Builder {
        oneofNestedMessageBuilder_ = nil
        builderResult.hasOneofNestedMessage = false
        builderResult.oneofNestedMessage = nil
        return self
      }
      public var hasOneofString:Bool {
           get {
                return builderResult.hasOneofString
           }
      }
      public var oneofString:String {
           get {
                return builderResult.oneofString
           }
           set (value) {
               builderResult.hasOneofString = true
               builderResult.oneofString = value
           }
      }
      public func setOneofString(_ value:String) -> ProtobufUnittest.TestAllTypes.Builder {
        self.oneofString = value
        return self
      }
      public func clearOneofString() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOneofString = false
           builderResult.oneofString = ""
           return self
      }
      public var hasOneofBytes:Bool {
           get {
                return builderResult.hasOneofBytes
           }
      }
      public var oneofBytes:NSData {
           get {
                return builderResult.oneofBytes
           }
           set (value) {
               builderResult.hasOneofBytes = true
               builderResult.oneofBytes = value
           }
      }
      public func setOneofBytes(_ value:NSData) -> ProtobufUnittest.TestAllTypes.Builder {
        self.oneofBytes = value
        return self
      }
      public func clearOneofBytes() -> ProtobufUnittest.TestAllTypes.Builder{
           builderResult.hasOneofBytes = false
           builderResult.oneofBytes = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestAllTypes.Builder {
        builderResult = ProtobufUnittest.TestAllTypes()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestAllTypes.Builder {
        return try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestAllTypes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestAllTypes {
        let returnMe:ProtobufUnittest.TestAllTypes = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestAllTypes.Builder {
        if other == ProtobufUnittest.TestAllTypes() {
         return self
        }
        if other.hasOptionalInt32 {
             optionalInt32 = other.optionalInt32
        }
        if other.hasOptionalInt64 {
             optionalInt64 = other.optionalInt64
        }
        if other.hasOptionalUint32 {
             optionalUint32 = other.optionalUint32
        }
        if other.hasOptionalUint64 {
             optionalUint64 = other.optionalUint64
        }
        if other.hasOptionalSint32 {
             optionalSint32 = other.optionalSint32
        }
        if other.hasOptionalSint64 {
             optionalSint64 = other.optionalSint64
        }
        if other.hasOptionalFixed32 {
             optionalFixed32 = other.optionalFixed32
        }
        if other.hasOptionalFixed64 {
             optionalFixed64 = other.optionalFixed64
        }
        if other.hasOptionalSfixed32 {
             optionalSfixed32 = other.optionalSfixed32
        }
        if other.hasOptionalSfixed64 {
             optionalSfixed64 = other.optionalSfixed64
        }
        if other.hasOptionalFloat {
             optionalFloat = other.optionalFloat
        }
        if other.hasOptionalDouble {
             optionalDouble = other.optionalDouble
        }
        if other.hasOptionalBool {
             optionalBool = other.optionalBool
        }
        if other.hasOptionalString {
             optionalString = other.optionalString
        }
        if other.hasOptionalBytes {
             optionalBytes = other.optionalBytes
        }
        if (other.hasOptionalGroup) {
            try mergeOptionalGroup(other.optionalGroup)
        }
        if (other.hasOptionalNestedMessage) {
            try mergeOptionalNestedMessage(other.optionalNestedMessage)
        }
        if (other.hasOptionalForeignMessage) {
            try mergeOptionalForeignMessage(other.optionalForeignMessage)
        }
        if (other.hasOptionalImportMessage) {
            try mergeOptionalImportMessage(other.optionalImportMessage)
        }
        if other.hasOptionalNestedEnum {
             optionalNestedEnum = other.optionalNestedEnum
        }
        if other.hasOptionalForeignEnum {
             optionalForeignEnum = other.optionalForeignEnum
        }
        if other.hasOptionalImportEnum {
             optionalImportEnum = other.optionalImportEnum
        }
        if other.hasOptionalStringPiece {
             optionalStringPiece = other.optionalStringPiece
        }
        if other.hasOptionalCord {
             optionalCord = other.optionalCord
        }
        if (other.hasOptionalPublicImportMessage) {
            try mergeOptionalPublicImportMessage(other.optionalPublicImportMessage)
        }
        if (other.hasOptionalLazyMessage) {
            try mergeOptionalLazyMessage(other.optionalLazyMessage)
        }
        if !other.repeatedInt32.isEmpty {
            builderResult.repeatedInt32 += other.repeatedInt32
        }
        if !other.repeatedInt64.isEmpty {
            builderResult.repeatedInt64 += other.repeatedInt64
        }
        if !other.repeatedUint32.isEmpty {
            builderResult.repeatedUint32 += other.repeatedUint32
        }
        if !other.repeatedUint64.isEmpty {
            builderResult.repeatedUint64 += other.repeatedUint64
        }
        if !other.repeatedSint32.isEmpty {
            builderResult.repeatedSint32 += other.repeatedSint32
        }
        if !other.repeatedSint64.isEmpty {
            builderResult.repeatedSint64 += other.repeatedSint64
        }
        if !other.repeatedFixed32.isEmpty {
            builderResult.repeatedFixed32 += other.repeatedFixed32
        }
        if !other.repeatedFixed64.isEmpty {
            builderResult.repeatedFixed64 += other.repeatedFixed64
        }
        if !other.repeatedSfixed32.isEmpty {
            builderResult.repeatedSfixed32 += other.repeatedSfixed32
        }
        if !other.repeatedSfixed64.isEmpty {
            builderResult.repeatedSfixed64 += other.repeatedSfixed64
        }
        if !other.repeatedFloat.isEmpty {
            builderResult.repeatedFloat += other.repeatedFloat
        }
        if !other.repeatedDouble.isEmpty {
            builderResult.repeatedDouble += other.repeatedDouble
        }
        if !other.repeatedBool.isEmpty {
            builderResult.repeatedBool += other.repeatedBool
        }
        if !other.repeatedString.isEmpty {
            builderResult.repeatedString += other.repeatedString
        }
        if !other.repeatedBytes.isEmpty {
            builderResult.repeatedBytes += other.repeatedBytes
        }
        if !other.repeatedGroup.isEmpty  {
           builderResult.repeatedGroup += other.repeatedGroup
        }
        if !other.repeatedNestedMessage.isEmpty  {
           builderResult.repeatedNestedMessage += other.repeatedNestedMessage
        }
        if !other.repeatedForeignMessage.isEmpty  {
           builderResult.repeatedForeignMessage += other.repeatedForeignMessage
        }
        if !other.repeatedImportMessage.isEmpty  {
           builderResult.repeatedImportMessage += other.repeatedImportMessage
        }
        if !other.repeatedNestedEnum.isEmpty {
           builderResult.repeatedNestedEnum += other.repeatedNestedEnum
        }
        if !other.repeatedForeignEnum.isEmpty {
           builderResult.repeatedForeignEnum += other.repeatedForeignEnum
        }
        if !other.repeatedImportEnum.isEmpty {
           builderResult.repeatedImportEnum += other.repeatedImportEnum
        }
        if !other.repeatedStringPiece.isEmpty {
            builderResult.repeatedStringPiece += other.repeatedStringPiece
        }
        if !other.repeatedCord.isEmpty {
            builderResult.repeatedCord += other.repeatedCord
        }
        if !other.repeatedLazyMessage.isEmpty  {
           builderResult.repeatedLazyMessage += other.repeatedLazyMessage
        }
        if other.hasDefaultInt32 {
             defaultInt32 = other.defaultInt32
        }
        if other.hasDefaultInt64 {
             defaultInt64 = other.defaultInt64
        }
        if other.hasDefaultUint32 {
             defaultUint32 = other.defaultUint32
        }
        if other.hasDefaultUint64 {
             defaultUint64 = other.defaultUint64
        }
        if other.hasDefaultSint32 {
             defaultSint32 = other.defaultSint32
        }
        if other.hasDefaultSint64 {
             defaultSint64 = other.defaultSint64
        }
        if other.hasDefaultFixed32 {
             defaultFixed32 = other.defaultFixed32
        }
        if other.hasDefaultFixed64 {
             defaultFixed64 = other.defaultFixed64
        }
        if other.hasDefaultSfixed32 {
             defaultSfixed32 = other.defaultSfixed32
        }
        if other.hasDefaultSfixed64 {
             defaultSfixed64 = other.defaultSfixed64
        }
        if other.hasDefaultFloat {
             defaultFloat = other.defaultFloat
        }
        if other.hasDefaultDouble {
             defaultDouble = other.defaultDouble
        }
        if other.hasDefaultBool {
             defaultBool = other.defaultBool
        }
        if other.hasDefaultString {
             defaultString = other.defaultString
        }
        if other.hasDefaultBytes {
             defaultBytes = other.defaultBytes
        }
        if other.hasDefaultNestedEnum {
             defaultNestedEnum = other.defaultNestedEnum
        }
        if other.hasDefaultForeignEnum {
             defaultForeignEnum = other.defaultForeignEnum
        }
        if other.hasDefaultImportEnum {
             defaultImportEnum = other.defaultImportEnum
        }
        if other.hasDefaultStringPiece {
             defaultStringPiece = other.defaultStringPiece
        }
        if other.hasDefaultCord {
             defaultCord = other.defaultCord
        }
        if other.hasOneofUint32 {
             oneofUint32 = other.oneofUint32
        }
        if (other.hasOneofNestedMessage) {
            try mergeOneofNestedMessage(other.oneofNestedMessage)
        }
        if other.hasOneofString {
             oneofString = other.oneofString
        }
        if other.hasOneofBytes {
             oneofBytes = other.oneofBytes
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestAllTypes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllTypes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            optionalInt32 = try input.readInt32()

          case 16 :
            optionalInt64 = try input.readInt64()

          case 24 :
            optionalUint32 = try input.readUInt32()

          case 32 :
            optionalUint64 = try input.readUInt64()

          case 40 :
            optionalSint32 = try input.readSInt32()

          case 48 :
            optionalSint64 = try input.readSInt64()

          case 61 :
            optionalFixed32 = try input.readFixed32()

          case 65 :
            optionalFixed64 = try input.readFixed64()

          case 77 :
            optionalSfixed32 = try input.readSFixed32()

          case 81 :
            optionalSfixed64 = try input.readSFixed64()

          case 93 :
            optionalFloat = try input.readFloat()

          case 97 :
            optionalDouble = try input.readDouble()

          case 104 :
            optionalBool = try input.readBool()

          case 114 :
            optionalString = try input.readString()

          case 122 :
            optionalBytes = try input.readData()

          case 131 :
            let subBuilder:ProtobufUnittest.TestAllTypes.OptionalGroup.Builder = ProtobufUnittest.TestAllTypes.OptionalGroup.Builder()
            if hasOptionalGroup {
              try subBuilder.mergeFrom(optionalGroup)
            }
            try input.readGroup(16, builder:subBuilder, extensionRegistry:extensionRegistry)
            optionalGroup = subBuilder.buildPartial()

          case 146 :
            let subBuilder:ProtobufUnittest.TestAllTypes.NestedMessage.Builder = ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
            if hasOptionalNestedMessage {
              try subBuilder.mergeFrom(optionalNestedMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalNestedMessage = subBuilder.buildPartial()

          case 154 :
            let subBuilder:ProtobufUnittest.ForeignMessage.Builder = ProtobufUnittest.ForeignMessage.Builder()
            if hasOptionalForeignMessage {
              try subBuilder.mergeFrom(optionalForeignMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalForeignMessage = subBuilder.buildPartial()

          case 162 :
            let subBuilder:ProtobufUnittestImport.ImportMessage.Builder = ProtobufUnittestImport.ImportMessage.Builder()
            if hasOptionalImportMessage {
              try subBuilder.mergeFrom(optionalImportMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalImportMessage = subBuilder.buildPartial()

          case 168 :
            let valueIntoptionalNestedEnum = try input.readEnum()
            if let enumsoptionalNestedEnum = ProtobufUnittest.TestAllTypes.NestedEnum(rawValue:valueIntoptionalNestedEnum){
                 optionalNestedEnum = enumsoptionalNestedEnum
            } else {
                 try unknownFieldsBuilder.mergeVarintField(21, value:Int64(valueIntoptionalNestedEnum))
            }

          case 176 :
            let valueIntoptionalForeignEnum = try input.readEnum()
            if let enumsoptionalForeignEnum = ProtobufUnittest.ForeignEnum(rawValue:valueIntoptionalForeignEnum){
                 optionalForeignEnum = enumsoptionalForeignEnum
            } else {
                 try unknownFieldsBuilder.mergeVarintField(22, value:Int64(valueIntoptionalForeignEnum))
            }

          case 184 :
            let valueIntoptionalImportEnum = try input.readEnum()
            if let enumsoptionalImportEnum = ProtobufUnittestImport.ImportEnum(rawValue:valueIntoptionalImportEnum){
                 optionalImportEnum = enumsoptionalImportEnum
            } else {
                 try unknownFieldsBuilder.mergeVarintField(23, value:Int64(valueIntoptionalImportEnum))
            }

          case 194 :
            optionalStringPiece = try input.readString()

          case 202 :
            optionalCord = try input.readString()

          case 210 :
            let subBuilder:ProtobufUnittestImport.PublicImportMessage.Builder = ProtobufUnittestImport.PublicImportMessage.Builder()
            if hasOptionalPublicImportMessage {
              try subBuilder.mergeFrom(optionalPublicImportMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalPublicImportMessage = subBuilder.buildPartial()

          case 218 :
            let subBuilder:ProtobufUnittest.TestAllTypes.NestedMessage.Builder = ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
            if hasOptionalLazyMessage {
              try subBuilder.mergeFrom(optionalLazyMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalLazyMessage = subBuilder.buildPartial()

          case 248 :
            repeatedInt32 += [try input.readInt32()]

          case 256 :
            repeatedInt64 += [try input.readInt64()]

          case 264 :
            repeatedUint32 += [try input.readUInt32()]

          case 272 :
            repeatedUint64 += [try input.readUInt64()]

          case 280 :
            repeatedSint32 += [try input.readSInt32()]

          case 288 :
            repeatedSint64 += [try input.readSInt64()]

          case 301 :
            repeatedFixed32 += [try input.readFixed32()]

          case 305 :
            repeatedFixed64 += [try input.readFixed64()]

          case 317 :
            repeatedSfixed32 += [try input.readSFixed32()]

          case 321 :
            repeatedSfixed64 += [try input.readSFixed64()]

          case 333 :
            repeatedFloat += [try input.readFloat()]

          case 337 :
            repeatedDouble += [try input.readDouble()]

          case 344 :
            repeatedBool += [try input.readBool()]

          case 354 :
            repeatedString += [try input.readString()]

          case 362 :
            repeatedBytes += [try input.readData()]

          case 371 :
            let subBuilder = ProtobufUnittest.TestAllTypes.RepeatedGroup.Builder()
            try input.readGroup(46,builder:subBuilder,extensionRegistry:extensionRegistry)
            repeatedGroup += [subBuilder.buildPartial()]

          case 386 :
            let subBuilder = ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedNestedMessage += [subBuilder.buildPartial()]

          case 394 :
            let subBuilder = ProtobufUnittest.ForeignMessage.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedForeignMessage += [subBuilder.buildPartial()]

          case 402 :
            let subBuilder = ProtobufUnittestImport.ImportMessage.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedImportMessage += [subBuilder.buildPartial()]

          case 408 :
            let valueIntrepeatedNestedEnum = try input.readEnum()
            if let enumsrepeatedNestedEnum = ProtobufUnittest.TestAllTypes.NestedEnum(rawValue:valueIntrepeatedNestedEnum) {
                 builderResult.repeatedNestedEnum += [enumsrepeatedNestedEnum]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(51, value:Int64(valueIntrepeatedNestedEnum))
            }

          case 416 :
            let valueIntrepeatedForeignEnum = try input.readEnum()
            if let enumsrepeatedForeignEnum = ProtobufUnittest.ForeignEnum(rawValue:valueIntrepeatedForeignEnum) {
                 builderResult.repeatedForeignEnum += [enumsrepeatedForeignEnum]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(52, value:Int64(valueIntrepeatedForeignEnum))
            }

          case 424 :
            let valueIntrepeatedImportEnum = try input.readEnum()
            if let enumsrepeatedImportEnum = ProtobufUnittestImport.ImportEnum(rawValue:valueIntrepeatedImportEnum) {
                 builderResult.repeatedImportEnum += [enumsrepeatedImportEnum]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(53, value:Int64(valueIntrepeatedImportEnum))
            }

          case 434 :
            repeatedStringPiece += [try input.readString()]

          case 442 :
            repeatedCord += [try input.readString()]

          case 458 :
            let subBuilder = ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedLazyMessage += [subBuilder.buildPartial()]

          case 488 :
            defaultInt32 = try input.readInt32()

          case 496 :
            defaultInt64 = try input.readInt64()

          case 504 :
            defaultUint32 = try input.readUInt32()

          case 512 :
            defaultUint64 = try input.readUInt64()

          case 520 :
            defaultSint32 = try input.readSInt32()

          case 528 :
            defaultSint64 = try input.readSInt64()

          case 541 :
            defaultFixed32 = try input.readFixed32()

          case 545 :
            defaultFixed64 = try input.readFixed64()

          case 557 :
            defaultSfixed32 = try input.readSFixed32()

          case 561 :
            defaultSfixed64 = try input.readSFixed64()

          case 573 :
            defaultFloat = try input.readFloat()

          case 577 :
            defaultDouble = try input.readDouble()

          case 584 :
            defaultBool = try input.readBool()

          case 594 :
            defaultString = try input.readString()

          case 602 :
            defaultBytes = try input.readData()

          case 648 :
            let valueIntdefaultNestedEnum = try input.readEnum()
            if let enumsdefaultNestedEnum = ProtobufUnittest.TestAllTypes.NestedEnum(rawValue:valueIntdefaultNestedEnum){
                 defaultNestedEnum = enumsdefaultNestedEnum
            } else {
                 try unknownFieldsBuilder.mergeVarintField(81, value:Int64(valueIntdefaultNestedEnum))
            }

          case 656 :
            let valueIntdefaultForeignEnum = try input.readEnum()
            if let enumsdefaultForeignEnum = ProtobufUnittest.ForeignEnum(rawValue:valueIntdefaultForeignEnum){
                 defaultForeignEnum = enumsdefaultForeignEnum
            } else {
                 try unknownFieldsBuilder.mergeVarintField(82, value:Int64(valueIntdefaultForeignEnum))
            }

          case 664 :
            let valueIntdefaultImportEnum = try input.readEnum()
            if let enumsdefaultImportEnum = ProtobufUnittestImport.ImportEnum(rawValue:valueIntdefaultImportEnum){
                 defaultImportEnum = enumsdefaultImportEnum
            } else {
                 try unknownFieldsBuilder.mergeVarintField(83, value:Int64(valueIntdefaultImportEnum))
            }

          case 674 :
            defaultStringPiece = try input.readString()

          case 682 :
            defaultCord = try input.readString()

          case 888 :
            oneofUint32 = try input.readUInt32()

          case 898 :
            let subBuilder:ProtobufUnittest.TestAllTypes.NestedMessage.Builder = ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
            if hasOneofNestedMessage {
              try subBuilder.mergeFrom(oneofNestedMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            oneofNestedMessage = subBuilder.buildPartial()

          case 906 :
            oneofString = try input.readString()

          case 914 :
            oneofBytes = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // This proto includes a recusively nested message.
  final public class NestedTestAllTypes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var child:ProtobufUnittest.NestedTestAllTypes!
    public private(set) var hasChild:Bool = false
    public private(set) var payload:ProtobufUnittest.TestAllTypes!
    public private(set) var hasPayload:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasChild {
        try output.writeMessage(1, value:child)
      }
      if hasPayload {
        try output.writeMessage(2, value:payload)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasChild {
          if let varSizechild = child?.computeMessageSize(1) {
              serialize_size += varSizechild
          }
      }
      if hasPayload {
          if let varSizepayload = payload?.computeMessageSize(2) {
              serialize_size += varSizepayload
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.NestedTestAllTypes> {
      var mergedArray = Array<ProtobufUnittest.NestedTestAllTypes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.NestedTestAllTypes? {
      return try ProtobufUnittest.NestedTestAllTypes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.NestedTestAllTypes {
      return try ProtobufUnittest.NestedTestAllTypes.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.NestedTestAllTypes {
      return try ProtobufUnittest.NestedTestAllTypes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.NestedTestAllTypes {
      return try ProtobufUnittest.NestedTestAllTypes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.NestedTestAllTypes {
      return try ProtobufUnittest.NestedTestAllTypes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.NestedTestAllTypes {
      return try ProtobufUnittest.NestedTestAllTypes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.NestedTestAllTypes {
      return try ProtobufUnittest.NestedTestAllTypes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.NestedTestAllTypes.Builder {
      return ProtobufUnittest.NestedTestAllTypes.classBuilder() as! ProtobufUnittest.NestedTestAllTypes.Builder
    }
    public func getBuilder() -> ProtobufUnittest.NestedTestAllTypes.Builder {
      return classBuilder() as! ProtobufUnittest.NestedTestAllTypes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.NestedTestAllTypes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.NestedTestAllTypes.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.NestedTestAllTypes.Builder {
      return try ProtobufUnittest.NestedTestAllTypes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.NestedTestAllTypes) throws -> ProtobufUnittest.NestedTestAllTypes.Builder {
      return try ProtobufUnittest.NestedTestAllTypes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasChild {
        output += "\(indent) child {\n"
        if let outDescChild = child {
          output += try outDescChild.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPayload {
        output += "\(indent) payload {\n"
        if let outDescPayload = payload {
          output += try outDescPayload.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasChild {
                if let hashValuechild = child?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuechild
                }
            }
            if hasPayload {
                if let hashValuepayload = payload?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepayload
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.NestedTestAllTypes"
    }
    override public func className() -> String {
        return "ProtobufUnittest.NestedTestAllTypes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.NestedTestAllTypes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.NestedTestAllTypes = ProtobufUnittest.NestedTestAllTypes()
      public func getMessage() -> ProtobufUnittest.NestedTestAllTypes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasChild:Bool {
           get {
               return builderResult.hasChild
           }
      }
      public var child:ProtobufUnittest.NestedTestAllTypes! {
           get {
               if childBuilder_ != nil {
                  builderResult.child = childBuilder_.getMessage()
               }
               return builderResult.child
           }
           set (value) {
               builderResult.hasChild = true
               builderResult.child = value
           }
      }
      private var childBuilder_:ProtobufUnittest.NestedTestAllTypes.Builder! {
           didSet {
              builderResult.hasChild = true
           }
      }
      public func getChildBuilder() -> ProtobufUnittest.NestedTestAllTypes.Builder {
        if childBuilder_ == nil {
           childBuilder_ = ProtobufUnittest.NestedTestAllTypes.Builder()
           builderResult.child = childBuilder_.getMessage()
           if child != nil {
              try! childBuilder_.mergeFrom(child)
           }
        }
        return childBuilder_
      }
      public func setChild(_ value:ProtobufUnittest.NestedTestAllTypes!) -> ProtobufUnittest.NestedTestAllTypes.Builder {
        self.child = value
        return self
      }
      public func mergeChild(_ value:ProtobufUnittest.NestedTestAllTypes) throws -> ProtobufUnittest.NestedTestAllTypes.Builder {
        if builderResult.hasChild {
          builderResult.child = try ProtobufUnittest.NestedTestAllTypes.builderWithPrototype(builderResult.child).mergeFrom(value).buildPartial()
        } else {
          builderResult.child = value
        }
        builderResult.hasChild = true
        return self
      }
      public func clearChild() -> ProtobufUnittest.NestedTestAllTypes.Builder {
        childBuilder_ = nil
        builderResult.hasChild = false
        builderResult.child = nil
        return self
      }
      public var hasPayload:Bool {
           get {
               return builderResult.hasPayload
           }
      }
      public var payload:ProtobufUnittest.TestAllTypes! {
           get {
               if payloadBuilder_ != nil {
                  builderResult.payload = payloadBuilder_.getMessage()
               }
               return builderResult.payload
           }
           set (value) {
               builderResult.hasPayload = true
               builderResult.payload = value
           }
      }
      private var payloadBuilder_:ProtobufUnittest.TestAllTypes.Builder! {
           didSet {
              builderResult.hasPayload = true
           }
      }
      public func getPayloadBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
        if payloadBuilder_ == nil {
           payloadBuilder_ = ProtobufUnittest.TestAllTypes.Builder()
           builderResult.payload = payloadBuilder_.getMessage()
           if payload != nil {
              try! payloadBuilder_.mergeFrom(payload)
           }
        }
        return payloadBuilder_
      }
      public func setPayload(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.NestedTestAllTypes.Builder {
        self.payload = value
        return self
      }
      public func mergePayload(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.NestedTestAllTypes.Builder {
        if builderResult.hasPayload {
          builderResult.payload = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.payload).mergeFrom(value).buildPartial()
        } else {
          builderResult.payload = value
        }
        builderResult.hasPayload = true
        return self
      }
      public func clearPayload() -> ProtobufUnittest.NestedTestAllTypes.Builder {
        payloadBuilder_ = nil
        builderResult.hasPayload = false
        builderResult.payload = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.NestedTestAllTypes.Builder {
        builderResult = ProtobufUnittest.NestedTestAllTypes()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.NestedTestAllTypes.Builder {
        return try ProtobufUnittest.NestedTestAllTypes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.NestedTestAllTypes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.NestedTestAllTypes {
        let returnMe:ProtobufUnittest.NestedTestAllTypes = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.NestedTestAllTypes) throws -> ProtobufUnittest.NestedTestAllTypes.Builder {
        if other == ProtobufUnittest.NestedTestAllTypes() {
         return self
        }
        if (other.hasChild) {
            try mergeChild(other.child)
        }
        if (other.hasPayload) {
            try mergePayload(other.payload)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.NestedTestAllTypes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.NestedTestAllTypes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.NestedTestAllTypes.Builder = ProtobufUnittest.NestedTestAllTypes.Builder()
            if hasChild {
              try subBuilder.mergeFrom(child)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            child = subBuilder.buildPartial()

          case 18 :
            let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
            if hasPayload {
              try subBuilder.mergeFrom(payload)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            payload = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestDeprecatedFields : GeneratedMessage, GeneratedMessageProtocol {
    @available(*, deprecated=0.1, message="The field is marked as \"Deprecated\"")
    public private(set) var deprecatedInt32:Int32 = Int32(0)

    public private(set) var hasDeprecatedInt32:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasDeprecatedInt32 {
        try output.writeInt32(1, value:deprecatedInt32)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasDeprecatedInt32 {
        serialize_size += deprecatedInt32.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestDeprecatedFields> {
      var mergedArray = Array<ProtobufUnittest.TestDeprecatedFields>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDeprecatedFields? {
      return try ProtobufUnittest.TestDeprecatedFields.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestDeprecatedFields {
      return try ProtobufUnittest.TestDeprecatedFields.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDeprecatedFields {
      return try ProtobufUnittest.TestDeprecatedFields.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDeprecatedFields {
      return try ProtobufUnittest.TestDeprecatedFields.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDeprecatedFields {
      return try ProtobufUnittest.TestDeprecatedFields.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDeprecatedFields {
      return try ProtobufUnittest.TestDeprecatedFields.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDeprecatedFields {
      return try ProtobufUnittest.TestDeprecatedFields.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestDeprecatedFields.Builder {
      return ProtobufUnittest.TestDeprecatedFields.classBuilder() as! ProtobufUnittest.TestDeprecatedFields.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestDeprecatedFields.Builder {
      return classBuilder() as! ProtobufUnittest.TestDeprecatedFields.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDeprecatedFields.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDeprecatedFields.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestDeprecatedFields.Builder {
      return try ProtobufUnittest.TestDeprecatedFields.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestDeprecatedFields) throws -> ProtobufUnittest.TestDeprecatedFields.Builder {
      return try ProtobufUnittest.TestDeprecatedFields.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasDeprecatedInt32 {
        output += "\(indent) deprecatedInt32: \(deprecatedInt32) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasDeprecatedInt32 {
               hashCode = (hashCode &* 31) &+ deprecatedInt32.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestDeprecatedFields"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestDeprecatedFields"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestDeprecatedFields.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestDeprecatedFields = ProtobufUnittest.TestDeprecatedFields()
      public func getMessage() -> ProtobufUnittest.TestDeprecatedFields {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasDeprecatedInt32:Bool {
           get {
                return builderResult.hasDeprecatedInt32
           }
      }
      public var deprecatedInt32:Int32 {
           get {
                return builderResult.deprecatedInt32
           }
           set (value) {
               builderResult.hasDeprecatedInt32 = true
               builderResult.deprecatedInt32 = value
           }
      }
      public func setDeprecatedInt32(_ value:Int32) -> ProtobufUnittest.TestDeprecatedFields.Builder {
        self.deprecatedInt32 = value
        return self
      }
      public func clearDeprecatedInt32() -> ProtobufUnittest.TestDeprecatedFields.Builder{
           builderResult.hasDeprecatedInt32 = false
           builderResult.deprecatedInt32 = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestDeprecatedFields.Builder {
        builderResult = ProtobufUnittest.TestDeprecatedFields()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestDeprecatedFields.Builder {
        return try ProtobufUnittest.TestDeprecatedFields.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestDeprecatedFields {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestDeprecatedFields {
        let returnMe:ProtobufUnittest.TestDeprecatedFields = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestDeprecatedFields) throws -> ProtobufUnittest.TestDeprecatedFields.Builder {
        if other == ProtobufUnittest.TestDeprecatedFields() {
         return self
        }
        if other.hasDeprecatedInt32 {
             deprecatedInt32 = other.deprecatedInt32
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDeprecatedFields.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDeprecatedFields.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            deprecatedInt32 = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Define these after TestAllTypes to make sure the compiler can handle
  // that.
  final public class ForeignMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var c:Int32 = Int32(0)

    public private(set) var hasC:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasC {
        try output.writeInt32(1, value:c)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasC {
        serialize_size += c.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.ForeignMessage> {
      var mergedArray = Array<ProtobufUnittest.ForeignMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.ForeignMessage? {
      return try ProtobufUnittest.ForeignMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.ForeignMessage {
      return try ProtobufUnittest.ForeignMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.ForeignMessage {
      return try ProtobufUnittest.ForeignMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.ForeignMessage {
      return try ProtobufUnittest.ForeignMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.ForeignMessage {
      return try ProtobufUnittest.ForeignMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.ForeignMessage {
      return try ProtobufUnittest.ForeignMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.ForeignMessage {
      return try ProtobufUnittest.ForeignMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.ForeignMessage.Builder {
      return ProtobufUnittest.ForeignMessage.classBuilder() as! ProtobufUnittest.ForeignMessage.Builder
    }
    public func getBuilder() -> ProtobufUnittest.ForeignMessage.Builder {
      return classBuilder() as! ProtobufUnittest.ForeignMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.ForeignMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.ForeignMessage.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.ForeignMessage.Builder {
      return try ProtobufUnittest.ForeignMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.ForeignMessage) throws -> ProtobufUnittest.ForeignMessage.Builder {
      return try ProtobufUnittest.ForeignMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasC {
        output += "\(indent) c: \(c) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasC {
               hashCode = (hashCode &* 31) &+ c.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.ForeignMessage"
    }
    override public func className() -> String {
        return "ProtobufUnittest.ForeignMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.ForeignMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.ForeignMessage = ProtobufUnittest.ForeignMessage()
      public func getMessage() -> ProtobufUnittest.ForeignMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasC:Bool {
           get {
                return builderResult.hasC
           }
      }
      public var c:Int32 {
           get {
                return builderResult.c
           }
           set (value) {
               builderResult.hasC = true
               builderResult.c = value
           }
      }
      public func setC(_ value:Int32) -> ProtobufUnittest.ForeignMessage.Builder {
        self.c = value
        return self
      }
      public func clearC() -> ProtobufUnittest.ForeignMessage.Builder{
           builderResult.hasC = false
           builderResult.c = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.ForeignMessage.Builder {
        builderResult = ProtobufUnittest.ForeignMessage()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.ForeignMessage.Builder {
        return try ProtobufUnittest.ForeignMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.ForeignMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.ForeignMessage {
        let returnMe:ProtobufUnittest.ForeignMessage = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.ForeignMessage) throws -> ProtobufUnittest.ForeignMessage.Builder {
        if other == ProtobufUnittest.ForeignMessage() {
         return self
        }
        if other.hasC {
             c = other.c
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.ForeignMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.ForeignMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            c = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestAllExtensions : ExtendableMessage, GeneratedMessageProtocol{
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestAllExtensions> {
      var mergedArray = Array<ProtobufUnittest.TestAllExtensions>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestAllExtensions? {
      return try ProtobufUnittest.TestAllExtensions.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestAllExtensions {
      return try ProtobufUnittest.TestAllExtensions.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllExtensions {
      return try ProtobufUnittest.TestAllExtensions.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestAllExtensions {
      return try ProtobufUnittest.TestAllExtensions.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllExtensions {
      return try ProtobufUnittest.TestAllExtensions.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestAllExtensions {
      return try ProtobufUnittest.TestAllExtensions.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllExtensions {
      return try ProtobufUnittest.TestAllExtensions.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestAllExtensions.Builder {
      return ProtobufUnittest.TestAllExtensions.classBuilder() as! ProtobufUnittest.TestAllExtensions.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestAllExtensions.Builder {
      return classBuilder() as! ProtobufUnittest.TestAllExtensions.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestAllExtensions.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestAllExtensions.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestAllExtensions.Builder {
      return try ProtobufUnittest.TestAllExtensions.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestAllExtensions) throws -> ProtobufUnittest.TestAllExtensions.Builder {
      return try ProtobufUnittest.TestAllExtensions.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += try getExtensionDescription(Int32(1), endExclusive:Int32(536870912), indent:indent)
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestAllExtensions"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestAllExtensions"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestAllExtensions.self
    }
    //Meta information declaration end

    final public class Builder : ExtendableMessageBuilder {
      private var builderResult:ProtobufUnittest.TestAllExtensions = ProtobufUnittest.TestAllExtensions()
      public func getMessage() -> ProtobufUnittest.TestAllExtensions {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:ExtendableMessage {
           get {
               return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestAllExtensions.Builder {
        builderResult = ProtobufUnittest.TestAllExtensions()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestAllExtensions.Builder {
        return try ProtobufUnittest.TestAllExtensions.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestAllExtensions {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestAllExtensions {
        let returnMe:ProtobufUnittest.TestAllExtensions = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestAllExtensions) throws -> ProtobufUnittest.TestAllExtensions.Builder {
        if other == ProtobufUnittest.TestAllExtensions() {
         return self
        }
        try mergeExtensionFields(other)
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestAllExtensions.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestAllExtensions.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class OptionalGroupExtension : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var a:Int32 = Int32(0)

    public private(set) var hasA:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasA {
        try output.writeInt32(17, value:a)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeInt32Size(17)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.OptionalGroupExtension> {
      var mergedArray = Array<ProtobufUnittest.OptionalGroupExtension>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.OptionalGroupExtension? {
      return try ProtobufUnittest.OptionalGroupExtension.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.OptionalGroupExtension {
      return try ProtobufUnittest.OptionalGroupExtension.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OptionalGroupExtension {
      return try ProtobufUnittest.OptionalGroupExtension.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.OptionalGroupExtension {
      return try ProtobufUnittest.OptionalGroupExtension.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OptionalGroupExtension {
      return try ProtobufUnittest.OptionalGroupExtension.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.OptionalGroupExtension {
      return try ProtobufUnittest.OptionalGroupExtension.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OptionalGroupExtension {
      return try ProtobufUnittest.OptionalGroupExtension.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.OptionalGroupExtension.Builder {
      return ProtobufUnittest.OptionalGroupExtension.classBuilder() as! ProtobufUnittest.OptionalGroupExtension.Builder
    }
    public func getBuilder() -> ProtobufUnittest.OptionalGroupExtension.Builder {
      return classBuilder() as! ProtobufUnittest.OptionalGroupExtension.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OptionalGroupExtension.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OptionalGroupExtension.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.OptionalGroupExtension.Builder {
      return try ProtobufUnittest.OptionalGroupExtension.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.OptionalGroupExtension) throws -> ProtobufUnittest.OptionalGroupExtension.Builder {
      return try ProtobufUnittest.OptionalGroupExtension.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.OptionalGroupExtension"
    }
    override public func className() -> String {
        return "ProtobufUnittest.OptionalGroupExtension"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.OptionalGroupExtension.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.OptionalGroupExtension = ProtobufUnittest.OptionalGroupExtension()
      public func getMessage() -> ProtobufUnittest.OptionalGroupExtension {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasA:Bool {
           get {
                return builderResult.hasA
           }
      }
      public var a:Int32 {
           get {
                return builderResult.a
           }
           set (value) {
               builderResult.hasA = true
               builderResult.a = value
           }
      }
      public func setA(_ value:Int32) -> ProtobufUnittest.OptionalGroupExtension.Builder {
        self.a = value
        return self
      }
      public func clearA() -> ProtobufUnittest.OptionalGroupExtension.Builder{
           builderResult.hasA = false
           builderResult.a = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.OptionalGroupExtension.Builder {
        builderResult = ProtobufUnittest.OptionalGroupExtension()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.OptionalGroupExtension.Builder {
        return try ProtobufUnittest.OptionalGroupExtension.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.OptionalGroupExtension {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.OptionalGroupExtension {
        let returnMe:ProtobufUnittest.OptionalGroupExtension = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.OptionalGroupExtension) throws -> ProtobufUnittest.OptionalGroupExtension.Builder {
        if other == ProtobufUnittest.OptionalGroupExtension() {
         return self
        }
        if other.hasA {
             a = other.a
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.OptionalGroupExtension.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OptionalGroupExtension.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 136 :
            a = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class RepeatedGroupExtension : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var a:Int32 = Int32(0)

    public private(set) var hasA:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasA {
        try output.writeInt32(47, value:a)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeInt32Size(47)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.RepeatedGroupExtension> {
      var mergedArray = Array<ProtobufUnittest.RepeatedGroupExtension>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.RepeatedGroupExtension? {
      return try ProtobufUnittest.RepeatedGroupExtension.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.RepeatedGroupExtension {
      return try ProtobufUnittest.RepeatedGroupExtension.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RepeatedGroupExtension {
      return try ProtobufUnittest.RepeatedGroupExtension.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.RepeatedGroupExtension {
      return try ProtobufUnittest.RepeatedGroupExtension.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RepeatedGroupExtension {
      return try ProtobufUnittest.RepeatedGroupExtension.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.RepeatedGroupExtension {
      return try ProtobufUnittest.RepeatedGroupExtension.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RepeatedGroupExtension {
      return try ProtobufUnittest.RepeatedGroupExtension.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.RepeatedGroupExtension.Builder {
      return ProtobufUnittest.RepeatedGroupExtension.classBuilder() as! ProtobufUnittest.RepeatedGroupExtension.Builder
    }
    public func getBuilder() -> ProtobufUnittest.RepeatedGroupExtension.Builder {
      return classBuilder() as! ProtobufUnittest.RepeatedGroupExtension.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.RepeatedGroupExtension.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.RepeatedGroupExtension.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.RepeatedGroupExtension.Builder {
      return try ProtobufUnittest.RepeatedGroupExtension.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.RepeatedGroupExtension) throws -> ProtobufUnittest.RepeatedGroupExtension.Builder {
      return try ProtobufUnittest.RepeatedGroupExtension.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.RepeatedGroupExtension"
    }
    override public func className() -> String {
        return "ProtobufUnittest.RepeatedGroupExtension"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.RepeatedGroupExtension.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.RepeatedGroupExtension = ProtobufUnittest.RepeatedGroupExtension()
      public func getMessage() -> ProtobufUnittest.RepeatedGroupExtension {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasA:Bool {
           get {
                return builderResult.hasA
           }
      }
      public var a:Int32 {
           get {
                return builderResult.a
           }
           set (value) {
               builderResult.hasA = true
               builderResult.a = value
           }
      }
      public func setA(_ value:Int32) -> ProtobufUnittest.RepeatedGroupExtension.Builder {
        self.a = value
        return self
      }
      public func clearA() -> ProtobufUnittest.RepeatedGroupExtension.Builder{
           builderResult.hasA = false
           builderResult.a = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.RepeatedGroupExtension.Builder {
        builderResult = ProtobufUnittest.RepeatedGroupExtension()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.RepeatedGroupExtension.Builder {
        return try ProtobufUnittest.RepeatedGroupExtension.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.RepeatedGroupExtension {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.RepeatedGroupExtension {
        let returnMe:ProtobufUnittest.RepeatedGroupExtension = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.RepeatedGroupExtension) throws -> ProtobufUnittest.RepeatedGroupExtension.Builder {
        if other == ProtobufUnittest.RepeatedGroupExtension() {
         return self
        }
        if other.hasA {
             a = other.a
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.RepeatedGroupExtension.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RepeatedGroupExtension.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 376 :
            a = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestNestedExtension : GeneratedMessage, GeneratedMessageProtocol {
    public class func test() -> ConcreateExtensionField {
         return TestNestedExtensiontest
    }
    public class func nestedStringExtension() -> ConcreateExtensionField {
         return TestNestedExtensionnestedStringExtension
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestNestedExtension> {
      var mergedArray = Array<ProtobufUnittest.TestNestedExtension>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestNestedExtension? {
      return try ProtobufUnittest.TestNestedExtension.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestNestedExtension {
      return try ProtobufUnittest.TestNestedExtension.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedExtension {
      return try ProtobufUnittest.TestNestedExtension.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestNestedExtension {
      return try ProtobufUnittest.TestNestedExtension.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedExtension {
      return try ProtobufUnittest.TestNestedExtension.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestNestedExtension {
      return try ProtobufUnittest.TestNestedExtension.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedExtension {
      return try ProtobufUnittest.TestNestedExtension.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestNestedExtension.Builder {
      return ProtobufUnittest.TestNestedExtension.classBuilder() as! ProtobufUnittest.TestNestedExtension.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestNestedExtension.Builder {
      return classBuilder() as! ProtobufUnittest.TestNestedExtension.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestNestedExtension.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestNestedExtension.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestNestedExtension.Builder {
      return try ProtobufUnittest.TestNestedExtension.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestNestedExtension) throws -> ProtobufUnittest.TestNestedExtension.Builder {
      return try ProtobufUnittest.TestNestedExtension.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestNestedExtension"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestNestedExtension"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestNestedExtension.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestNestedExtension = ProtobufUnittest.TestNestedExtension()
      public func getMessage() -> ProtobufUnittest.TestNestedExtension {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestNestedExtension.Builder {
        builderResult = ProtobufUnittest.TestNestedExtension()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestNestedExtension.Builder {
        return try ProtobufUnittest.TestNestedExtension.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestNestedExtension {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestNestedExtension {
        let returnMe:ProtobufUnittest.TestNestedExtension = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestNestedExtension) throws -> ProtobufUnittest.TestNestedExtension.Builder {
        if other == ProtobufUnittest.TestNestedExtension() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestNestedExtension.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedExtension.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // We have separate messages for testing required fields because it's
  // annoying to have to fill in required fields in TestProto in order to
  // do anything with it.  Note that we don't need to test every type of
  // required filed because the code output is basically identical to
  // optional fields for all types.
  final public class TestRequired : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var a:Int32 = Int32(0)

    public private(set) var hasA:Bool = false
    public private(set) var dummy2:Int32 = Int32(0)

    public private(set) var hasDummy2:Bool = false
    public private(set) var b:Int32 = Int32(0)

    public private(set) var hasB:Bool = false
    // Pad the field count to 32 so that we can test that IsInitialized()
    // properly checks multiple elements of has_bits_.
    public private(set) var dummy4:Int32 = Int32(0)

    public private(set) var hasDummy4:Bool = false
    public private(set) var dummy5:Int32 = Int32(0)

    public private(set) var hasDummy5:Bool = false
    public private(set) var dummy6:Int32 = Int32(0)

    public private(set) var hasDummy6:Bool = false
    public private(set) var dummy7:Int32 = Int32(0)

    public private(set) var hasDummy7:Bool = false
    public private(set) var dummy8:Int32 = Int32(0)

    public private(set) var hasDummy8:Bool = false
    public private(set) var dummy9:Int32 = Int32(0)

    public private(set) var hasDummy9:Bool = false
    public private(set) var dummy10:Int32 = Int32(0)

    public private(set) var hasDummy10:Bool = false
    public private(set) var dummy11:Int32 = Int32(0)

    public private(set) var hasDummy11:Bool = false
    public private(set) var dummy12:Int32 = Int32(0)

    public private(set) var hasDummy12:Bool = false
    public private(set) var dummy13:Int32 = Int32(0)

    public private(set) var hasDummy13:Bool = false
    public private(set) var dummy14:Int32 = Int32(0)

    public private(set) var hasDummy14:Bool = false
    public private(set) var dummy15:Int32 = Int32(0)

    public private(set) var hasDummy15:Bool = false
    public private(set) var dummy16:Int32 = Int32(0)

    public private(set) var hasDummy16:Bool = false
    public private(set) var dummy17:Int32 = Int32(0)

    public private(set) var hasDummy17:Bool = false
    public private(set) var dummy18:Int32 = Int32(0)

    public private(set) var hasDummy18:Bool = false
    public private(set) var dummy19:Int32 = Int32(0)

    public private(set) var hasDummy19:Bool = false
    public private(set) var dummy20:Int32 = Int32(0)

    public private(set) var hasDummy20:Bool = false
    public private(set) var dummy21:Int32 = Int32(0)

    public private(set) var hasDummy21:Bool = false
    public private(set) var dummy22:Int32 = Int32(0)

    public private(set) var hasDummy22:Bool = false
    public private(set) var dummy23:Int32 = Int32(0)

    public private(set) var hasDummy23:Bool = false
    public private(set) var dummy24:Int32 = Int32(0)

    public private(set) var hasDummy24:Bool = false
    public private(set) var dummy25:Int32 = Int32(0)

    public private(set) var hasDummy25:Bool = false
    public private(set) var dummy26:Int32 = Int32(0)

    public private(set) var hasDummy26:Bool = false
    public private(set) var dummy27:Int32 = Int32(0)

    public private(set) var hasDummy27:Bool = false
    public private(set) var dummy28:Int32 = Int32(0)

    public private(set) var hasDummy28:Bool = false
    public private(set) var dummy29:Int32 = Int32(0)

    public private(set) var hasDummy29:Bool = false
    public private(set) var dummy30:Int32 = Int32(0)

    public private(set) var hasDummy30:Bool = false
    public private(set) var dummy31:Int32 = Int32(0)

    public private(set) var hasDummy31:Bool = false
    public private(set) var dummy32:Int32 = Int32(0)

    public private(set) var hasDummy32:Bool = false
    public private(set) var c:Int32 = Int32(0)

    public private(set) var hasC:Bool = false
    public class func single() -> ConcreateExtensionField {
         return TestRequiredsingle
    }
    public class func multi() -> ConcreateExtensionField {
         return TestRequiredmulti
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasA {
        return false
      }
      if !hasB {
        return false
      }
      if !hasC {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasA {
        try output.writeInt32(1, value:a)
      }
      if hasDummy2 {
        try output.writeInt32(2, value:dummy2)
      }
      if hasB {
        try output.writeInt32(3, value:b)
      }
      if hasDummy4 {
        try output.writeInt32(4, value:dummy4)
      }
      if hasDummy5 {
        try output.writeInt32(5, value:dummy5)
      }
      if hasDummy6 {
        try output.writeInt32(6, value:dummy6)
      }
      if hasDummy7 {
        try output.writeInt32(7, value:dummy7)
      }
      if hasDummy8 {
        try output.writeInt32(8, value:dummy8)
      }
      if hasDummy9 {
        try output.writeInt32(9, value:dummy9)
      }
      if hasDummy10 {
        try output.writeInt32(10, value:dummy10)
      }
      if hasDummy11 {
        try output.writeInt32(11, value:dummy11)
      }
      if hasDummy12 {
        try output.writeInt32(12, value:dummy12)
      }
      if hasDummy13 {
        try output.writeInt32(13, value:dummy13)
      }
      if hasDummy14 {
        try output.writeInt32(14, value:dummy14)
      }
      if hasDummy15 {
        try output.writeInt32(15, value:dummy15)
      }
      if hasDummy16 {
        try output.writeInt32(16, value:dummy16)
      }
      if hasDummy17 {
        try output.writeInt32(17, value:dummy17)
      }
      if hasDummy18 {
        try output.writeInt32(18, value:dummy18)
      }
      if hasDummy19 {
        try output.writeInt32(19, value:dummy19)
      }
      if hasDummy20 {
        try output.writeInt32(20, value:dummy20)
      }
      if hasDummy21 {
        try output.writeInt32(21, value:dummy21)
      }
      if hasDummy22 {
        try output.writeInt32(22, value:dummy22)
      }
      if hasDummy23 {
        try output.writeInt32(23, value:dummy23)
      }
      if hasDummy24 {
        try output.writeInt32(24, value:dummy24)
      }
      if hasDummy25 {
        try output.writeInt32(25, value:dummy25)
      }
      if hasDummy26 {
        try output.writeInt32(26, value:dummy26)
      }
      if hasDummy27 {
        try output.writeInt32(27, value:dummy27)
      }
      if hasDummy28 {
        try output.writeInt32(28, value:dummy28)
      }
      if hasDummy29 {
        try output.writeInt32(29, value:dummy29)
      }
      if hasDummy30 {
        try output.writeInt32(30, value:dummy30)
      }
      if hasDummy31 {
        try output.writeInt32(31, value:dummy31)
      }
      if hasDummy32 {
        try output.writeInt32(32, value:dummy32)
      }
      if hasC {
        try output.writeInt32(33, value:c)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeInt32Size(1)
      }
      if hasDummy2 {
        serialize_size += dummy2.computeInt32Size(2)
      }
      if hasB {
        serialize_size += b.computeInt32Size(3)
      }
      if hasDummy4 {
        serialize_size += dummy4.computeInt32Size(4)
      }
      if hasDummy5 {
        serialize_size += dummy5.computeInt32Size(5)
      }
      if hasDummy6 {
        serialize_size += dummy6.computeInt32Size(6)
      }
      if hasDummy7 {
        serialize_size += dummy7.computeInt32Size(7)
      }
      if hasDummy8 {
        serialize_size += dummy8.computeInt32Size(8)
      }
      if hasDummy9 {
        serialize_size += dummy9.computeInt32Size(9)
      }
      if hasDummy10 {
        serialize_size += dummy10.computeInt32Size(10)
      }
      if hasDummy11 {
        serialize_size += dummy11.computeInt32Size(11)
      }
      if hasDummy12 {
        serialize_size += dummy12.computeInt32Size(12)
      }
      if hasDummy13 {
        serialize_size += dummy13.computeInt32Size(13)
      }
      if hasDummy14 {
        serialize_size += dummy14.computeInt32Size(14)
      }
      if hasDummy15 {
        serialize_size += dummy15.computeInt32Size(15)
      }
      if hasDummy16 {
        serialize_size += dummy16.computeInt32Size(16)
      }
      if hasDummy17 {
        serialize_size += dummy17.computeInt32Size(17)
      }
      if hasDummy18 {
        serialize_size += dummy18.computeInt32Size(18)
      }
      if hasDummy19 {
        serialize_size += dummy19.computeInt32Size(19)
      }
      if hasDummy20 {
        serialize_size += dummy20.computeInt32Size(20)
      }
      if hasDummy21 {
        serialize_size += dummy21.computeInt32Size(21)
      }
      if hasDummy22 {
        serialize_size += dummy22.computeInt32Size(22)
      }
      if hasDummy23 {
        serialize_size += dummy23.computeInt32Size(23)
      }
      if hasDummy24 {
        serialize_size += dummy24.computeInt32Size(24)
      }
      if hasDummy25 {
        serialize_size += dummy25.computeInt32Size(25)
      }
      if hasDummy26 {
        serialize_size += dummy26.computeInt32Size(26)
      }
      if hasDummy27 {
        serialize_size += dummy27.computeInt32Size(27)
      }
      if hasDummy28 {
        serialize_size += dummy28.computeInt32Size(28)
      }
      if hasDummy29 {
        serialize_size += dummy29.computeInt32Size(29)
      }
      if hasDummy30 {
        serialize_size += dummy30.computeInt32Size(30)
      }
      if hasDummy31 {
        serialize_size += dummy31.computeInt32Size(31)
      }
      if hasDummy32 {
        serialize_size += dummy32.computeInt32Size(32)
      }
      if hasC {
        serialize_size += c.computeInt32Size(33)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestRequired> {
      var mergedArray = Array<ProtobufUnittest.TestRequired>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRequired? {
      return try ProtobufUnittest.TestRequired.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestRequired {
      return try ProtobufUnittest.TestRequired.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequired {
      return try ProtobufUnittest.TestRequired.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRequired {
      return try ProtobufUnittest.TestRequired.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequired {
      return try ProtobufUnittest.TestRequired.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRequired {
      return try ProtobufUnittest.TestRequired.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequired {
      return try ProtobufUnittest.TestRequired.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestRequired.Builder {
      return ProtobufUnittest.TestRequired.classBuilder() as! ProtobufUnittest.TestRequired.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestRequired.Builder {
      return classBuilder() as! ProtobufUnittest.TestRequired.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequired.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequired.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestRequired.Builder {
      return try ProtobufUnittest.TestRequired.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestRequired) throws -> ProtobufUnittest.TestRequired.Builder {
      return try ProtobufUnittest.TestRequired.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      if hasDummy2 {
        output += "\(indent) dummy2: \(dummy2) \n"
      }
      if hasB {
        output += "\(indent) b: \(b) \n"
      }
      if hasDummy4 {
        output += "\(indent) dummy4: \(dummy4) \n"
      }
      if hasDummy5 {
        output += "\(indent) dummy5: \(dummy5) \n"
      }
      if hasDummy6 {
        output += "\(indent) dummy6: \(dummy6) \n"
      }
      if hasDummy7 {
        output += "\(indent) dummy7: \(dummy7) \n"
      }
      if hasDummy8 {
        output += "\(indent) dummy8: \(dummy8) \n"
      }
      if hasDummy9 {
        output += "\(indent) dummy9: \(dummy9) \n"
      }
      if hasDummy10 {
        output += "\(indent) dummy10: \(dummy10) \n"
      }
      if hasDummy11 {
        output += "\(indent) dummy11: \(dummy11) \n"
      }
      if hasDummy12 {
        output += "\(indent) dummy12: \(dummy12) \n"
      }
      if hasDummy13 {
        output += "\(indent) dummy13: \(dummy13) \n"
      }
      if hasDummy14 {
        output += "\(indent) dummy14: \(dummy14) \n"
      }
      if hasDummy15 {
        output += "\(indent) dummy15: \(dummy15) \n"
      }
      if hasDummy16 {
        output += "\(indent) dummy16: \(dummy16) \n"
      }
      if hasDummy17 {
        output += "\(indent) dummy17: \(dummy17) \n"
      }
      if hasDummy18 {
        output += "\(indent) dummy18: \(dummy18) \n"
      }
      if hasDummy19 {
        output += "\(indent) dummy19: \(dummy19) \n"
      }
      if hasDummy20 {
        output += "\(indent) dummy20: \(dummy20) \n"
      }
      if hasDummy21 {
        output += "\(indent) dummy21: \(dummy21) \n"
      }
      if hasDummy22 {
        output += "\(indent) dummy22: \(dummy22) \n"
      }
      if hasDummy23 {
        output += "\(indent) dummy23: \(dummy23) \n"
      }
      if hasDummy24 {
        output += "\(indent) dummy24: \(dummy24) \n"
      }
      if hasDummy25 {
        output += "\(indent) dummy25: \(dummy25) \n"
      }
      if hasDummy26 {
        output += "\(indent) dummy26: \(dummy26) \n"
      }
      if hasDummy27 {
        output += "\(indent) dummy27: \(dummy27) \n"
      }
      if hasDummy28 {
        output += "\(indent) dummy28: \(dummy28) \n"
      }
      if hasDummy29 {
        output += "\(indent) dummy29: \(dummy29) \n"
      }
      if hasDummy30 {
        output += "\(indent) dummy30: \(dummy30) \n"
      }
      if hasDummy31 {
        output += "\(indent) dummy31: \(dummy31) \n"
      }
      if hasDummy32 {
        output += "\(indent) dummy32: \(dummy32) \n"
      }
      if hasC {
        output += "\(indent) c: \(c) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            if hasDummy2 {
               hashCode = (hashCode &* 31) &+ dummy2.hashValue
            }
            if hasB {
               hashCode = (hashCode &* 31) &+ b.hashValue
            }
            if hasDummy4 {
               hashCode = (hashCode &* 31) &+ dummy4.hashValue
            }
            if hasDummy5 {
               hashCode = (hashCode &* 31) &+ dummy5.hashValue
            }
            if hasDummy6 {
               hashCode = (hashCode &* 31) &+ dummy6.hashValue
            }
            if hasDummy7 {
               hashCode = (hashCode &* 31) &+ dummy7.hashValue
            }
            if hasDummy8 {
               hashCode = (hashCode &* 31) &+ dummy8.hashValue
            }
            if hasDummy9 {
               hashCode = (hashCode &* 31) &+ dummy9.hashValue
            }
            if hasDummy10 {
               hashCode = (hashCode &* 31) &+ dummy10.hashValue
            }
            if hasDummy11 {
               hashCode = (hashCode &* 31) &+ dummy11.hashValue
            }
            if hasDummy12 {
               hashCode = (hashCode &* 31) &+ dummy12.hashValue
            }
            if hasDummy13 {
               hashCode = (hashCode &* 31) &+ dummy13.hashValue
            }
            if hasDummy14 {
               hashCode = (hashCode &* 31) &+ dummy14.hashValue
            }
            if hasDummy15 {
               hashCode = (hashCode &* 31) &+ dummy15.hashValue
            }
            if hasDummy16 {
               hashCode = (hashCode &* 31) &+ dummy16.hashValue
            }
            if hasDummy17 {
               hashCode = (hashCode &* 31) &+ dummy17.hashValue
            }
            if hasDummy18 {
               hashCode = (hashCode &* 31) &+ dummy18.hashValue
            }
            if hasDummy19 {
               hashCode = (hashCode &* 31) &+ dummy19.hashValue
            }
            if hasDummy20 {
               hashCode = (hashCode &* 31) &+ dummy20.hashValue
            }
            if hasDummy21 {
               hashCode = (hashCode &* 31) &+ dummy21.hashValue
            }
            if hasDummy22 {
               hashCode = (hashCode &* 31) &+ dummy22.hashValue
            }
            if hasDummy23 {
               hashCode = (hashCode &* 31) &+ dummy23.hashValue
            }
            if hasDummy24 {
               hashCode = (hashCode &* 31) &+ dummy24.hashValue
            }
            if hasDummy25 {
               hashCode = (hashCode &* 31) &+ dummy25.hashValue
            }
            if hasDummy26 {
               hashCode = (hashCode &* 31) &+ dummy26.hashValue
            }
            if hasDummy27 {
               hashCode = (hashCode &* 31) &+ dummy27.hashValue
            }
            if hasDummy28 {
               hashCode = (hashCode &* 31) &+ dummy28.hashValue
            }
            if hasDummy29 {
               hashCode = (hashCode &* 31) &+ dummy29.hashValue
            }
            if hasDummy30 {
               hashCode = (hashCode &* 31) &+ dummy30.hashValue
            }
            if hasDummy31 {
               hashCode = (hashCode &* 31) &+ dummy31.hashValue
            }
            if hasDummy32 {
               hashCode = (hashCode &* 31) &+ dummy32.hashValue
            }
            if hasC {
               hashCode = (hashCode &* 31) &+ c.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestRequired"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestRequired"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestRequired.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestRequired = ProtobufUnittest.TestRequired()
      public func getMessage() -> ProtobufUnittest.TestRequired {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasA:Bool {
           get {
                return builderResult.hasA
           }
      }
      public var a:Int32 {
           get {
                return builderResult.a
           }
           set (value) {
               builderResult.hasA = true
               builderResult.a = value
           }
      }
      public func setA(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.a = value
        return self
      }
      public func clearA() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasA = false
           builderResult.a = Int32(0)
           return self
      }
      public var hasDummy2:Bool {
           get {
                return builderResult.hasDummy2
           }
      }
      public var dummy2:Int32 {
           get {
                return builderResult.dummy2
           }
           set (value) {
               builderResult.hasDummy2 = true
               builderResult.dummy2 = value
           }
      }
      public func setDummy2(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy2 = value
        return self
      }
      public func clearDummy2() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy2 = false
           builderResult.dummy2 = Int32(0)
           return self
      }
      public var hasB:Bool {
           get {
                return builderResult.hasB
           }
      }
      public var b:Int32 {
           get {
                return builderResult.b
           }
           set (value) {
               builderResult.hasB = true
               builderResult.b = value
           }
      }
      public func setB(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.b = value
        return self
      }
      public func clearB() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasB = false
           builderResult.b = Int32(0)
           return self
      }
      public var hasDummy4:Bool {
           get {
                return builderResult.hasDummy4
           }
      }
      public var dummy4:Int32 {
           get {
                return builderResult.dummy4
           }
           set (value) {
               builderResult.hasDummy4 = true
               builderResult.dummy4 = value
           }
      }
      public func setDummy4(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy4 = value
        return self
      }
      public func clearDummy4() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy4 = false
           builderResult.dummy4 = Int32(0)
           return self
      }
      public var hasDummy5:Bool {
           get {
                return builderResult.hasDummy5
           }
      }
      public var dummy5:Int32 {
           get {
                return builderResult.dummy5
           }
           set (value) {
               builderResult.hasDummy5 = true
               builderResult.dummy5 = value
           }
      }
      public func setDummy5(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy5 = value
        return self
      }
      public func clearDummy5() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy5 = false
           builderResult.dummy5 = Int32(0)
           return self
      }
      public var hasDummy6:Bool {
           get {
                return builderResult.hasDummy6
           }
      }
      public var dummy6:Int32 {
           get {
                return builderResult.dummy6
           }
           set (value) {
               builderResult.hasDummy6 = true
               builderResult.dummy6 = value
           }
      }
      public func setDummy6(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy6 = value
        return self
      }
      public func clearDummy6() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy6 = false
           builderResult.dummy6 = Int32(0)
           return self
      }
      public var hasDummy7:Bool {
           get {
                return builderResult.hasDummy7
           }
      }
      public var dummy7:Int32 {
           get {
                return builderResult.dummy7
           }
           set (value) {
               builderResult.hasDummy7 = true
               builderResult.dummy7 = value
           }
      }
      public func setDummy7(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy7 = value
        return self
      }
      public func clearDummy7() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy7 = false
           builderResult.dummy7 = Int32(0)
           return self
      }
      public var hasDummy8:Bool {
           get {
                return builderResult.hasDummy8
           }
      }
      public var dummy8:Int32 {
           get {
                return builderResult.dummy8
           }
           set (value) {
               builderResult.hasDummy8 = true
               builderResult.dummy8 = value
           }
      }
      public func setDummy8(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy8 = value
        return self
      }
      public func clearDummy8() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy8 = false
           builderResult.dummy8 = Int32(0)
           return self
      }
      public var hasDummy9:Bool {
           get {
                return builderResult.hasDummy9
           }
      }
      public var dummy9:Int32 {
           get {
                return builderResult.dummy9
           }
           set (value) {
               builderResult.hasDummy9 = true
               builderResult.dummy9 = value
           }
      }
      public func setDummy9(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy9 = value
        return self
      }
      public func clearDummy9() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy9 = false
           builderResult.dummy9 = Int32(0)
           return self
      }
      public var hasDummy10:Bool {
           get {
                return builderResult.hasDummy10
           }
      }
      public var dummy10:Int32 {
           get {
                return builderResult.dummy10
           }
           set (value) {
               builderResult.hasDummy10 = true
               builderResult.dummy10 = value
           }
      }
      public func setDummy10(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy10 = value
        return self
      }
      public func clearDummy10() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy10 = false
           builderResult.dummy10 = Int32(0)
           return self
      }
      public var hasDummy11:Bool {
           get {
                return builderResult.hasDummy11
           }
      }
      public var dummy11:Int32 {
           get {
                return builderResult.dummy11
           }
           set (value) {
               builderResult.hasDummy11 = true
               builderResult.dummy11 = value
           }
      }
      public func setDummy11(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy11 = value
        return self
      }
      public func clearDummy11() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy11 = false
           builderResult.dummy11 = Int32(0)
           return self
      }
      public var hasDummy12:Bool {
           get {
                return builderResult.hasDummy12
           }
      }
      public var dummy12:Int32 {
           get {
                return builderResult.dummy12
           }
           set (value) {
               builderResult.hasDummy12 = true
               builderResult.dummy12 = value
           }
      }
      public func setDummy12(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy12 = value
        return self
      }
      public func clearDummy12() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy12 = false
           builderResult.dummy12 = Int32(0)
           return self
      }
      public var hasDummy13:Bool {
           get {
                return builderResult.hasDummy13
           }
      }
      public var dummy13:Int32 {
           get {
                return builderResult.dummy13
           }
           set (value) {
               builderResult.hasDummy13 = true
               builderResult.dummy13 = value
           }
      }
      public func setDummy13(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy13 = value
        return self
      }
      public func clearDummy13() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy13 = false
           builderResult.dummy13 = Int32(0)
           return self
      }
      public var hasDummy14:Bool {
           get {
                return builderResult.hasDummy14
           }
      }
      public var dummy14:Int32 {
           get {
                return builderResult.dummy14
           }
           set (value) {
               builderResult.hasDummy14 = true
               builderResult.dummy14 = value
           }
      }
      public func setDummy14(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy14 = value
        return self
      }
      public func clearDummy14() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy14 = false
           builderResult.dummy14 = Int32(0)
           return self
      }
      public var hasDummy15:Bool {
           get {
                return builderResult.hasDummy15
           }
      }
      public var dummy15:Int32 {
           get {
                return builderResult.dummy15
           }
           set (value) {
               builderResult.hasDummy15 = true
               builderResult.dummy15 = value
           }
      }
      public func setDummy15(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy15 = value
        return self
      }
      public func clearDummy15() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy15 = false
           builderResult.dummy15 = Int32(0)
           return self
      }
      public var hasDummy16:Bool {
           get {
                return builderResult.hasDummy16
           }
      }
      public var dummy16:Int32 {
           get {
                return builderResult.dummy16
           }
           set (value) {
               builderResult.hasDummy16 = true
               builderResult.dummy16 = value
           }
      }
      public func setDummy16(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy16 = value
        return self
      }
      public func clearDummy16() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy16 = false
           builderResult.dummy16 = Int32(0)
           return self
      }
      public var hasDummy17:Bool {
           get {
                return builderResult.hasDummy17
           }
      }
      public var dummy17:Int32 {
           get {
                return builderResult.dummy17
           }
           set (value) {
               builderResult.hasDummy17 = true
               builderResult.dummy17 = value
           }
      }
      public func setDummy17(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy17 = value
        return self
      }
      public func clearDummy17() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy17 = false
           builderResult.dummy17 = Int32(0)
           return self
      }
      public var hasDummy18:Bool {
           get {
                return builderResult.hasDummy18
           }
      }
      public var dummy18:Int32 {
           get {
                return builderResult.dummy18
           }
           set (value) {
               builderResult.hasDummy18 = true
               builderResult.dummy18 = value
           }
      }
      public func setDummy18(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy18 = value
        return self
      }
      public func clearDummy18() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy18 = false
           builderResult.dummy18 = Int32(0)
           return self
      }
      public var hasDummy19:Bool {
           get {
                return builderResult.hasDummy19
           }
      }
      public var dummy19:Int32 {
           get {
                return builderResult.dummy19
           }
           set (value) {
               builderResult.hasDummy19 = true
               builderResult.dummy19 = value
           }
      }
      public func setDummy19(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy19 = value
        return self
      }
      public func clearDummy19() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy19 = false
           builderResult.dummy19 = Int32(0)
           return self
      }
      public var hasDummy20:Bool {
           get {
                return builderResult.hasDummy20
           }
      }
      public var dummy20:Int32 {
           get {
                return builderResult.dummy20
           }
           set (value) {
               builderResult.hasDummy20 = true
               builderResult.dummy20 = value
           }
      }
      public func setDummy20(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy20 = value
        return self
      }
      public func clearDummy20() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy20 = false
           builderResult.dummy20 = Int32(0)
           return self
      }
      public var hasDummy21:Bool {
           get {
                return builderResult.hasDummy21
           }
      }
      public var dummy21:Int32 {
           get {
                return builderResult.dummy21
           }
           set (value) {
               builderResult.hasDummy21 = true
               builderResult.dummy21 = value
           }
      }
      public func setDummy21(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy21 = value
        return self
      }
      public func clearDummy21() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy21 = false
           builderResult.dummy21 = Int32(0)
           return self
      }
      public var hasDummy22:Bool {
           get {
                return builderResult.hasDummy22
           }
      }
      public var dummy22:Int32 {
           get {
                return builderResult.dummy22
           }
           set (value) {
               builderResult.hasDummy22 = true
               builderResult.dummy22 = value
           }
      }
      public func setDummy22(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy22 = value
        return self
      }
      public func clearDummy22() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy22 = false
           builderResult.dummy22 = Int32(0)
           return self
      }
      public var hasDummy23:Bool {
           get {
                return builderResult.hasDummy23
           }
      }
      public var dummy23:Int32 {
           get {
                return builderResult.dummy23
           }
           set (value) {
               builderResult.hasDummy23 = true
               builderResult.dummy23 = value
           }
      }
      public func setDummy23(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy23 = value
        return self
      }
      public func clearDummy23() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy23 = false
           builderResult.dummy23 = Int32(0)
           return self
      }
      public var hasDummy24:Bool {
           get {
                return builderResult.hasDummy24
           }
      }
      public var dummy24:Int32 {
           get {
                return builderResult.dummy24
           }
           set (value) {
               builderResult.hasDummy24 = true
               builderResult.dummy24 = value
           }
      }
      public func setDummy24(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy24 = value
        return self
      }
      public func clearDummy24() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy24 = false
           builderResult.dummy24 = Int32(0)
           return self
      }
      public var hasDummy25:Bool {
           get {
                return builderResult.hasDummy25
           }
      }
      public var dummy25:Int32 {
           get {
                return builderResult.dummy25
           }
           set (value) {
               builderResult.hasDummy25 = true
               builderResult.dummy25 = value
           }
      }
      public func setDummy25(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy25 = value
        return self
      }
      public func clearDummy25() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy25 = false
           builderResult.dummy25 = Int32(0)
           return self
      }
      public var hasDummy26:Bool {
           get {
                return builderResult.hasDummy26
           }
      }
      public var dummy26:Int32 {
           get {
                return builderResult.dummy26
           }
           set (value) {
               builderResult.hasDummy26 = true
               builderResult.dummy26 = value
           }
      }
      public func setDummy26(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy26 = value
        return self
      }
      public func clearDummy26() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy26 = false
           builderResult.dummy26 = Int32(0)
           return self
      }
      public var hasDummy27:Bool {
           get {
                return builderResult.hasDummy27
           }
      }
      public var dummy27:Int32 {
           get {
                return builderResult.dummy27
           }
           set (value) {
               builderResult.hasDummy27 = true
               builderResult.dummy27 = value
           }
      }
      public func setDummy27(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy27 = value
        return self
      }
      public func clearDummy27() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy27 = false
           builderResult.dummy27 = Int32(0)
           return self
      }
      public var hasDummy28:Bool {
           get {
                return builderResult.hasDummy28
           }
      }
      public var dummy28:Int32 {
           get {
                return builderResult.dummy28
           }
           set (value) {
               builderResult.hasDummy28 = true
               builderResult.dummy28 = value
           }
      }
      public func setDummy28(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy28 = value
        return self
      }
      public func clearDummy28() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy28 = false
           builderResult.dummy28 = Int32(0)
           return self
      }
      public var hasDummy29:Bool {
           get {
                return builderResult.hasDummy29
           }
      }
      public var dummy29:Int32 {
           get {
                return builderResult.dummy29
           }
           set (value) {
               builderResult.hasDummy29 = true
               builderResult.dummy29 = value
           }
      }
      public func setDummy29(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy29 = value
        return self
      }
      public func clearDummy29() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy29 = false
           builderResult.dummy29 = Int32(0)
           return self
      }
      public var hasDummy30:Bool {
           get {
                return builderResult.hasDummy30
           }
      }
      public var dummy30:Int32 {
           get {
                return builderResult.dummy30
           }
           set (value) {
               builderResult.hasDummy30 = true
               builderResult.dummy30 = value
           }
      }
      public func setDummy30(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy30 = value
        return self
      }
      public func clearDummy30() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy30 = false
           builderResult.dummy30 = Int32(0)
           return self
      }
      public var hasDummy31:Bool {
           get {
                return builderResult.hasDummy31
           }
      }
      public var dummy31:Int32 {
           get {
                return builderResult.dummy31
           }
           set (value) {
               builderResult.hasDummy31 = true
               builderResult.dummy31 = value
           }
      }
      public func setDummy31(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy31 = value
        return self
      }
      public func clearDummy31() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy31 = false
           builderResult.dummy31 = Int32(0)
           return self
      }
      public var hasDummy32:Bool {
           get {
                return builderResult.hasDummy32
           }
      }
      public var dummy32:Int32 {
           get {
                return builderResult.dummy32
           }
           set (value) {
               builderResult.hasDummy32 = true
               builderResult.dummy32 = value
           }
      }
      public func setDummy32(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.dummy32 = value
        return self
      }
      public func clearDummy32() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasDummy32 = false
           builderResult.dummy32 = Int32(0)
           return self
      }
      public var hasC:Bool {
           get {
                return builderResult.hasC
           }
      }
      public var c:Int32 {
           get {
                return builderResult.c
           }
           set (value) {
               builderResult.hasC = true
               builderResult.c = value
           }
      }
      public func setC(_ value:Int32) -> ProtobufUnittest.TestRequired.Builder {
        self.c = value
        return self
      }
      public func clearC() -> ProtobufUnittest.TestRequired.Builder{
           builderResult.hasC = false
           builderResult.c = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestRequired.Builder {
        builderResult = ProtobufUnittest.TestRequired()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestRequired.Builder {
        return try ProtobufUnittest.TestRequired.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestRequired {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestRequired {
        let returnMe:ProtobufUnittest.TestRequired = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestRequired) throws -> ProtobufUnittest.TestRequired.Builder {
        if other == ProtobufUnittest.TestRequired() {
         return self
        }
        if other.hasA {
             a = other.a
        }
        if other.hasDummy2 {
             dummy2 = other.dummy2
        }
        if other.hasB {
             b = other.b
        }
        if other.hasDummy4 {
             dummy4 = other.dummy4
        }
        if other.hasDummy5 {
             dummy5 = other.dummy5
        }
        if other.hasDummy6 {
             dummy6 = other.dummy6
        }
        if other.hasDummy7 {
             dummy7 = other.dummy7
        }
        if other.hasDummy8 {
             dummy8 = other.dummy8
        }
        if other.hasDummy9 {
             dummy9 = other.dummy9
        }
        if other.hasDummy10 {
             dummy10 = other.dummy10
        }
        if other.hasDummy11 {
             dummy11 = other.dummy11
        }
        if other.hasDummy12 {
             dummy12 = other.dummy12
        }
        if other.hasDummy13 {
             dummy13 = other.dummy13
        }
        if other.hasDummy14 {
             dummy14 = other.dummy14
        }
        if other.hasDummy15 {
             dummy15 = other.dummy15
        }
        if other.hasDummy16 {
             dummy16 = other.dummy16
        }
        if other.hasDummy17 {
             dummy17 = other.dummy17
        }
        if other.hasDummy18 {
             dummy18 = other.dummy18
        }
        if other.hasDummy19 {
             dummy19 = other.dummy19
        }
        if other.hasDummy20 {
             dummy20 = other.dummy20
        }
        if other.hasDummy21 {
             dummy21 = other.dummy21
        }
        if other.hasDummy22 {
             dummy22 = other.dummy22
        }
        if other.hasDummy23 {
             dummy23 = other.dummy23
        }
        if other.hasDummy24 {
             dummy24 = other.dummy24
        }
        if other.hasDummy25 {
             dummy25 = other.dummy25
        }
        if other.hasDummy26 {
             dummy26 = other.dummy26
        }
        if other.hasDummy27 {
             dummy27 = other.dummy27
        }
        if other.hasDummy28 {
             dummy28 = other.dummy28
        }
        if other.hasDummy29 {
             dummy29 = other.dummy29
        }
        if other.hasDummy30 {
             dummy30 = other.dummy30
        }
        if other.hasDummy31 {
             dummy31 = other.dummy31
        }
        if other.hasDummy32 {
             dummy32 = other.dummy32
        }
        if other.hasC {
             c = other.c
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRequired.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequired.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            a = try input.readInt32()

          case 16 :
            dummy2 = try input.readInt32()

          case 24 :
            b = try input.readInt32()

          case 32 :
            dummy4 = try input.readInt32()

          case 40 :
            dummy5 = try input.readInt32()

          case 48 :
            dummy6 = try input.readInt32()

          case 56 :
            dummy7 = try input.readInt32()

          case 64 :
            dummy8 = try input.readInt32()

          case 72 :
            dummy9 = try input.readInt32()

          case 80 :
            dummy10 = try input.readInt32()

          case 88 :
            dummy11 = try input.readInt32()

          case 96 :
            dummy12 = try input.readInt32()

          case 104 :
            dummy13 = try input.readInt32()

          case 112 :
            dummy14 = try input.readInt32()

          case 120 :
            dummy15 = try input.readInt32()

          case 128 :
            dummy16 = try input.readInt32()

          case 136 :
            dummy17 = try input.readInt32()

          case 144 :
            dummy18 = try input.readInt32()

          case 152 :
            dummy19 = try input.readInt32()

          case 160 :
            dummy20 = try input.readInt32()

          case 168 :
            dummy21 = try input.readInt32()

          case 176 :
            dummy22 = try input.readInt32()

          case 184 :
            dummy23 = try input.readInt32()

          case 192 :
            dummy24 = try input.readInt32()

          case 200 :
            dummy25 = try input.readInt32()

          case 208 :
            dummy26 = try input.readInt32()

          case 216 :
            dummy27 = try input.readInt32()

          case 224 :
            dummy28 = try input.readInt32()

          case 232 :
            dummy29 = try input.readInt32()

          case 240 :
            dummy30 = try input.readInt32()

          case 248 :
            dummy31 = try input.readInt32()

          case 256 :
            dummy32 = try input.readInt32()

          case 264 :
            c = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestRequiredForeign : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var optionalMessage:ProtobufUnittest.TestRequired!
    public private(set) var hasOptionalMessage:Bool = false
    public private(set) var repeatedMessage:Array<ProtobufUnittest.TestRequired>  = Array<ProtobufUnittest.TestRequired>()
    public private(set) var dummy:Int32 = Int32(0)

    public private(set) var hasDummy:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if hasOptionalMessage {
       if !optionalMessage.isInitialized() {
         return false
       }
      }
      var isInitrepeatedMessage:Bool = true
      for oneElementrepeatedMessage in repeatedMessage {
          if (!oneElementrepeatedMessage.isInitialized()) {
              isInitrepeatedMessage = false
              break 
          }
      }
      if !isInitrepeatedMessage {
       return isInitrepeatedMessage
       }
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasOptionalMessage {
        try output.writeMessage(1, value:optionalMessage)
      }
      for oneElementrepeatedMessage in repeatedMessage {
          try output.writeMessage(2, value:oneElementrepeatedMessage)
      }
      if hasDummy {
        try output.writeInt32(3, value:dummy)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOptionalMessage {
          if let varSizeoptionalMessage = optionalMessage?.computeMessageSize(1) {
              serialize_size += varSizeoptionalMessage
          }
      }
      for oneElementrepeatedMessage in repeatedMessage {
          serialize_size += oneElementrepeatedMessage.computeMessageSize(2)
      }
      if hasDummy {
        serialize_size += dummy.computeInt32Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestRequiredForeign> {
      var mergedArray = Array<ProtobufUnittest.TestRequiredForeign>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRequiredForeign? {
      return try ProtobufUnittest.TestRequiredForeign.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestRequiredForeign {
      return try ProtobufUnittest.TestRequiredForeign.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredForeign {
      return try ProtobufUnittest.TestRequiredForeign.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRequiredForeign {
      return try ProtobufUnittest.TestRequiredForeign.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredForeign {
      return try ProtobufUnittest.TestRequiredForeign.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRequiredForeign {
      return try ProtobufUnittest.TestRequiredForeign.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredForeign {
      return try ProtobufUnittest.TestRequiredForeign.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestRequiredForeign.Builder {
      return ProtobufUnittest.TestRequiredForeign.classBuilder() as! ProtobufUnittest.TestRequiredForeign.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestRequiredForeign.Builder {
      return classBuilder() as! ProtobufUnittest.TestRequiredForeign.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequiredForeign.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequiredForeign.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestRequiredForeign.Builder {
      return try ProtobufUnittest.TestRequiredForeign.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestRequiredForeign) throws -> ProtobufUnittest.TestRequiredForeign.Builder {
      return try ProtobufUnittest.TestRequiredForeign.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasOptionalMessage {
        output += "\(indent) optionalMessage {\n"
        if let outDescOptionalMessage = optionalMessage {
          output += try outDescOptionalMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var repeatedMessageElementIndex:Int = 0
      for oneElementrepeatedMessage in repeatedMessage {
          output += "\(indent) repeatedMessage[\(repeatedMessageElementIndex)] {\n"
          output += try oneElementrepeatedMessage.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedMessageElementIndex += 1
      }
      if hasDummy {
        output += "\(indent) dummy: \(dummy) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOptionalMessage {
                if let hashValueoptionalMessage = optionalMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalMessage
                }
            }
            for oneElementrepeatedMessage in repeatedMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedMessage.hashValue
            }
            if hasDummy {
               hashCode = (hashCode &* 31) &+ dummy.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestRequiredForeign"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestRequiredForeign"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestRequiredForeign.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestRequiredForeign = ProtobufUnittest.TestRequiredForeign()
      public func getMessage() -> ProtobufUnittest.TestRequiredForeign {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasOptionalMessage:Bool {
           get {
               return builderResult.hasOptionalMessage
           }
      }
      public var optionalMessage:ProtobufUnittest.TestRequired! {
           get {
               if optionalMessageBuilder_ != nil {
                  builderResult.optionalMessage = optionalMessageBuilder_.getMessage()
               }
               return builderResult.optionalMessage
           }
           set (value) {
               builderResult.hasOptionalMessage = true
               builderResult.optionalMessage = value
           }
      }
      private var optionalMessageBuilder_:ProtobufUnittest.TestRequired.Builder! {
           didSet {
              builderResult.hasOptionalMessage = true
           }
      }
      public func getOptionalMessageBuilder() -> ProtobufUnittest.TestRequired.Builder {
        if optionalMessageBuilder_ == nil {
           optionalMessageBuilder_ = ProtobufUnittest.TestRequired.Builder()
           builderResult.optionalMessage = optionalMessageBuilder_.getMessage()
           if optionalMessage != nil {
              try! optionalMessageBuilder_.mergeFrom(optionalMessage)
           }
        }
        return optionalMessageBuilder_
      }
      public func setOptionalMessage(_ value:ProtobufUnittest.TestRequired!) -> ProtobufUnittest.TestRequiredForeign.Builder {
        self.optionalMessage = value
        return self
      }
      public func mergeOptionalMessage(_ value:ProtobufUnittest.TestRequired) throws -> ProtobufUnittest.TestRequiredForeign.Builder {
        if builderResult.hasOptionalMessage {
          builderResult.optionalMessage = try ProtobufUnittest.TestRequired.builderWithPrototype(builderResult.optionalMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalMessage = value
        }
        builderResult.hasOptionalMessage = true
        return self
      }
      public func clearOptionalMessage() -> ProtobufUnittest.TestRequiredForeign.Builder {
        optionalMessageBuilder_ = nil
        builderResult.hasOptionalMessage = false
        builderResult.optionalMessage = nil
        return self
      }
      public var repeatedMessage:Array<ProtobufUnittest.TestRequired> {
           get {
               return builderResult.repeatedMessage
           }
           set (value) {
               builderResult.repeatedMessage = value
           }
      }
      public func setRepeatedMessage(_ value:Array<ProtobufUnittest.TestRequired>) -> ProtobufUnittest.TestRequiredForeign.Builder {
        self.repeatedMessage = value
        return self
      }
      public func clearRepeatedMessage() -> ProtobufUnittest.TestRequiredForeign.Builder {
        builderResult.repeatedMessage.removeAll(keepingCapacity: false)
        return self
      }
      public var hasDummy:Bool {
           get {
                return builderResult.hasDummy
           }
      }
      public var dummy:Int32 {
           get {
                return builderResult.dummy
           }
           set (value) {
               builderResult.hasDummy = true
               builderResult.dummy = value
           }
      }
      public func setDummy(_ value:Int32) -> ProtobufUnittest.TestRequiredForeign.Builder {
        self.dummy = value
        return self
      }
      public func clearDummy() -> ProtobufUnittest.TestRequiredForeign.Builder{
           builderResult.hasDummy = false
           builderResult.dummy = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestRequiredForeign.Builder {
        builderResult = ProtobufUnittest.TestRequiredForeign()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestRequiredForeign.Builder {
        return try ProtobufUnittest.TestRequiredForeign.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestRequiredForeign {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestRequiredForeign {
        let returnMe:ProtobufUnittest.TestRequiredForeign = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestRequiredForeign) throws -> ProtobufUnittest.TestRequiredForeign.Builder {
        if other == ProtobufUnittest.TestRequiredForeign() {
         return self
        }
        if (other.hasOptionalMessage) {
            try mergeOptionalMessage(other.optionalMessage)
        }
        if !other.repeatedMessage.isEmpty  {
           builderResult.repeatedMessage += other.repeatedMessage
        }
        if other.hasDummy {
             dummy = other.dummy
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRequiredForeign.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredForeign.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestRequired.Builder = ProtobufUnittest.TestRequired.Builder()
            if hasOptionalMessage {
              try subBuilder.mergeFrom(optionalMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalMessage = subBuilder.buildPartial()

          case 18 :
            let subBuilder = ProtobufUnittest.TestRequired.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedMessage += [subBuilder.buildPartial()]

          case 24 :
            dummy = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Test that we can use NestedMessage from outside TestAllTypes.
  final public class TestForeignNested : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var foreignNested:ProtobufUnittest.TestAllTypes.NestedMessage!
    public private(set) var hasForeignNested:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasForeignNested {
        try output.writeMessage(1, value:foreignNested)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasForeignNested {
          if let varSizeforeignNested = foreignNested?.computeMessageSize(1) {
              serialize_size += varSizeforeignNested
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestForeignNested> {
      var mergedArray = Array<ProtobufUnittest.TestForeignNested>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestForeignNested? {
      return try ProtobufUnittest.TestForeignNested.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestForeignNested {
      return try ProtobufUnittest.TestForeignNested.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestForeignNested {
      return try ProtobufUnittest.TestForeignNested.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestForeignNested {
      return try ProtobufUnittest.TestForeignNested.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestForeignNested {
      return try ProtobufUnittest.TestForeignNested.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestForeignNested {
      return try ProtobufUnittest.TestForeignNested.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestForeignNested {
      return try ProtobufUnittest.TestForeignNested.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestForeignNested.Builder {
      return ProtobufUnittest.TestForeignNested.classBuilder() as! ProtobufUnittest.TestForeignNested.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestForeignNested.Builder {
      return classBuilder() as! ProtobufUnittest.TestForeignNested.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestForeignNested.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestForeignNested.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestForeignNested.Builder {
      return try ProtobufUnittest.TestForeignNested.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestForeignNested) throws -> ProtobufUnittest.TestForeignNested.Builder {
      return try ProtobufUnittest.TestForeignNested.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasForeignNested {
        output += "\(indent) foreignNested {\n"
        if let outDescForeignNested = foreignNested {
          output += try outDescForeignNested.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasForeignNested {
                if let hashValueforeignNested = foreignNested?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueforeignNested
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestForeignNested"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestForeignNested"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestForeignNested.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestForeignNested = ProtobufUnittest.TestForeignNested()
      public func getMessage() -> ProtobufUnittest.TestForeignNested {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasForeignNested:Bool {
           get {
               return builderResult.hasForeignNested
           }
      }
      public var foreignNested:ProtobufUnittest.TestAllTypes.NestedMessage! {
           get {
               if foreignNestedBuilder_ != nil {
                  builderResult.foreignNested = foreignNestedBuilder_.getMessage()
               }
               return builderResult.foreignNested
           }
           set (value) {
               builderResult.hasForeignNested = true
               builderResult.foreignNested = value
           }
      }
      private var foreignNestedBuilder_:ProtobufUnittest.TestAllTypes.NestedMessage.Builder! {
           didSet {
              builderResult.hasForeignNested = true
           }
      }
      public func getForeignNestedBuilder() -> ProtobufUnittest.TestAllTypes.NestedMessage.Builder {
        if foreignNestedBuilder_ == nil {
           foreignNestedBuilder_ = ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
           builderResult.foreignNested = foreignNestedBuilder_.getMessage()
           if foreignNested != nil {
              try! foreignNestedBuilder_.mergeFrom(foreignNested)
           }
        }
        return foreignNestedBuilder_
      }
      public func setForeignNested(_ value:ProtobufUnittest.TestAllTypes.NestedMessage!) -> ProtobufUnittest.TestForeignNested.Builder {
        self.foreignNested = value
        return self
      }
      public func mergeForeignNested(_ value:ProtobufUnittest.TestAllTypes.NestedMessage) throws -> ProtobufUnittest.TestForeignNested.Builder {
        if builderResult.hasForeignNested {
          builderResult.foreignNested = try ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.foreignNested).mergeFrom(value).buildPartial()
        } else {
          builderResult.foreignNested = value
        }
        builderResult.hasForeignNested = true
        return self
      }
      public func clearForeignNested() -> ProtobufUnittest.TestForeignNested.Builder {
        foreignNestedBuilder_ = nil
        builderResult.hasForeignNested = false
        builderResult.foreignNested = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestForeignNested.Builder {
        builderResult = ProtobufUnittest.TestForeignNested()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestForeignNested.Builder {
        return try ProtobufUnittest.TestForeignNested.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestForeignNested {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestForeignNested {
        let returnMe:ProtobufUnittest.TestForeignNested = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestForeignNested) throws -> ProtobufUnittest.TestForeignNested.Builder {
        if other == ProtobufUnittest.TestForeignNested() {
         return self
        }
        if (other.hasForeignNested) {
            try mergeForeignNested(other.foreignNested)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestForeignNested.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestForeignNested.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestAllTypes.NestedMessage.Builder = ProtobufUnittest.TestAllTypes.NestedMessage.Builder()
            if hasForeignNested {
              try subBuilder.mergeFrom(foreignNested)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            foreignNested = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // TestEmptyMessage is used to test unknown field support.
  final public class TestEmptyMessage : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestEmptyMessage> {
      var mergedArray = Array<ProtobufUnittest.TestEmptyMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestEmptyMessage? {
      return try ProtobufUnittest.TestEmptyMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestEmptyMessage {
      return try ProtobufUnittest.TestEmptyMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmptyMessage {
      return try ProtobufUnittest.TestEmptyMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestEmptyMessage {
      return try ProtobufUnittest.TestEmptyMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmptyMessage {
      return try ProtobufUnittest.TestEmptyMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestEmptyMessage {
      return try ProtobufUnittest.TestEmptyMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmptyMessage {
      return try ProtobufUnittest.TestEmptyMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestEmptyMessage.Builder {
      return ProtobufUnittest.TestEmptyMessage.classBuilder() as! ProtobufUnittest.TestEmptyMessage.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestEmptyMessage.Builder {
      return classBuilder() as! ProtobufUnittest.TestEmptyMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEmptyMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEmptyMessage.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestEmptyMessage.Builder {
      return try ProtobufUnittest.TestEmptyMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestEmptyMessage) throws -> ProtobufUnittest.TestEmptyMessage.Builder {
      return try ProtobufUnittest.TestEmptyMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestEmptyMessage"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestEmptyMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestEmptyMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestEmptyMessage = ProtobufUnittest.TestEmptyMessage()
      public func getMessage() -> ProtobufUnittest.TestEmptyMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestEmptyMessage.Builder {
        builderResult = ProtobufUnittest.TestEmptyMessage()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestEmptyMessage.Builder {
        return try ProtobufUnittest.TestEmptyMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestEmptyMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestEmptyMessage {
        let returnMe:ProtobufUnittest.TestEmptyMessage = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestEmptyMessage) throws -> ProtobufUnittest.TestEmptyMessage.Builder {
        if other == ProtobufUnittest.TestEmptyMessage() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestEmptyMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmptyMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Like above, but declare all field numbers as potential extensions.  No
  // actual extensions should ever be defined for this type.
  final public class TestEmptyMessageWithExtensions : ExtendableMessage, GeneratedMessageProtocol{
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestEmptyMessageWithExtensions> {
      var mergedArray = Array<ProtobufUnittest.TestEmptyMessageWithExtensions>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions? {
      return try ProtobufUnittest.TestEmptyMessageWithExtensions.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return try ProtobufUnittest.TestEmptyMessageWithExtensions.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return try ProtobufUnittest.TestEmptyMessageWithExtensions.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return try ProtobufUnittest.TestEmptyMessageWithExtensions.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return try ProtobufUnittest.TestEmptyMessageWithExtensions.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return try ProtobufUnittest.TestEmptyMessageWithExtensions.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return try ProtobufUnittest.TestEmptyMessageWithExtensions.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestEmptyMessageWithExtensions.Builder {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.classBuilder() as! ProtobufUnittest.TestEmptyMessageWithExtensions.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestEmptyMessageWithExtensions.Builder {
      return classBuilder() as! ProtobufUnittest.TestEmptyMessageWithExtensions.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestEmptyMessageWithExtensions.Builder {
      return try ProtobufUnittest.TestEmptyMessageWithExtensions.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestEmptyMessageWithExtensions) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions.Builder {
      return try ProtobufUnittest.TestEmptyMessageWithExtensions.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += try getExtensionDescription(Int32(1), endExclusive:Int32(536870912), indent:indent)
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestEmptyMessageWithExtensions"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestEmptyMessageWithExtensions"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestEmptyMessageWithExtensions.self
    }
    //Meta information declaration end

    final public class Builder : ExtendableMessageBuilder {
      private var builderResult:ProtobufUnittest.TestEmptyMessageWithExtensions = ProtobufUnittest.TestEmptyMessageWithExtensions()
      public func getMessage() -> ProtobufUnittest.TestEmptyMessageWithExtensions {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:ExtendableMessage {
           get {
               return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestEmptyMessageWithExtensions.Builder {
        builderResult = ProtobufUnittest.TestEmptyMessageWithExtensions()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestEmptyMessageWithExtensions.Builder {
        return try ProtobufUnittest.TestEmptyMessageWithExtensions.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestEmptyMessageWithExtensions {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestEmptyMessageWithExtensions {
        let returnMe:ProtobufUnittest.TestEmptyMessageWithExtensions = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestEmptyMessageWithExtensions) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions.Builder {
        if other == ProtobufUnittest.TestEmptyMessageWithExtensions() {
         return self
        }
        try mergeExtensionFields(other)
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmptyMessageWithExtensions.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestMultipleExtensionRanges : ExtendableMessage, GeneratedMessageProtocol{
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(42), endExclusive:Int32(43))
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(4143), endExclusive:Int32(4244))
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(65536), endExclusive:Int32(536870912))
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestMultipleExtensionRanges> {
      var mergedArray = Array<ProtobufUnittest.TestMultipleExtensionRanges>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestMultipleExtensionRanges? {
      return try ProtobufUnittest.TestMultipleExtensionRanges.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestMultipleExtensionRanges {
      return try ProtobufUnittest.TestMultipleExtensionRanges.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMultipleExtensionRanges {
      return try ProtobufUnittest.TestMultipleExtensionRanges.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestMultipleExtensionRanges {
      return try ProtobufUnittest.TestMultipleExtensionRanges.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMultipleExtensionRanges {
      return try ProtobufUnittest.TestMultipleExtensionRanges.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestMultipleExtensionRanges {
      return try ProtobufUnittest.TestMultipleExtensionRanges.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMultipleExtensionRanges {
      return try ProtobufUnittest.TestMultipleExtensionRanges.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestMultipleExtensionRanges.Builder {
      return ProtobufUnittest.TestMultipleExtensionRanges.classBuilder() as! ProtobufUnittest.TestMultipleExtensionRanges.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestMultipleExtensionRanges.Builder {
      return classBuilder() as! ProtobufUnittest.TestMultipleExtensionRanges.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMultipleExtensionRanges.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMultipleExtensionRanges.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestMultipleExtensionRanges.Builder {
      return try ProtobufUnittest.TestMultipleExtensionRanges.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestMultipleExtensionRanges) throws -> ProtobufUnittest.TestMultipleExtensionRanges.Builder {
      return try ProtobufUnittest.TestMultipleExtensionRanges.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += try getExtensionDescription(Int32(42), endExclusive:Int32(43), indent:indent)
      output += try getExtensionDescription(Int32(4143), endExclusive:Int32(4244), indent:indent)
      output += try getExtensionDescription(Int32(65536), endExclusive:Int32(536870912), indent:indent)
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(42), endExclusive:Int32(43)))
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(4143), endExclusive:Int32(4244)))
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(65536), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestMultipleExtensionRanges"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestMultipleExtensionRanges"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestMultipleExtensionRanges.self
    }
    //Meta information declaration end

    final public class Builder : ExtendableMessageBuilder {
      private var builderResult:ProtobufUnittest.TestMultipleExtensionRanges = ProtobufUnittest.TestMultipleExtensionRanges()
      public func getMessage() -> ProtobufUnittest.TestMultipleExtensionRanges {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:ExtendableMessage {
           get {
               return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestMultipleExtensionRanges.Builder {
        builderResult = ProtobufUnittest.TestMultipleExtensionRanges()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestMultipleExtensionRanges.Builder {
        return try ProtobufUnittest.TestMultipleExtensionRanges.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestMultipleExtensionRanges {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestMultipleExtensionRanges {
        let returnMe:ProtobufUnittest.TestMultipleExtensionRanges = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestMultipleExtensionRanges) throws -> ProtobufUnittest.TestMultipleExtensionRanges.Builder {
        if other == ProtobufUnittest.TestMultipleExtensionRanges() {
         return self
        }
        try mergeExtensionFields(other)
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestMultipleExtensionRanges.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMultipleExtensionRanges.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Test that really large tag numbers don't break anything.
  final public class TestReallyLargeTagNumber : GeneratedMessage, GeneratedMessageProtocol {
    // The largest possible tag number is 2^28 - 1, since the wire format uses
    // three bits to communicate wire type.
    public private(set) var a:Int32 = Int32(0)

    public private(set) var hasA:Bool = false
    public private(set) var bb:Int32 = Int32(0)

    public private(set) var hasBb:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasA {
        try output.writeInt32(1, value:a)
      }
      if hasBb {
        try output.writeInt32(268435455, value:bb)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeInt32Size(1)
      }
      if hasBb {
        serialize_size += bb.computeInt32Size(268435455)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestReallyLargeTagNumber> {
      var mergedArray = Array<ProtobufUnittest.TestReallyLargeTagNumber>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestReallyLargeTagNumber? {
      return try ProtobufUnittest.TestReallyLargeTagNumber.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestReallyLargeTagNumber {
      return try ProtobufUnittest.TestReallyLargeTagNumber.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestReallyLargeTagNumber {
      return try ProtobufUnittest.TestReallyLargeTagNumber.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestReallyLargeTagNumber {
      return try ProtobufUnittest.TestReallyLargeTagNumber.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestReallyLargeTagNumber {
      return try ProtobufUnittest.TestReallyLargeTagNumber.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestReallyLargeTagNumber {
      return try ProtobufUnittest.TestReallyLargeTagNumber.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestReallyLargeTagNumber {
      return try ProtobufUnittest.TestReallyLargeTagNumber.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
      return ProtobufUnittest.TestReallyLargeTagNumber.classBuilder() as! ProtobufUnittest.TestReallyLargeTagNumber.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
      return classBuilder() as! ProtobufUnittest.TestReallyLargeTagNumber.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestReallyLargeTagNumber.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestReallyLargeTagNumber.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
      return try ProtobufUnittest.TestReallyLargeTagNumber.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestReallyLargeTagNumber) throws -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
      return try ProtobufUnittest.TestReallyLargeTagNumber.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      if hasBb {
        output += "\(indent) bb: \(bb) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            if hasBb {
               hashCode = (hashCode &* 31) &+ bb.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestReallyLargeTagNumber"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestReallyLargeTagNumber"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestReallyLargeTagNumber.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestReallyLargeTagNumber = ProtobufUnittest.TestReallyLargeTagNumber()
      public func getMessage() -> ProtobufUnittest.TestReallyLargeTagNumber {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasA:Bool {
           get {
                return builderResult.hasA
           }
      }
      public var a:Int32 {
           get {
                return builderResult.a
           }
           set (value) {
               builderResult.hasA = true
               builderResult.a = value
           }
      }
      public func setA(_ value:Int32) -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
        self.a = value
        return self
      }
      public func clearA() -> ProtobufUnittest.TestReallyLargeTagNumber.Builder{
           builderResult.hasA = false
           builderResult.a = Int32(0)
           return self
      }
      public var hasBb:Bool {
           get {
                return builderResult.hasBb
           }
      }
      public var bb:Int32 {
           get {
                return builderResult.bb
           }
           set (value) {
               builderResult.hasBb = true
               builderResult.bb = value
           }
      }
      public func setBb(_ value:Int32) -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
        self.bb = value
        return self
      }
      public func clearBb() -> ProtobufUnittest.TestReallyLargeTagNumber.Builder{
           builderResult.hasBb = false
           builderResult.bb = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
        builderResult = ProtobufUnittest.TestReallyLargeTagNumber()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
        return try ProtobufUnittest.TestReallyLargeTagNumber.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestReallyLargeTagNumber {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestReallyLargeTagNumber {
        let returnMe:ProtobufUnittest.TestReallyLargeTagNumber = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestReallyLargeTagNumber) throws -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
        if other == ProtobufUnittest.TestReallyLargeTagNumber() {
         return self
        }
        if other.hasA {
             a = other.a
        }
        if other.hasBb {
             bb = other.bb
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestReallyLargeTagNumber.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            a = try input.readInt32()

          case 2147483640 :
            bb = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestRecursiveMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var a:ProtobufUnittest.TestRecursiveMessage!
    public private(set) var hasA:Bool = false
    public private(set) var i:Int32 = Int32(0)

    public private(set) var hasI:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasA {
        try output.writeMessage(1, value:a)
      }
      if hasI {
        try output.writeInt32(2, value:i)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
          if let varSizea = a?.computeMessageSize(1) {
              serialize_size += varSizea
          }
      }
      if hasI {
        serialize_size += i.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestRecursiveMessage> {
      var mergedArray = Array<ProtobufUnittest.TestRecursiveMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRecursiveMessage? {
      return try ProtobufUnittest.TestRecursiveMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestRecursiveMessage {
      return try ProtobufUnittest.TestRecursiveMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRecursiveMessage {
      return try ProtobufUnittest.TestRecursiveMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRecursiveMessage {
      return try ProtobufUnittest.TestRecursiveMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRecursiveMessage {
      return try ProtobufUnittest.TestRecursiveMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRecursiveMessage {
      return try ProtobufUnittest.TestRecursiveMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRecursiveMessage {
      return try ProtobufUnittest.TestRecursiveMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestRecursiveMessage.Builder {
      return ProtobufUnittest.TestRecursiveMessage.classBuilder() as! ProtobufUnittest.TestRecursiveMessage.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestRecursiveMessage.Builder {
      return classBuilder() as! ProtobufUnittest.TestRecursiveMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRecursiveMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRecursiveMessage.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestRecursiveMessage.Builder {
      return try ProtobufUnittest.TestRecursiveMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestRecursiveMessage) throws -> ProtobufUnittest.TestRecursiveMessage.Builder {
      return try ProtobufUnittest.TestRecursiveMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasA {
        output += "\(indent) a {\n"
        if let outDescA = a {
          output += try outDescA.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasI {
        output += "\(indent) i: \(i) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
                if let hashValuea = a?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuea
                }
            }
            if hasI {
               hashCode = (hashCode &* 31) &+ i.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestRecursiveMessage"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestRecursiveMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestRecursiveMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestRecursiveMessage = ProtobufUnittest.TestRecursiveMessage()
      public func getMessage() -> ProtobufUnittest.TestRecursiveMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasA:Bool {
           get {
               return builderResult.hasA
           }
      }
      public var a:ProtobufUnittest.TestRecursiveMessage! {
           get {
               if aBuilder_ != nil {
                  builderResult.a = aBuilder_.getMessage()
               }
               return builderResult.a
           }
           set (value) {
               builderResult.hasA = true
               builderResult.a = value
           }
      }
      private var aBuilder_:ProtobufUnittest.TestRecursiveMessage.Builder! {
           didSet {
              builderResult.hasA = true
           }
      }
      public func getABuilder() -> ProtobufUnittest.TestRecursiveMessage.Builder {
        if aBuilder_ == nil {
           aBuilder_ = ProtobufUnittest.TestRecursiveMessage.Builder()
           builderResult.a = aBuilder_.getMessage()
           if a != nil {
              try! aBuilder_.mergeFrom(a)
           }
        }
        return aBuilder_
      }
      public func setA(_ value:ProtobufUnittest.TestRecursiveMessage!) -> ProtobufUnittest.TestRecursiveMessage.Builder {
        self.a = value
        return self
      }
      public func mergeA(_ value:ProtobufUnittest.TestRecursiveMessage) throws -> ProtobufUnittest.TestRecursiveMessage.Builder {
        if builderResult.hasA {
          builderResult.a = try ProtobufUnittest.TestRecursiveMessage.builderWithPrototype(builderResult.a).mergeFrom(value).buildPartial()
        } else {
          builderResult.a = value
        }
        builderResult.hasA = true
        return self
      }
      public func clearA() -> ProtobufUnittest.TestRecursiveMessage.Builder {
        aBuilder_ = nil
        builderResult.hasA = false
        builderResult.a = nil
        return self
      }
      public var hasI:Bool {
           get {
                return builderResult.hasI
           }
      }
      public var i:Int32 {
           get {
                return builderResult.i
           }
           set (value) {
               builderResult.hasI = true
               builderResult.i = value
           }
      }
      public func setI(_ value:Int32) -> ProtobufUnittest.TestRecursiveMessage.Builder {
        self.i = value
        return self
      }
      public func clearI() -> ProtobufUnittest.TestRecursiveMessage.Builder{
           builderResult.hasI = false
           builderResult.i = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestRecursiveMessage.Builder {
        builderResult = ProtobufUnittest.TestRecursiveMessage()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestRecursiveMessage.Builder {
        return try ProtobufUnittest.TestRecursiveMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestRecursiveMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestRecursiveMessage {
        let returnMe:ProtobufUnittest.TestRecursiveMessage = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestRecursiveMessage) throws -> ProtobufUnittest.TestRecursiveMessage.Builder {
        if other == ProtobufUnittest.TestRecursiveMessage() {
         return self
        }
        if (other.hasA) {
            try mergeA(other.a)
        }
        if other.hasI {
             i = other.i
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRecursiveMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRecursiveMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestRecursiveMessage.Builder = ProtobufUnittest.TestRecursiveMessage.Builder()
            if hasA {
              try subBuilder.mergeFrom(a)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            a = subBuilder.buildPartial()

          case 16 :
            i = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Test that mutual recursion works.
  final public class TestMutualRecursionA : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var bb:ProtobufUnittest.TestMutualRecursionB!
    public private(set) var hasBb:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasBb {
        try output.writeMessage(1, value:bb)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasBb {
          if let varSizebb = bb?.computeMessageSize(1) {
              serialize_size += varSizebb
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestMutualRecursionA> {
      var mergedArray = Array<ProtobufUnittest.TestMutualRecursionA>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestMutualRecursionA? {
      return try ProtobufUnittest.TestMutualRecursionA.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestMutualRecursionA {
      return try ProtobufUnittest.TestMutualRecursionA.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMutualRecursionA {
      return try ProtobufUnittest.TestMutualRecursionA.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestMutualRecursionA {
      return try ProtobufUnittest.TestMutualRecursionA.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMutualRecursionA {
      return try ProtobufUnittest.TestMutualRecursionA.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestMutualRecursionA {
      return try ProtobufUnittest.TestMutualRecursionA.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMutualRecursionA {
      return try ProtobufUnittest.TestMutualRecursionA.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestMutualRecursionA.Builder {
      return ProtobufUnittest.TestMutualRecursionA.classBuilder() as! ProtobufUnittest.TestMutualRecursionA.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestMutualRecursionA.Builder {
      return classBuilder() as! ProtobufUnittest.TestMutualRecursionA.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMutualRecursionA.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMutualRecursionA.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestMutualRecursionA.Builder {
      return try ProtobufUnittest.TestMutualRecursionA.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestMutualRecursionA) throws -> ProtobufUnittest.TestMutualRecursionA.Builder {
      return try ProtobufUnittest.TestMutualRecursionA.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasBb {
        output += "\(indent) bb {\n"
        if let outDescBb = bb {
          output += try outDescBb.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBb {
                if let hashValuebb = bb?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebb
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestMutualRecursionA"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestMutualRecursionA"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestMutualRecursionA.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestMutualRecursionA = ProtobufUnittest.TestMutualRecursionA()
      public func getMessage() -> ProtobufUnittest.TestMutualRecursionA {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasBb:Bool {
           get {
               return builderResult.hasBb
           }
      }
      public var bb:ProtobufUnittest.TestMutualRecursionB! {
           get {
               if bbBuilder_ != nil {
                  builderResult.bb = bbBuilder_.getMessage()
               }
               return builderResult.bb
           }
           set (value) {
               builderResult.hasBb = true
               builderResult.bb = value
           }
      }
      private var bbBuilder_:ProtobufUnittest.TestMutualRecursionB.Builder! {
           didSet {
              builderResult.hasBb = true
           }
      }
      public func getBbBuilder() -> ProtobufUnittest.TestMutualRecursionB.Builder {
        if bbBuilder_ == nil {
           bbBuilder_ = ProtobufUnittest.TestMutualRecursionB.Builder()
           builderResult.bb = bbBuilder_.getMessage()
           if bb != nil {
              try! bbBuilder_.mergeFrom(bb)
           }
        }
        return bbBuilder_
      }
      public func setBb(_ value:ProtobufUnittest.TestMutualRecursionB!) -> ProtobufUnittest.TestMutualRecursionA.Builder {
        self.bb = value
        return self
      }
      public func mergeBb(_ value:ProtobufUnittest.TestMutualRecursionB) throws -> ProtobufUnittest.TestMutualRecursionA.Builder {
        if builderResult.hasBb {
          builderResult.bb = try ProtobufUnittest.TestMutualRecursionB.builderWithPrototype(builderResult.bb).mergeFrom(value).buildPartial()
        } else {
          builderResult.bb = value
        }
        builderResult.hasBb = true
        return self
      }
      public func clearBb() -> ProtobufUnittest.TestMutualRecursionA.Builder {
        bbBuilder_ = nil
        builderResult.hasBb = false
        builderResult.bb = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestMutualRecursionA.Builder {
        builderResult = ProtobufUnittest.TestMutualRecursionA()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestMutualRecursionA.Builder {
        return try ProtobufUnittest.TestMutualRecursionA.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestMutualRecursionA {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestMutualRecursionA {
        let returnMe:ProtobufUnittest.TestMutualRecursionA = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestMutualRecursionA) throws -> ProtobufUnittest.TestMutualRecursionA.Builder {
        if other == ProtobufUnittest.TestMutualRecursionA() {
         return self
        }
        if (other.hasBb) {
            try mergeBb(other.bb)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestMutualRecursionA.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMutualRecursionA.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestMutualRecursionB.Builder = ProtobufUnittest.TestMutualRecursionB.Builder()
            if hasBb {
              try subBuilder.mergeFrom(bb)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            bb = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestMutualRecursionB : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var a:ProtobufUnittest.TestMutualRecursionA!
    public private(set) var hasA:Bool = false
    public private(set) var optionalInt32:Int32 = Int32(0)

    public private(set) var hasOptionalInt32:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasA {
        try output.writeMessage(1, value:a)
      }
      if hasOptionalInt32 {
        try output.writeInt32(2, value:optionalInt32)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
          if let varSizea = a?.computeMessageSize(1) {
              serialize_size += varSizea
          }
      }
      if hasOptionalInt32 {
        serialize_size += optionalInt32.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestMutualRecursionB> {
      var mergedArray = Array<ProtobufUnittest.TestMutualRecursionB>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestMutualRecursionB? {
      return try ProtobufUnittest.TestMutualRecursionB.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestMutualRecursionB {
      return try ProtobufUnittest.TestMutualRecursionB.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMutualRecursionB {
      return try ProtobufUnittest.TestMutualRecursionB.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestMutualRecursionB {
      return try ProtobufUnittest.TestMutualRecursionB.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMutualRecursionB {
      return try ProtobufUnittest.TestMutualRecursionB.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestMutualRecursionB {
      return try ProtobufUnittest.TestMutualRecursionB.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMutualRecursionB {
      return try ProtobufUnittest.TestMutualRecursionB.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestMutualRecursionB.Builder {
      return ProtobufUnittest.TestMutualRecursionB.classBuilder() as! ProtobufUnittest.TestMutualRecursionB.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestMutualRecursionB.Builder {
      return classBuilder() as! ProtobufUnittest.TestMutualRecursionB.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMutualRecursionB.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMutualRecursionB.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestMutualRecursionB.Builder {
      return try ProtobufUnittest.TestMutualRecursionB.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestMutualRecursionB) throws -> ProtobufUnittest.TestMutualRecursionB.Builder {
      return try ProtobufUnittest.TestMutualRecursionB.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasA {
        output += "\(indent) a {\n"
        if let outDescA = a {
          output += try outDescA.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasOptionalInt32 {
        output += "\(indent) optionalInt32: \(optionalInt32) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
                if let hashValuea = a?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuea
                }
            }
            if hasOptionalInt32 {
               hashCode = (hashCode &* 31) &+ optionalInt32.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestMutualRecursionB"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestMutualRecursionB"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestMutualRecursionB.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestMutualRecursionB = ProtobufUnittest.TestMutualRecursionB()
      public func getMessage() -> ProtobufUnittest.TestMutualRecursionB {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasA:Bool {
           get {
               return builderResult.hasA
           }
      }
      public var a:ProtobufUnittest.TestMutualRecursionA! {
           get {
               if aBuilder_ != nil {
                  builderResult.a = aBuilder_.getMessage()
               }
               return builderResult.a
           }
           set (value) {
               builderResult.hasA = true
               builderResult.a = value
           }
      }
      private var aBuilder_:ProtobufUnittest.TestMutualRecursionA.Builder! {
           didSet {
              builderResult.hasA = true
           }
      }
      public func getABuilder() -> ProtobufUnittest.TestMutualRecursionA.Builder {
        if aBuilder_ == nil {
           aBuilder_ = ProtobufUnittest.TestMutualRecursionA.Builder()
           builderResult.a = aBuilder_.getMessage()
           if a != nil {
              try! aBuilder_.mergeFrom(a)
           }
        }
        return aBuilder_
      }
      public func setA(_ value:ProtobufUnittest.TestMutualRecursionA!) -> ProtobufUnittest.TestMutualRecursionB.Builder {
        self.a = value
        return self
      }
      public func mergeA(_ value:ProtobufUnittest.TestMutualRecursionA) throws -> ProtobufUnittest.TestMutualRecursionB.Builder {
        if builderResult.hasA {
          builderResult.a = try ProtobufUnittest.TestMutualRecursionA.builderWithPrototype(builderResult.a).mergeFrom(value).buildPartial()
        } else {
          builderResult.a = value
        }
        builderResult.hasA = true
        return self
      }
      public func clearA() -> ProtobufUnittest.TestMutualRecursionB.Builder {
        aBuilder_ = nil
        builderResult.hasA = false
        builderResult.a = nil
        return self
      }
      public var hasOptionalInt32:Bool {
           get {
                return builderResult.hasOptionalInt32
           }
      }
      public var optionalInt32:Int32 {
           get {
                return builderResult.optionalInt32
           }
           set (value) {
               builderResult.hasOptionalInt32 = true
               builderResult.optionalInt32 = value
           }
      }
      public func setOptionalInt32(_ value:Int32) -> ProtobufUnittest.TestMutualRecursionB.Builder {
        self.optionalInt32 = value
        return self
      }
      public func clearOptionalInt32() -> ProtobufUnittest.TestMutualRecursionB.Builder{
           builderResult.hasOptionalInt32 = false
           builderResult.optionalInt32 = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestMutualRecursionB.Builder {
        builderResult = ProtobufUnittest.TestMutualRecursionB()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestMutualRecursionB.Builder {
        return try ProtobufUnittest.TestMutualRecursionB.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestMutualRecursionB {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestMutualRecursionB {
        let returnMe:ProtobufUnittest.TestMutualRecursionB = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestMutualRecursionB) throws -> ProtobufUnittest.TestMutualRecursionB.Builder {
        if other == ProtobufUnittest.TestMutualRecursionB() {
         return self
        }
        if (other.hasA) {
            try mergeA(other.a)
        }
        if other.hasOptionalInt32 {
             optionalInt32 = other.optionalInt32
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestMutualRecursionB.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMutualRecursionB.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestMutualRecursionA.Builder = ProtobufUnittest.TestMutualRecursionA.Builder()
            if hasA {
              try subBuilder.mergeFrom(a)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            a = subBuilder.buildPartial()

          case 16 :
            optionalInt32 = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Test that groups have disjoint field numbers from their siblings and
  // parents.  This is NOT possible in proto1; only proto2.  When attempting
  // to compile with proto1, this will emit an error; so we only include it
  // in protobuf_unittest_proto.
  final public class TestDupFieldNumber : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class Foo : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var a:Int32 = Int32(0)

        public private(set) var hasA:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasA {
            try output.writeInt32(1, value:a)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestDupFieldNumber.Foo> {
          var mergedArray = Array<ProtobufUnittest.TestDupFieldNumber.Foo>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDupFieldNumber.Foo? {
          return try ProtobufUnittest.TestDupFieldNumber.Foo.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return try ProtobufUnittest.TestDupFieldNumber.Foo.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return try ProtobufUnittest.TestDupFieldNumber.Foo.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return try ProtobufUnittest.TestDupFieldNumber.Foo.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return try ProtobufUnittest.TestDupFieldNumber.Foo.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return try ProtobufUnittest.TestDupFieldNumber.Foo.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return try ProtobufUnittest.TestDupFieldNumber.Foo.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
          return ProtobufUnittest.TestDupFieldNumber.Foo.classBuilder() as! ProtobufUnittest.TestDupFieldNumber.Foo.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
          return classBuilder() as! ProtobufUnittest.TestDupFieldNumber.Foo.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Foo.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Foo.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
          return try ProtobufUnittest.TestDupFieldNumber.Foo.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestDupFieldNumber.Foo) throws -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
          return try ProtobufUnittest.TestDupFieldNumber.Foo.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestDupFieldNumber.Foo"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestDupFieldNumber.Foo"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestDupFieldNumber.Foo.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestDupFieldNumber.Foo = ProtobufUnittest.TestDupFieldNumber.Foo()
          public func getMessage() -> ProtobufUnittest.TestDupFieldNumber.Foo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasA:Bool {
               get {
                    return builderResult.hasA
               }
          }
          public var a:Int32 {
               get {
                    return builderResult.a
               }
               set (value) {
                   builderResult.hasA = true
                   builderResult.a = value
               }
          }
          public func setA(_ value:Int32) -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
            self.a = value
            return self
          }
          public func clearA() -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder{
               builderResult.hasA = false
               builderResult.a = Int32(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
            builderResult = ProtobufUnittest.TestDupFieldNumber.Foo()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
            return try ProtobufUnittest.TestDupFieldNumber.Foo.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestDupFieldNumber.Foo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestDupFieldNumber.Foo {
            let returnMe:ProtobufUnittest.TestDupFieldNumber.Foo = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestDupFieldNumber.Foo) throws -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
            if other == ProtobufUnittest.TestDupFieldNumber.Foo() {
             return self
            }
            if other.hasA {
                 a = other.a
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8 :
                a = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class Bar : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var a:Int32 = Int32(0)

        public private(set) var hasA:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasA {
            try output.writeInt32(1, value:a)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestDupFieldNumber.Bar> {
          var mergedArray = Array<ProtobufUnittest.TestDupFieldNumber.Bar>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDupFieldNumber.Bar? {
          return try ProtobufUnittest.TestDupFieldNumber.Bar.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return try ProtobufUnittest.TestDupFieldNumber.Bar.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return try ProtobufUnittest.TestDupFieldNumber.Bar.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return try ProtobufUnittest.TestDupFieldNumber.Bar.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return try ProtobufUnittest.TestDupFieldNumber.Bar.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return try ProtobufUnittest.TestDupFieldNumber.Bar.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return try ProtobufUnittest.TestDupFieldNumber.Bar.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
          return ProtobufUnittest.TestDupFieldNumber.Bar.classBuilder() as! ProtobufUnittest.TestDupFieldNumber.Bar.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
          return classBuilder() as! ProtobufUnittest.TestDupFieldNumber.Bar.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Bar.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Bar.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
          return try ProtobufUnittest.TestDupFieldNumber.Bar.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestDupFieldNumber.Bar) throws -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
          return try ProtobufUnittest.TestDupFieldNumber.Bar.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestDupFieldNumber.Bar"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestDupFieldNumber.Bar"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestDupFieldNumber.Bar.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestDupFieldNumber.Bar = ProtobufUnittest.TestDupFieldNumber.Bar()
          public func getMessage() -> ProtobufUnittest.TestDupFieldNumber.Bar {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasA:Bool {
               get {
                    return builderResult.hasA
               }
          }
          public var a:Int32 {
               get {
                    return builderResult.a
               }
               set (value) {
                   builderResult.hasA = true
                   builderResult.a = value
               }
          }
          public func setA(_ value:Int32) -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
            self.a = value
            return self
          }
          public func clearA() -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder{
               builderResult.hasA = false
               builderResult.a = Int32(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
            builderResult = ProtobufUnittest.TestDupFieldNumber.Bar()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
            return try ProtobufUnittest.TestDupFieldNumber.Bar.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestDupFieldNumber.Bar {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestDupFieldNumber.Bar {
            let returnMe:ProtobufUnittest.TestDupFieldNumber.Bar = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestDupFieldNumber.Bar) throws -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
            if other == ProtobufUnittest.TestDupFieldNumber.Bar() {
             return self
            }
            if other.hasA {
                 a = other.a
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8 :
                a = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end

    // NO_PROTO1
    public private(set) var a:Int32 = Int32(0)

    public private(set) var hasA:Bool = false
    public private(set) var foo:ProtobufUnittest.TestDupFieldNumber.Foo!
    public private(set) var hasFoo:Bool = false
    public private(set) var bar:ProtobufUnittest.TestDupFieldNumber.Bar!
    public private(set) var hasBar:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasA {
        try output.writeInt32(1, value:a)
      }
      if hasFoo {
        try output.writeGroup(2, value:foo)
      }
      if hasBar {
        try output.writeGroup(3, value:bar)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeInt32Size(1)
      }
      if hasFoo {
          if let varSizefoo = foo?.computeGroupSize(2) {
              serialize_size += varSizefoo
          }
      }
      if hasBar {
          if let varSizebar = bar?.computeGroupSize(3) {
              serialize_size += varSizebar
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestDupFieldNumber> {
      var mergedArray = Array<ProtobufUnittest.TestDupFieldNumber>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDupFieldNumber? {
      return try ProtobufUnittest.TestDupFieldNumber.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestDupFieldNumber {
      return try ProtobufUnittest.TestDupFieldNumber.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber {
      return try ProtobufUnittest.TestDupFieldNumber.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDupFieldNumber {
      return try ProtobufUnittest.TestDupFieldNumber.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber {
      return try ProtobufUnittest.TestDupFieldNumber.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDupFieldNumber {
      return try ProtobufUnittest.TestDupFieldNumber.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber {
      return try ProtobufUnittest.TestDupFieldNumber.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestDupFieldNumber.Builder {
      return ProtobufUnittest.TestDupFieldNumber.classBuilder() as! ProtobufUnittest.TestDupFieldNumber.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestDupFieldNumber.Builder {
      return classBuilder() as! ProtobufUnittest.TestDupFieldNumber.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDupFieldNumber.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDupFieldNumber.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestDupFieldNumber.Builder {
      return try ProtobufUnittest.TestDupFieldNumber.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestDupFieldNumber) throws -> ProtobufUnittest.TestDupFieldNumber.Builder {
      return try ProtobufUnittest.TestDupFieldNumber.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      if hasFoo {
        output += "\(indent) foo {\n"
        if let outDescFoo = foo {
          output += try outDescFoo.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBar {
        output += "\(indent) bar {\n"
        if let outDescBar = bar {
          output += try outDescBar.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            if hasFoo {
                if let hashValuefoo = foo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefoo
                }
            }
            if hasBar {
                if let hashValuebar = bar?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebar
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestDupFieldNumber"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestDupFieldNumber"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestDupFieldNumber.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestDupFieldNumber = ProtobufUnittest.TestDupFieldNumber()
      public func getMessage() -> ProtobufUnittest.TestDupFieldNumber {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasA:Bool {
           get {
                return builderResult.hasA
           }
      }
      public var a:Int32 {
           get {
                return builderResult.a
           }
           set (value) {
               builderResult.hasA = true
               builderResult.a = value
           }
      }
      public func setA(_ value:Int32) -> ProtobufUnittest.TestDupFieldNumber.Builder {
        self.a = value
        return self
      }
      public func clearA() -> ProtobufUnittest.TestDupFieldNumber.Builder{
           builderResult.hasA = false
           builderResult.a = Int32(0)
           return self
      }
      public var hasFoo:Bool {
           get {
               return builderResult.hasFoo
           }
      }
      public var foo:ProtobufUnittest.TestDupFieldNumber.Foo! {
           get {
               if fooBuilder_ != nil {
                  builderResult.foo = fooBuilder_.getMessage()
               }
               return builderResult.foo
           }
           set (value) {
               builderResult.hasFoo = true
               builderResult.foo = value
           }
      }
      private var fooBuilder_:ProtobufUnittest.TestDupFieldNumber.Foo.Builder! {
           didSet {
              builderResult.hasFoo = true
           }
      }
      public func getFooBuilder() -> ProtobufUnittest.TestDupFieldNumber.Foo.Builder {
        if fooBuilder_ == nil {
           fooBuilder_ = ProtobufUnittest.TestDupFieldNumber.Foo.Builder()
           builderResult.foo = fooBuilder_.getMessage()
           if foo != nil {
              try! fooBuilder_.mergeFrom(foo)
           }
        }
        return fooBuilder_
      }
      public func setFoo(_ value:ProtobufUnittest.TestDupFieldNumber.Foo!) -> ProtobufUnittest.TestDupFieldNumber.Builder {
        self.foo = value
        return self
      }
      public func mergeFoo(_ value:ProtobufUnittest.TestDupFieldNumber.Foo) throws -> ProtobufUnittest.TestDupFieldNumber.Builder {
        if builderResult.hasFoo {
          builderResult.foo = try ProtobufUnittest.TestDupFieldNumber.Foo.builderWithPrototype(builderResult.foo).mergeFrom(value).buildPartial()
        } else {
          builderResult.foo = value
        }
        builderResult.hasFoo = true
        return self
      }
      public func clearFoo() -> ProtobufUnittest.TestDupFieldNumber.Builder {
        fooBuilder_ = nil
        builderResult.hasFoo = false
        builderResult.foo = nil
        return self
      }
      public var hasBar:Bool {
           get {
               return builderResult.hasBar
           }
      }
      public var bar:ProtobufUnittest.TestDupFieldNumber.Bar! {
           get {
               if barBuilder_ != nil {
                  builderResult.bar = barBuilder_.getMessage()
               }
               return builderResult.bar
           }
           set (value) {
               builderResult.hasBar = true
               builderResult.bar = value
           }
      }
      private var barBuilder_:ProtobufUnittest.TestDupFieldNumber.Bar.Builder! {
           didSet {
              builderResult.hasBar = true
           }
      }
      public func getBarBuilder() -> ProtobufUnittest.TestDupFieldNumber.Bar.Builder {
        if barBuilder_ == nil {
           barBuilder_ = ProtobufUnittest.TestDupFieldNumber.Bar.Builder()
           builderResult.bar = barBuilder_.getMessage()
           if bar != nil {
              try! barBuilder_.mergeFrom(bar)
           }
        }
        return barBuilder_
      }
      public func setBar(_ value:ProtobufUnittest.TestDupFieldNumber.Bar!) -> ProtobufUnittest.TestDupFieldNumber.Builder {
        self.bar = value
        return self
      }
      public func mergeBar(_ value:ProtobufUnittest.TestDupFieldNumber.Bar) throws -> ProtobufUnittest.TestDupFieldNumber.Builder {
        if builderResult.hasBar {
          builderResult.bar = try ProtobufUnittest.TestDupFieldNumber.Bar.builderWithPrototype(builderResult.bar).mergeFrom(value).buildPartial()
        } else {
          builderResult.bar = value
        }
        builderResult.hasBar = true
        return self
      }
      public func clearBar() -> ProtobufUnittest.TestDupFieldNumber.Builder {
        barBuilder_ = nil
        builderResult.hasBar = false
        builderResult.bar = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestDupFieldNumber.Builder {
        builderResult = ProtobufUnittest.TestDupFieldNumber()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestDupFieldNumber.Builder {
        return try ProtobufUnittest.TestDupFieldNumber.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestDupFieldNumber {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestDupFieldNumber {
        let returnMe:ProtobufUnittest.TestDupFieldNumber = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestDupFieldNumber) throws -> ProtobufUnittest.TestDupFieldNumber.Builder {
        if other == ProtobufUnittest.TestDupFieldNumber() {
         return self
        }
        if other.hasA {
             a = other.a
        }
        if (other.hasFoo) {
            try mergeFoo(other.foo)
        }
        if (other.hasBar) {
            try mergeBar(other.bar)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDupFieldNumber.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDupFieldNumber.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            a = try input.readInt32()

          case 19 :
            let subBuilder:ProtobufUnittest.TestDupFieldNumber.Foo.Builder = ProtobufUnittest.TestDupFieldNumber.Foo.Builder()
            if hasFoo {
              try subBuilder.mergeFrom(foo)
            }
            try input.readGroup(2, builder:subBuilder, extensionRegistry:extensionRegistry)
            foo = subBuilder.buildPartial()

          case 27 :
            let subBuilder:ProtobufUnittest.TestDupFieldNumber.Bar.Builder = ProtobufUnittest.TestDupFieldNumber.Bar.Builder()
            if hasBar {
              try subBuilder.mergeFrom(bar)
            }
            try input.readGroup(3, builder:subBuilder, extensionRegistry:extensionRegistry)
            bar = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Additional messages for testing lazy fields.
  final public class TestEagerMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var subMessage:ProtobufUnittest.TestAllTypes!
    public private(set) var hasSubMessage:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasSubMessage {
        try output.writeMessage(1, value:subMessage)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSubMessage {
          if let varSizesubMessage = subMessage?.computeMessageSize(1) {
              serialize_size += varSizesubMessage
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestEagerMessage> {
      var mergedArray = Array<ProtobufUnittest.TestEagerMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestEagerMessage? {
      return try ProtobufUnittest.TestEagerMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestEagerMessage {
      return try ProtobufUnittest.TestEagerMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEagerMessage {
      return try ProtobufUnittest.TestEagerMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestEagerMessage {
      return try ProtobufUnittest.TestEagerMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEagerMessage {
      return try ProtobufUnittest.TestEagerMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestEagerMessage {
      return try ProtobufUnittest.TestEagerMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEagerMessage {
      return try ProtobufUnittest.TestEagerMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestEagerMessage.Builder {
      return ProtobufUnittest.TestEagerMessage.classBuilder() as! ProtobufUnittest.TestEagerMessage.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestEagerMessage.Builder {
      return classBuilder() as! ProtobufUnittest.TestEagerMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEagerMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEagerMessage.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestEagerMessage.Builder {
      return try ProtobufUnittest.TestEagerMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestEagerMessage) throws -> ProtobufUnittest.TestEagerMessage.Builder {
      return try ProtobufUnittest.TestEagerMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasSubMessage {
        output += "\(indent) subMessage {\n"
        if let outDescSubMessage = subMessage {
          output += try outDescSubMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSubMessage {
                if let hashValuesubMessage = subMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesubMessage
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestEagerMessage"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestEagerMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestEagerMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestEagerMessage = ProtobufUnittest.TestEagerMessage()
      public func getMessage() -> ProtobufUnittest.TestEagerMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSubMessage:Bool {
           get {
               return builderResult.hasSubMessage
           }
      }
      public var subMessage:ProtobufUnittest.TestAllTypes! {
           get {
               if subMessageBuilder_ != nil {
                  builderResult.subMessage = subMessageBuilder_.getMessage()
               }
               return builderResult.subMessage
           }
           set (value) {
               builderResult.hasSubMessage = true
               builderResult.subMessage = value
           }
      }
      private var subMessageBuilder_:ProtobufUnittest.TestAllTypes.Builder! {
           didSet {
              builderResult.hasSubMessage = true
           }
      }
      public func getSubMessageBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
        if subMessageBuilder_ == nil {
           subMessageBuilder_ = ProtobufUnittest.TestAllTypes.Builder()
           builderResult.subMessage = subMessageBuilder_.getMessage()
           if subMessage != nil {
              try! subMessageBuilder_.mergeFrom(subMessage)
           }
        }
        return subMessageBuilder_
      }
      public func setSubMessage(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.TestEagerMessage.Builder {
        self.subMessage = value
        return self
      }
      public func mergeSubMessage(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestEagerMessage.Builder {
        if builderResult.hasSubMessage {
          builderResult.subMessage = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.subMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.subMessage = value
        }
        builderResult.hasSubMessage = true
        return self
      }
      public func clearSubMessage() -> ProtobufUnittest.TestEagerMessage.Builder {
        subMessageBuilder_ = nil
        builderResult.hasSubMessage = false
        builderResult.subMessage = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestEagerMessage.Builder {
        builderResult = ProtobufUnittest.TestEagerMessage()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestEagerMessage.Builder {
        return try ProtobufUnittest.TestEagerMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestEagerMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestEagerMessage {
        let returnMe:ProtobufUnittest.TestEagerMessage = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestEagerMessage) throws -> ProtobufUnittest.TestEagerMessage.Builder {
        if other == ProtobufUnittest.TestEagerMessage() {
         return self
        }
        if (other.hasSubMessage) {
            try mergeSubMessage(other.subMessage)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestEagerMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEagerMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
            if hasSubMessage {
              try subBuilder.mergeFrom(subMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            subMessage = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestLazyMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var subMessage:ProtobufUnittest.TestAllTypes!
    public private(set) var hasSubMessage:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasSubMessage {
        try output.writeMessage(1, value:subMessage)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSubMessage {
          if let varSizesubMessage = subMessage?.computeMessageSize(1) {
              serialize_size += varSizesubMessage
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestLazyMessage> {
      var mergedArray = Array<ProtobufUnittest.TestLazyMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestLazyMessage? {
      return try ProtobufUnittest.TestLazyMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestLazyMessage {
      return try ProtobufUnittest.TestLazyMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestLazyMessage {
      return try ProtobufUnittest.TestLazyMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestLazyMessage {
      return try ProtobufUnittest.TestLazyMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestLazyMessage {
      return try ProtobufUnittest.TestLazyMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestLazyMessage {
      return try ProtobufUnittest.TestLazyMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestLazyMessage {
      return try ProtobufUnittest.TestLazyMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestLazyMessage.Builder {
      return ProtobufUnittest.TestLazyMessage.classBuilder() as! ProtobufUnittest.TestLazyMessage.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestLazyMessage.Builder {
      return classBuilder() as! ProtobufUnittest.TestLazyMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestLazyMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestLazyMessage.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestLazyMessage.Builder {
      return try ProtobufUnittest.TestLazyMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestLazyMessage) throws -> ProtobufUnittest.TestLazyMessage.Builder {
      return try ProtobufUnittest.TestLazyMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasSubMessage {
        output += "\(indent) subMessage {\n"
        if let outDescSubMessage = subMessage {
          output += try outDescSubMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSubMessage {
                if let hashValuesubMessage = subMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesubMessage
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestLazyMessage"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestLazyMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestLazyMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestLazyMessage = ProtobufUnittest.TestLazyMessage()
      public func getMessage() -> ProtobufUnittest.TestLazyMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSubMessage:Bool {
           get {
               return builderResult.hasSubMessage
           }
      }
      public var subMessage:ProtobufUnittest.TestAllTypes! {
           get {
               if subMessageBuilder_ != nil {
                  builderResult.subMessage = subMessageBuilder_.getMessage()
               }
               return builderResult.subMessage
           }
           set (value) {
               builderResult.hasSubMessage = true
               builderResult.subMessage = value
           }
      }
      private var subMessageBuilder_:ProtobufUnittest.TestAllTypes.Builder! {
           didSet {
              builderResult.hasSubMessage = true
           }
      }
      public func getSubMessageBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
        if subMessageBuilder_ == nil {
           subMessageBuilder_ = ProtobufUnittest.TestAllTypes.Builder()
           builderResult.subMessage = subMessageBuilder_.getMessage()
           if subMessage != nil {
              try! subMessageBuilder_.mergeFrom(subMessage)
           }
        }
        return subMessageBuilder_
      }
      public func setSubMessage(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.TestLazyMessage.Builder {
        self.subMessage = value
        return self
      }
      public func mergeSubMessage(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestLazyMessage.Builder {
        if builderResult.hasSubMessage {
          builderResult.subMessage = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.subMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.subMessage = value
        }
        builderResult.hasSubMessage = true
        return self
      }
      public func clearSubMessage() -> ProtobufUnittest.TestLazyMessage.Builder {
        subMessageBuilder_ = nil
        builderResult.hasSubMessage = false
        builderResult.subMessage = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestLazyMessage.Builder {
        builderResult = ProtobufUnittest.TestLazyMessage()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestLazyMessage.Builder {
        return try ProtobufUnittest.TestLazyMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestLazyMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestLazyMessage {
        let returnMe:ProtobufUnittest.TestLazyMessage = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestLazyMessage) throws -> ProtobufUnittest.TestLazyMessage.Builder {
        if other == ProtobufUnittest.TestLazyMessage() {
         return self
        }
        if (other.hasSubMessage) {
            try mergeSubMessage(other.subMessage)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestLazyMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestLazyMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
            if hasSubMessage {
              try subBuilder.mergeFrom(subMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            subMessage = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Needed for a Python test.
  final public class TestNestedMessageHasBits : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var nestedmessageRepeatedInt32:Array<Int32> = Array<Int32>()
        public private(set) var nestedmessageRepeatedForeignmessage:Array<ProtobufUnittest.ForeignMessage>  = Array<ProtobufUnittest.ForeignMessage>()
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if !nestedmessageRepeatedInt32.isEmpty {
            for oneValuenestedmessageRepeatedInt32 in nestedmessageRepeatedInt32 {
              try output.writeInt32(1, value:oneValuenestedmessageRepeatedInt32)
            }
          }
          for oneElementnestedmessageRepeatedForeignmessage in nestedmessageRepeatedForeignmessage {
              try output.writeMessage(2, value:oneElementnestedmessageRepeatedForeignmessage)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          var dataSizeNestedmessageRepeatedInt32:Int32 = 0
          for oneValuenestedmessageRepeatedInt32 in nestedmessageRepeatedInt32 {
              dataSizeNestedmessageRepeatedInt32 += oneValuenestedmessageRepeatedInt32.computeInt32SizeNoTag()
          }
          serialize_size += dataSizeNestedmessageRepeatedInt32
          serialize_size += 1 * Int32(nestedmessageRepeatedInt32.count)
          for oneElementnestedmessageRepeatedForeignmessage in nestedmessageRepeatedForeignmessage {
              serialize_size += oneElementnestedmessageRepeatedForeignmessage.computeMessageSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestNestedMessageHasBits.NestedMessage> {
          var mergedArray = Array<ProtobufUnittest.TestNestedMessageHasBits.NestedMessage>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage? {
          return try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.classBuilder() as! ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
          return classBuilder() as! ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
          return try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
          return try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          var nestedmessageRepeatedInt32ElementIndex:Int = 0
          for oneValuenestedmessageRepeatedInt32 in nestedmessageRepeatedInt32  {
              output += "\(indent) nestedmessageRepeatedInt32[\(nestedmessageRepeatedInt32ElementIndex)]: \(oneValuenestedmessageRepeatedInt32)\n"
              nestedmessageRepeatedInt32ElementIndex += 1
          }
          var nestedmessageRepeatedForeignmessageElementIndex:Int = 0
          for oneElementnestedmessageRepeatedForeignmessage in nestedmessageRepeatedForeignmessage {
              output += "\(indent) nestedmessageRepeatedForeignmessage[\(nestedmessageRepeatedForeignmessageElementIndex)] {\n"
              output += try oneElementnestedmessageRepeatedForeignmessage.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              nestedmessageRepeatedForeignmessageElementIndex += 1
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneValuenestedmessageRepeatedInt32 in nestedmessageRepeatedInt32 {
                    hashCode = (hashCode &* 31) &+ oneValuenestedmessageRepeatedInt32.hashValue
                }
                for oneElementnestedmessageRepeatedForeignmessage in nestedmessageRepeatedForeignmessage {
                    hashCode = (hashCode &* 31) &+ oneElementnestedmessageRepeatedForeignmessage.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestNestedMessageHasBits.NestedMessage"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestNestedMessageHasBits.NestedMessage"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage = ProtobufUnittest.TestNestedMessageHasBits.NestedMessage()
          public func getMessage() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var nestedmessageRepeatedInt32:Array<Int32> {
               get {
                   return builderResult.nestedmessageRepeatedInt32
               }
               set (array) {
                   builderResult.nestedmessageRepeatedInt32 = array
               }
          }
          public func setNestedmessageRepeatedInt32(_ value:Array<Int32>) -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
            self.nestedmessageRepeatedInt32 = value
            return self
          }
          public func clearNestedmessageRepeatedInt32() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
             builderResult.nestedmessageRepeatedInt32.removeAll(keepingCapacity: false)
             return self
          }
          public var nestedmessageRepeatedForeignmessage:Array<ProtobufUnittest.ForeignMessage> {
               get {
                   return builderResult.nestedmessageRepeatedForeignmessage
               }
               set (value) {
                   builderResult.nestedmessageRepeatedForeignmessage = value
               }
          }
          public func setNestedmessageRepeatedForeignmessage(_ value:Array<ProtobufUnittest.ForeignMessage>) -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
            self.nestedmessageRepeatedForeignmessage = value
            return self
          }
          public func clearNestedmessageRepeatedForeignmessage() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
            builderResult.nestedmessageRepeatedForeignmessage.removeAll(keepingCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
            builderResult = ProtobufUnittest.TestNestedMessageHasBits.NestedMessage()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
            return try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
            let returnMe:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
            if other == ProtobufUnittest.TestNestedMessageHasBits.NestedMessage() {
             return self
            }
            if !other.nestedmessageRepeatedInt32.isEmpty {
                builderResult.nestedmessageRepeatedInt32 += other.nestedmessageRepeatedInt32
            }
            if !other.nestedmessageRepeatedForeignmessage.isEmpty  {
               builderResult.nestedmessageRepeatedForeignmessage += other.nestedmessageRepeatedForeignmessage
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8 :
                nestedmessageRepeatedInt32 += [try input.readInt32()]

              case 18 :
                let subBuilder = ProtobufUnittest.ForeignMessage.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                nestedmessageRepeatedForeignmessage += [subBuilder.buildPartial()]

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end

    public private(set) var optionalNestedMessage:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage!
    public private(set) var hasOptionalNestedMessage:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasOptionalNestedMessage {
        try output.writeMessage(1, value:optionalNestedMessage)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOptionalNestedMessage {
          if let varSizeoptionalNestedMessage = optionalNestedMessage?.computeMessageSize(1) {
              serialize_size += varSizeoptionalNestedMessage
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestNestedMessageHasBits> {
      var mergedArray = Array<ProtobufUnittest.TestNestedMessageHasBits>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestNestedMessageHasBits? {
      return try ProtobufUnittest.TestNestedMessageHasBits.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestNestedMessageHasBits {
      return try ProtobufUnittest.TestNestedMessageHasBits.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedMessageHasBits {
      return try ProtobufUnittest.TestNestedMessageHasBits.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestNestedMessageHasBits {
      return try ProtobufUnittest.TestNestedMessageHasBits.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedMessageHasBits {
      return try ProtobufUnittest.TestNestedMessageHasBits.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestNestedMessageHasBits {
      return try ProtobufUnittest.TestNestedMessageHasBits.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedMessageHasBits {
      return try ProtobufUnittest.TestNestedMessageHasBits.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
      return ProtobufUnittest.TestNestedMessageHasBits.classBuilder() as! ProtobufUnittest.TestNestedMessageHasBits.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
      return classBuilder() as! ProtobufUnittest.TestNestedMessageHasBits.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestNestedMessageHasBits.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestNestedMessageHasBits.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
      return try ProtobufUnittest.TestNestedMessageHasBits.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestNestedMessageHasBits) throws -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
      return try ProtobufUnittest.TestNestedMessageHasBits.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasOptionalNestedMessage {
        output += "\(indent) optionalNestedMessage {\n"
        if let outDescOptionalNestedMessage = optionalNestedMessage {
          output += try outDescOptionalNestedMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOptionalNestedMessage {
                if let hashValueoptionalNestedMessage = optionalNestedMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalNestedMessage
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestNestedMessageHasBits"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestNestedMessageHasBits"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestNestedMessageHasBits.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestNestedMessageHasBits = ProtobufUnittest.TestNestedMessageHasBits()
      public func getMessage() -> ProtobufUnittest.TestNestedMessageHasBits {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasOptionalNestedMessage:Bool {
           get {
               return builderResult.hasOptionalNestedMessage
           }
      }
      public var optionalNestedMessage:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage! {
           get {
               if optionalNestedMessageBuilder_ != nil {
                  builderResult.optionalNestedMessage = optionalNestedMessageBuilder_.getMessage()
               }
               return builderResult.optionalNestedMessage
           }
           set (value) {
               builderResult.hasOptionalNestedMessage = true
               builderResult.optionalNestedMessage = value
           }
      }
      private var optionalNestedMessageBuilder_:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder! {
           didSet {
              builderResult.hasOptionalNestedMessage = true
           }
      }
      public func getOptionalNestedMessageBuilder() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder {
        if optionalNestedMessageBuilder_ == nil {
           optionalNestedMessageBuilder_ = ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder()
           builderResult.optionalNestedMessage = optionalNestedMessageBuilder_.getMessage()
           if optionalNestedMessage != nil {
              try! optionalNestedMessageBuilder_.mergeFrom(optionalNestedMessage)
           }
        }
        return optionalNestedMessageBuilder_
      }
      public func setOptionalNestedMessage(_ value:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage!) -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
        self.optionalNestedMessage = value
        return self
      }
      public func mergeOptionalNestedMessage(_ value:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage) throws -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
        if builderResult.hasOptionalNestedMessage {
          builderResult.optionalNestedMessage = try ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builderWithPrototype(builderResult.optionalNestedMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalNestedMessage = value
        }
        builderResult.hasOptionalNestedMessage = true
        return self
      }
      public func clearOptionalNestedMessage() -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
        optionalNestedMessageBuilder_ = nil
        builderResult.hasOptionalNestedMessage = false
        builderResult.optionalNestedMessage = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
        builderResult = ProtobufUnittest.TestNestedMessageHasBits()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
        return try ProtobufUnittest.TestNestedMessageHasBits.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestNestedMessageHasBits {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestNestedMessageHasBits {
        let returnMe:ProtobufUnittest.TestNestedMessageHasBits = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestNestedMessageHasBits) throws -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
        if other == ProtobufUnittest.TestNestedMessageHasBits() {
         return self
        }
        if (other.hasOptionalNestedMessage) {
            try mergeOptionalNestedMessage(other.optionalNestedMessage)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestNestedMessageHasBits.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder = ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.Builder()
            if hasOptionalNestedMessage {
              try subBuilder.mergeFrom(optionalNestedMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalNestedMessage = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Test message with CamelCase field names.  This violates Protocol Buffer
  // standard style.
  final public class TestCamelCaseFieldNames : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var primitiveField:Int32 = Int32(0)

    public private(set) var hasPrimitiveField:Bool = false
    public private(set) var stringField:String = ""

    public private(set) var hasStringField:Bool = false
    public private(set) var enumField:ProtobufUnittest.ForeignEnum = ProtobufUnittest.ForeignEnum.ForeignFoo
    public private(set) var hasEnumField:Bool = false
    public private(set) var messageField:ProtobufUnittest.ForeignMessage!
    public private(set) var hasMessageField:Bool = false
    public private(set) var stringPieceField:String = ""

    public private(set) var hasStringPieceField:Bool = false
    public private(set) var cordField:String = ""

    public private(set) var hasCordField:Bool = false
    public private(set) var repeatedPrimitiveField:Array<Int32> = Array<Int32>()
    public private(set) var repeatedStringField:Array<String> = Array<String>()
    private var repeatedEnumFieldMemoizedSerializedSize:Int32 = 0
    public private(set) var repeatedEnumField:Array<ProtobufUnittest.ForeignEnum> = Array<ProtobufUnittest.ForeignEnum>()
    public private(set) var repeatedMessageField:Array<ProtobufUnittest.ForeignMessage>  = Array<ProtobufUnittest.ForeignMessage>()
    public private(set) var repeatedStringPieceField:Array<String> = Array<String>()
    public private(set) var repeatedCordField:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasPrimitiveField {
        try output.writeInt32(1, value:primitiveField)
      }
      if hasStringField {
        try output.writeString(2, value:stringField)
      }
      if hasEnumField {
        try output.writeEnum(3, value:enumField.rawValue)
      }
      if hasMessageField {
        try output.writeMessage(4, value:messageField)
      }
      if hasStringPieceField {
        try output.writeString(5, value:stringPieceField)
      }
      if hasCordField {
        try output.writeString(6, value:cordField)
      }
      if !repeatedPrimitiveField.isEmpty {
        for oneValuerepeatedPrimitiveField in repeatedPrimitiveField {
          try output.writeInt32(7, value:oneValuerepeatedPrimitiveField)
        }
      }
      if !repeatedStringField.isEmpty {
        for oneValuerepeatedStringField in repeatedStringField {
          try output.writeString(8, value:oneValuerepeatedStringField)
        }
      }
      for oneValueOfrepeatedEnumField in repeatedEnumField {
          try output.writeEnum(9, value:oneValueOfrepeatedEnumField.rawValue)
      }
      for oneElementrepeatedMessageField in repeatedMessageField {
          try output.writeMessage(10, value:oneElementrepeatedMessageField)
      }
      if !repeatedStringPieceField.isEmpty {
        for oneValuerepeatedStringPieceField in repeatedStringPieceField {
          try output.writeString(11, value:oneValuerepeatedStringPieceField)
        }
      }
      if !repeatedCordField.isEmpty {
        for oneValuerepeatedCordField in repeatedCordField {
          try output.writeString(12, value:oneValuerepeatedCordField)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPrimitiveField {
        serialize_size += primitiveField.computeInt32Size(1)
      }
      if hasStringField {
        serialize_size += stringField.computeStringSize(2)
      }
      if (hasEnumField) {
        serialize_size += enumField.rawValue.computeEnumSize(3)
      }
      if hasMessageField {
          if let varSizemessageField = messageField?.computeMessageSize(4) {
              serialize_size += varSizemessageField
          }
      }
      if hasStringPieceField {
        serialize_size += stringPieceField.computeStringSize(5)
      }
      if hasCordField {
        serialize_size += cordField.computeStringSize(6)
      }
      var dataSizeRepeatedPrimitiveField:Int32 = 0
      for oneValuerepeatedPrimitiveField in repeatedPrimitiveField {
          dataSizeRepeatedPrimitiveField += oneValuerepeatedPrimitiveField.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedPrimitiveField
      serialize_size += 1 * Int32(repeatedPrimitiveField.count)
      var dataSizeRepeatedStringField:Int32 = 0
      for oneValuerepeatedStringField in repeatedStringField {
          dataSizeRepeatedStringField += oneValuerepeatedStringField.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedStringField
      serialize_size += 1 * Int32(repeatedStringField.count)
      var dataSizerepeatedEnumField:Int32 = 0
      for oneValueOfrepeatedEnumField in repeatedEnumField {
          dataSizerepeatedEnumField += oneValueOfrepeatedEnumField.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedEnumField
      serialize_size += (1 * Int32(repeatedEnumField.count))
      for oneElementrepeatedMessageField in repeatedMessageField {
          serialize_size += oneElementrepeatedMessageField.computeMessageSize(10)
      }
      var dataSizeRepeatedStringPieceField:Int32 = 0
      for oneValuerepeatedStringPieceField in repeatedStringPieceField {
          dataSizeRepeatedStringPieceField += oneValuerepeatedStringPieceField.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedStringPieceField
      serialize_size += 1 * Int32(repeatedStringPieceField.count)
      var dataSizeRepeatedCordField:Int32 = 0
      for oneValuerepeatedCordField in repeatedCordField {
          dataSizeRepeatedCordField += oneValuerepeatedCordField.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedCordField
      serialize_size += 1 * Int32(repeatedCordField.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestCamelCaseFieldNames> {
      var mergedArray = Array<ProtobufUnittest.TestCamelCaseFieldNames>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestCamelCaseFieldNames? {
      return try ProtobufUnittest.TestCamelCaseFieldNames.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestCamelCaseFieldNames {
      return try ProtobufUnittest.TestCamelCaseFieldNames.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestCamelCaseFieldNames {
      return try ProtobufUnittest.TestCamelCaseFieldNames.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestCamelCaseFieldNames {
      return try ProtobufUnittest.TestCamelCaseFieldNames.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestCamelCaseFieldNames {
      return try ProtobufUnittest.TestCamelCaseFieldNames.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestCamelCaseFieldNames {
      return try ProtobufUnittest.TestCamelCaseFieldNames.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestCamelCaseFieldNames {
      return try ProtobufUnittest.TestCamelCaseFieldNames.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
      return ProtobufUnittest.TestCamelCaseFieldNames.classBuilder() as! ProtobufUnittest.TestCamelCaseFieldNames.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
      return classBuilder() as! ProtobufUnittest.TestCamelCaseFieldNames.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestCamelCaseFieldNames.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestCamelCaseFieldNames.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
      return try ProtobufUnittest.TestCamelCaseFieldNames.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestCamelCaseFieldNames) throws -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
      return try ProtobufUnittest.TestCamelCaseFieldNames.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasPrimitiveField {
        output += "\(indent) primitiveField: \(primitiveField) \n"
      }
      if hasStringField {
        output += "\(indent) stringField: \(stringField) \n"
      }
      if (hasEnumField) {
        output += "\(indent) enumField: \(enumField.description)\n"
      }
      if hasMessageField {
        output += "\(indent) messageField {\n"
        if let outDescMessageField = messageField {
          output += try outDescMessageField.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasStringPieceField {
        output += "\(indent) stringPieceField: \(stringPieceField) \n"
      }
      if hasCordField {
        output += "\(indent) cordField: \(cordField) \n"
      }
      var repeatedPrimitiveFieldElementIndex:Int = 0
      for oneValuerepeatedPrimitiveField in repeatedPrimitiveField  {
          output += "\(indent) repeatedPrimitiveField[\(repeatedPrimitiveFieldElementIndex)]: \(oneValuerepeatedPrimitiveField)\n"
          repeatedPrimitiveFieldElementIndex += 1
      }
      var repeatedStringFieldElementIndex:Int = 0
      for oneValuerepeatedStringField in repeatedStringField  {
          output += "\(indent) repeatedStringField[\(repeatedStringFieldElementIndex)]: \(oneValuerepeatedStringField)\n"
          repeatedStringFieldElementIndex += 1
      }
      var repeatedEnumFieldElementIndex:Int = 0
      for oneValueOfrepeatedEnumField in repeatedEnumField {
          output += "\(indent) repeatedEnumField[\(repeatedEnumFieldElementIndex)]: \(oneValueOfrepeatedEnumField.description)\n"
          repeatedEnumFieldElementIndex += 1
      }
      var repeatedMessageFieldElementIndex:Int = 0
      for oneElementrepeatedMessageField in repeatedMessageField {
          output += "\(indent) repeatedMessageField[\(repeatedMessageFieldElementIndex)] {\n"
          output += try oneElementrepeatedMessageField.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedMessageFieldElementIndex += 1
      }
      var repeatedStringPieceFieldElementIndex:Int = 0
      for oneValuerepeatedStringPieceField in repeatedStringPieceField  {
          output += "\(indent) repeatedStringPieceField[\(repeatedStringPieceFieldElementIndex)]: \(oneValuerepeatedStringPieceField)\n"
          repeatedStringPieceFieldElementIndex += 1
      }
      var repeatedCordFieldElementIndex:Int = 0
      for oneValuerepeatedCordField in repeatedCordField  {
          output += "\(indent) repeatedCordField[\(repeatedCordFieldElementIndex)]: \(oneValuerepeatedCordField)\n"
          repeatedCordFieldElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPrimitiveField {
               hashCode = (hashCode &* 31) &+ primitiveField.hashValue
            }
            if hasStringField {
               hashCode = (hashCode &* 31) &+ stringField.hashValue
            }
            if hasEnumField {
               hashCode = (hashCode &* 31) &+ Int(enumField.rawValue)
            }
            if hasMessageField {
                if let hashValuemessageField = messageField?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemessageField
                }
            }
            if hasStringPieceField {
               hashCode = (hashCode &* 31) &+ stringPieceField.hashValue
            }
            if hasCordField {
               hashCode = (hashCode &* 31) &+ cordField.hashValue
            }
            for oneValuerepeatedPrimitiveField in repeatedPrimitiveField {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedPrimitiveField.hashValue
            }
            for oneValuerepeatedStringField in repeatedStringField {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedStringField.hashValue
            }
            for oneValueOfrepeatedEnumField in repeatedEnumField {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedEnumField.rawValue)
            }
            for oneElementrepeatedMessageField in repeatedMessageField {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedMessageField.hashValue
            }
            for oneValuerepeatedStringPieceField in repeatedStringPieceField {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedStringPieceField.hashValue
            }
            for oneValuerepeatedCordField in repeatedCordField {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedCordField.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestCamelCaseFieldNames"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestCamelCaseFieldNames"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestCamelCaseFieldNames.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestCamelCaseFieldNames = ProtobufUnittest.TestCamelCaseFieldNames()
      public func getMessage() -> ProtobufUnittest.TestCamelCaseFieldNames {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasPrimitiveField:Bool {
           get {
                return builderResult.hasPrimitiveField
           }
      }
      public var primitiveField:Int32 {
           get {
                return builderResult.primitiveField
           }
           set (value) {
               builderResult.hasPrimitiveField = true
               builderResult.primitiveField = value
           }
      }
      public func setPrimitiveField(_ value:Int32) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.primitiveField = value
        return self
      }
      public func clearPrimitiveField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder{
           builderResult.hasPrimitiveField = false
           builderResult.primitiveField = Int32(0)
           return self
      }
      public var hasStringField:Bool {
           get {
                return builderResult.hasStringField
           }
      }
      public var stringField:String {
           get {
                return builderResult.stringField
           }
           set (value) {
               builderResult.hasStringField = true
               builderResult.stringField = value
           }
      }
      public func setStringField(_ value:String) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.stringField = value
        return self
      }
      public func clearStringField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder{
           builderResult.hasStringField = false
           builderResult.stringField = ""
           return self
      }
        public var hasEnumField:Bool{
            get {
                return builderResult.hasEnumField
            }
        }
        public var enumField:ProtobufUnittest.ForeignEnum {
            get {
                return builderResult.enumField
            }
            set (value) {
                builderResult.hasEnumField = true
                builderResult.enumField = value
            }
        }
        public func setEnumField(_ value:ProtobufUnittest.ForeignEnum) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
          self.enumField = value
          return self
        }
        public func clearEnumField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
           builderResult.hasEnumField = false
           builderResult.enumField = .ForeignFoo
           return self
        }
      public var hasMessageField:Bool {
           get {
               return builderResult.hasMessageField
           }
      }
      public var messageField:ProtobufUnittest.ForeignMessage! {
           get {
               if messageFieldBuilder_ != nil {
                  builderResult.messageField = messageFieldBuilder_.getMessage()
               }
               return builderResult.messageField
           }
           set (value) {
               builderResult.hasMessageField = true
               builderResult.messageField = value
           }
      }
      private var messageFieldBuilder_:ProtobufUnittest.ForeignMessage.Builder! {
           didSet {
              builderResult.hasMessageField = true
           }
      }
      public func getMessageFieldBuilder() -> ProtobufUnittest.ForeignMessage.Builder {
        if messageFieldBuilder_ == nil {
           messageFieldBuilder_ = ProtobufUnittest.ForeignMessage.Builder()
           builderResult.messageField = messageFieldBuilder_.getMessage()
           if messageField != nil {
              try! messageFieldBuilder_.mergeFrom(messageField)
           }
        }
        return messageFieldBuilder_
      }
      public func setMessageField(_ value:ProtobufUnittest.ForeignMessage!) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.messageField = value
        return self
      }
      public func mergeMessageField(_ value:ProtobufUnittest.ForeignMessage) throws -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        if builderResult.hasMessageField {
          builderResult.messageField = try ProtobufUnittest.ForeignMessage.builderWithPrototype(builderResult.messageField).mergeFrom(value).buildPartial()
        } else {
          builderResult.messageField = value
        }
        builderResult.hasMessageField = true
        return self
      }
      public func clearMessageField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        messageFieldBuilder_ = nil
        builderResult.hasMessageField = false
        builderResult.messageField = nil
        return self
      }
      public var hasStringPieceField:Bool {
           get {
                return builderResult.hasStringPieceField
           }
      }
      public var stringPieceField:String {
           get {
                return builderResult.stringPieceField
           }
           set (value) {
               builderResult.hasStringPieceField = true
               builderResult.stringPieceField = value
           }
      }
      public func setStringPieceField(_ value:String) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.stringPieceField = value
        return self
      }
      public func clearStringPieceField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder{
           builderResult.hasStringPieceField = false
           builderResult.stringPieceField = ""
           return self
      }
      public var hasCordField:Bool {
           get {
                return builderResult.hasCordField
           }
      }
      public var cordField:String {
           get {
                return builderResult.cordField
           }
           set (value) {
               builderResult.hasCordField = true
               builderResult.cordField = value
           }
      }
      public func setCordField(_ value:String) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.cordField = value
        return self
      }
      public func clearCordField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder{
           builderResult.hasCordField = false
           builderResult.cordField = ""
           return self
      }
      public var repeatedPrimitiveField:Array<Int32> {
           get {
               return builderResult.repeatedPrimitiveField
           }
           set (array) {
               builderResult.repeatedPrimitiveField = array
           }
      }
      public func setRepeatedPrimitiveField(_ value:Array<Int32>) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.repeatedPrimitiveField = value
        return self
      }
      public func clearRepeatedPrimitiveField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
         builderResult.repeatedPrimitiveField.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedStringField:Array<String> {
           get {
               return builderResult.repeatedStringField
           }
           set (array) {
               builderResult.repeatedStringField = array
           }
      }
      public func setRepeatedStringField(_ value:Array<String>) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.repeatedStringField = value
        return self
      }
      public func clearRepeatedStringField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
         builderResult.repeatedStringField.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedEnumField:Array<ProtobufUnittest.ForeignEnum> {
          get {
              return builderResult.repeatedEnumField
          }
          set (value) {
              builderResult.repeatedEnumField = value
          }
      }
      public func setRepeatedEnumField(_ value:Array<ProtobufUnittest.ForeignEnum>) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.repeatedEnumField = value
        return self
      }
      public func clearRepeatedEnumField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        builderResult.repeatedEnumField.removeAll(keepingCapacity: false)
        return self
      }
      public var repeatedMessageField:Array<ProtobufUnittest.ForeignMessage> {
           get {
               return builderResult.repeatedMessageField
           }
           set (value) {
               builderResult.repeatedMessageField = value
           }
      }
      public func setRepeatedMessageField(_ value:Array<ProtobufUnittest.ForeignMessage>) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.repeatedMessageField = value
        return self
      }
      public func clearRepeatedMessageField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        builderResult.repeatedMessageField.removeAll(keepingCapacity: false)
        return self
      }
      public var repeatedStringPieceField:Array<String> {
           get {
               return builderResult.repeatedStringPieceField
           }
           set (array) {
               builderResult.repeatedStringPieceField = array
           }
      }
      public func setRepeatedStringPieceField(_ value:Array<String>) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.repeatedStringPieceField = value
        return self
      }
      public func clearRepeatedStringPieceField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
         builderResult.repeatedStringPieceField.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedCordField:Array<String> {
           get {
               return builderResult.repeatedCordField
           }
           set (array) {
               builderResult.repeatedCordField = array
           }
      }
      public func setRepeatedCordField(_ value:Array<String>) -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        self.repeatedCordField = value
        return self
      }
      public func clearRepeatedCordField() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
         builderResult.repeatedCordField.removeAll(keepingCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        builderResult = ProtobufUnittest.TestCamelCaseFieldNames()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        return try ProtobufUnittest.TestCamelCaseFieldNames.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestCamelCaseFieldNames {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestCamelCaseFieldNames {
        let returnMe:ProtobufUnittest.TestCamelCaseFieldNames = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestCamelCaseFieldNames) throws -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        if other == ProtobufUnittest.TestCamelCaseFieldNames() {
         return self
        }
        if other.hasPrimitiveField {
             primitiveField = other.primitiveField
        }
        if other.hasStringField {
             stringField = other.stringField
        }
        if other.hasEnumField {
             enumField = other.enumField
        }
        if (other.hasMessageField) {
            try mergeMessageField(other.messageField)
        }
        if other.hasStringPieceField {
             stringPieceField = other.stringPieceField
        }
        if other.hasCordField {
             cordField = other.cordField
        }
        if !other.repeatedPrimitiveField.isEmpty {
            builderResult.repeatedPrimitiveField += other.repeatedPrimitiveField
        }
        if !other.repeatedStringField.isEmpty {
            builderResult.repeatedStringField += other.repeatedStringField
        }
        if !other.repeatedEnumField.isEmpty {
           builderResult.repeatedEnumField += other.repeatedEnumField
        }
        if !other.repeatedMessageField.isEmpty  {
           builderResult.repeatedMessageField += other.repeatedMessageField
        }
        if !other.repeatedStringPieceField.isEmpty {
            builderResult.repeatedStringPieceField += other.repeatedStringPieceField
        }
        if !other.repeatedCordField.isEmpty {
            builderResult.repeatedCordField += other.repeatedCordField
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestCamelCaseFieldNames.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            primitiveField = try input.readInt32()

          case 18 :
            stringField = try input.readString()

          case 24 :
            let valueIntenumField = try input.readEnum()
            if let enumsenumField = ProtobufUnittest.ForeignEnum(rawValue:valueIntenumField){
                 enumField = enumsenumField
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntenumField))
            }

          case 34 :
            let subBuilder:ProtobufUnittest.ForeignMessage.Builder = ProtobufUnittest.ForeignMessage.Builder()
            if hasMessageField {
              try subBuilder.mergeFrom(messageField)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            messageField = subBuilder.buildPartial()

          case 42 :
            stringPieceField = try input.readString()

          case 50 :
            cordField = try input.readString()

          case 56 :
            repeatedPrimitiveField += [try input.readInt32()]

          case 66 :
            repeatedStringField += [try input.readString()]

          case 72 :
            let valueIntrepeatedEnumField = try input.readEnum()
            if let enumsrepeatedEnumField = ProtobufUnittest.ForeignEnum(rawValue:valueIntrepeatedEnumField) {
                 builderResult.repeatedEnumField += [enumsrepeatedEnumField]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(9, value:Int64(valueIntrepeatedEnumField))
            }

          case 82 :
            let subBuilder = ProtobufUnittest.ForeignMessage.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedMessageField += [subBuilder.buildPartial()]

          case 90 :
            repeatedStringPieceField += [try input.readString()]

          case 98 :
            repeatedCordField += [try input.readString()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // We list fields out of order, to ensure that we're using field number and not
  // field index to determine serialization order.
  final public class TestFieldOrderings : ExtendableMessage, GeneratedMessageProtocol{
    public private(set) var myString:String = ""

    public private(set) var hasMyString:Bool = false
    public private(set) var myInt:Int64 = Int64(0)

    public private(set) var hasMyInt:Bool = false
    public private(set) var myFloat:Float = Float(0)

    public private(set) var hasMyFloat:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasMyInt {
        try output.writeInt64(1, value:myInt)
      }
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(2), endExclusive:Int32(11))
      if hasMyString {
        try output.writeString(11, value:myString)
      }
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(12), endExclusive:Int32(101))
      if hasMyFloat {
        try output.writeFloat(101, value:myFloat)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMyInt {
        serialize_size += myInt.computeInt64Size(1)
      }
      if hasMyString {
        serialize_size += myString.computeStringSize(11)
      }
      if hasMyFloat {
        serialize_size += myFloat.computeFloatSize(101)
      }
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestFieldOrderings> {
      var mergedArray = Array<ProtobufUnittest.TestFieldOrderings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestFieldOrderings? {
      return try ProtobufUnittest.TestFieldOrderings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestFieldOrderings {
      return try ProtobufUnittest.TestFieldOrderings.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestFieldOrderings {
      return try ProtobufUnittest.TestFieldOrderings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestFieldOrderings {
      return try ProtobufUnittest.TestFieldOrderings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestFieldOrderings {
      return try ProtobufUnittest.TestFieldOrderings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestFieldOrderings {
      return try ProtobufUnittest.TestFieldOrderings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestFieldOrderings {
      return try ProtobufUnittest.TestFieldOrderings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestFieldOrderings.Builder {
      return ProtobufUnittest.TestFieldOrderings.classBuilder() as! ProtobufUnittest.TestFieldOrderings.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestFieldOrderings.Builder {
      return classBuilder() as! ProtobufUnittest.TestFieldOrderings.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestFieldOrderings.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestFieldOrderings.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestFieldOrderings.Builder {
      return try ProtobufUnittest.TestFieldOrderings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestFieldOrderings) throws -> ProtobufUnittest.TestFieldOrderings.Builder {
      return try ProtobufUnittest.TestFieldOrderings.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasMyInt {
        output += "\(indent) myInt: \(myInt) \n"
      }
      output += try getExtensionDescription(Int32(2), endExclusive:Int32(11), indent:indent)
      if hasMyString {
        output += "\(indent) myString: \(myString) \n"
      }
      output += try getExtensionDescription(Int32(12), endExclusive:Int32(101), indent:indent)
      if hasMyFloat {
        output += "\(indent) myFloat: \(myFloat) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMyInt {
               hashCode = (hashCode &* 31) &+ myInt.hashValue
            }
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(2), endExclusive:Int32(11)))
            if hasMyString {
               hashCode = (hashCode &* 31) &+ myString.hashValue
            }
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(12), endExclusive:Int32(101)))
            if hasMyFloat {
               hashCode = (hashCode &* 31) &+ myFloat.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestFieldOrderings"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestFieldOrderings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestFieldOrderings.self
    }
    //Meta information declaration end

    final public class Builder : ExtendableMessageBuilder {
      private var builderResult:ProtobufUnittest.TestFieldOrderings = ProtobufUnittest.TestFieldOrderings()
      public func getMessage() -> ProtobufUnittest.TestFieldOrderings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasMyString:Bool {
           get {
                return builderResult.hasMyString
           }
      }
      public var myString:String {
           get {
                return builderResult.myString
           }
           set (value) {
               builderResult.hasMyString = true
               builderResult.myString = value
           }
      }
      public func setMyString(_ value:String) -> ProtobufUnittest.TestFieldOrderings.Builder {
        self.myString = value
        return self
      }
      public func clearMyString() -> ProtobufUnittest.TestFieldOrderings.Builder{
           builderResult.hasMyString = false
           builderResult.myString = ""
           return self
      }
      public var hasMyInt:Bool {
           get {
                return builderResult.hasMyInt
           }
      }
      public var myInt:Int64 {
           get {
                return builderResult.myInt
           }
           set (value) {
               builderResult.hasMyInt = true
               builderResult.myInt = value
           }
      }
      public func setMyInt(_ value:Int64) -> ProtobufUnittest.TestFieldOrderings.Builder {
        self.myInt = value
        return self
      }
      public func clearMyInt() -> ProtobufUnittest.TestFieldOrderings.Builder{
           builderResult.hasMyInt = false
           builderResult.myInt = Int64(0)
           return self
      }
      public var hasMyFloat:Bool {
           get {
                return builderResult.hasMyFloat
           }
      }
      public var myFloat:Float {
           get {
                return builderResult.myFloat
           }
           set (value) {
               builderResult.hasMyFloat = true
               builderResult.myFloat = value
           }
      }
      public func setMyFloat(_ value:Float) -> ProtobufUnittest.TestFieldOrderings.Builder {
        self.myFloat = value
        return self
      }
      public func clearMyFloat() -> ProtobufUnittest.TestFieldOrderings.Builder{
           builderResult.hasMyFloat = false
           builderResult.myFloat = Float(0)
           return self
      }
      override public var internalGetResult:ExtendableMessage {
           get {
               return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestFieldOrderings.Builder {
        builderResult = ProtobufUnittest.TestFieldOrderings()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestFieldOrderings.Builder {
        return try ProtobufUnittest.TestFieldOrderings.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestFieldOrderings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestFieldOrderings {
        let returnMe:ProtobufUnittest.TestFieldOrderings = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestFieldOrderings) throws -> ProtobufUnittest.TestFieldOrderings.Builder {
        if other == ProtobufUnittest.TestFieldOrderings() {
         return self
        }
        if other.hasMyString {
             myString = other.myString
        }
        if other.hasMyInt {
             myInt = other.myInt
        }
        if other.hasMyFloat {
             myFloat = other.myFloat
        }
        try mergeExtensionFields(other)
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestFieldOrderings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestFieldOrderings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            myInt = try input.readInt64()

          case 90 :
            myString = try input.readString()

          case 813 :
            myFloat = try input.readFloat()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestExtremeDefaultValues : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var escapedBytes:NSData = NSData(bytes:([UInt8]() + "testsr".utf8), length:6)

    public private(set) var hasEscapedBytes:Bool = false
    public private(set) var largeUint32:UInt32 = UInt32(255)

    public private(set) var hasLargeUint32:Bool = false
    public private(set) var largeUint64:UInt64 = UInt64(4095)

    public private(set) var hasLargeUint64:Bool = false
    public private(set) var smallInt32:Int32 = Int32(-127)

    public private(set) var hasSmallInt32:Bool = false
    public private(set) var smallInt64:Int64 = Int64(-127)

    public private(set) var hasSmallInt64:Bool = false
    public private(set) var reallySmallInt32:Int32 = Int32(-128)

    public private(set) var hasReallySmallInt32:Bool = false
    public private(set) var reallySmallInt64:Int64 = Int64(-2048)

    public private(set) var hasReallySmallInt64:Bool = false
    // The default value here is UTF-8 for "\u1234".  (We could also
    // the UTF-8 text directly into this text file rather than escape it, but
    // lots of people use editors that would be confused by this.)
    public private(set) var utf8String:String = "tests"

    public private(set) var hasUtf8String:Bool = false
    // Tests for single-precision floating-point values.
    public private(set) var zeroFloat:Float = Float(0)

    public private(set) var hasZeroFloat:Bool = false
    public private(set) var oneFloat:Float = Float(1)

    public private(set) var hasOneFloat:Bool = false
    public private(set) var smallFloat:Float = Float(1.5)

    public private(set) var hasSmallFloat:Bool = false
    public private(set) var negativeOneFloat:Float = Float(-1)

    public private(set) var hasNegativeOneFloat:Bool = false
    public private(set) var negativeFloat:Float = Float(-1.5)

    public private(set) var hasNegativeFloat:Bool = false
    // Using exponents
    public private(set) var largeFloat:Float = Float(2e+08)

    public private(set) var hasLargeFloat:Bool = false
    public private(set) var smallNegativeFloat:Float = Float(-8e-28)

    public private(set) var hasSmallNegativeFloat:Bool = false
    // Text for nonfinite floating-point values.
    public private(set) var infDouble:Double = Double(HUGE)

    public private(set) var hasInfDouble:Bool = false
    public private(set) var negInfDouble:Double = Double(-HUGE)

    public private(set) var hasNegInfDouble:Bool = false
    public private(set) var nanDouble:Double = 0.0

    public private(set) var hasNanDouble:Bool = false
    public private(set) var infFloat:Float = HUGE

    public private(set) var hasInfFloat:Bool = false
    public private(set) var negInfFloat:Float = -HUGE

    public private(set) var hasNegInfFloat:Bool = false
    public private(set) var nanFloat:Float = 0.0

    public private(set) var hasNanFloat:Bool = false
    // Tests for C++ trigraphs.
    // Trigraphs should be escaped in C++ generated files, but they should not be
    // escaped for other languages.
    // Note that in .proto file, "\?" is a valid way to escape ? in string
    // literals.
    public private(set) var cppTrigraph:String = "teststsrs"

    public private(set) var hasCppTrigraph:Bool = false
    // String defaults containing the character '\000'
    public private(set) var stringWithZero:String = "hel\000lo"

    public private(set) var hasStringWithZero:Bool = false
    public private(set) var bytesWithZero:NSData = NSData(bytes:([UInt8]() + "wor\000ld".utf8), length:6)

    public private(set) var hasBytesWithZero:Bool = false
    public private(set) var stringPieceWithZero:String = "ab\000c"

    public private(set) var hasStringPieceWithZero:Bool = false
    public private(set) var cordWithZero:String = "12\0003"

    public private(set) var hasCordWithZero:Bool = false
    public private(set) var replacementString:String = "${unknown}"

    public private(set) var hasReplacementString:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasEscapedBytes {
        try output.writeData(1, value:escapedBytes)
      }
      if hasLargeUint32 {
        try output.writeUInt32(2, value:largeUint32)
      }
      if hasLargeUint64 {
        try output.writeUInt64(3, value:largeUint64)
      }
      if hasSmallInt32 {
        try output.writeInt32(4, value:smallInt32)
      }
      if hasSmallInt64 {
        try output.writeInt64(5, value:smallInt64)
      }
      if hasUtf8String {
        try output.writeString(6, value:utf8String)
      }
      if hasZeroFloat {
        try output.writeFloat(7, value:zeroFloat)
      }
      if hasOneFloat {
        try output.writeFloat(8, value:oneFloat)
      }
      if hasSmallFloat {
        try output.writeFloat(9, value:smallFloat)
      }
      if hasNegativeOneFloat {
        try output.writeFloat(10, value:negativeOneFloat)
      }
      if hasNegativeFloat {
        try output.writeFloat(11, value:negativeFloat)
      }
      if hasLargeFloat {
        try output.writeFloat(12, value:largeFloat)
      }
      if hasSmallNegativeFloat {
        try output.writeFloat(13, value:smallNegativeFloat)
      }
      if hasInfDouble {
        try output.writeDouble(14, value:infDouble)
      }
      if hasNegInfDouble {
        try output.writeDouble(15, value:negInfDouble)
      }
      if hasNanDouble {
        try output.writeDouble(16, value:nanDouble)
      }
      if hasInfFloat {
        try output.writeFloat(17, value:infFloat)
      }
      if hasNegInfFloat {
        try output.writeFloat(18, value:negInfFloat)
      }
      if hasNanFloat {
        try output.writeFloat(19, value:nanFloat)
      }
      if hasCppTrigraph {
        try output.writeString(20, value:cppTrigraph)
      }
      if hasReallySmallInt32 {
        try output.writeInt32(21, value:reallySmallInt32)
      }
      if hasReallySmallInt64 {
        try output.writeInt64(22, value:reallySmallInt64)
      }
      if hasStringWithZero {
        try output.writeString(23, value:stringWithZero)
      }
      if hasBytesWithZero {
        try output.writeData(24, value:bytesWithZero)
      }
      if hasStringPieceWithZero {
        try output.writeString(25, value:stringPieceWithZero)
      }
      if hasCordWithZero {
        try output.writeString(26, value:cordWithZero)
      }
      if hasReplacementString {
        try output.writeString(27, value:replacementString)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEscapedBytes {
        serialize_size += escapedBytes.computeDataSize(1)
      }
      if hasLargeUint32 {
        serialize_size += largeUint32.computeUInt32Size(2)
      }
      if hasLargeUint64 {
        serialize_size += largeUint64.computeUInt64Size(3)
      }
      if hasSmallInt32 {
        serialize_size += smallInt32.computeInt32Size(4)
      }
      if hasSmallInt64 {
        serialize_size += smallInt64.computeInt64Size(5)
      }
      if hasUtf8String {
        serialize_size += utf8String.computeStringSize(6)
      }
      if hasZeroFloat {
        serialize_size += zeroFloat.computeFloatSize(7)
      }
      if hasOneFloat {
        serialize_size += oneFloat.computeFloatSize(8)
      }
      if hasSmallFloat {
        serialize_size += smallFloat.computeFloatSize(9)
      }
      if hasNegativeOneFloat {
        serialize_size += negativeOneFloat.computeFloatSize(10)
      }
      if hasNegativeFloat {
        serialize_size += negativeFloat.computeFloatSize(11)
      }
      if hasLargeFloat {
        serialize_size += largeFloat.computeFloatSize(12)
      }
      if hasSmallNegativeFloat {
        serialize_size += smallNegativeFloat.computeFloatSize(13)
      }
      if hasInfDouble {
        serialize_size += infDouble.computeDoubleSize(14)
      }
      if hasNegInfDouble {
        serialize_size += negInfDouble.computeDoubleSize(15)
      }
      if hasNanDouble {
        serialize_size += nanDouble.computeDoubleSize(16)
      }
      if hasInfFloat {
        serialize_size += infFloat.computeFloatSize(17)
      }
      if hasNegInfFloat {
        serialize_size += negInfFloat.computeFloatSize(18)
      }
      if hasNanFloat {
        serialize_size += nanFloat.computeFloatSize(19)
      }
      if hasCppTrigraph {
        serialize_size += cppTrigraph.computeStringSize(20)
      }
      if hasReallySmallInt32 {
        serialize_size += reallySmallInt32.computeInt32Size(21)
      }
      if hasReallySmallInt64 {
        serialize_size += reallySmallInt64.computeInt64Size(22)
      }
      if hasStringWithZero {
        serialize_size += stringWithZero.computeStringSize(23)
      }
      if hasBytesWithZero {
        serialize_size += bytesWithZero.computeDataSize(24)
      }
      if hasStringPieceWithZero {
        serialize_size += stringPieceWithZero.computeStringSize(25)
      }
      if hasCordWithZero {
        serialize_size += cordWithZero.computeStringSize(26)
      }
      if hasReplacementString {
        serialize_size += replacementString.computeStringSize(27)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestExtremeDefaultValues> {
      var mergedArray = Array<ProtobufUnittest.TestExtremeDefaultValues>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestExtremeDefaultValues? {
      return try ProtobufUnittest.TestExtremeDefaultValues.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestExtremeDefaultValues {
      return try ProtobufUnittest.TestExtremeDefaultValues.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestExtremeDefaultValues {
      return try ProtobufUnittest.TestExtremeDefaultValues.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestExtremeDefaultValues {
      return try ProtobufUnittest.TestExtremeDefaultValues.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestExtremeDefaultValues {
      return try ProtobufUnittest.TestExtremeDefaultValues.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestExtremeDefaultValues {
      return try ProtobufUnittest.TestExtremeDefaultValues.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestExtremeDefaultValues {
      return try ProtobufUnittest.TestExtremeDefaultValues.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
      return ProtobufUnittest.TestExtremeDefaultValues.classBuilder() as! ProtobufUnittest.TestExtremeDefaultValues.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
      return classBuilder() as! ProtobufUnittest.TestExtremeDefaultValues.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestExtremeDefaultValues.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestExtremeDefaultValues.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
      return try ProtobufUnittest.TestExtremeDefaultValues.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestExtremeDefaultValues) throws -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
      return try ProtobufUnittest.TestExtremeDefaultValues.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasEscapedBytes {
        output += "\(indent) escapedBytes: \(escapedBytes) \n"
      }
      if hasLargeUint32 {
        output += "\(indent) largeUint32: \(largeUint32) \n"
      }
      if hasLargeUint64 {
        output += "\(indent) largeUint64: \(largeUint64) \n"
      }
      if hasSmallInt32 {
        output += "\(indent) smallInt32: \(smallInt32) \n"
      }
      if hasSmallInt64 {
        output += "\(indent) smallInt64: \(smallInt64) \n"
      }
      if hasUtf8String {
        output += "\(indent) utf8String: \(utf8String) \n"
      }
      if hasZeroFloat {
        output += "\(indent) zeroFloat: \(zeroFloat) \n"
      }
      if hasOneFloat {
        output += "\(indent) oneFloat: \(oneFloat) \n"
      }
      if hasSmallFloat {
        output += "\(indent) smallFloat: \(smallFloat) \n"
      }
      if hasNegativeOneFloat {
        output += "\(indent) negativeOneFloat: \(negativeOneFloat) \n"
      }
      if hasNegativeFloat {
        output += "\(indent) negativeFloat: \(negativeFloat) \n"
      }
      if hasLargeFloat {
        output += "\(indent) largeFloat: \(largeFloat) \n"
      }
      if hasSmallNegativeFloat {
        output += "\(indent) smallNegativeFloat: \(smallNegativeFloat) \n"
      }
      if hasInfDouble {
        output += "\(indent) infDouble: \(infDouble) \n"
      }
      if hasNegInfDouble {
        output += "\(indent) negInfDouble: \(negInfDouble) \n"
      }
      if hasNanDouble {
        output += "\(indent) nanDouble: \(nanDouble) \n"
      }
      if hasInfFloat {
        output += "\(indent) infFloat: \(infFloat) \n"
      }
      if hasNegInfFloat {
        output += "\(indent) negInfFloat: \(negInfFloat) \n"
      }
      if hasNanFloat {
        output += "\(indent) nanFloat: \(nanFloat) \n"
      }
      if hasCppTrigraph {
        output += "\(indent) cppTrigraph: \(cppTrigraph) \n"
      }
      if hasReallySmallInt32 {
        output += "\(indent) reallySmallInt32: \(reallySmallInt32) \n"
      }
      if hasReallySmallInt64 {
        output += "\(indent) reallySmallInt64: \(reallySmallInt64) \n"
      }
      if hasStringWithZero {
        output += "\(indent) stringWithZero: \(stringWithZero) \n"
      }
      if hasBytesWithZero {
        output += "\(indent) bytesWithZero: \(bytesWithZero) \n"
      }
      if hasStringPieceWithZero {
        output += "\(indent) stringPieceWithZero: \(stringPieceWithZero) \n"
      }
      if hasCordWithZero {
        output += "\(indent) cordWithZero: \(cordWithZero) \n"
      }
      if hasReplacementString {
        output += "\(indent) replacementString: \(replacementString) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEscapedBytes {
               hashCode = (hashCode &* 31) &+ escapedBytes.hashValue
            }
            if hasLargeUint32 {
               hashCode = (hashCode &* 31) &+ largeUint32.hashValue
            }
            if hasLargeUint64 {
               hashCode = (hashCode &* 31) &+ largeUint64.hashValue
            }
            if hasSmallInt32 {
               hashCode = (hashCode &* 31) &+ smallInt32.hashValue
            }
            if hasSmallInt64 {
               hashCode = (hashCode &* 31) &+ smallInt64.hashValue
            }
            if hasUtf8String {
               hashCode = (hashCode &* 31) &+ utf8String.hashValue
            }
            if hasZeroFloat {
               hashCode = (hashCode &* 31) &+ zeroFloat.hashValue
            }
            if hasOneFloat {
               hashCode = (hashCode &* 31) &+ oneFloat.hashValue
            }
            if hasSmallFloat {
               hashCode = (hashCode &* 31) &+ smallFloat.hashValue
            }
            if hasNegativeOneFloat {
               hashCode = (hashCode &* 31) &+ negativeOneFloat.hashValue
            }
            if hasNegativeFloat {
               hashCode = (hashCode &* 31) &+ negativeFloat.hashValue
            }
            if hasLargeFloat {
               hashCode = (hashCode &* 31) &+ largeFloat.hashValue
            }
            if hasSmallNegativeFloat {
               hashCode = (hashCode &* 31) &+ smallNegativeFloat.hashValue
            }
            if hasInfDouble {
               hashCode = (hashCode &* 31) &+ infDouble.hashValue
            }
            if hasNegInfDouble {
               hashCode = (hashCode &* 31) &+ negInfDouble.hashValue
            }
            if hasNanDouble {
               hashCode = (hashCode &* 31) &+ nanDouble.hashValue
            }
            if hasInfFloat {
               hashCode = (hashCode &* 31) &+ infFloat.hashValue
            }
            if hasNegInfFloat {
               hashCode = (hashCode &* 31) &+ negInfFloat.hashValue
            }
            if hasNanFloat {
               hashCode = (hashCode &* 31) &+ nanFloat.hashValue
            }
            if hasCppTrigraph {
               hashCode = (hashCode &* 31) &+ cppTrigraph.hashValue
            }
            if hasReallySmallInt32 {
               hashCode = (hashCode &* 31) &+ reallySmallInt32.hashValue
            }
            if hasReallySmallInt64 {
               hashCode = (hashCode &* 31) &+ reallySmallInt64.hashValue
            }
            if hasStringWithZero {
               hashCode = (hashCode &* 31) &+ stringWithZero.hashValue
            }
            if hasBytesWithZero {
               hashCode = (hashCode &* 31) &+ bytesWithZero.hashValue
            }
            if hasStringPieceWithZero {
               hashCode = (hashCode &* 31) &+ stringPieceWithZero.hashValue
            }
            if hasCordWithZero {
               hashCode = (hashCode &* 31) &+ cordWithZero.hashValue
            }
            if hasReplacementString {
               hashCode = (hashCode &* 31) &+ replacementString.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestExtremeDefaultValues"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestExtremeDefaultValues"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestExtremeDefaultValues.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestExtremeDefaultValues = ProtobufUnittest.TestExtremeDefaultValues()
      public func getMessage() -> ProtobufUnittest.TestExtremeDefaultValues {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasEscapedBytes:Bool {
           get {
                return builderResult.hasEscapedBytes
           }
      }
      public var escapedBytes:NSData {
           get {
                return builderResult.escapedBytes
           }
           set (value) {
               builderResult.hasEscapedBytes = true
               builderResult.escapedBytes = value
           }
      }
      public func setEscapedBytes(_ value:NSData) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.escapedBytes = value
        return self
      }
      public func clearEscapedBytes() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasEscapedBytes = false
           builderResult.escapedBytes = NSData(bytes:([UInt8]() + "testsr".utf8), length:6)
           return self
      }
      public var hasLargeUint32:Bool {
           get {
                return builderResult.hasLargeUint32
           }
      }
      public var largeUint32:UInt32 {
           get {
                return builderResult.largeUint32
           }
           set (value) {
               builderResult.hasLargeUint32 = true
               builderResult.largeUint32 = value
           }
      }
      public func setLargeUint32(_ value:UInt32) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.largeUint32 = value
        return self
      }
      public func clearLargeUint32() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasLargeUint32 = false
           builderResult.largeUint32 = UInt32(255)
           return self
      }
      public var hasLargeUint64:Bool {
           get {
                return builderResult.hasLargeUint64
           }
      }
      public var largeUint64:UInt64 {
           get {
                return builderResult.largeUint64
           }
           set (value) {
               builderResult.hasLargeUint64 = true
               builderResult.largeUint64 = value
           }
      }
      public func setLargeUint64(_ value:UInt64) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.largeUint64 = value
        return self
      }
      public func clearLargeUint64() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasLargeUint64 = false
           builderResult.largeUint64 = UInt64(4095)
           return self
      }
      public var hasSmallInt32:Bool {
           get {
                return builderResult.hasSmallInt32
           }
      }
      public var smallInt32:Int32 {
           get {
                return builderResult.smallInt32
           }
           set (value) {
               builderResult.hasSmallInt32 = true
               builderResult.smallInt32 = value
           }
      }
      public func setSmallInt32(_ value:Int32) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.smallInt32 = value
        return self
      }
      public func clearSmallInt32() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasSmallInt32 = false
           builderResult.smallInt32 = Int32(-127)
           return self
      }
      public var hasSmallInt64:Bool {
           get {
                return builderResult.hasSmallInt64
           }
      }
      public var smallInt64:Int64 {
           get {
                return builderResult.smallInt64
           }
           set (value) {
               builderResult.hasSmallInt64 = true
               builderResult.smallInt64 = value
           }
      }
      public func setSmallInt64(_ value:Int64) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.smallInt64 = value
        return self
      }
      public func clearSmallInt64() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasSmallInt64 = false
           builderResult.smallInt64 = Int64(-127)
           return self
      }
      public var hasReallySmallInt32:Bool {
           get {
                return builderResult.hasReallySmallInt32
           }
      }
      public var reallySmallInt32:Int32 {
           get {
                return builderResult.reallySmallInt32
           }
           set (value) {
               builderResult.hasReallySmallInt32 = true
               builderResult.reallySmallInt32 = value
           }
      }
      public func setReallySmallInt32(_ value:Int32) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.reallySmallInt32 = value
        return self
      }
      public func clearReallySmallInt32() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasReallySmallInt32 = false
           builderResult.reallySmallInt32 = Int32(-128)
           return self
      }
      public var hasReallySmallInt64:Bool {
           get {
                return builderResult.hasReallySmallInt64
           }
      }
      public var reallySmallInt64:Int64 {
           get {
                return builderResult.reallySmallInt64
           }
           set (value) {
               builderResult.hasReallySmallInt64 = true
               builderResult.reallySmallInt64 = value
           }
      }
      public func setReallySmallInt64(_ value:Int64) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.reallySmallInt64 = value
        return self
      }
      public func clearReallySmallInt64() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasReallySmallInt64 = false
           builderResult.reallySmallInt64 = Int64(-2048)
           return self
      }
      public var hasUtf8String:Bool {
           get {
                return builderResult.hasUtf8String
           }
      }
      public var utf8String:String {
           get {
                return builderResult.utf8String
           }
           set (value) {
               builderResult.hasUtf8String = true
               builderResult.utf8String = value
           }
      }
      public func setUtf8String(_ value:String) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.utf8String = value
        return self
      }
      public func clearUtf8String() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasUtf8String = false
           builderResult.utf8String = "tests"
           return self
      }
      public var hasZeroFloat:Bool {
           get {
                return builderResult.hasZeroFloat
           }
      }
      public var zeroFloat:Float {
           get {
                return builderResult.zeroFloat
           }
           set (value) {
               builderResult.hasZeroFloat = true
               builderResult.zeroFloat = value
           }
      }
      public func setZeroFloat(_ value:Float) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.zeroFloat = value
        return self
      }
      public func clearZeroFloat() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasZeroFloat = false
           builderResult.zeroFloat = Float(0)
           return self
      }
      public var hasOneFloat:Bool {
           get {
                return builderResult.hasOneFloat
           }
      }
      public var oneFloat:Float {
           get {
                return builderResult.oneFloat
           }
           set (value) {
               builderResult.hasOneFloat = true
               builderResult.oneFloat = value
           }
      }
      public func setOneFloat(_ value:Float) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.oneFloat = value
        return self
      }
      public func clearOneFloat() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasOneFloat = false
           builderResult.oneFloat = Float(1)
           return self
      }
      public var hasSmallFloat:Bool {
           get {
                return builderResult.hasSmallFloat
           }
      }
      public var smallFloat:Float {
           get {
                return builderResult.smallFloat
           }
           set (value) {
               builderResult.hasSmallFloat = true
               builderResult.smallFloat = value
           }
      }
      public func setSmallFloat(_ value:Float) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.smallFloat = value
        return self
      }
      public func clearSmallFloat() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasSmallFloat = false
           builderResult.smallFloat = Float(1.5)
           return self
      }
      public var hasNegativeOneFloat:Bool {
           get {
                return builderResult.hasNegativeOneFloat
           }
      }
      public var negativeOneFloat:Float {
           get {
                return builderResult.negativeOneFloat
           }
           set (value) {
               builderResult.hasNegativeOneFloat = true
               builderResult.negativeOneFloat = value
           }
      }
      public func setNegativeOneFloat(_ value:Float) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.negativeOneFloat = value
        return self
      }
      public func clearNegativeOneFloat() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasNegativeOneFloat = false
           builderResult.negativeOneFloat = Float(-1)
           return self
      }
      public var hasNegativeFloat:Bool {
           get {
                return builderResult.hasNegativeFloat
           }
      }
      public var negativeFloat:Float {
           get {
                return builderResult.negativeFloat
           }
           set (value) {
               builderResult.hasNegativeFloat = true
               builderResult.negativeFloat = value
           }
      }
      public func setNegativeFloat(_ value:Float) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.negativeFloat = value
        return self
      }
      public func clearNegativeFloat() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasNegativeFloat = false
           builderResult.negativeFloat = Float(-1.5)
           return self
      }
      public var hasLargeFloat:Bool {
           get {
                return builderResult.hasLargeFloat
           }
      }
      public var largeFloat:Float {
           get {
                return builderResult.largeFloat
           }
           set (value) {
               builderResult.hasLargeFloat = true
               builderResult.largeFloat = value
           }
      }
      public func setLargeFloat(_ value:Float) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.largeFloat = value
        return self
      }
      public func clearLargeFloat() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasLargeFloat = false
           builderResult.largeFloat = Float(2e+08)
           return self
      }
      public var hasSmallNegativeFloat:Bool {
           get {
                return builderResult.hasSmallNegativeFloat
           }
      }
      public var smallNegativeFloat:Float {
           get {
                return builderResult.smallNegativeFloat
           }
           set (value) {
               builderResult.hasSmallNegativeFloat = true
               builderResult.smallNegativeFloat = value
           }
      }
      public func setSmallNegativeFloat(_ value:Float) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.smallNegativeFloat = value
        return self
      }
      public func clearSmallNegativeFloat() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasSmallNegativeFloat = false
           builderResult.smallNegativeFloat = Float(-8e-28)
           return self
      }
      public var hasInfDouble:Bool {
           get {
                return builderResult.hasInfDouble
           }
      }
      public var infDouble:Double {
           get {
                return builderResult.infDouble
           }
           set (value) {
               builderResult.hasInfDouble = true
               builderResult.infDouble = value
           }
      }
      public func setInfDouble(_ value:Double) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.infDouble = value
        return self
      }
      public func clearInfDouble() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasInfDouble = false
           builderResult.infDouble = Double(HUGE)
           return self
      }
      public var hasNegInfDouble:Bool {
           get {
                return builderResult.hasNegInfDouble
           }
      }
      public var negInfDouble:Double {
           get {
                return builderResult.negInfDouble
           }
           set (value) {
               builderResult.hasNegInfDouble = true
               builderResult.negInfDouble = value
           }
      }
      public func setNegInfDouble(_ value:Double) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.negInfDouble = value
        return self
      }
      public func clearNegInfDouble() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasNegInfDouble = false
           builderResult.negInfDouble = Double(-HUGE)
           return self
      }
      public var hasNanDouble:Bool {
           get {
                return builderResult.hasNanDouble
           }
      }
      public var nanDouble:Double {
           get {
                return builderResult.nanDouble
           }
           set (value) {
               builderResult.hasNanDouble = true
               builderResult.nanDouble = value
           }
      }
      public func setNanDouble(_ value:Double) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.nanDouble = value
        return self
      }
      public func clearNanDouble() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasNanDouble = false
           builderResult.nanDouble = 0.0
           return self
      }
      public var hasInfFloat:Bool {
           get {
                return builderResult.hasInfFloat
           }
      }
      public var infFloat:Float {
           get {
                return builderResult.infFloat
           }
           set (value) {
               builderResult.hasInfFloat = true
               builderResult.infFloat = value
           }
      }
      public func setInfFloat(_ value:Float) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.infFloat = value
        return self
      }
      public func clearInfFloat() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasInfFloat = false
           builderResult.infFloat = HUGE
           return self
      }
      public var hasNegInfFloat:Bool {
           get {
                return builderResult.hasNegInfFloat
           }
      }
      public var negInfFloat:Float {
           get {
                return builderResult.negInfFloat
           }
           set (value) {
               builderResult.hasNegInfFloat = true
               builderResult.negInfFloat = value
           }
      }
      public func setNegInfFloat(_ value:Float) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.negInfFloat = value
        return self
      }
      public func clearNegInfFloat() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasNegInfFloat = false
           builderResult.negInfFloat = -HUGE
           return self
      }
      public var hasNanFloat:Bool {
           get {
                return builderResult.hasNanFloat
           }
      }
      public var nanFloat:Float {
           get {
                return builderResult.nanFloat
           }
           set (value) {
               builderResult.hasNanFloat = true
               builderResult.nanFloat = value
           }
      }
      public func setNanFloat(_ value:Float) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.nanFloat = value
        return self
      }
      public func clearNanFloat() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasNanFloat = false
           builderResult.nanFloat = 0.0
           return self
      }
      public var hasCppTrigraph:Bool {
           get {
                return builderResult.hasCppTrigraph
           }
      }
      public var cppTrigraph:String {
           get {
                return builderResult.cppTrigraph
           }
           set (value) {
               builderResult.hasCppTrigraph = true
               builderResult.cppTrigraph = value
           }
      }
      public func setCppTrigraph(_ value:String) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.cppTrigraph = value
        return self
      }
      public func clearCppTrigraph() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasCppTrigraph = false
           builderResult.cppTrigraph = "teststsrs"
           return self
      }
      public var hasStringWithZero:Bool {
           get {
                return builderResult.hasStringWithZero
           }
      }
      public var stringWithZero:String {
           get {
                return builderResult.stringWithZero
           }
           set (value) {
               builderResult.hasStringWithZero = true
               builderResult.stringWithZero = value
           }
      }
      public func setStringWithZero(_ value:String) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.stringWithZero = value
        return self
      }
      public func clearStringWithZero() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasStringWithZero = false
           builderResult.stringWithZero = "hel\000lo"
           return self
      }
      public var hasBytesWithZero:Bool {
           get {
                return builderResult.hasBytesWithZero
           }
      }
      public var bytesWithZero:NSData {
           get {
                return builderResult.bytesWithZero
           }
           set (value) {
               builderResult.hasBytesWithZero = true
               builderResult.bytesWithZero = value
           }
      }
      public func setBytesWithZero(_ value:NSData) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.bytesWithZero = value
        return self
      }
      public func clearBytesWithZero() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasBytesWithZero = false
           builderResult.bytesWithZero = NSData(bytes:([UInt8]() + "wor\000ld".utf8), length:6)
           return self
      }
      public var hasStringPieceWithZero:Bool {
           get {
                return builderResult.hasStringPieceWithZero
           }
      }
      public var stringPieceWithZero:String {
           get {
                return builderResult.stringPieceWithZero
           }
           set (value) {
               builderResult.hasStringPieceWithZero = true
               builderResult.stringPieceWithZero = value
           }
      }
      public func setStringPieceWithZero(_ value:String) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.stringPieceWithZero = value
        return self
      }
      public func clearStringPieceWithZero() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasStringPieceWithZero = false
           builderResult.stringPieceWithZero = "ab\000c"
           return self
      }
      public var hasCordWithZero:Bool {
           get {
                return builderResult.hasCordWithZero
           }
      }
      public var cordWithZero:String {
           get {
                return builderResult.cordWithZero
           }
           set (value) {
               builderResult.hasCordWithZero = true
               builderResult.cordWithZero = value
           }
      }
      public func setCordWithZero(_ value:String) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.cordWithZero = value
        return self
      }
      public func clearCordWithZero() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasCordWithZero = false
           builderResult.cordWithZero = "12\0003"
           return self
      }
      public var hasReplacementString:Bool {
           get {
                return builderResult.hasReplacementString
           }
      }
      public var replacementString:String {
           get {
                return builderResult.replacementString
           }
           set (value) {
               builderResult.hasReplacementString = true
               builderResult.replacementString = value
           }
      }
      public func setReplacementString(_ value:String) -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        self.replacementString = value
        return self
      }
      public func clearReplacementString() -> ProtobufUnittest.TestExtremeDefaultValues.Builder{
           builderResult.hasReplacementString = false
           builderResult.replacementString = "${unknown}"
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        builderResult = ProtobufUnittest.TestExtremeDefaultValues()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        return try ProtobufUnittest.TestExtremeDefaultValues.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestExtremeDefaultValues {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestExtremeDefaultValues {
        let returnMe:ProtobufUnittest.TestExtremeDefaultValues = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestExtremeDefaultValues) throws -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        if other == ProtobufUnittest.TestExtremeDefaultValues() {
         return self
        }
        if other.hasEscapedBytes {
             escapedBytes = other.escapedBytes
        }
        if other.hasLargeUint32 {
             largeUint32 = other.largeUint32
        }
        if other.hasLargeUint64 {
             largeUint64 = other.largeUint64
        }
        if other.hasSmallInt32 {
             smallInt32 = other.smallInt32
        }
        if other.hasSmallInt64 {
             smallInt64 = other.smallInt64
        }
        if other.hasReallySmallInt32 {
             reallySmallInt32 = other.reallySmallInt32
        }
        if other.hasReallySmallInt64 {
             reallySmallInt64 = other.reallySmallInt64
        }
        if other.hasUtf8String {
             utf8String = other.utf8String
        }
        if other.hasZeroFloat {
             zeroFloat = other.zeroFloat
        }
        if other.hasOneFloat {
             oneFloat = other.oneFloat
        }
        if other.hasSmallFloat {
             smallFloat = other.smallFloat
        }
        if other.hasNegativeOneFloat {
             negativeOneFloat = other.negativeOneFloat
        }
        if other.hasNegativeFloat {
             negativeFloat = other.negativeFloat
        }
        if other.hasLargeFloat {
             largeFloat = other.largeFloat
        }
        if other.hasSmallNegativeFloat {
             smallNegativeFloat = other.smallNegativeFloat
        }
        if other.hasInfDouble {
             infDouble = other.infDouble
        }
        if other.hasNegInfDouble {
             negInfDouble = other.negInfDouble
        }
        if other.hasNanDouble {
             nanDouble = other.nanDouble
        }
        if other.hasInfFloat {
             infFloat = other.infFloat
        }
        if other.hasNegInfFloat {
             negInfFloat = other.negInfFloat
        }
        if other.hasNanFloat {
             nanFloat = other.nanFloat
        }
        if other.hasCppTrigraph {
             cppTrigraph = other.cppTrigraph
        }
        if other.hasStringWithZero {
             stringWithZero = other.stringWithZero
        }
        if other.hasBytesWithZero {
             bytesWithZero = other.bytesWithZero
        }
        if other.hasStringPieceWithZero {
             stringPieceWithZero = other.stringPieceWithZero
        }
        if other.hasCordWithZero {
             cordWithZero = other.cordWithZero
        }
        if other.hasReplacementString {
             replacementString = other.replacementString
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestExtremeDefaultValues.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            escapedBytes = try input.readData()

          case 16 :
            largeUint32 = try input.readUInt32()

          case 24 :
            largeUint64 = try input.readUInt64()

          case 32 :
            smallInt32 = try input.readInt32()

          case 40 :
            smallInt64 = try input.readInt64()

          case 50 :
            utf8String = try input.readString()

          case 61 :
            zeroFloat = try input.readFloat()

          case 69 :
            oneFloat = try input.readFloat()

          case 77 :
            smallFloat = try input.readFloat()

          case 85 :
            negativeOneFloat = try input.readFloat()

          case 93 :
            negativeFloat = try input.readFloat()

          case 101 :
            largeFloat = try input.readFloat()

          case 109 :
            smallNegativeFloat = try input.readFloat()

          case 113 :
            infDouble = try input.readDouble()

          case 121 :
            negInfDouble = try input.readDouble()

          case 129 :
            nanDouble = try input.readDouble()

          case 141 :
            infFloat = try input.readFloat()

          case 149 :
            negInfFloat = try input.readFloat()

          case 157 :
            nanFloat = try input.readFloat()

          case 162 :
            cppTrigraph = try input.readString()

          case 168 :
            reallySmallInt32 = try input.readInt32()

          case 176 :
            reallySmallInt64 = try input.readInt64()

          case 186 :
            stringWithZero = try input.readString()

          case 194 :
            bytesWithZero = try input.readData()

          case 202 :
            stringPieceWithZero = try input.readString()

          case 210 :
            cordWithZero = try input.readString()

          case 218 :
            replacementString = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class SparseEnumMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var sparseEnum:ProtobufUnittest.TestSparseEnum = ProtobufUnittest.TestSparseEnum.SparseA
    public private(set) var hasSparseEnum:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasSparseEnum {
        try output.writeEnum(1, value:sparseEnum.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasSparseEnum) {
        serialize_size += sparseEnum.rawValue.computeEnumSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.SparseEnumMessage> {
      var mergedArray = Array<ProtobufUnittest.SparseEnumMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.SparseEnumMessage? {
      return try ProtobufUnittest.SparseEnumMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.SparseEnumMessage {
      return try ProtobufUnittest.SparseEnumMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.SparseEnumMessage {
      return try ProtobufUnittest.SparseEnumMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.SparseEnumMessage {
      return try ProtobufUnittest.SparseEnumMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.SparseEnumMessage {
      return try ProtobufUnittest.SparseEnumMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.SparseEnumMessage {
      return try ProtobufUnittest.SparseEnumMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.SparseEnumMessage {
      return try ProtobufUnittest.SparseEnumMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.SparseEnumMessage.Builder {
      return ProtobufUnittest.SparseEnumMessage.classBuilder() as! ProtobufUnittest.SparseEnumMessage.Builder
    }
    public func getBuilder() -> ProtobufUnittest.SparseEnumMessage.Builder {
      return classBuilder() as! ProtobufUnittest.SparseEnumMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.SparseEnumMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.SparseEnumMessage.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.SparseEnumMessage.Builder {
      return try ProtobufUnittest.SparseEnumMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.SparseEnumMessage) throws -> ProtobufUnittest.SparseEnumMessage.Builder {
      return try ProtobufUnittest.SparseEnumMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if (hasSparseEnum) {
        output += "\(indent) sparseEnum: \(sparseEnum.description)\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSparseEnum {
               hashCode = (hashCode &* 31) &+ Int(sparseEnum.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.SparseEnumMessage"
    }
    override public func className() -> String {
        return "ProtobufUnittest.SparseEnumMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.SparseEnumMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.SparseEnumMessage = ProtobufUnittest.SparseEnumMessage()
      public func getMessage() -> ProtobufUnittest.SparseEnumMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasSparseEnum:Bool{
            get {
                return builderResult.hasSparseEnum
            }
        }
        public var sparseEnum:ProtobufUnittest.TestSparseEnum {
            get {
                return builderResult.sparseEnum
            }
            set (value) {
                builderResult.hasSparseEnum = true
                builderResult.sparseEnum = value
            }
        }
        public func setSparseEnum(_ value:ProtobufUnittest.TestSparseEnum) -> ProtobufUnittest.SparseEnumMessage.Builder {
          self.sparseEnum = value
          return self
        }
        public func clearSparseEnum() -> ProtobufUnittest.SparseEnumMessage.Builder {
           builderResult.hasSparseEnum = false
           builderResult.sparseEnum = .SparseA
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.SparseEnumMessage.Builder {
        builderResult = ProtobufUnittest.SparseEnumMessage()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.SparseEnumMessage.Builder {
        return try ProtobufUnittest.SparseEnumMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.SparseEnumMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.SparseEnumMessage {
        let returnMe:ProtobufUnittest.SparseEnumMessage = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.SparseEnumMessage) throws -> ProtobufUnittest.SparseEnumMessage.Builder {
        if other == ProtobufUnittest.SparseEnumMessage() {
         return self
        }
        if other.hasSparseEnum {
             sparseEnum = other.sparseEnum
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.SparseEnumMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.SparseEnumMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            let valueIntsparseEnum = try input.readEnum()
            if let enumssparseEnum = ProtobufUnittest.TestSparseEnum(rawValue:valueIntsparseEnum){
                 sparseEnum = enumssparseEnum
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntsparseEnum))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Test String and Bytes: string is for valid UTF-8 strings
  final public class OneString : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var data:String = ""

    public private(set) var hasData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasData {
        try output.writeString(1, value:data)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.OneString> {
      var mergedArray = Array<ProtobufUnittest.OneString>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.OneString? {
      return try ProtobufUnittest.OneString.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.OneString {
      return try ProtobufUnittest.OneString.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OneString {
      return try ProtobufUnittest.OneString.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.OneString {
      return try ProtobufUnittest.OneString.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OneString {
      return try ProtobufUnittest.OneString.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.OneString {
      return try ProtobufUnittest.OneString.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OneString {
      return try ProtobufUnittest.OneString.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.OneString.Builder {
      return ProtobufUnittest.OneString.classBuilder() as! ProtobufUnittest.OneString.Builder
    }
    public func getBuilder() -> ProtobufUnittest.OneString.Builder {
      return classBuilder() as! ProtobufUnittest.OneString.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OneString.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OneString.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.OneString.Builder {
      return try ProtobufUnittest.OneString.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.OneString) throws -> ProtobufUnittest.OneString.Builder {
      return try ProtobufUnittest.OneString.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.OneString"
    }
    override public func className() -> String {
        return "ProtobufUnittest.OneString"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.OneString.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.OneString = ProtobufUnittest.OneString()
      public func getMessage() -> ProtobufUnittest.OneString {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasData:Bool {
           get {
                return builderResult.hasData
           }
      }
      public var data:String {
           get {
                return builderResult.data
           }
           set (value) {
               builderResult.hasData = true
               builderResult.data = value
           }
      }
      public func setData(_ value:String) -> ProtobufUnittest.OneString.Builder {
        self.data = value
        return self
      }
      public func clearData() -> ProtobufUnittest.OneString.Builder{
           builderResult.hasData = false
           builderResult.data = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.OneString.Builder {
        builderResult = ProtobufUnittest.OneString()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.OneString.Builder {
        return try ProtobufUnittest.OneString.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.OneString {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.OneString {
        let returnMe:ProtobufUnittest.OneString = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.OneString) throws -> ProtobufUnittest.OneString.Builder {
        if other == ProtobufUnittest.OneString() {
         return self
        }
        if other.hasData {
             data = other.data
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.OneString.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OneString.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            data = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class MoreString : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var data:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if !data.isEmpty {
        for oneValuedata in data {
          try output.writeString(1, value:oneValuedata)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeData:Int32 = 0
      for oneValuedata in data {
          dataSizeData += oneValuedata.computeStringSizeNoTag()
      }
      serialize_size += dataSizeData
      serialize_size += 1 * Int32(data.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.MoreString> {
      var mergedArray = Array<ProtobufUnittest.MoreString>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.MoreString? {
      return try ProtobufUnittest.MoreString.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.MoreString {
      return try ProtobufUnittest.MoreString.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.MoreString {
      return try ProtobufUnittest.MoreString.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.MoreString {
      return try ProtobufUnittest.MoreString.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.MoreString {
      return try ProtobufUnittest.MoreString.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.MoreString {
      return try ProtobufUnittest.MoreString.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.MoreString {
      return try ProtobufUnittest.MoreString.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.MoreString.Builder {
      return ProtobufUnittest.MoreString.classBuilder() as! ProtobufUnittest.MoreString.Builder
    }
    public func getBuilder() -> ProtobufUnittest.MoreString.Builder {
      return classBuilder() as! ProtobufUnittest.MoreString.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.MoreString.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.MoreString.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.MoreString.Builder {
      return try ProtobufUnittest.MoreString.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.MoreString) throws -> ProtobufUnittest.MoreString.Builder {
      return try ProtobufUnittest.MoreString.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      var dataElementIndex:Int = 0
      for oneValuedata in data  {
          output += "\(indent) data[\(dataElementIndex)]: \(oneValuedata)\n"
          dataElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValuedata in data {
                hashCode = (hashCode &* 31) &+ oneValuedata.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.MoreString"
    }
    override public func className() -> String {
        return "ProtobufUnittest.MoreString"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.MoreString.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.MoreString = ProtobufUnittest.MoreString()
      public func getMessage() -> ProtobufUnittest.MoreString {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var data:Array<String> {
           get {
               return builderResult.data
           }
           set (array) {
               builderResult.data = array
           }
      }
      public func setData(_ value:Array<String>) -> ProtobufUnittest.MoreString.Builder {
        self.data = value
        return self
      }
      public func clearData() -> ProtobufUnittest.MoreString.Builder {
         builderResult.data.removeAll(keepingCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.MoreString.Builder {
        builderResult = ProtobufUnittest.MoreString()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.MoreString.Builder {
        return try ProtobufUnittest.MoreString.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.MoreString {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.MoreString {
        let returnMe:ProtobufUnittest.MoreString = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.MoreString) throws -> ProtobufUnittest.MoreString.Builder {
        if other == ProtobufUnittest.MoreString() {
         return self
        }
        if !other.data.isEmpty {
            builderResult.data += other.data
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.MoreString.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.MoreString.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            data += [try input.readString()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class OneBytes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var data:NSData = NSData()

    public private(set) var hasData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasData {
        try output.writeData(1, value:data)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeDataSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.OneBytes> {
      var mergedArray = Array<ProtobufUnittest.OneBytes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.OneBytes? {
      return try ProtobufUnittest.OneBytes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.OneBytes {
      return try ProtobufUnittest.OneBytes.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OneBytes {
      return try ProtobufUnittest.OneBytes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.OneBytes {
      return try ProtobufUnittest.OneBytes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OneBytes {
      return try ProtobufUnittest.OneBytes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.OneBytes {
      return try ProtobufUnittest.OneBytes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OneBytes {
      return try ProtobufUnittest.OneBytes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.OneBytes.Builder {
      return ProtobufUnittest.OneBytes.classBuilder() as! ProtobufUnittest.OneBytes.Builder
    }
    public func getBuilder() -> ProtobufUnittest.OneBytes.Builder {
      return classBuilder() as! ProtobufUnittest.OneBytes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OneBytes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OneBytes.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.OneBytes.Builder {
      return try ProtobufUnittest.OneBytes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.OneBytes) throws -> ProtobufUnittest.OneBytes.Builder {
      return try ProtobufUnittest.OneBytes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.OneBytes"
    }
    override public func className() -> String {
        return "ProtobufUnittest.OneBytes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.OneBytes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.OneBytes = ProtobufUnittest.OneBytes()
      public func getMessage() -> ProtobufUnittest.OneBytes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasData:Bool {
           get {
                return builderResult.hasData
           }
      }
      public var data:NSData {
           get {
                return builderResult.data
           }
           set (value) {
               builderResult.hasData = true
               builderResult.data = value
           }
      }
      public func setData(_ value:NSData) -> ProtobufUnittest.OneBytes.Builder {
        self.data = value
        return self
      }
      public func clearData() -> ProtobufUnittest.OneBytes.Builder{
           builderResult.hasData = false
           builderResult.data = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.OneBytes.Builder {
        builderResult = ProtobufUnittest.OneBytes()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.OneBytes.Builder {
        return try ProtobufUnittest.OneBytes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.OneBytes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.OneBytes {
        let returnMe:ProtobufUnittest.OneBytes = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.OneBytes) throws -> ProtobufUnittest.OneBytes.Builder {
        if other == ProtobufUnittest.OneBytes() {
         return self
        }
        if other.hasData {
             data = other.data
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.OneBytes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.OneBytes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            data = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class MoreBytes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var data:Array<NSData> = Array<NSData>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if !data.isEmpty {
        for oneValuedata in data {
          try output.writeData(1, value:oneValuedata)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeData:Int32 = 0
      for oneValuedata in data {
          dataSizeData += oneValuedata.computeDataSizeNoTag()
      }
      serialize_size += dataSizeData
      serialize_size += 1 * Int32(data.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.MoreBytes> {
      var mergedArray = Array<ProtobufUnittest.MoreBytes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.MoreBytes? {
      return try ProtobufUnittest.MoreBytes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.MoreBytes {
      return try ProtobufUnittest.MoreBytes.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.MoreBytes {
      return try ProtobufUnittest.MoreBytes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.MoreBytes {
      return try ProtobufUnittest.MoreBytes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.MoreBytes {
      return try ProtobufUnittest.MoreBytes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.MoreBytes {
      return try ProtobufUnittest.MoreBytes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.MoreBytes {
      return try ProtobufUnittest.MoreBytes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.MoreBytes.Builder {
      return ProtobufUnittest.MoreBytes.classBuilder() as! ProtobufUnittest.MoreBytes.Builder
    }
    public func getBuilder() -> ProtobufUnittest.MoreBytes.Builder {
      return classBuilder() as! ProtobufUnittest.MoreBytes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.MoreBytes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.MoreBytes.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.MoreBytes.Builder {
      return try ProtobufUnittest.MoreBytes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.MoreBytes) throws -> ProtobufUnittest.MoreBytes.Builder {
      return try ProtobufUnittest.MoreBytes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      var dataElementIndex:Int = 0
      for oneValuedata in data  {
          output += "\(indent) data[\(dataElementIndex)]: \(oneValuedata)\n"
          dataElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValuedata in data {
                hashCode = (hashCode &* 31) &+ oneValuedata.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.MoreBytes"
    }
    override public func className() -> String {
        return "ProtobufUnittest.MoreBytes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.MoreBytes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.MoreBytes = ProtobufUnittest.MoreBytes()
      public func getMessage() -> ProtobufUnittest.MoreBytes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var data:Array<NSData> {
           get {
               return builderResult.data
           }
           set (array) {
               builderResult.data = array
           }
      }
      public func setData(_ value:Array<NSData>) -> ProtobufUnittest.MoreBytes.Builder {
        self.data = value
        return self
      }
      public func clearData() -> ProtobufUnittest.MoreBytes.Builder {
         builderResult.data.removeAll(keepingCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.MoreBytes.Builder {
        builderResult = ProtobufUnittest.MoreBytes()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.MoreBytes.Builder {
        return try ProtobufUnittest.MoreBytes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.MoreBytes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.MoreBytes {
        let returnMe:ProtobufUnittest.MoreBytes = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.MoreBytes) throws -> ProtobufUnittest.MoreBytes.Builder {
        if other == ProtobufUnittest.MoreBytes() {
         return self
        }
        if !other.data.isEmpty {
            builderResult.data += other.data
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.MoreBytes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.MoreBytes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            data += [try input.readData()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Test int32, uint32, int64, uint64, and bool are all compatible
  final public class Int32Message : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var data:Int32 = Int32(0)

    public private(set) var hasData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasData {
        try output.writeInt32(1, value:data)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.Int32Message> {
      var mergedArray = Array<ProtobufUnittest.Int32Message>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.Int32Message? {
      return try ProtobufUnittest.Int32Message.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.Int32Message {
      return try ProtobufUnittest.Int32Message.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Int32Message {
      return try ProtobufUnittest.Int32Message.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.Int32Message {
      return try ProtobufUnittest.Int32Message.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Int32Message {
      return try ProtobufUnittest.Int32Message.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.Int32Message {
      return try ProtobufUnittest.Int32Message.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Int32Message {
      return try ProtobufUnittest.Int32Message.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.Int32Message.Builder {
      return ProtobufUnittest.Int32Message.classBuilder() as! ProtobufUnittest.Int32Message.Builder
    }
    public func getBuilder() -> ProtobufUnittest.Int32Message.Builder {
      return classBuilder() as! ProtobufUnittest.Int32Message.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Int32Message.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Int32Message.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.Int32Message.Builder {
      return try ProtobufUnittest.Int32Message.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.Int32Message) throws -> ProtobufUnittest.Int32Message.Builder {
      return try ProtobufUnittest.Int32Message.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.Int32Message"
    }
    override public func className() -> String {
        return "ProtobufUnittest.Int32Message"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.Int32Message.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.Int32Message = ProtobufUnittest.Int32Message()
      public func getMessage() -> ProtobufUnittest.Int32Message {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasData:Bool {
           get {
                return builderResult.hasData
           }
      }
      public var data:Int32 {
           get {
                return builderResult.data
           }
           set (value) {
               builderResult.hasData = true
               builderResult.data = value
           }
      }
      public func setData(_ value:Int32) -> ProtobufUnittest.Int32Message.Builder {
        self.data = value
        return self
      }
      public func clearData() -> ProtobufUnittest.Int32Message.Builder{
           builderResult.hasData = false
           builderResult.data = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.Int32Message.Builder {
        builderResult = ProtobufUnittest.Int32Message()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.Int32Message.Builder {
        return try ProtobufUnittest.Int32Message.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.Int32Message {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.Int32Message {
        let returnMe:ProtobufUnittest.Int32Message = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.Int32Message) throws -> ProtobufUnittest.Int32Message.Builder {
        if other == ProtobufUnittest.Int32Message() {
         return self
        }
        if other.hasData {
             data = other.data
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.Int32Message.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Int32Message.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            data = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Uint32Message : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var data:UInt32 = UInt32(0)

    public private(set) var hasData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasData {
        try output.writeUInt32(1, value:data)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeUInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.Uint32Message> {
      var mergedArray = Array<ProtobufUnittest.Uint32Message>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.Uint32Message? {
      return try ProtobufUnittest.Uint32Message.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.Uint32Message {
      return try ProtobufUnittest.Uint32Message.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Uint32Message {
      return try ProtobufUnittest.Uint32Message.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.Uint32Message {
      return try ProtobufUnittest.Uint32Message.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Uint32Message {
      return try ProtobufUnittest.Uint32Message.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.Uint32Message {
      return try ProtobufUnittest.Uint32Message.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Uint32Message {
      return try ProtobufUnittest.Uint32Message.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.Uint32Message.Builder {
      return ProtobufUnittest.Uint32Message.classBuilder() as! ProtobufUnittest.Uint32Message.Builder
    }
    public func getBuilder() -> ProtobufUnittest.Uint32Message.Builder {
      return classBuilder() as! ProtobufUnittest.Uint32Message.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Uint32Message.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Uint32Message.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.Uint32Message.Builder {
      return try ProtobufUnittest.Uint32Message.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.Uint32Message) throws -> ProtobufUnittest.Uint32Message.Builder {
      return try ProtobufUnittest.Uint32Message.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.Uint32Message"
    }
    override public func className() -> String {
        return "ProtobufUnittest.Uint32Message"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.Uint32Message.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.Uint32Message = ProtobufUnittest.Uint32Message()
      public func getMessage() -> ProtobufUnittest.Uint32Message {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasData:Bool {
           get {
                return builderResult.hasData
           }
      }
      public var data:UInt32 {
           get {
                return builderResult.data
           }
           set (value) {
               builderResult.hasData = true
               builderResult.data = value
           }
      }
      public func setData(_ value:UInt32) -> ProtobufUnittest.Uint32Message.Builder {
        self.data = value
        return self
      }
      public func clearData() -> ProtobufUnittest.Uint32Message.Builder{
           builderResult.hasData = false
           builderResult.data = UInt32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.Uint32Message.Builder {
        builderResult = ProtobufUnittest.Uint32Message()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.Uint32Message.Builder {
        return try ProtobufUnittest.Uint32Message.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.Uint32Message {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.Uint32Message {
        let returnMe:ProtobufUnittest.Uint32Message = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.Uint32Message) throws -> ProtobufUnittest.Uint32Message.Builder {
        if other == ProtobufUnittest.Uint32Message() {
         return self
        }
        if other.hasData {
             data = other.data
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.Uint32Message.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Uint32Message.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            data = try input.readUInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Int64Message : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var data:Int64 = Int64(0)

    public private(set) var hasData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasData {
        try output.writeInt64(1, value:data)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeInt64Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.Int64Message> {
      var mergedArray = Array<ProtobufUnittest.Int64Message>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.Int64Message? {
      return try ProtobufUnittest.Int64Message.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.Int64Message {
      return try ProtobufUnittest.Int64Message.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Int64Message {
      return try ProtobufUnittest.Int64Message.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.Int64Message {
      return try ProtobufUnittest.Int64Message.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Int64Message {
      return try ProtobufUnittest.Int64Message.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.Int64Message {
      return try ProtobufUnittest.Int64Message.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Int64Message {
      return try ProtobufUnittest.Int64Message.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.Int64Message.Builder {
      return ProtobufUnittest.Int64Message.classBuilder() as! ProtobufUnittest.Int64Message.Builder
    }
    public func getBuilder() -> ProtobufUnittest.Int64Message.Builder {
      return classBuilder() as! ProtobufUnittest.Int64Message.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Int64Message.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Int64Message.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.Int64Message.Builder {
      return try ProtobufUnittest.Int64Message.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.Int64Message) throws -> ProtobufUnittest.Int64Message.Builder {
      return try ProtobufUnittest.Int64Message.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.Int64Message"
    }
    override public func className() -> String {
        return "ProtobufUnittest.Int64Message"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.Int64Message.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.Int64Message = ProtobufUnittest.Int64Message()
      public func getMessage() -> ProtobufUnittest.Int64Message {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasData:Bool {
           get {
                return builderResult.hasData
           }
      }
      public var data:Int64 {
           get {
                return builderResult.data
           }
           set (value) {
               builderResult.hasData = true
               builderResult.data = value
           }
      }
      public func setData(_ value:Int64) -> ProtobufUnittest.Int64Message.Builder {
        self.data = value
        return self
      }
      public func clearData() -> ProtobufUnittest.Int64Message.Builder{
           builderResult.hasData = false
           builderResult.data = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.Int64Message.Builder {
        builderResult = ProtobufUnittest.Int64Message()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.Int64Message.Builder {
        return try ProtobufUnittest.Int64Message.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.Int64Message {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.Int64Message {
        let returnMe:ProtobufUnittest.Int64Message = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.Int64Message) throws -> ProtobufUnittest.Int64Message.Builder {
        if other == ProtobufUnittest.Int64Message() {
         return self
        }
        if other.hasData {
             data = other.data
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.Int64Message.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Int64Message.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            data = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Uint64Message : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var data:UInt64 = UInt64(0)

    public private(set) var hasData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasData {
        try output.writeUInt64(1, value:data)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeUInt64Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.Uint64Message> {
      var mergedArray = Array<ProtobufUnittest.Uint64Message>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.Uint64Message? {
      return try ProtobufUnittest.Uint64Message.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.Uint64Message {
      return try ProtobufUnittest.Uint64Message.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Uint64Message {
      return try ProtobufUnittest.Uint64Message.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.Uint64Message {
      return try ProtobufUnittest.Uint64Message.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Uint64Message {
      return try ProtobufUnittest.Uint64Message.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.Uint64Message {
      return try ProtobufUnittest.Uint64Message.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Uint64Message {
      return try ProtobufUnittest.Uint64Message.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.Uint64Message.Builder {
      return ProtobufUnittest.Uint64Message.classBuilder() as! ProtobufUnittest.Uint64Message.Builder
    }
    public func getBuilder() -> ProtobufUnittest.Uint64Message.Builder {
      return classBuilder() as! ProtobufUnittest.Uint64Message.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Uint64Message.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Uint64Message.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.Uint64Message.Builder {
      return try ProtobufUnittest.Uint64Message.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.Uint64Message) throws -> ProtobufUnittest.Uint64Message.Builder {
      return try ProtobufUnittest.Uint64Message.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.Uint64Message"
    }
    override public func className() -> String {
        return "ProtobufUnittest.Uint64Message"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.Uint64Message.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.Uint64Message = ProtobufUnittest.Uint64Message()
      public func getMessage() -> ProtobufUnittest.Uint64Message {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasData:Bool {
           get {
                return builderResult.hasData
           }
      }
      public var data:UInt64 {
           get {
                return builderResult.data
           }
           set (value) {
               builderResult.hasData = true
               builderResult.data = value
           }
      }
      public func setData(_ value:UInt64) -> ProtobufUnittest.Uint64Message.Builder {
        self.data = value
        return self
      }
      public func clearData() -> ProtobufUnittest.Uint64Message.Builder{
           builderResult.hasData = false
           builderResult.data = UInt64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.Uint64Message.Builder {
        builderResult = ProtobufUnittest.Uint64Message()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.Uint64Message.Builder {
        return try ProtobufUnittest.Uint64Message.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.Uint64Message {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.Uint64Message {
        let returnMe:ProtobufUnittest.Uint64Message = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.Uint64Message) throws -> ProtobufUnittest.Uint64Message.Builder {
        if other == ProtobufUnittest.Uint64Message() {
         return self
        }
        if other.hasData {
             data = other.data
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.Uint64Message.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.Uint64Message.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            data = try input.readUInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class BoolMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var data:Bool = false

    public private(set) var hasData:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasData {
        try output.writeBool(1, value:data)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeBoolSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.BoolMessage> {
      var mergedArray = Array<ProtobufUnittest.BoolMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.BoolMessage? {
      return try ProtobufUnittest.BoolMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.BoolMessage {
      return try ProtobufUnittest.BoolMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BoolMessage {
      return try ProtobufUnittest.BoolMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.BoolMessage {
      return try ProtobufUnittest.BoolMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BoolMessage {
      return try ProtobufUnittest.BoolMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.BoolMessage {
      return try ProtobufUnittest.BoolMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BoolMessage {
      return try ProtobufUnittest.BoolMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.BoolMessage.Builder {
      return ProtobufUnittest.BoolMessage.classBuilder() as! ProtobufUnittest.BoolMessage.Builder
    }
    public func getBuilder() -> ProtobufUnittest.BoolMessage.Builder {
      return classBuilder() as! ProtobufUnittest.BoolMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BoolMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BoolMessage.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.BoolMessage.Builder {
      return try ProtobufUnittest.BoolMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.BoolMessage) throws -> ProtobufUnittest.BoolMessage.Builder {
      return try ProtobufUnittest.BoolMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.BoolMessage"
    }
    override public func className() -> String {
        return "ProtobufUnittest.BoolMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.BoolMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.BoolMessage = ProtobufUnittest.BoolMessage()
      public func getMessage() -> ProtobufUnittest.BoolMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasData:Bool {
           get {
                return builderResult.hasData
           }
      }
      public var data:Bool {
           get {
                return builderResult.data
           }
           set (value) {
               builderResult.hasData = true
               builderResult.data = value
           }
      }
      public func setData(_ value:Bool) -> ProtobufUnittest.BoolMessage.Builder {
        self.data = value
        return self
      }
      public func clearData() -> ProtobufUnittest.BoolMessage.Builder{
           builderResult.hasData = false
           builderResult.data = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.BoolMessage.Builder {
        builderResult = ProtobufUnittest.BoolMessage()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.BoolMessage.Builder {
        return try ProtobufUnittest.BoolMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.BoolMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.BoolMessage {
        let returnMe:ProtobufUnittest.BoolMessage = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.BoolMessage) throws -> ProtobufUnittest.BoolMessage.Builder {
        if other == ProtobufUnittest.BoolMessage() {
         return self
        }
        if other.hasData {
             data = other.data
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.BoolMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BoolMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            data = try input.readBool()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Test oneofs.
  final public class TestOneof : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class FooGroup : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var a:Int32 = Int32(0)

        public private(set) var hasA:Bool = false
        public private(set) var b:String = ""

        public private(set) var hasB:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasA {
            try output.writeInt32(5, value:a)
          }
          if hasB {
            try output.writeString(6, value:b)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(5)
          }
          if hasB {
            serialize_size += b.computeStringSize(6)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestOneof.FooGroup> {
          var mergedArray = Array<ProtobufUnittest.TestOneof.FooGroup>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneof.FooGroup? {
          return try ProtobufUnittest.TestOneof.FooGroup.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestOneof.FooGroup {
          return try ProtobufUnittest.TestOneof.FooGroup.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof.FooGroup {
          return try ProtobufUnittest.TestOneof.FooGroup.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneof.FooGroup {
          return try ProtobufUnittest.TestOneof.FooGroup.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof.FooGroup {
          return try ProtobufUnittest.TestOneof.FooGroup.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneof.FooGroup {
          return try ProtobufUnittest.TestOneof.FooGroup.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof.FooGroup {
          return try ProtobufUnittest.TestOneof.FooGroup.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestOneof.FooGroup.Builder {
          return ProtobufUnittest.TestOneof.FooGroup.classBuilder() as! ProtobufUnittest.TestOneof.FooGroup.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestOneof.FooGroup.Builder {
          return classBuilder() as! ProtobufUnittest.TestOneof.FooGroup.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof.FooGroup.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof.FooGroup.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestOneof.FooGroup.Builder {
          return try ProtobufUnittest.TestOneof.FooGroup.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestOneof.FooGroup) throws -> ProtobufUnittest.TestOneof.FooGroup.Builder {
          return try ProtobufUnittest.TestOneof.FooGroup.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          if hasB {
            output += "\(indent) b: \(b) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                if hasB {
                   hashCode = (hashCode &* 31) &+ b.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestOneof.FooGroup"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestOneof.FooGroup"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestOneof.FooGroup.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestOneof.FooGroup = ProtobufUnittest.TestOneof.FooGroup()
          public func getMessage() -> ProtobufUnittest.TestOneof.FooGroup {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasA:Bool {
               get {
                    return builderResult.hasA
               }
          }
          public var a:Int32 {
               get {
                    return builderResult.a
               }
               set (value) {
                   builderResult.hasA = true
                   builderResult.a = value
               }
          }
          public func setA(_ value:Int32) -> ProtobufUnittest.TestOneof.FooGroup.Builder {
            self.a = value
            return self
          }
          public func clearA() -> ProtobufUnittest.TestOneof.FooGroup.Builder{
               builderResult.hasA = false
               builderResult.a = Int32(0)
               return self
          }
          public var hasB:Bool {
               get {
                    return builderResult.hasB
               }
          }
          public var b:String {
               get {
                    return builderResult.b
               }
               set (value) {
                   builderResult.hasB = true
                   builderResult.b = value
               }
          }
          public func setB(_ value:String) -> ProtobufUnittest.TestOneof.FooGroup.Builder {
            self.b = value
            return self
          }
          public func clearB() -> ProtobufUnittest.TestOneof.FooGroup.Builder{
               builderResult.hasB = false
               builderResult.b = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestOneof.FooGroup.Builder {
            builderResult = ProtobufUnittest.TestOneof.FooGroup()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestOneof.FooGroup.Builder {
            return try ProtobufUnittest.TestOneof.FooGroup.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestOneof.FooGroup {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestOneof.FooGroup {
            let returnMe:ProtobufUnittest.TestOneof.FooGroup = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestOneof.FooGroup) throws -> ProtobufUnittest.TestOneof.FooGroup.Builder {
            if other == ProtobufUnittest.TestOneof.FooGroup() {
             return self
            }
            if other.hasA {
                 a = other.a
            }
            if other.hasB {
                 b = other.b
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneof.FooGroup.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof.FooGroup.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 40 :
                a = try input.readInt32()

              case 50 :
                b = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //OneOf declaration start

    public enum Foo {
      case FooOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .FooOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case FooInt(Int32)

      public static func getFooInt(_ value:Foo) -> Int32? {
           switch value {
           case .FooInt(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooString(String)

      public static func getFooString(_ value:Foo) -> String? {
           switch value {
           case .FooString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooMessage(ProtobufUnittest.TestAllTypes)

      public static func getFooMessage(_ value:Foo) -> ProtobufUnittest.TestAllTypes? {
           switch value {
           case .FooMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooGroup(ProtobufUnittest.TestOneof.FooGroup)

      public static func getFooGroup(_ value:Foo) -> ProtobufUnittest.TestOneof.FooGroup? {
           switch value {
           case .FooGroup(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageFoo:TestOneof.Foo =  TestOneof.Foo.FooOneOfNotSet
    public private(set) var fooInt:Int32!{
         get {
              return TestOneof.Foo.getFooInt(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof.Foo.FooInt(newvalue)
         }
    }
    public private(set) var hasFooInt:Bool {
          get {
               if TestOneof.Foo.getFooInt(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooString:String!{
         get {
              return TestOneof.Foo.getFooString(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof.Foo.FooString(newvalue)
         }
    }
    public private(set) var hasFooString:Bool {
          get {
               if TestOneof.Foo.getFooString(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooMessage:ProtobufUnittest.TestAllTypes!{
         get {
              return TestOneof.Foo.getFooMessage(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof.Foo.FooMessage(newvalue)
         }
    }
    public private(set) var hasFooMessage:Bool {
          get {
               if TestOneof.Foo.getFooMessage(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooGroup:ProtobufUnittest.TestOneof.FooGroup!{
         get {
              return TestOneof.Foo.getFooGroup(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof.Foo.FooGroup(newvalue)
         }
    }
    public private(set) var hasFooGroup:Bool {
          get {
               if TestOneof.Foo.getFooGroup(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasFooInt {
        try output.writeInt32(1, value:fooInt)
      }
      if hasFooString {
        try output.writeString(2, value:fooString)
      }
      if hasFooMessage {
        try output.writeMessage(3, value:fooMessage)
      }
      if hasFooGroup {
        try output.writeGroup(4, value:fooGroup)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFooInt {
        serialize_size += fooInt.computeInt32Size(1)
      }
      if hasFooString {
        serialize_size += fooString.computeStringSize(2)
      }
      if hasFooMessage {
          if let varSizefooMessage = fooMessage?.computeMessageSize(3) {
              serialize_size += varSizefooMessage
          }
      }
      if hasFooGroup {
          if let varSizefooGroup = fooGroup?.computeGroupSize(4) {
              serialize_size += varSizefooGroup
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestOneof> {
      var mergedArray = Array<ProtobufUnittest.TestOneof>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneof? {
      return try ProtobufUnittest.TestOneof.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestOneof {
      return try ProtobufUnittest.TestOneof.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof {
      return try ProtobufUnittest.TestOneof.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneof {
      return try ProtobufUnittest.TestOneof.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof {
      return try ProtobufUnittest.TestOneof.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneof {
      return try ProtobufUnittest.TestOneof.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof {
      return try ProtobufUnittest.TestOneof.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestOneof.Builder {
      return ProtobufUnittest.TestOneof.classBuilder() as! ProtobufUnittest.TestOneof.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestOneof.Builder {
      return classBuilder() as! ProtobufUnittest.TestOneof.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneof.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneof.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestOneof.Builder {
      return try ProtobufUnittest.TestOneof.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestOneof) throws -> ProtobufUnittest.TestOneof.Builder {
      return try ProtobufUnittest.TestOneof.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasFooInt {
        output += "\(indent) fooInt: \(fooInt) \n"
      }
      if hasFooString {
        output += "\(indent) fooString: \(fooString) \n"
      }
      if hasFooMessage {
        output += "\(indent) fooMessage {\n"
        if let outDescFooMessage = fooMessage {
          output += try outDescFooMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasFooGroup {
        output += "\(indent) fooGroup {\n"
        if let outDescFooGroup = fooGroup {
          output += try outDescFooGroup.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFooInt {
               hashCode = (hashCode &* 31) &+ fooInt.hashValue
            }
            if hasFooString {
               hashCode = (hashCode &* 31) &+ fooString.hashValue
            }
            if hasFooMessage {
                if let hashValuefooMessage = fooMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefooMessage
                }
            }
            if hasFooGroup {
                if let hashValuefooGroup = fooGroup?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefooGroup
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestOneof"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestOneof"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestOneof.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestOneof = ProtobufUnittest.TestOneof()
      public func getMessage() -> ProtobufUnittest.TestOneof {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasFooInt:Bool {
           get {
                return builderResult.hasFooInt
           }
      }
      public var fooInt:Int32 {
           get {
                return builderResult.fooInt
           }
           set (value) {
               builderResult.hasFooInt = true
               builderResult.fooInt = value
           }
      }
      public func setFooInt(_ value:Int32) -> ProtobufUnittest.TestOneof.Builder {
        self.fooInt = value
        return self
      }
      public func clearFooInt() -> ProtobufUnittest.TestOneof.Builder{
           builderResult.hasFooInt = false
           builderResult.fooInt = Int32(0)
           return self
      }
      public var hasFooString:Bool {
           get {
                return builderResult.hasFooString
           }
      }
      public var fooString:String {
           get {
                return builderResult.fooString
           }
           set (value) {
               builderResult.hasFooString = true
               builderResult.fooString = value
           }
      }
      public func setFooString(_ value:String) -> ProtobufUnittest.TestOneof.Builder {
        self.fooString = value
        return self
      }
      public func clearFooString() -> ProtobufUnittest.TestOneof.Builder{
           builderResult.hasFooString = false
           builderResult.fooString = ""
           return self
      }
      public var hasFooMessage:Bool {
           get {
               return builderResult.hasFooMessage
           }
      }
      public var fooMessage:ProtobufUnittest.TestAllTypes! {
           get {
               if fooMessageBuilder_ != nil {
                  builderResult.fooMessage = fooMessageBuilder_.getMessage()
               }
               return builderResult.fooMessage
           }
           set (value) {
               builderResult.hasFooMessage = true
               builderResult.fooMessage = value
           }
      }
      private var fooMessageBuilder_:ProtobufUnittest.TestAllTypes.Builder! {
           didSet {
              builderResult.hasFooMessage = true
           }
      }
      public func getFooMessageBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
        if fooMessageBuilder_ == nil {
           fooMessageBuilder_ = ProtobufUnittest.TestAllTypes.Builder()
           builderResult.fooMessage = fooMessageBuilder_.getMessage()
           if fooMessage != nil {
              try! fooMessageBuilder_.mergeFrom(fooMessage)
           }
        }
        return fooMessageBuilder_
      }
      public func setFooMessage(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.TestOneof.Builder {
        self.fooMessage = value
        return self
      }
      public func mergeFooMessage(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestOneof.Builder {
        if builderResult.hasFooMessage {
          builderResult.fooMessage = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.fooMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.fooMessage = value
        }
        builderResult.hasFooMessage = true
        return self
      }
      public func clearFooMessage() -> ProtobufUnittest.TestOneof.Builder {
        fooMessageBuilder_ = nil
        builderResult.hasFooMessage = false
        builderResult.fooMessage = nil
        return self
      }
      public var hasFooGroup:Bool {
           get {
               return builderResult.hasFooGroup
           }
      }
      public var fooGroup:ProtobufUnittest.TestOneof.FooGroup! {
           get {
               if fooGroupBuilder_ != nil {
                  builderResult.fooGroup = fooGroupBuilder_.getMessage()
               }
               return builderResult.fooGroup
           }
           set (value) {
               builderResult.hasFooGroup = true
               builderResult.fooGroup = value
           }
      }
      private var fooGroupBuilder_:ProtobufUnittest.TestOneof.FooGroup.Builder! {
           didSet {
              builderResult.hasFooGroup = true
           }
      }
      public func getFooGroupBuilder() -> ProtobufUnittest.TestOneof.FooGroup.Builder {
        if fooGroupBuilder_ == nil {
           fooGroupBuilder_ = ProtobufUnittest.TestOneof.FooGroup.Builder()
           builderResult.fooGroup = fooGroupBuilder_.getMessage()
           if fooGroup != nil {
              try! fooGroupBuilder_.mergeFrom(fooGroup)
           }
        }
        return fooGroupBuilder_
      }
      public func setFooGroup(_ value:ProtobufUnittest.TestOneof.FooGroup!) -> ProtobufUnittest.TestOneof.Builder {
        self.fooGroup = value
        return self
      }
      public func mergeFooGroup(_ value:ProtobufUnittest.TestOneof.FooGroup) throws -> ProtobufUnittest.TestOneof.Builder {
        if builderResult.hasFooGroup {
          builderResult.fooGroup = try ProtobufUnittest.TestOneof.FooGroup.builderWithPrototype(builderResult.fooGroup).mergeFrom(value).buildPartial()
        } else {
          builderResult.fooGroup = value
        }
        builderResult.hasFooGroup = true
        return self
      }
      public func clearFooGroup() -> ProtobufUnittest.TestOneof.Builder {
        fooGroupBuilder_ = nil
        builderResult.hasFooGroup = false
        builderResult.fooGroup = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestOneof.Builder {
        builderResult = ProtobufUnittest.TestOneof()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestOneof.Builder {
        return try ProtobufUnittest.TestOneof.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestOneof {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestOneof {
        let returnMe:ProtobufUnittest.TestOneof = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestOneof) throws -> ProtobufUnittest.TestOneof.Builder {
        if other == ProtobufUnittest.TestOneof() {
         return self
        }
        if other.hasFooInt {
             fooInt = other.fooInt
        }
        if other.hasFooString {
             fooString = other.fooString
        }
        if (other.hasFooMessage) {
            try mergeFooMessage(other.fooMessage)
        }
        if (other.hasFooGroup) {
            try mergeFooGroup(other.fooGroup)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneof.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            fooInt = try input.readInt32()

          case 18 :
            fooString = try input.readString()

          case 26 :
            let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
            if hasFooMessage {
              try subBuilder.mergeFrom(fooMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fooMessage = subBuilder.buildPartial()

          case 35 :
            let subBuilder:ProtobufUnittest.TestOneof.FooGroup.Builder = ProtobufUnittest.TestOneof.FooGroup.Builder()
            if hasFooGroup {
              try subBuilder.mergeFrom(fooGroup)
            }
            try input.readGroup(4, builder:subBuilder, extensionRegistry:extensionRegistry)
            fooGroup = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestOneofBackwardsCompatible : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class FooGroup : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var a:Int32 = Int32(0)

        public private(set) var hasA:Bool = false
        public private(set) var b:String = ""

        public private(set) var hasB:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasA {
            try output.writeInt32(5, value:a)
          }
          if hasB {
            try output.writeString(6, value:b)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(5)
          }
          if hasB {
            serialize_size += b.computeStringSize(6)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup> {
          var mergedArray = Array<ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup? {
          return try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.classBuilder() as! ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
          return classBuilder() as! ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
          return try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
          return try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          if hasB {
            output += "\(indent) b: \(b) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                if hasB {
                   hashCode = (hashCode &* 31) &+ b.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup = ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup()
          public func getMessage() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasA:Bool {
               get {
                    return builderResult.hasA
               }
          }
          public var a:Int32 {
               get {
                    return builderResult.a
               }
               set (value) {
                   builderResult.hasA = true
                   builderResult.a = value
               }
          }
          public func setA(_ value:Int32) -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
            self.a = value
            return self
          }
          public func clearA() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder{
               builderResult.hasA = false
               builderResult.a = Int32(0)
               return self
          }
          public var hasB:Bool {
               get {
                    return builderResult.hasB
               }
          }
          public var b:String {
               get {
                    return builderResult.b
               }
               set (value) {
                   builderResult.hasB = true
                   builderResult.b = value
               }
          }
          public func setB(_ value:String) -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
            self.b = value
            return self
          }
          public func clearB() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder{
               builderResult.hasB = false
               builderResult.b = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
            builderResult = ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
            return try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
            let returnMe:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
            if other == ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup() {
             return self
            }
            if other.hasA {
                 a = other.a
            }
            if other.hasB {
                 b = other.b
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 40 :
                a = try input.readInt32()

              case 50 :
                b = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end

    public private(set) var fooInt:Int32 = Int32(0)

    public private(set) var hasFooInt:Bool = false
    public private(set) var fooString:String = ""

    public private(set) var hasFooString:Bool = false
    public private(set) var fooMessage:ProtobufUnittest.TestAllTypes!
    public private(set) var hasFooMessage:Bool = false
    public private(set) var fooGroup:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup!
    public private(set) var hasFooGroup:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasFooInt {
        try output.writeInt32(1, value:fooInt)
      }
      if hasFooString {
        try output.writeString(2, value:fooString)
      }
      if hasFooMessage {
        try output.writeMessage(3, value:fooMessage)
      }
      if hasFooGroup {
        try output.writeGroup(4, value:fooGroup)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFooInt {
        serialize_size += fooInt.computeInt32Size(1)
      }
      if hasFooString {
        serialize_size += fooString.computeStringSize(2)
      }
      if hasFooMessage {
          if let varSizefooMessage = fooMessage?.computeMessageSize(3) {
              serialize_size += varSizefooMessage
          }
      }
      if hasFooGroup {
          if let varSizefooGroup = fooGroup?.computeGroupSize(4) {
              serialize_size += varSizefooGroup
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestOneofBackwardsCompatible> {
      var mergedArray = Array<ProtobufUnittest.TestOneofBackwardsCompatible>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneofBackwardsCompatible? {
      return try ProtobufUnittest.TestOneofBackwardsCompatible.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return try ProtobufUnittest.TestOneofBackwardsCompatible.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return try ProtobufUnittest.TestOneofBackwardsCompatible.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return try ProtobufUnittest.TestOneofBackwardsCompatible.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return try ProtobufUnittest.TestOneofBackwardsCompatible.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return try ProtobufUnittest.TestOneofBackwardsCompatible.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return try ProtobufUnittest.TestOneofBackwardsCompatible.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
      return ProtobufUnittest.TestOneofBackwardsCompatible.classBuilder() as! ProtobufUnittest.TestOneofBackwardsCompatible.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
      return classBuilder() as! ProtobufUnittest.TestOneofBackwardsCompatible.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneofBackwardsCompatible.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneofBackwardsCompatible.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
      return try ProtobufUnittest.TestOneofBackwardsCompatible.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestOneofBackwardsCompatible) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
      return try ProtobufUnittest.TestOneofBackwardsCompatible.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasFooInt {
        output += "\(indent) fooInt: \(fooInt) \n"
      }
      if hasFooString {
        output += "\(indent) fooString: \(fooString) \n"
      }
      if hasFooMessage {
        output += "\(indent) fooMessage {\n"
        if let outDescFooMessage = fooMessage {
          output += try outDescFooMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasFooGroup {
        output += "\(indent) fooGroup {\n"
        if let outDescFooGroup = fooGroup {
          output += try outDescFooGroup.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFooInt {
               hashCode = (hashCode &* 31) &+ fooInt.hashValue
            }
            if hasFooString {
               hashCode = (hashCode &* 31) &+ fooString.hashValue
            }
            if hasFooMessage {
                if let hashValuefooMessage = fooMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefooMessage
                }
            }
            if hasFooGroup {
                if let hashValuefooGroup = fooGroup?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefooGroup
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestOneofBackwardsCompatible"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestOneofBackwardsCompatible"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestOneofBackwardsCompatible.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestOneofBackwardsCompatible = ProtobufUnittest.TestOneofBackwardsCompatible()
      public func getMessage() -> ProtobufUnittest.TestOneofBackwardsCompatible {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasFooInt:Bool {
           get {
                return builderResult.hasFooInt
           }
      }
      public var fooInt:Int32 {
           get {
                return builderResult.fooInt
           }
           set (value) {
               builderResult.hasFooInt = true
               builderResult.fooInt = value
           }
      }
      public func setFooInt(_ value:Int32) -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        self.fooInt = value
        return self
      }
      public func clearFooInt() -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder{
           builderResult.hasFooInt = false
           builderResult.fooInt = Int32(0)
           return self
      }
      public var hasFooString:Bool {
           get {
                return builderResult.hasFooString
           }
      }
      public var fooString:String {
           get {
                return builderResult.fooString
           }
           set (value) {
               builderResult.hasFooString = true
               builderResult.fooString = value
           }
      }
      public func setFooString(_ value:String) -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        self.fooString = value
        return self
      }
      public func clearFooString() -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder{
           builderResult.hasFooString = false
           builderResult.fooString = ""
           return self
      }
      public var hasFooMessage:Bool {
           get {
               return builderResult.hasFooMessage
           }
      }
      public var fooMessage:ProtobufUnittest.TestAllTypes! {
           get {
               if fooMessageBuilder_ != nil {
                  builderResult.fooMessage = fooMessageBuilder_.getMessage()
               }
               return builderResult.fooMessage
           }
           set (value) {
               builderResult.hasFooMessage = true
               builderResult.fooMessage = value
           }
      }
      private var fooMessageBuilder_:ProtobufUnittest.TestAllTypes.Builder! {
           didSet {
              builderResult.hasFooMessage = true
           }
      }
      public func getFooMessageBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
        if fooMessageBuilder_ == nil {
           fooMessageBuilder_ = ProtobufUnittest.TestAllTypes.Builder()
           builderResult.fooMessage = fooMessageBuilder_.getMessage()
           if fooMessage != nil {
              try! fooMessageBuilder_.mergeFrom(fooMessage)
           }
        }
        return fooMessageBuilder_
      }
      public func setFooMessage(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        self.fooMessage = value
        return self
      }
      public func mergeFooMessage(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        if builderResult.hasFooMessage {
          builderResult.fooMessage = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.fooMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.fooMessage = value
        }
        builderResult.hasFooMessage = true
        return self
      }
      public func clearFooMessage() -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        fooMessageBuilder_ = nil
        builderResult.hasFooMessage = false
        builderResult.fooMessage = nil
        return self
      }
      public var hasFooGroup:Bool {
           get {
               return builderResult.hasFooGroup
           }
      }
      public var fooGroup:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup! {
           get {
               if fooGroupBuilder_ != nil {
                  builderResult.fooGroup = fooGroupBuilder_.getMessage()
               }
               return builderResult.fooGroup
           }
           set (value) {
               builderResult.hasFooGroup = true
               builderResult.fooGroup = value
           }
      }
      private var fooGroupBuilder_:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder! {
           didSet {
              builderResult.hasFooGroup = true
           }
      }
      public func getFooGroupBuilder() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder {
        if fooGroupBuilder_ == nil {
           fooGroupBuilder_ = ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder()
           builderResult.fooGroup = fooGroupBuilder_.getMessage()
           if fooGroup != nil {
              try! fooGroupBuilder_.mergeFrom(fooGroup)
           }
        }
        return fooGroupBuilder_
      }
      public func setFooGroup(_ value:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup!) -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        self.fooGroup = value
        return self
      }
      public func mergeFooGroup(_ value:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        if builderResult.hasFooGroup {
          builderResult.fooGroup = try ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builderWithPrototype(builderResult.fooGroup).mergeFrom(value).buildPartial()
        } else {
          builderResult.fooGroup = value
        }
        builderResult.hasFooGroup = true
        return self
      }
      public func clearFooGroup() -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        fooGroupBuilder_ = nil
        builderResult.hasFooGroup = false
        builderResult.fooGroup = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        builderResult = ProtobufUnittest.TestOneofBackwardsCompatible()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        return try ProtobufUnittest.TestOneofBackwardsCompatible.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestOneofBackwardsCompatible {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestOneofBackwardsCompatible {
        let returnMe:ProtobufUnittest.TestOneofBackwardsCompatible = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestOneofBackwardsCompatible) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        if other == ProtobufUnittest.TestOneofBackwardsCompatible() {
         return self
        }
        if other.hasFooInt {
             fooInt = other.fooInt
        }
        if other.hasFooString {
             fooString = other.fooString
        }
        if (other.hasFooMessage) {
            try mergeFooMessage(other.fooMessage)
        }
        if (other.hasFooGroup) {
            try mergeFooGroup(other.fooGroup)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneofBackwardsCompatible.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            fooInt = try input.readInt32()

          case 18 :
            fooString = try input.readString()

          case 26 :
            let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
            if hasFooMessage {
              try subBuilder.mergeFrom(fooMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fooMessage = subBuilder.buildPartial()

          case 35 :
            let subBuilder:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder = ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.Builder()
            if hasFooGroup {
              try subBuilder.mergeFrom(fooGroup)
            }
            try input.readGroup(4, builder:subBuilder, extensionRegistry:extensionRegistry)
            fooGroup = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestOneof2 : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class FooGroup : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var a:Int32 = Int32(0)

        public private(set) var hasA:Bool = false
        public private(set) var b:String = ""

        public private(set) var hasB:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasA {
            try output.writeInt32(9, value:a)
          }
          if hasB {
            try output.writeString(10, value:b)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(9)
          }
          if hasB {
            serialize_size += b.computeStringSize(10)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestOneof2.FooGroup> {
          var mergedArray = Array<ProtobufUnittest.TestOneof2.FooGroup>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneof2.FooGroup? {
          return try ProtobufUnittest.TestOneof2.FooGroup.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestOneof2.FooGroup {
          return try ProtobufUnittest.TestOneof2.FooGroup.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2.FooGroup {
          return try ProtobufUnittest.TestOneof2.FooGroup.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneof2.FooGroup {
          return try ProtobufUnittest.TestOneof2.FooGroup.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2.FooGroup {
          return try ProtobufUnittest.TestOneof2.FooGroup.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneof2.FooGroup {
          return try ProtobufUnittest.TestOneof2.FooGroup.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2.FooGroup {
          return try ProtobufUnittest.TestOneof2.FooGroup.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
          return ProtobufUnittest.TestOneof2.FooGroup.classBuilder() as! ProtobufUnittest.TestOneof2.FooGroup.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
          return classBuilder() as! ProtobufUnittest.TestOneof2.FooGroup.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof2.FooGroup.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof2.FooGroup.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
          return try ProtobufUnittest.TestOneof2.FooGroup.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestOneof2.FooGroup) throws -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
          return try ProtobufUnittest.TestOneof2.FooGroup.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          if hasB {
            output += "\(indent) b: \(b) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                if hasB {
                   hashCode = (hashCode &* 31) &+ b.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestOneof2.FooGroup"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestOneof2.FooGroup"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestOneof2.FooGroup.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestOneof2.FooGroup = ProtobufUnittest.TestOneof2.FooGroup()
          public func getMessage() -> ProtobufUnittest.TestOneof2.FooGroup {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasA:Bool {
               get {
                    return builderResult.hasA
               }
          }
          public var a:Int32 {
               get {
                    return builderResult.a
               }
               set (value) {
                   builderResult.hasA = true
                   builderResult.a = value
               }
          }
          public func setA(_ value:Int32) -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
            self.a = value
            return self
          }
          public func clearA() -> ProtobufUnittest.TestOneof2.FooGroup.Builder{
               builderResult.hasA = false
               builderResult.a = Int32(0)
               return self
          }
          public var hasB:Bool {
               get {
                    return builderResult.hasB
               }
          }
          public var b:String {
               get {
                    return builderResult.b
               }
               set (value) {
                   builderResult.hasB = true
                   builderResult.b = value
               }
          }
          public func setB(_ value:String) -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
            self.b = value
            return self
          }
          public func clearB() -> ProtobufUnittest.TestOneof2.FooGroup.Builder{
               builderResult.hasB = false
               builderResult.b = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
            builderResult = ProtobufUnittest.TestOneof2.FooGroup()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
            return try ProtobufUnittest.TestOneof2.FooGroup.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestOneof2.FooGroup {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestOneof2.FooGroup {
            let returnMe:ProtobufUnittest.TestOneof2.FooGroup = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestOneof2.FooGroup) throws -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
            if other == ProtobufUnittest.TestOneof2.FooGroup() {
             return self
            }
            if other.hasA {
                 a = other.a
            }
            if other.hasB {
                 b = other.b
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 72 :
                a = try input.readInt32()

              case 82 :
                b = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var quxInt:Int64 = Int64(0)

        public private(set) var hasQuxInt:Bool = false
        public private(set) var corgeInt:Array<Int32> = Array<Int32>()
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasQuxInt {
            try output.writeInt64(1, value:quxInt)
          }
          if !corgeInt.isEmpty {
            for oneValuecorgeInt in corgeInt {
              try output.writeInt32(2, value:oneValuecorgeInt)
            }
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasQuxInt {
            serialize_size += quxInt.computeInt64Size(1)
          }
          var dataSizeCorgeInt:Int32 = 0
          for oneValuecorgeInt in corgeInt {
              dataSizeCorgeInt += oneValuecorgeInt.computeInt32SizeNoTag()
          }
          serialize_size += dataSizeCorgeInt
          serialize_size += 1 * Int32(corgeInt.count)
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestOneof2.NestedMessage> {
          var mergedArray = Array<ProtobufUnittest.TestOneof2.NestedMessage>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneof2.NestedMessage? {
          return try ProtobufUnittest.TestOneof2.NestedMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestOneof2.NestedMessage {
          return try ProtobufUnittest.TestOneof2.NestedMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2.NestedMessage {
          return try ProtobufUnittest.TestOneof2.NestedMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneof2.NestedMessage {
          return try ProtobufUnittest.TestOneof2.NestedMessage.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2.NestedMessage {
          return try ProtobufUnittest.TestOneof2.NestedMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneof2.NestedMessage {
          return try ProtobufUnittest.TestOneof2.NestedMessage.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2.NestedMessage {
          return try ProtobufUnittest.TestOneof2.NestedMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
          return ProtobufUnittest.TestOneof2.NestedMessage.classBuilder() as! ProtobufUnittest.TestOneof2.NestedMessage.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
          return classBuilder() as! ProtobufUnittest.TestOneof2.NestedMessage.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof2.NestedMessage.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof2.NestedMessage.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
          return try ProtobufUnittest.TestOneof2.NestedMessage.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestOneof2.NestedMessage) throws -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
          return try ProtobufUnittest.TestOneof2.NestedMessage.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasQuxInt {
            output += "\(indent) quxInt: \(quxInt) \n"
          }
          var corgeIntElementIndex:Int = 0
          for oneValuecorgeInt in corgeInt  {
              output += "\(indent) corgeInt[\(corgeIntElementIndex)]: \(oneValuecorgeInt)\n"
              corgeIntElementIndex += 1
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasQuxInt {
                   hashCode = (hashCode &* 31) &+ quxInt.hashValue
                }
                for oneValuecorgeInt in corgeInt {
                    hashCode = (hashCode &* 31) &+ oneValuecorgeInt.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestOneof2.NestedMessage"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestOneof2.NestedMessage"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestOneof2.NestedMessage.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestOneof2.NestedMessage = ProtobufUnittest.TestOneof2.NestedMessage()
          public func getMessage() -> ProtobufUnittest.TestOneof2.NestedMessage {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasQuxInt:Bool {
               get {
                    return builderResult.hasQuxInt
               }
          }
          public var quxInt:Int64 {
               get {
                    return builderResult.quxInt
               }
               set (value) {
                   builderResult.hasQuxInt = true
                   builderResult.quxInt = value
               }
          }
          public func setQuxInt(_ value:Int64) -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
            self.quxInt = value
            return self
          }
          public func clearQuxInt() -> ProtobufUnittest.TestOneof2.NestedMessage.Builder{
               builderResult.hasQuxInt = false
               builderResult.quxInt = Int64(0)
               return self
          }
          public var corgeInt:Array<Int32> {
               get {
                   return builderResult.corgeInt
               }
               set (array) {
                   builderResult.corgeInt = array
               }
          }
          public func setCorgeInt(_ value:Array<Int32>) -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
            self.corgeInt = value
            return self
          }
          public func clearCorgeInt() -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
             builderResult.corgeInt.removeAll(keepingCapacity: false)
             return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
            builderResult = ProtobufUnittest.TestOneof2.NestedMessage()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
            return try ProtobufUnittest.TestOneof2.NestedMessage.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestOneof2.NestedMessage {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestOneof2.NestedMessage {
            let returnMe:ProtobufUnittest.TestOneof2.NestedMessage = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestOneof2.NestedMessage) throws -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
            if other == ProtobufUnittest.TestOneof2.NestedMessage() {
             return self
            }
            if other.hasQuxInt {
                 quxInt = other.quxInt
            }
            if !other.corgeInt.isEmpty {
                builderResult.corgeInt += other.corgeInt
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8 :
                quxInt = try input.readInt64()

              case 16 :
                corgeInt += [try input.readInt32()]

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //OneOf declaration start

    public enum Foo {
      case FooOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .FooOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case FooInt(Int32)

      public static func getFooInt(_ value:Foo) -> Int32? {
           switch value {
           case .FooInt(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooString(String)

      public static func getFooString(_ value:Foo) -> String? {
           switch value {
           case .FooString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooCord(String)

      public static func getFooCord(_ value:Foo) -> String? {
           switch value {
           case .FooCord(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooStringPiece(String)

      public static func getFooStringPiece(_ value:Foo) -> String? {
           switch value {
           case .FooStringPiece(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooBytes(NSData)

      public static func getFooBytes(_ value:Foo) -> NSData? {
           switch value {
           case .FooBytes(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooEnum(ProtobufUnittest.TestOneof2.NestedEnum)

      public static func getFooEnum(_ value:Foo) -> ProtobufUnittest.TestOneof2.NestedEnum? {
           switch value {
           case .FooEnum(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooMessage(ProtobufUnittest.TestOneof2.NestedMessage)

      public static func getFooMessage(_ value:Foo) -> ProtobufUnittest.TestOneof2.NestedMessage? {
           switch value {
           case .FooMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooGroup(ProtobufUnittest.TestOneof2.FooGroup)

      public static func getFooGroup(_ value:Foo) -> ProtobufUnittest.TestOneof2.FooGroup? {
           switch value {
           case .FooGroup(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooLazyMessage(ProtobufUnittest.TestOneof2.NestedMessage)

      public static func getFooLazyMessage(_ value:Foo) -> ProtobufUnittest.TestOneof2.NestedMessage? {
           switch value {
           case .FooLazyMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageFoo:TestOneof2.Foo =  TestOneof2.Foo.FooOneOfNotSet


    //OneOf declaration start

    public enum Bar {
      case BarOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .BarOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case BarInt(Int32)

      public static func getBarInt(_ value:Bar) -> Int32? {
           switch value {
           case .BarInt(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BarString(String)

      public static func getBarString(_ value:Bar) -> String? {
           switch value {
           case .BarString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BarCord(String)

      public static func getBarCord(_ value:Bar) -> String? {
           switch value {
           case .BarCord(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BarStringPiece(String)

      public static func getBarStringPiece(_ value:Bar) -> String? {
           switch value {
           case .BarStringPiece(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BarBytes(NSData)

      public static func getBarBytes(_ value:Bar) -> NSData? {
           switch value {
           case .BarBytes(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BarEnum(ProtobufUnittest.TestOneof2.NestedEnum)

      public static func getBarEnum(_ value:Bar) -> ProtobufUnittest.TestOneof2.NestedEnum? {
           switch value {
           case .BarEnum(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageBar:TestOneof2.Bar =  TestOneof2.Bar.BarOneOfNotSet


      //Enum type declaration start 

      public enum NestedEnum:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case Foo = 1
        case Bar = 2
        case Baz = 3

        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .Foo: return ".Foo"
                case .Bar: return ".Bar"
                case .Baz: return ".Baz"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var fooInt:Int32!{
         get {
              return TestOneof2.Foo.getFooInt(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof2.Foo.FooInt(newvalue)
         }
    }
    public private(set) var hasFooInt:Bool {
          get {
               if TestOneof2.Foo.getFooInt(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooString:String!{
         get {
              return TestOneof2.Foo.getFooString(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof2.Foo.FooString(newvalue)
         }
    }
    public private(set) var hasFooString:Bool {
          get {
               if TestOneof2.Foo.getFooString(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooCord:String!{
         get {
              return TestOneof2.Foo.getFooCord(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof2.Foo.FooCord(newvalue)
         }
    }
    public private(set) var hasFooCord:Bool {
          get {
               if TestOneof2.Foo.getFooCord(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooStringPiece:String!{
         get {
              return TestOneof2.Foo.getFooStringPiece(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof2.Foo.FooStringPiece(newvalue)
         }
    }
    public private(set) var hasFooStringPiece:Bool {
          get {
               if TestOneof2.Foo.getFooStringPiece(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooBytes:NSData!{
         get {
              return TestOneof2.Foo.getFooBytes(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof2.Foo.FooBytes(newvalue)
         }
    }
    public private(set) var hasFooBytes:Bool {
          get {
               if TestOneof2.Foo.getFooBytes(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooEnum:ProtobufUnittest.TestOneof2.NestedEnum!{
         get {
              return TestOneof2.Foo.getFooEnum(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof2.Foo.FooEnum(newvalue)
         }
    }
    public private(set) var hasFooEnum:Bool {
          get {
               if TestOneof2.Foo.getFooEnum(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooMessage:ProtobufUnittest.TestOneof2.NestedMessage!{
         get {
              return TestOneof2.Foo.getFooMessage(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof2.Foo.FooMessage(newvalue)
         }
    }
    public private(set) var hasFooMessage:Bool {
          get {
               if TestOneof2.Foo.getFooMessage(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooGroup:ProtobufUnittest.TestOneof2.FooGroup!{
         get {
              return TestOneof2.Foo.getFooGroup(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof2.Foo.FooGroup(newvalue)
         }
    }
    public private(set) var hasFooGroup:Bool {
          get {
               if TestOneof2.Foo.getFooGroup(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooLazyMessage:ProtobufUnittest.TestOneof2.NestedMessage!{
         get {
              return TestOneof2.Foo.getFooLazyMessage(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestOneof2.Foo.FooLazyMessage(newvalue)
         }
    }
    public private(set) var hasFooLazyMessage:Bool {
          get {
               if TestOneof2.Foo.getFooLazyMessage(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var barInt:Int32!{
         get {
              return TestOneof2.Bar.getBarInt(storageBar)
         }
         set (newvalue) {
              storageBar = TestOneof2.Bar.BarInt(newvalue)
         }
    }
    public private(set) var hasBarInt:Bool {
          get {
               if TestOneof2.Bar.getBarInt(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var barString:String!{
         get {
              return TestOneof2.Bar.getBarString(storageBar)
         }
         set (newvalue) {
              storageBar = TestOneof2.Bar.BarString(newvalue)
         }
    }
    public private(set) var hasBarString:Bool {
          get {
               if TestOneof2.Bar.getBarString(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var barCord:String!{
         get {
              return TestOneof2.Bar.getBarCord(storageBar)
         }
         set (newvalue) {
              storageBar = TestOneof2.Bar.BarCord(newvalue)
         }
    }
    public private(set) var hasBarCord:Bool {
          get {
               if TestOneof2.Bar.getBarCord(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var barStringPiece:String!{
         get {
              return TestOneof2.Bar.getBarStringPiece(storageBar)
         }
         set (newvalue) {
              storageBar = TestOneof2.Bar.BarStringPiece(newvalue)
         }
    }
    public private(set) var hasBarStringPiece:Bool {
          get {
               if TestOneof2.Bar.getBarStringPiece(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var barBytes:NSData!{
         get {
              return TestOneof2.Bar.getBarBytes(storageBar)
         }
         set (newvalue) {
              storageBar = TestOneof2.Bar.BarBytes(newvalue)
         }
    }
    public private(set) var hasBarBytes:Bool {
          get {
               if TestOneof2.Bar.getBarBytes(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var barEnum:ProtobufUnittest.TestOneof2.NestedEnum!{
         get {
              return TestOneof2.Bar.getBarEnum(storageBar)
         }
         set (newvalue) {
              storageBar = TestOneof2.Bar.BarEnum(newvalue)
         }
    }
    public private(set) var hasBarEnum:Bool {
          get {
               if TestOneof2.Bar.getBarEnum(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var bazInt:Int32 = Int32(0)

    public private(set) var hasBazInt:Bool = false
    public private(set) var bazString:String = "BAZ"

    public private(set) var hasBazString:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasFooInt {
        try output.writeInt32(1, value:fooInt)
      }
      if hasFooString {
        try output.writeString(2, value:fooString)
      }
      if hasFooCord {
        try output.writeString(3, value:fooCord)
      }
      if hasFooStringPiece {
        try output.writeString(4, value:fooStringPiece)
      }
      if hasFooBytes {
        try output.writeData(5, value:fooBytes)
      }
      if hasFooEnum {
        try output.writeEnum(6, value:fooEnum.rawValue)
      }
      if hasFooMessage {
        try output.writeMessage(7, value:fooMessage)
      }
      if hasFooGroup {
        try output.writeGroup(8, value:fooGroup)
      }
      if hasFooLazyMessage {
        try output.writeMessage(11, value:fooLazyMessage)
      }
      if hasBarInt {
        try output.writeInt32(12, value:barInt)
      }
      if hasBarString {
        try output.writeString(13, value:barString)
      }
      if hasBarCord {
        try output.writeString(14, value:barCord)
      }
      if hasBarStringPiece {
        try output.writeString(15, value:barStringPiece)
      }
      if hasBarBytes {
        try output.writeData(16, value:barBytes)
      }
      if hasBarEnum {
        try output.writeEnum(17, value:barEnum.rawValue)
      }
      if hasBazInt {
        try output.writeInt32(18, value:bazInt)
      }
      if hasBazString {
        try output.writeString(19, value:bazString)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFooInt {
        serialize_size += fooInt.computeInt32Size(1)
      }
      if hasFooString {
        serialize_size += fooString.computeStringSize(2)
      }
      if hasFooCord {
        serialize_size += fooCord.computeStringSize(3)
      }
      if hasFooStringPiece {
        serialize_size += fooStringPiece.computeStringSize(4)
      }
      if hasFooBytes {
        serialize_size += fooBytes.computeDataSize(5)
      }
      if (hasFooEnum) {
        serialize_size += fooEnum.rawValue.computeEnumSize(6)
      }
      if hasFooMessage {
          if let varSizefooMessage = fooMessage?.computeMessageSize(7) {
              serialize_size += varSizefooMessage
          }
      }
      if hasFooGroup {
          if let varSizefooGroup = fooGroup?.computeGroupSize(8) {
              serialize_size += varSizefooGroup
          }
      }
      if hasFooLazyMessage {
          if let varSizefooLazyMessage = fooLazyMessage?.computeMessageSize(11) {
              serialize_size += varSizefooLazyMessage
          }
      }
      if hasBarInt {
        serialize_size += barInt.computeInt32Size(12)
      }
      if hasBarString {
        serialize_size += barString.computeStringSize(13)
      }
      if hasBarCord {
        serialize_size += barCord.computeStringSize(14)
      }
      if hasBarStringPiece {
        serialize_size += barStringPiece.computeStringSize(15)
      }
      if hasBarBytes {
        serialize_size += barBytes.computeDataSize(16)
      }
      if (hasBarEnum) {
        serialize_size += barEnum.rawValue.computeEnumSize(17)
      }
      if hasBazInt {
        serialize_size += bazInt.computeInt32Size(18)
      }
      if hasBazString {
        serialize_size += bazString.computeStringSize(19)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestOneof2> {
      var mergedArray = Array<ProtobufUnittest.TestOneof2>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneof2? {
      return try ProtobufUnittest.TestOneof2.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestOneof2 {
      return try ProtobufUnittest.TestOneof2.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2 {
      return try ProtobufUnittest.TestOneof2.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestOneof2 {
      return try ProtobufUnittest.TestOneof2.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2 {
      return try ProtobufUnittest.TestOneof2.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneof2 {
      return try ProtobufUnittest.TestOneof2.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2 {
      return try ProtobufUnittest.TestOneof2.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestOneof2.Builder {
      return ProtobufUnittest.TestOneof2.classBuilder() as! ProtobufUnittest.TestOneof2.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestOneof2.Builder {
      return classBuilder() as! ProtobufUnittest.TestOneof2.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneof2.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneof2.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestOneof2.Builder {
      return try ProtobufUnittest.TestOneof2.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestOneof2) throws -> ProtobufUnittest.TestOneof2.Builder {
      return try ProtobufUnittest.TestOneof2.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasFooInt {
        output += "\(indent) fooInt: \(fooInt) \n"
      }
      if hasFooString {
        output += "\(indent) fooString: \(fooString) \n"
      }
      if hasFooCord {
        output += "\(indent) fooCord: \(fooCord) \n"
      }
      if hasFooStringPiece {
        output += "\(indent) fooStringPiece: \(fooStringPiece) \n"
      }
      if hasFooBytes {
        output += "\(indent) fooBytes: \(fooBytes) \n"
      }
      if (hasFooEnum) {
        output += "\(indent) fooEnum: \(fooEnum.description)\n"
      }
      if hasFooMessage {
        output += "\(indent) fooMessage {\n"
        if let outDescFooMessage = fooMessage {
          output += try outDescFooMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasFooGroup {
        output += "\(indent) fooGroup {\n"
        if let outDescFooGroup = fooGroup {
          output += try outDescFooGroup.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasFooLazyMessage {
        output += "\(indent) fooLazyMessage {\n"
        if let outDescFooLazyMessage = fooLazyMessage {
          output += try outDescFooLazyMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBarInt {
        output += "\(indent) barInt: \(barInt) \n"
      }
      if hasBarString {
        output += "\(indent) barString: \(barString) \n"
      }
      if hasBarCord {
        output += "\(indent) barCord: \(barCord) \n"
      }
      if hasBarStringPiece {
        output += "\(indent) barStringPiece: \(barStringPiece) \n"
      }
      if hasBarBytes {
        output += "\(indent) barBytes: \(barBytes) \n"
      }
      if (hasBarEnum) {
        output += "\(indent) barEnum: \(barEnum.description)\n"
      }
      if hasBazInt {
        output += "\(indent) bazInt: \(bazInt) \n"
      }
      if hasBazString {
        output += "\(indent) bazString: \(bazString) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFooInt {
               hashCode = (hashCode &* 31) &+ fooInt.hashValue
            }
            if hasFooString {
               hashCode = (hashCode &* 31) &+ fooString.hashValue
            }
            if hasFooCord {
               hashCode = (hashCode &* 31) &+ fooCord.hashValue
            }
            if hasFooStringPiece {
               hashCode = (hashCode &* 31) &+ fooStringPiece.hashValue
            }
            if hasFooBytes {
               hashCode = (hashCode &* 31) &+ fooBytes.hashValue
            }
            if hasFooEnum {
               hashCode = (hashCode &* 31) &+ Int(fooEnum.rawValue)
            }
            if hasFooMessage {
                if let hashValuefooMessage = fooMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefooMessage
                }
            }
            if hasFooGroup {
                if let hashValuefooGroup = fooGroup?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefooGroup
                }
            }
            if hasFooLazyMessage {
                if let hashValuefooLazyMessage = fooLazyMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefooLazyMessage
                }
            }
            if hasBarInt {
               hashCode = (hashCode &* 31) &+ barInt.hashValue
            }
            if hasBarString {
               hashCode = (hashCode &* 31) &+ barString.hashValue
            }
            if hasBarCord {
               hashCode = (hashCode &* 31) &+ barCord.hashValue
            }
            if hasBarStringPiece {
               hashCode = (hashCode &* 31) &+ barStringPiece.hashValue
            }
            if hasBarBytes {
               hashCode = (hashCode &* 31) &+ barBytes.hashValue
            }
            if hasBarEnum {
               hashCode = (hashCode &* 31) &+ Int(barEnum.rawValue)
            }
            if hasBazInt {
               hashCode = (hashCode &* 31) &+ bazInt.hashValue
            }
            if hasBazString {
               hashCode = (hashCode &* 31) &+ bazString.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestOneof2"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestOneof2"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestOneof2.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestOneof2 = ProtobufUnittest.TestOneof2()
      public func getMessage() -> ProtobufUnittest.TestOneof2 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasFooInt:Bool {
           get {
                return builderResult.hasFooInt
           }
      }
      public var fooInt:Int32 {
           get {
                return builderResult.fooInt
           }
           set (value) {
               builderResult.hasFooInt = true
               builderResult.fooInt = value
           }
      }
      public func setFooInt(_ value:Int32) -> ProtobufUnittest.TestOneof2.Builder {
        self.fooInt = value
        return self
      }
      public func clearFooInt() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasFooInt = false
           builderResult.fooInt = Int32(0)
           return self
      }
      public var hasFooString:Bool {
           get {
                return builderResult.hasFooString
           }
      }
      public var fooString:String {
           get {
                return builderResult.fooString
           }
           set (value) {
               builderResult.hasFooString = true
               builderResult.fooString = value
           }
      }
      public func setFooString(_ value:String) -> ProtobufUnittest.TestOneof2.Builder {
        self.fooString = value
        return self
      }
      public func clearFooString() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasFooString = false
           builderResult.fooString = ""
           return self
      }
      public var hasFooCord:Bool {
           get {
                return builderResult.hasFooCord
           }
      }
      public var fooCord:String {
           get {
                return builderResult.fooCord
           }
           set (value) {
               builderResult.hasFooCord = true
               builderResult.fooCord = value
           }
      }
      public func setFooCord(_ value:String) -> ProtobufUnittest.TestOneof2.Builder {
        self.fooCord = value
        return self
      }
      public func clearFooCord() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasFooCord = false
           builderResult.fooCord = ""
           return self
      }
      public var hasFooStringPiece:Bool {
           get {
                return builderResult.hasFooStringPiece
           }
      }
      public var fooStringPiece:String {
           get {
                return builderResult.fooStringPiece
           }
           set (value) {
               builderResult.hasFooStringPiece = true
               builderResult.fooStringPiece = value
           }
      }
      public func setFooStringPiece(_ value:String) -> ProtobufUnittest.TestOneof2.Builder {
        self.fooStringPiece = value
        return self
      }
      public func clearFooStringPiece() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasFooStringPiece = false
           builderResult.fooStringPiece = ""
           return self
      }
      public var hasFooBytes:Bool {
           get {
                return builderResult.hasFooBytes
           }
      }
      public var fooBytes:NSData {
           get {
                return builderResult.fooBytes
           }
           set (value) {
               builderResult.hasFooBytes = true
               builderResult.fooBytes = value
           }
      }
      public func setFooBytes(_ value:NSData) -> ProtobufUnittest.TestOneof2.Builder {
        self.fooBytes = value
        return self
      }
      public func clearFooBytes() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasFooBytes = false
           builderResult.fooBytes = NSData()
           return self
      }
        public var hasFooEnum:Bool{
            get {
                return builderResult.hasFooEnum
            }
        }
        public var fooEnum:ProtobufUnittest.TestOneof2.NestedEnum {
            get {
                return builderResult.fooEnum
            }
            set (value) {
                builderResult.hasFooEnum = true
                builderResult.fooEnum = value
            }
        }
        public func setFooEnum(_ value:ProtobufUnittest.TestOneof2.NestedEnum) -> ProtobufUnittest.TestOneof2.Builder {
          self.fooEnum = value
          return self
        }
        public func clearFooEnum() -> ProtobufUnittest.TestOneof2.Builder {
           builderResult.hasFooEnum = false
           builderResult.fooEnum = .Foo
           return self
        }
      public var hasFooMessage:Bool {
           get {
               return builderResult.hasFooMessage
           }
      }
      public var fooMessage:ProtobufUnittest.TestOneof2.NestedMessage! {
           get {
               if fooMessageBuilder_ != nil {
                  builderResult.fooMessage = fooMessageBuilder_.getMessage()
               }
               return builderResult.fooMessage
           }
           set (value) {
               builderResult.hasFooMessage = true
               builderResult.fooMessage = value
           }
      }
      private var fooMessageBuilder_:ProtobufUnittest.TestOneof2.NestedMessage.Builder! {
           didSet {
              builderResult.hasFooMessage = true
           }
      }
      public func getFooMessageBuilder() -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
        if fooMessageBuilder_ == nil {
           fooMessageBuilder_ = ProtobufUnittest.TestOneof2.NestedMessage.Builder()
           builderResult.fooMessage = fooMessageBuilder_.getMessage()
           if fooMessage != nil {
              try! fooMessageBuilder_.mergeFrom(fooMessage)
           }
        }
        return fooMessageBuilder_
      }
      public func setFooMessage(_ value:ProtobufUnittest.TestOneof2.NestedMessage!) -> ProtobufUnittest.TestOneof2.Builder {
        self.fooMessage = value
        return self
      }
      public func mergeFooMessage(_ value:ProtobufUnittest.TestOneof2.NestedMessage) throws -> ProtobufUnittest.TestOneof2.Builder {
        if builderResult.hasFooMessage {
          builderResult.fooMessage = try ProtobufUnittest.TestOneof2.NestedMessage.builderWithPrototype(builderResult.fooMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.fooMessage = value
        }
        builderResult.hasFooMessage = true
        return self
      }
      public func clearFooMessage() -> ProtobufUnittest.TestOneof2.Builder {
        fooMessageBuilder_ = nil
        builderResult.hasFooMessage = false
        builderResult.fooMessage = nil
        return self
      }
      public var hasFooGroup:Bool {
           get {
               return builderResult.hasFooGroup
           }
      }
      public var fooGroup:ProtobufUnittest.TestOneof2.FooGroup! {
           get {
               if fooGroupBuilder_ != nil {
                  builderResult.fooGroup = fooGroupBuilder_.getMessage()
               }
               return builderResult.fooGroup
           }
           set (value) {
               builderResult.hasFooGroup = true
               builderResult.fooGroup = value
           }
      }
      private var fooGroupBuilder_:ProtobufUnittest.TestOneof2.FooGroup.Builder! {
           didSet {
              builderResult.hasFooGroup = true
           }
      }
      public func getFooGroupBuilder() -> ProtobufUnittest.TestOneof2.FooGroup.Builder {
        if fooGroupBuilder_ == nil {
           fooGroupBuilder_ = ProtobufUnittest.TestOneof2.FooGroup.Builder()
           builderResult.fooGroup = fooGroupBuilder_.getMessage()
           if fooGroup != nil {
              try! fooGroupBuilder_.mergeFrom(fooGroup)
           }
        }
        return fooGroupBuilder_
      }
      public func setFooGroup(_ value:ProtobufUnittest.TestOneof2.FooGroup!) -> ProtobufUnittest.TestOneof2.Builder {
        self.fooGroup = value
        return self
      }
      public func mergeFooGroup(_ value:ProtobufUnittest.TestOneof2.FooGroup) throws -> ProtobufUnittest.TestOneof2.Builder {
        if builderResult.hasFooGroup {
          builderResult.fooGroup = try ProtobufUnittest.TestOneof2.FooGroup.builderWithPrototype(builderResult.fooGroup).mergeFrom(value).buildPartial()
        } else {
          builderResult.fooGroup = value
        }
        builderResult.hasFooGroup = true
        return self
      }
      public func clearFooGroup() -> ProtobufUnittest.TestOneof2.Builder {
        fooGroupBuilder_ = nil
        builderResult.hasFooGroup = false
        builderResult.fooGroup = nil
        return self
      }
      public var hasFooLazyMessage:Bool {
           get {
               return builderResult.hasFooLazyMessage
           }
      }
      public var fooLazyMessage:ProtobufUnittest.TestOneof2.NestedMessage! {
           get {
               if fooLazyMessageBuilder_ != nil {
                  builderResult.fooLazyMessage = fooLazyMessageBuilder_.getMessage()
               }
               return builderResult.fooLazyMessage
           }
           set (value) {
               builderResult.hasFooLazyMessage = true
               builderResult.fooLazyMessage = value
           }
      }
      private var fooLazyMessageBuilder_:ProtobufUnittest.TestOneof2.NestedMessage.Builder! {
           didSet {
              builderResult.hasFooLazyMessage = true
           }
      }
      public func getFooLazyMessageBuilder() -> ProtobufUnittest.TestOneof2.NestedMessage.Builder {
        if fooLazyMessageBuilder_ == nil {
           fooLazyMessageBuilder_ = ProtobufUnittest.TestOneof2.NestedMessage.Builder()
           builderResult.fooLazyMessage = fooLazyMessageBuilder_.getMessage()
           if fooLazyMessage != nil {
              try! fooLazyMessageBuilder_.mergeFrom(fooLazyMessage)
           }
        }
        return fooLazyMessageBuilder_
      }
      public func setFooLazyMessage(_ value:ProtobufUnittest.TestOneof2.NestedMessage!) -> ProtobufUnittest.TestOneof2.Builder {
        self.fooLazyMessage = value
        return self
      }
      public func mergeFooLazyMessage(_ value:ProtobufUnittest.TestOneof2.NestedMessage) throws -> ProtobufUnittest.TestOneof2.Builder {
        if builderResult.hasFooLazyMessage {
          builderResult.fooLazyMessage = try ProtobufUnittest.TestOneof2.NestedMessage.builderWithPrototype(builderResult.fooLazyMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.fooLazyMessage = value
        }
        builderResult.hasFooLazyMessage = true
        return self
      }
      public func clearFooLazyMessage() -> ProtobufUnittest.TestOneof2.Builder {
        fooLazyMessageBuilder_ = nil
        builderResult.hasFooLazyMessage = false
        builderResult.fooLazyMessage = nil
        return self
      }
      public var hasBarInt:Bool {
           get {
                return builderResult.hasBarInt
           }
      }
      public var barInt:Int32 {
           get {
                return builderResult.barInt
           }
           set (value) {
               builderResult.hasBarInt = true
               builderResult.barInt = value
           }
      }
      public func setBarInt(_ value:Int32) -> ProtobufUnittest.TestOneof2.Builder {
        self.barInt = value
        return self
      }
      public func clearBarInt() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasBarInt = false
           builderResult.barInt = Int32(5)
           return self
      }
      public var hasBarString:Bool {
           get {
                return builderResult.hasBarString
           }
      }
      public var barString:String {
           get {
                return builderResult.barString
           }
           set (value) {
               builderResult.hasBarString = true
               builderResult.barString = value
           }
      }
      public func setBarString(_ value:String) -> ProtobufUnittest.TestOneof2.Builder {
        self.barString = value
        return self
      }
      public func clearBarString() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasBarString = false
           builderResult.barString = "STRING"
           return self
      }
      public var hasBarCord:Bool {
           get {
                return builderResult.hasBarCord
           }
      }
      public var barCord:String {
           get {
                return builderResult.barCord
           }
           set (value) {
               builderResult.hasBarCord = true
               builderResult.barCord = value
           }
      }
      public func setBarCord(_ value:String) -> ProtobufUnittest.TestOneof2.Builder {
        self.barCord = value
        return self
      }
      public func clearBarCord() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasBarCord = false
           builderResult.barCord = "CORD"
           return self
      }
      public var hasBarStringPiece:Bool {
           get {
                return builderResult.hasBarStringPiece
           }
      }
      public var barStringPiece:String {
           get {
                return builderResult.barStringPiece
           }
           set (value) {
               builderResult.hasBarStringPiece = true
               builderResult.barStringPiece = value
           }
      }
      public func setBarStringPiece(_ value:String) -> ProtobufUnittest.TestOneof2.Builder {
        self.barStringPiece = value
        return self
      }
      public func clearBarStringPiece() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasBarStringPiece = false
           builderResult.barStringPiece = "SPIECE"
           return self
      }
      public var hasBarBytes:Bool {
           get {
                return builderResult.hasBarBytes
           }
      }
      public var barBytes:NSData {
           get {
                return builderResult.barBytes
           }
           set (value) {
               builderResult.hasBarBytes = true
               builderResult.barBytes = value
           }
      }
      public func setBarBytes(_ value:NSData) -> ProtobufUnittest.TestOneof2.Builder {
        self.barBytes = value
        return self
      }
      public func clearBarBytes() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasBarBytes = false
           builderResult.barBytes = NSData(bytes:([UInt8]() + "BYTES".utf8), length:5)
           return self
      }
        public var hasBarEnum:Bool{
            get {
                return builderResult.hasBarEnum
            }
        }
        public var barEnum:ProtobufUnittest.TestOneof2.NestedEnum {
            get {
                return builderResult.barEnum
            }
            set (value) {
                builderResult.hasBarEnum = true
                builderResult.barEnum = value
            }
        }
        public func setBarEnum(_ value:ProtobufUnittest.TestOneof2.NestedEnum) -> ProtobufUnittest.TestOneof2.Builder {
          self.barEnum = value
          return self
        }
        public func clearBarEnum() -> ProtobufUnittest.TestOneof2.Builder {
           builderResult.hasBarEnum = false
           builderResult.barEnum = .Bar
           return self
        }
      public var hasBazInt:Bool {
           get {
                return builderResult.hasBazInt
           }
      }
      public var bazInt:Int32 {
           get {
                return builderResult.bazInt
           }
           set (value) {
               builderResult.hasBazInt = true
               builderResult.bazInt = value
           }
      }
      public func setBazInt(_ value:Int32) -> ProtobufUnittest.TestOneof2.Builder {
        self.bazInt = value
        return self
      }
      public func clearBazInt() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasBazInt = false
           builderResult.bazInt = Int32(0)
           return self
      }
      public var hasBazString:Bool {
           get {
                return builderResult.hasBazString
           }
      }
      public var bazString:String {
           get {
                return builderResult.bazString
           }
           set (value) {
               builderResult.hasBazString = true
               builderResult.bazString = value
           }
      }
      public func setBazString(_ value:String) -> ProtobufUnittest.TestOneof2.Builder {
        self.bazString = value
        return self
      }
      public func clearBazString() -> ProtobufUnittest.TestOneof2.Builder{
           builderResult.hasBazString = false
           builderResult.bazString = "BAZ"
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestOneof2.Builder {
        builderResult = ProtobufUnittest.TestOneof2()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestOneof2.Builder {
        return try ProtobufUnittest.TestOneof2.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestOneof2 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestOneof2 {
        let returnMe:ProtobufUnittest.TestOneof2 = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestOneof2) throws -> ProtobufUnittest.TestOneof2.Builder {
        if other == ProtobufUnittest.TestOneof2() {
         return self
        }
        if other.hasFooInt {
             fooInt = other.fooInt
        }
        if other.hasFooString {
             fooString = other.fooString
        }
        if other.hasFooCord {
             fooCord = other.fooCord
        }
        if other.hasFooStringPiece {
             fooStringPiece = other.fooStringPiece
        }
        if other.hasFooBytes {
             fooBytes = other.fooBytes
        }
        if other.hasFooEnum {
             fooEnum = other.fooEnum
        }
        if (other.hasFooMessage) {
            try mergeFooMessage(other.fooMessage)
        }
        if (other.hasFooGroup) {
            try mergeFooGroup(other.fooGroup)
        }
        if (other.hasFooLazyMessage) {
            try mergeFooLazyMessage(other.fooLazyMessage)
        }
        if other.hasBarInt {
             barInt = other.barInt
        }
        if other.hasBarString {
             barString = other.barString
        }
        if other.hasBarCord {
             barCord = other.barCord
        }
        if other.hasBarStringPiece {
             barStringPiece = other.barStringPiece
        }
        if other.hasBarBytes {
             barBytes = other.barBytes
        }
        if other.hasBarEnum {
             barEnum = other.barEnum
        }
        if other.hasBazInt {
             bazInt = other.bazInt
        }
        if other.hasBazString {
             bazString = other.bazString
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestOneof2.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestOneof2.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            fooInt = try input.readInt32()

          case 18 :
            fooString = try input.readString()

          case 26 :
            fooCord = try input.readString()

          case 34 :
            fooStringPiece = try input.readString()

          case 42 :
            fooBytes = try input.readData()

          case 48 :
            let valueIntfooEnum = try input.readEnum()
            if let enumsfooEnum = ProtobufUnittest.TestOneof2.NestedEnum(rawValue:valueIntfooEnum){
                 fooEnum = enumsfooEnum
            } else {
                 try unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntfooEnum))
            }

          case 58 :
            let subBuilder:ProtobufUnittest.TestOneof2.NestedMessage.Builder = ProtobufUnittest.TestOneof2.NestedMessage.Builder()
            if hasFooMessage {
              try subBuilder.mergeFrom(fooMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fooMessage = subBuilder.buildPartial()

          case 67 :
            let subBuilder:ProtobufUnittest.TestOneof2.FooGroup.Builder = ProtobufUnittest.TestOneof2.FooGroup.Builder()
            if hasFooGroup {
              try subBuilder.mergeFrom(fooGroup)
            }
            try input.readGroup(8, builder:subBuilder, extensionRegistry:extensionRegistry)
            fooGroup = subBuilder.buildPartial()

          case 90 :
            let subBuilder:ProtobufUnittest.TestOneof2.NestedMessage.Builder = ProtobufUnittest.TestOneof2.NestedMessage.Builder()
            if hasFooLazyMessage {
              try subBuilder.mergeFrom(fooLazyMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fooLazyMessage = subBuilder.buildPartial()

          case 96 :
            barInt = try input.readInt32()

          case 106 :
            barString = try input.readString()

          case 114 :
            barCord = try input.readString()

          case 122 :
            barStringPiece = try input.readString()

          case 130 :
            barBytes = try input.readData()

          case 136 :
            let valueIntbarEnum = try input.readEnum()
            if let enumsbarEnum = ProtobufUnittest.TestOneof2.NestedEnum(rawValue:valueIntbarEnum){
                 barEnum = enumsbarEnum
            } else {
                 try unknownFieldsBuilder.mergeVarintField(17, value:Int64(valueIntbarEnum))
            }

          case 144 :
            bazInt = try input.readInt32()

          case 154 :
            bazString = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestRequiredOneof : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var requiredDouble:Double = Double(0)

        public private(set) var hasRequiredDouble:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasRequiredDouble {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasRequiredDouble {
            try output.writeDouble(1, value:requiredDouble)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasRequiredDouble {
            serialize_size += requiredDouble.computeDoubleSize(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestRequiredOneof.NestedMessage> {
          var mergedArray = Array<ProtobufUnittest.TestRequiredOneof.NestedMessage>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage? {
          return try ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return try ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return try ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return try ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return try ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return try ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return try ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.classBuilder() as! ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
          return classBuilder() as! ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
          return try ProtobufUnittest.TestRequiredOneof.NestedMessage.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestRequiredOneof.NestedMessage) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
          return try ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasRequiredDouble {
            output += "\(indent) requiredDouble: \(requiredDouble) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasRequiredDouble {
                   hashCode = (hashCode &* 31) &+ requiredDouble.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestRequiredOneof.NestedMessage"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestRequiredOneof.NestedMessage"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestRequiredOneof.NestedMessage.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestRequiredOneof.NestedMessage = ProtobufUnittest.TestRequiredOneof.NestedMessage()
          public func getMessage() -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasRequiredDouble:Bool {
               get {
                    return builderResult.hasRequiredDouble
               }
          }
          public var requiredDouble:Double {
               get {
                    return builderResult.requiredDouble
               }
               set (value) {
                   builderResult.hasRequiredDouble = true
                   builderResult.requiredDouble = value
               }
          }
          public func setRequiredDouble(_ value:Double) -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
            self.requiredDouble = value
            return self
          }
          public func clearRequiredDouble() -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder{
               builderResult.hasRequiredDouble = false
               builderResult.requiredDouble = Double(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
            builderResult = ProtobufUnittest.TestRequiredOneof.NestedMessage()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
            return try ProtobufUnittest.TestRequiredOneof.NestedMessage.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
            let returnMe:ProtobufUnittest.TestRequiredOneof.NestedMessage = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestRequiredOneof.NestedMessage) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
            if other == ProtobufUnittest.TestRequiredOneof.NestedMessage() {
             return self
            }
            if other.hasRequiredDouble {
                 requiredDouble = other.requiredDouble
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 9 :
                requiredDouble = try input.readDouble()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //OneOf declaration start

    public enum Foo {
      case FooOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .FooOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case FooInt(Int32)

      public static func getFooInt(_ value:Foo) -> Int32? {
           switch value {
           case .FooInt(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooString(String)

      public static func getFooString(_ value:Foo) -> String? {
           switch value {
           case .FooString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooMessage(ProtobufUnittest.TestRequiredOneof.NestedMessage)

      public static func getFooMessage(_ value:Foo) -> ProtobufUnittest.TestRequiredOneof.NestedMessage? {
           switch value {
           case .FooMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageFoo:TestRequiredOneof.Foo =  TestRequiredOneof.Foo.FooOneOfNotSet
    public private(set) var fooInt:Int32!{
         get {
              return TestRequiredOneof.Foo.getFooInt(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestRequiredOneof.Foo.FooInt(newvalue)
         }
    }
    public private(set) var hasFooInt:Bool {
          get {
               if TestRequiredOneof.Foo.getFooInt(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooString:String!{
         get {
              return TestRequiredOneof.Foo.getFooString(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestRequiredOneof.Foo.FooString(newvalue)
         }
    }
    public private(set) var hasFooString:Bool {
          get {
               if TestRequiredOneof.Foo.getFooString(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var fooMessage:ProtobufUnittest.TestRequiredOneof.NestedMessage!{
         get {
              return TestRequiredOneof.Foo.getFooMessage(storageFoo)
         }
         set (newvalue) {
              storageFoo = TestRequiredOneof.Foo.FooMessage(newvalue)
         }
    }
    public private(set) var hasFooMessage:Bool {
          get {
               if TestRequiredOneof.Foo.getFooMessage(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if hasFooMessage {
       if !fooMessage.isInitialized() {
         return false
       }
      }
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasFooInt {
        try output.writeInt32(1, value:fooInt)
      }
      if hasFooString {
        try output.writeString(2, value:fooString)
      }
      if hasFooMessage {
        try output.writeMessage(3, value:fooMessage)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFooInt {
        serialize_size += fooInt.computeInt32Size(1)
      }
      if hasFooString {
        serialize_size += fooString.computeStringSize(2)
      }
      if hasFooMessage {
          if let varSizefooMessage = fooMessage?.computeMessageSize(3) {
              serialize_size += varSizefooMessage
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestRequiredOneof> {
      var mergedArray = Array<ProtobufUnittest.TestRequiredOneof>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRequiredOneof? {
      return try ProtobufUnittest.TestRequiredOneof.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestRequiredOneof {
      return try ProtobufUnittest.TestRequiredOneof.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredOneof {
      return try ProtobufUnittest.TestRequiredOneof.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRequiredOneof {
      return try ProtobufUnittest.TestRequiredOneof.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredOneof {
      return try ProtobufUnittest.TestRequiredOneof.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRequiredOneof {
      return try ProtobufUnittest.TestRequiredOneof.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredOneof {
      return try ProtobufUnittest.TestRequiredOneof.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestRequiredOneof.Builder {
      return ProtobufUnittest.TestRequiredOneof.classBuilder() as! ProtobufUnittest.TestRequiredOneof.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestRequiredOneof.Builder {
      return classBuilder() as! ProtobufUnittest.TestRequiredOneof.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequiredOneof.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequiredOneof.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestRequiredOneof.Builder {
      return try ProtobufUnittest.TestRequiredOneof.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestRequiredOneof) throws -> ProtobufUnittest.TestRequiredOneof.Builder {
      return try ProtobufUnittest.TestRequiredOneof.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasFooInt {
        output += "\(indent) fooInt: \(fooInt) \n"
      }
      if hasFooString {
        output += "\(indent) fooString: \(fooString) \n"
      }
      if hasFooMessage {
        output += "\(indent) fooMessage {\n"
        if let outDescFooMessage = fooMessage {
          output += try outDescFooMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFooInt {
               hashCode = (hashCode &* 31) &+ fooInt.hashValue
            }
            if hasFooString {
               hashCode = (hashCode &* 31) &+ fooString.hashValue
            }
            if hasFooMessage {
                if let hashValuefooMessage = fooMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefooMessage
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestRequiredOneof"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestRequiredOneof"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestRequiredOneof.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestRequiredOneof = ProtobufUnittest.TestRequiredOneof()
      public func getMessage() -> ProtobufUnittest.TestRequiredOneof {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasFooInt:Bool {
           get {
                return builderResult.hasFooInt
           }
      }
      public var fooInt:Int32 {
           get {
                return builderResult.fooInt
           }
           set (value) {
               builderResult.hasFooInt = true
               builderResult.fooInt = value
           }
      }
      public func setFooInt(_ value:Int32) -> ProtobufUnittest.TestRequiredOneof.Builder {
        self.fooInt = value
        return self
      }
      public func clearFooInt() -> ProtobufUnittest.TestRequiredOneof.Builder{
           builderResult.hasFooInt = false
           builderResult.fooInt = Int32(0)
           return self
      }
      public var hasFooString:Bool {
           get {
                return builderResult.hasFooString
           }
      }
      public var fooString:String {
           get {
                return builderResult.fooString
           }
           set (value) {
               builderResult.hasFooString = true
               builderResult.fooString = value
           }
      }
      public func setFooString(_ value:String) -> ProtobufUnittest.TestRequiredOneof.Builder {
        self.fooString = value
        return self
      }
      public func clearFooString() -> ProtobufUnittest.TestRequiredOneof.Builder{
           builderResult.hasFooString = false
           builderResult.fooString = ""
           return self
      }
      public var hasFooMessage:Bool {
           get {
               return builderResult.hasFooMessage
           }
      }
      public var fooMessage:ProtobufUnittest.TestRequiredOneof.NestedMessage! {
           get {
               if fooMessageBuilder_ != nil {
                  builderResult.fooMessage = fooMessageBuilder_.getMessage()
               }
               return builderResult.fooMessage
           }
           set (value) {
               builderResult.hasFooMessage = true
               builderResult.fooMessage = value
           }
      }
      private var fooMessageBuilder_:ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder! {
           didSet {
              builderResult.hasFooMessage = true
           }
      }
      public func getFooMessageBuilder() -> ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder {
        if fooMessageBuilder_ == nil {
           fooMessageBuilder_ = ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder()
           builderResult.fooMessage = fooMessageBuilder_.getMessage()
           if fooMessage != nil {
              try! fooMessageBuilder_.mergeFrom(fooMessage)
           }
        }
        return fooMessageBuilder_
      }
      public func setFooMessage(_ value:ProtobufUnittest.TestRequiredOneof.NestedMessage!) -> ProtobufUnittest.TestRequiredOneof.Builder {
        self.fooMessage = value
        return self
      }
      public func mergeFooMessage(_ value:ProtobufUnittest.TestRequiredOneof.NestedMessage) throws -> ProtobufUnittest.TestRequiredOneof.Builder {
        if builderResult.hasFooMessage {
          builderResult.fooMessage = try ProtobufUnittest.TestRequiredOneof.NestedMessage.builderWithPrototype(builderResult.fooMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.fooMessage = value
        }
        builderResult.hasFooMessage = true
        return self
      }
      public func clearFooMessage() -> ProtobufUnittest.TestRequiredOneof.Builder {
        fooMessageBuilder_ = nil
        builderResult.hasFooMessage = false
        builderResult.fooMessage = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestRequiredOneof.Builder {
        builderResult = ProtobufUnittest.TestRequiredOneof()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestRequiredOneof.Builder {
        return try ProtobufUnittest.TestRequiredOneof.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestRequiredOneof {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestRequiredOneof {
        let returnMe:ProtobufUnittest.TestRequiredOneof = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestRequiredOneof) throws -> ProtobufUnittest.TestRequiredOneof.Builder {
        if other == ProtobufUnittest.TestRequiredOneof() {
         return self
        }
        if other.hasFooInt {
             fooInt = other.fooInt
        }
        if other.hasFooString {
             fooString = other.fooString
        }
        if (other.hasFooMessage) {
            try mergeFooMessage(other.fooMessage)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRequiredOneof.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRequiredOneof.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            fooInt = try input.readInt32()

          case 18 :
            fooString = try input.readString()

          case 26 :
            let subBuilder:ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder = ProtobufUnittest.TestRequiredOneof.NestedMessage.Builder()
            if hasFooMessage {
              try subBuilder.mergeFrom(fooMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fooMessage = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestPackedTypes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var packedInt32:Array<Int32> = Array<Int32>()
    private var packedInt32MemoizedSerializedSize:Int32 = -1
    public private(set) var packedInt64:Array<Int64> = Array<Int64>()
    private var packedInt64MemoizedSerializedSize:Int32 = -1
    public private(set) var packedUint32:Array<UInt32> = Array<UInt32>()
    private var packedUint32MemoizedSerializedSize:Int32 = -1
    public private(set) var packedUint64:Array<UInt64> = Array<UInt64>()
    private var packedUint64MemoizedSerializedSize:Int32 = -1
    public private(set) var packedSint32:Array<Int32> = Array<Int32>()
    private var packedSint32MemoizedSerializedSize:Int32 = -1
    public private(set) var packedSint64:Array<Int64> = Array<Int64>()
    private var packedSint64MemoizedSerializedSize:Int32 = -1
    public private(set) var packedFixed32:Array<UInt32> = Array<UInt32>()
    private var packedFixed32MemoizedSerializedSize:Int32 = -1
    public private(set) var packedFixed64:Array<UInt64> = Array<UInt64>()
    private var packedFixed64MemoizedSerializedSize:Int32 = -1
    public private(set) var packedSfixed32:Array<Int32> = Array<Int32>()
    private var packedSfixed32MemoizedSerializedSize:Int32 = -1
    public private(set) var packedSfixed64:Array<Int64> = Array<Int64>()
    private var packedSfixed64MemoizedSerializedSize:Int32 = -1
    public private(set) var packedFloat:Array<Float> = Array<Float>()
    private var packedFloatMemoizedSerializedSize:Int32 = -1
    public private(set) var packedDouble:Array<Double> = Array<Double>()
    private var packedDoubleMemoizedSerializedSize:Int32 = -1
    public private(set) var packedBool:Array<Bool> = Array<Bool>()
    private var packedBoolMemoizedSerializedSize:Int32 = -1
    private var packedEnumMemoizedSerializedSize:Int32 = 0
    public private(set) var packedEnum:Array<ProtobufUnittest.ForeignEnum> = Array<ProtobufUnittest.ForeignEnum>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if !packedInt32.isEmpty {
        try output.writeRawVarint32(722)
        try output.writeRawVarint32(packedInt32MemoizedSerializedSize)
        for oneValuepackedInt32 in packedInt32 {
          try output.writeInt32NoTag(oneValuepackedInt32)
        }
      }
      if !packedInt64.isEmpty {
        try output.writeRawVarint32(730)
        try output.writeRawVarint32(packedInt64MemoizedSerializedSize)
        for oneValuepackedInt64 in packedInt64 {
          try output.writeInt64NoTag(oneValuepackedInt64)
        }
      }
      if !packedUint32.isEmpty {
        try output.writeRawVarint32(738)
        try output.writeRawVarint32(packedUint32MemoizedSerializedSize)
        for oneValuepackedUint32 in packedUint32 {
          try output.writeUInt32NoTag(oneValuepackedUint32)
        }
      }
      if !packedUint64.isEmpty {
        try output.writeRawVarint32(746)
        try output.writeRawVarint32(packedUint64MemoizedSerializedSize)
        for oneValuepackedUint64 in packedUint64 {
          try output.writeUInt64NoTag(oneValuepackedUint64)
        }
      }
      if !packedSint32.isEmpty {
        try output.writeRawVarint32(754)
        try output.writeRawVarint32(packedSint32MemoizedSerializedSize)
        for oneValuepackedSint32 in packedSint32 {
          try output.writeSInt32NoTag(oneValuepackedSint32)
        }
      }
      if !packedSint64.isEmpty {
        try output.writeRawVarint32(762)
        try output.writeRawVarint32(packedSint64MemoizedSerializedSize)
        for oneValuepackedSint64 in packedSint64 {
          try output.writeSInt64NoTag(oneValuepackedSint64)
        }
      }
      if !packedFixed32.isEmpty {
        try output.writeRawVarint32(770)
        try output.writeRawVarint32(packedFixed32MemoizedSerializedSize)
        for oneValuepackedFixed32 in packedFixed32 {
          try output.writeFixed32NoTag(oneValuepackedFixed32)
        }
      }
      if !packedFixed64.isEmpty {
        try output.writeRawVarint32(778)
        try output.writeRawVarint32(packedFixed64MemoizedSerializedSize)
        for oneValuepackedFixed64 in packedFixed64 {
          try output.writeFixed64NoTag(oneValuepackedFixed64)
        }
      }
      if !packedSfixed32.isEmpty {
        try output.writeRawVarint32(786)
        try output.writeRawVarint32(packedSfixed32MemoizedSerializedSize)
        for oneValuepackedSfixed32 in packedSfixed32 {
          try output.writeSFixed32NoTag(oneValuepackedSfixed32)
        }
      }
      if !packedSfixed64.isEmpty {
        try output.writeRawVarint32(794)
        try output.writeRawVarint32(packedSfixed64MemoizedSerializedSize)
        for oneValuepackedSfixed64 in packedSfixed64 {
          try output.writeSFixed64NoTag(oneValuepackedSfixed64)
        }
      }
      if !packedFloat.isEmpty {
        try output.writeRawVarint32(802)
        try output.writeRawVarint32(packedFloatMemoizedSerializedSize)
        for oneValuepackedFloat in packedFloat {
          try output.writeFloatNoTag(oneValuepackedFloat)
        }
      }
      if !packedDouble.isEmpty {
        try output.writeRawVarint32(810)
        try output.writeRawVarint32(packedDoubleMemoizedSerializedSize)
        for oneValuepackedDouble in packedDouble {
          try output.writeDoubleNoTag(oneValuepackedDouble)
        }
      }
      if !packedBool.isEmpty {
        try output.writeRawVarint32(818)
        try output.writeRawVarint32(packedBoolMemoizedSerializedSize)
        for oneValuepackedBool in packedBool {
          try output.writeBoolNoTag(oneValuepackedBool)
        }
      }
      if !packedEnum.isEmpty {
        try output.writeRawVarint32(826)
        try output.writeRawVarint32(packedEnumMemoizedSerializedSize)
      }
      for oneValueOfpackedEnum in packedEnum {
          try output.writeEnumNoTag(oneValueOfpackedEnum.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizePackedInt32:Int32 = 0
      for oneValuepackedInt32 in packedInt32 {
          dataSizePackedInt32 += oneValuepackedInt32.computeInt32SizeNoTag()
      }
      serialize_size += dataSizePackedInt32
      if !packedInt32.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedInt32.computeInt32SizeNoTag()
      }
      packedInt32MemoizedSerializedSize = dataSizePackedInt32
      var dataSizePackedInt64:Int32 = 0
      for oneValuepackedInt64 in packedInt64 {
          dataSizePackedInt64 += oneValuepackedInt64.computeInt64SizeNoTag()
      }
      serialize_size += dataSizePackedInt64
      if !packedInt64.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedInt64.computeInt32SizeNoTag()
      }
      packedInt64MemoizedSerializedSize = dataSizePackedInt64
      var dataSizePackedUint32:Int32 = 0
      for oneValuepackedUint32 in packedUint32 {
          dataSizePackedUint32 += oneValuepackedUint32.computeUInt32SizeNoTag()
      }
      serialize_size += dataSizePackedUint32
      if !packedUint32.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedUint32.computeInt32SizeNoTag()
      }
      packedUint32MemoizedSerializedSize = dataSizePackedUint32
      var dataSizePackedUint64:Int32 = 0
      for oneValuepackedUint64 in packedUint64 {
          dataSizePackedUint64 += oneValuepackedUint64.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizePackedUint64
      if !packedUint64.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedUint64.computeInt32SizeNoTag()
      }
      packedUint64MemoizedSerializedSize = dataSizePackedUint64
      var dataSizePackedSint32:Int32 = 0
      for oneValuepackedSint32 in packedSint32 {
          dataSizePackedSint32 += oneValuepackedSint32.computeSInt32SizeNoTag()
      }
      serialize_size += dataSizePackedSint32
      if !packedSint32.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedSint32.computeInt32SizeNoTag()
      }
      packedSint32MemoizedSerializedSize = dataSizePackedSint32
      var dataSizePackedSint64:Int32 = 0
      for oneValuepackedSint64 in packedSint64 {
          dataSizePackedSint64 += oneValuepackedSint64.computeSInt64SizeNoTag()
      }
      serialize_size += dataSizePackedSint64
      if !packedSint64.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedSint64.computeInt32SizeNoTag()
      }
      packedSint64MemoizedSerializedSize = dataSizePackedSint64
      var dataSizePackedFixed32:Int32 = 0
      dataSizePackedFixed32 = 4 * Int32(packedFixed32.count)
      serialize_size += dataSizePackedFixed32
      if !packedFixed32.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedFixed32.computeInt32SizeNoTag()
      }
      packedFixed32MemoizedSerializedSize = dataSizePackedFixed32
      var dataSizePackedFixed64:Int32 = 0
      dataSizePackedFixed64 = 8 * Int32(packedFixed64.count)
      serialize_size += dataSizePackedFixed64
      if !packedFixed64.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedFixed64.computeInt32SizeNoTag()
      }
      packedFixed64MemoizedSerializedSize = dataSizePackedFixed64
      var dataSizePackedSfixed32:Int32 = 0
      dataSizePackedSfixed32 = 4 * Int32(packedSfixed32.count)
      serialize_size += dataSizePackedSfixed32
      if !packedSfixed32.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedSfixed32.computeInt32SizeNoTag()
      }
      packedSfixed32MemoizedSerializedSize = dataSizePackedSfixed32
      var dataSizePackedSfixed64:Int32 = 0
      dataSizePackedSfixed64 = 8 * Int32(packedSfixed64.count)
      serialize_size += dataSizePackedSfixed64
      if !packedSfixed64.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedSfixed64.computeInt32SizeNoTag()
      }
      packedSfixed64MemoizedSerializedSize = dataSizePackedSfixed64
      var dataSizePackedFloat:Int32 = 0
      dataSizePackedFloat = 4 * Int32(packedFloat.count)
      serialize_size += dataSizePackedFloat
      if !packedFloat.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedFloat.computeInt32SizeNoTag()
      }
      packedFloatMemoizedSerializedSize = dataSizePackedFloat
      var dataSizePackedDouble:Int32 = 0
      dataSizePackedDouble = 8 * Int32(packedDouble.count)
      serialize_size += dataSizePackedDouble
      if !packedDouble.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedDouble.computeInt32SizeNoTag()
      }
      packedDoubleMemoizedSerializedSize = dataSizePackedDouble
      var dataSizePackedBool:Int32 = 0
      dataSizePackedBool = 1 * Int32(packedBool.count)
      serialize_size += dataSizePackedBool
      if !packedBool.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedBool.computeInt32SizeNoTag()
      }
      packedBoolMemoizedSerializedSize = dataSizePackedBool
      var dataSizepackedEnum:Int32 = 0
      for oneValueOfpackedEnum in packedEnum {
          dataSizepackedEnum += oneValueOfpackedEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizepackedEnum
      if !packedEnum.isEmpty {
        serialize_size += 2
        serialize_size += dataSizepackedEnum.computeRawVarint32Size()
      }
      packedEnumMemoizedSerializedSize = dataSizepackedEnum
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestPackedTypes> {
      var mergedArray = Array<ProtobufUnittest.TestPackedTypes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestPackedTypes? {
      return try ProtobufUnittest.TestPackedTypes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestPackedTypes {
      return try ProtobufUnittest.TestPackedTypes.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestPackedTypes {
      return try ProtobufUnittest.TestPackedTypes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestPackedTypes {
      return try ProtobufUnittest.TestPackedTypes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestPackedTypes {
      return try ProtobufUnittest.TestPackedTypes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestPackedTypes {
      return try ProtobufUnittest.TestPackedTypes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestPackedTypes {
      return try ProtobufUnittest.TestPackedTypes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestPackedTypes.Builder {
      return ProtobufUnittest.TestPackedTypes.classBuilder() as! ProtobufUnittest.TestPackedTypes.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestPackedTypes.Builder {
      return classBuilder() as! ProtobufUnittest.TestPackedTypes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestPackedTypes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestPackedTypes.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestPackedTypes.Builder {
      return try ProtobufUnittest.TestPackedTypes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestPackedTypes) throws -> ProtobufUnittest.TestPackedTypes.Builder {
      return try ProtobufUnittest.TestPackedTypes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      var packedInt32ElementIndex:Int = 0
      for oneValuepackedInt32 in packedInt32  {
          output += "\(indent) packedInt32[\(packedInt32ElementIndex)]: \(oneValuepackedInt32)\n"
          packedInt32ElementIndex += 1
      }
      var packedInt64ElementIndex:Int = 0
      for oneValuepackedInt64 in packedInt64  {
          output += "\(indent) packedInt64[\(packedInt64ElementIndex)]: \(oneValuepackedInt64)\n"
          packedInt64ElementIndex += 1
      }
      var packedUint32ElementIndex:Int = 0
      for oneValuepackedUint32 in packedUint32  {
          output += "\(indent) packedUint32[\(packedUint32ElementIndex)]: \(oneValuepackedUint32)\n"
          packedUint32ElementIndex += 1
      }
      var packedUint64ElementIndex:Int = 0
      for oneValuepackedUint64 in packedUint64  {
          output += "\(indent) packedUint64[\(packedUint64ElementIndex)]: \(oneValuepackedUint64)\n"
          packedUint64ElementIndex += 1
      }
      var packedSint32ElementIndex:Int = 0
      for oneValuepackedSint32 in packedSint32  {
          output += "\(indent) packedSint32[\(packedSint32ElementIndex)]: \(oneValuepackedSint32)\n"
          packedSint32ElementIndex += 1
      }
      var packedSint64ElementIndex:Int = 0
      for oneValuepackedSint64 in packedSint64  {
          output += "\(indent) packedSint64[\(packedSint64ElementIndex)]: \(oneValuepackedSint64)\n"
          packedSint64ElementIndex += 1
      }
      var packedFixed32ElementIndex:Int = 0
      for oneValuepackedFixed32 in packedFixed32  {
          output += "\(indent) packedFixed32[\(packedFixed32ElementIndex)]: \(oneValuepackedFixed32)\n"
          packedFixed32ElementIndex += 1
      }
      var packedFixed64ElementIndex:Int = 0
      for oneValuepackedFixed64 in packedFixed64  {
          output += "\(indent) packedFixed64[\(packedFixed64ElementIndex)]: \(oneValuepackedFixed64)\n"
          packedFixed64ElementIndex += 1
      }
      var packedSfixed32ElementIndex:Int = 0
      for oneValuepackedSfixed32 in packedSfixed32  {
          output += "\(indent) packedSfixed32[\(packedSfixed32ElementIndex)]: \(oneValuepackedSfixed32)\n"
          packedSfixed32ElementIndex += 1
      }
      var packedSfixed64ElementIndex:Int = 0
      for oneValuepackedSfixed64 in packedSfixed64  {
          output += "\(indent) packedSfixed64[\(packedSfixed64ElementIndex)]: \(oneValuepackedSfixed64)\n"
          packedSfixed64ElementIndex += 1
      }
      var packedFloatElementIndex:Int = 0
      for oneValuepackedFloat in packedFloat  {
          output += "\(indent) packedFloat[\(packedFloatElementIndex)]: \(oneValuepackedFloat)\n"
          packedFloatElementIndex += 1
      }
      var packedDoubleElementIndex:Int = 0
      for oneValuepackedDouble in packedDouble  {
          output += "\(indent) packedDouble[\(packedDoubleElementIndex)]: \(oneValuepackedDouble)\n"
          packedDoubleElementIndex += 1
      }
      var packedBoolElementIndex:Int = 0
      for oneValuepackedBool in packedBool  {
          output += "\(indent) packedBool[\(packedBoolElementIndex)]: \(oneValuepackedBool)\n"
          packedBoolElementIndex += 1
      }
      var packedEnumElementIndex:Int = 0
      for oneValueOfpackedEnum in packedEnum {
          output += "\(indent) packedEnum[\(packedEnumElementIndex)]: \(oneValueOfpackedEnum.description)\n"
          packedEnumElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValuepackedInt32 in packedInt32 {
                hashCode = (hashCode &* 31) &+ oneValuepackedInt32.hashValue
            }
            for oneValuepackedInt64 in packedInt64 {
                hashCode = (hashCode &* 31) &+ oneValuepackedInt64.hashValue
            }
            for oneValuepackedUint32 in packedUint32 {
                hashCode = (hashCode &* 31) &+ oneValuepackedUint32.hashValue
            }
            for oneValuepackedUint64 in packedUint64 {
                hashCode = (hashCode &* 31) &+ oneValuepackedUint64.hashValue
            }
            for oneValuepackedSint32 in packedSint32 {
                hashCode = (hashCode &* 31) &+ oneValuepackedSint32.hashValue
            }
            for oneValuepackedSint64 in packedSint64 {
                hashCode = (hashCode &* 31) &+ oneValuepackedSint64.hashValue
            }
            for oneValuepackedFixed32 in packedFixed32 {
                hashCode = (hashCode &* 31) &+ oneValuepackedFixed32.hashValue
            }
            for oneValuepackedFixed64 in packedFixed64 {
                hashCode = (hashCode &* 31) &+ oneValuepackedFixed64.hashValue
            }
            for oneValuepackedSfixed32 in packedSfixed32 {
                hashCode = (hashCode &* 31) &+ oneValuepackedSfixed32.hashValue
            }
            for oneValuepackedSfixed64 in packedSfixed64 {
                hashCode = (hashCode &* 31) &+ oneValuepackedSfixed64.hashValue
            }
            for oneValuepackedFloat in packedFloat {
                hashCode = (hashCode &* 31) &+ oneValuepackedFloat.hashValue
            }
            for oneValuepackedDouble in packedDouble {
                hashCode = (hashCode &* 31) &+ oneValuepackedDouble.hashValue
            }
            for oneValuepackedBool in packedBool {
                hashCode = (hashCode &* 31) &+ oneValuepackedBool.hashValue
            }
            for oneValueOfpackedEnum in packedEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfpackedEnum.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestPackedTypes"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestPackedTypes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestPackedTypes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestPackedTypes = ProtobufUnittest.TestPackedTypes()
      public func getMessage() -> ProtobufUnittest.TestPackedTypes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var packedInt32:Array<Int32> {
           get {
               return builderResult.packedInt32
           }
           set (array) {
               builderResult.packedInt32 = array
           }
      }
      public func setPackedInt32(_ value:Array<Int32>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedInt32 = value
        return self
      }
      public func clearPackedInt32() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedInt32.removeAll(keepingCapacity: false)
         return self
      }
      public var packedInt64:Array<Int64> {
           get {
               return builderResult.packedInt64
           }
           set (array) {
               builderResult.packedInt64 = array
           }
      }
      public func setPackedInt64(_ value:Array<Int64>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedInt64 = value
        return self
      }
      public func clearPackedInt64() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedInt64.removeAll(keepingCapacity: false)
         return self
      }
      public var packedUint32:Array<UInt32> {
           get {
               return builderResult.packedUint32
           }
           set (array) {
               builderResult.packedUint32 = array
           }
      }
      public func setPackedUint32(_ value:Array<UInt32>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedUint32 = value
        return self
      }
      public func clearPackedUint32() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedUint32.removeAll(keepingCapacity: false)
         return self
      }
      public var packedUint64:Array<UInt64> {
           get {
               return builderResult.packedUint64
           }
           set (array) {
               builderResult.packedUint64 = array
           }
      }
      public func setPackedUint64(_ value:Array<UInt64>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedUint64 = value
        return self
      }
      public func clearPackedUint64() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedUint64.removeAll(keepingCapacity: false)
         return self
      }
      public var packedSint32:Array<Int32> {
           get {
               return builderResult.packedSint32
           }
           set (array) {
               builderResult.packedSint32 = array
           }
      }
      public func setPackedSint32(_ value:Array<Int32>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedSint32 = value
        return self
      }
      public func clearPackedSint32() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedSint32.removeAll(keepingCapacity: false)
         return self
      }
      public var packedSint64:Array<Int64> {
           get {
               return builderResult.packedSint64
           }
           set (array) {
               builderResult.packedSint64 = array
           }
      }
      public func setPackedSint64(_ value:Array<Int64>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedSint64 = value
        return self
      }
      public func clearPackedSint64() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedSint64.removeAll(keepingCapacity: false)
         return self
      }
      public var packedFixed32:Array<UInt32> {
           get {
               return builderResult.packedFixed32
           }
           set (array) {
               builderResult.packedFixed32 = array
           }
      }
      public func setPackedFixed32(_ value:Array<UInt32>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedFixed32 = value
        return self
      }
      public func clearPackedFixed32() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedFixed32.removeAll(keepingCapacity: false)
         return self
      }
      public var packedFixed64:Array<UInt64> {
           get {
               return builderResult.packedFixed64
           }
           set (array) {
               builderResult.packedFixed64 = array
           }
      }
      public func setPackedFixed64(_ value:Array<UInt64>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedFixed64 = value
        return self
      }
      public func clearPackedFixed64() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedFixed64.removeAll(keepingCapacity: false)
         return self
      }
      public var packedSfixed32:Array<Int32> {
           get {
               return builderResult.packedSfixed32
           }
           set (array) {
               builderResult.packedSfixed32 = array
           }
      }
      public func setPackedSfixed32(_ value:Array<Int32>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedSfixed32 = value
        return self
      }
      public func clearPackedSfixed32() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedSfixed32.removeAll(keepingCapacity: false)
         return self
      }
      public var packedSfixed64:Array<Int64> {
           get {
               return builderResult.packedSfixed64
           }
           set (array) {
               builderResult.packedSfixed64 = array
           }
      }
      public func setPackedSfixed64(_ value:Array<Int64>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedSfixed64 = value
        return self
      }
      public func clearPackedSfixed64() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedSfixed64.removeAll(keepingCapacity: false)
         return self
      }
      public var packedFloat:Array<Float> {
           get {
               return builderResult.packedFloat
           }
           set (array) {
               builderResult.packedFloat = array
           }
      }
      public func setPackedFloat(_ value:Array<Float>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedFloat = value
        return self
      }
      public func clearPackedFloat() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedFloat.removeAll(keepingCapacity: false)
         return self
      }
      public var packedDouble:Array<Double> {
           get {
               return builderResult.packedDouble
           }
           set (array) {
               builderResult.packedDouble = array
           }
      }
      public func setPackedDouble(_ value:Array<Double>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedDouble = value
        return self
      }
      public func clearPackedDouble() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedDouble.removeAll(keepingCapacity: false)
         return self
      }
      public var packedBool:Array<Bool> {
           get {
               return builderResult.packedBool
           }
           set (array) {
               builderResult.packedBool = array
           }
      }
      public func setPackedBool(_ value:Array<Bool>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedBool = value
        return self
      }
      public func clearPackedBool() -> ProtobufUnittest.TestPackedTypes.Builder {
         builderResult.packedBool.removeAll(keepingCapacity: false)
         return self
      }
      public var packedEnum:Array<ProtobufUnittest.ForeignEnum> {
          get {
              return builderResult.packedEnum
          }
          set (value) {
              builderResult.packedEnum = value
          }
      }
      public func setPackedEnum(_ value:Array<ProtobufUnittest.ForeignEnum>) -> ProtobufUnittest.TestPackedTypes.Builder {
        self.packedEnum = value
        return self
      }
      public func clearPackedEnum() -> ProtobufUnittest.TestPackedTypes.Builder {
        builderResult.packedEnum.removeAll(keepingCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestPackedTypes.Builder {
        builderResult = ProtobufUnittest.TestPackedTypes()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestPackedTypes.Builder {
        return try ProtobufUnittest.TestPackedTypes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestPackedTypes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestPackedTypes {
        let returnMe:ProtobufUnittest.TestPackedTypes = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestPackedTypes) throws -> ProtobufUnittest.TestPackedTypes.Builder {
        if other == ProtobufUnittest.TestPackedTypes() {
         return self
        }
        if !other.packedInt32.isEmpty {
            builderResult.packedInt32 += other.packedInt32
        }
        if !other.packedInt64.isEmpty {
            builderResult.packedInt64 += other.packedInt64
        }
        if !other.packedUint32.isEmpty {
            builderResult.packedUint32 += other.packedUint32
        }
        if !other.packedUint64.isEmpty {
            builderResult.packedUint64 += other.packedUint64
        }
        if !other.packedSint32.isEmpty {
            builderResult.packedSint32 += other.packedSint32
        }
        if !other.packedSint64.isEmpty {
            builderResult.packedSint64 += other.packedSint64
        }
        if !other.packedFixed32.isEmpty {
            builderResult.packedFixed32 += other.packedFixed32
        }
        if !other.packedFixed64.isEmpty {
            builderResult.packedFixed64 += other.packedFixed64
        }
        if !other.packedSfixed32.isEmpty {
            builderResult.packedSfixed32 += other.packedSfixed32
        }
        if !other.packedSfixed64.isEmpty {
            builderResult.packedSfixed64 += other.packedSfixed64
        }
        if !other.packedFloat.isEmpty {
            builderResult.packedFloat += other.packedFloat
        }
        if !other.packedDouble.isEmpty {
            builderResult.packedDouble += other.packedDouble
        }
        if !other.packedBool.isEmpty {
            builderResult.packedBool += other.packedBool
        }
        if !other.packedEnum.isEmpty {
           builderResult.packedEnum += other.packedEnum
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestPackedTypes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestPackedTypes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 722 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedInt32 += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 730 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedInt64 += [try input.readInt64()]
            }
            input.popLimit(limit)

          case 738 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedUint32 += [try input.readUInt32()]
            }
            input.popLimit(limit)

          case 746 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedUint64 += [try input.readUInt64()]
            }
            input.popLimit(limit)

          case 754 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedSint32 += [try input.readSInt32()]
            }
            input.popLimit(limit)

          case 762 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedSint64 += [try input.readSInt64()]
            }
            input.popLimit(limit)

          case 770 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedFixed32 += [try input.readFixed32()]
            }
            input.popLimit(limit)

          case 778 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedFixed64 += [try input.readFixed64()]
            }
            input.popLimit(limit)

          case 786 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedSfixed32 += [try input.readSFixed32()]
            }
            input.popLimit(limit)

          case 794 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedSfixed64 += [try input.readSFixed64()]
            }
            input.popLimit(limit)

          case 802 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedFloat += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 810 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedDouble += [try input.readDouble()]
            }
            input.popLimit(limit)

          case 818 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedBool += [try input.readBool()]
            }
            input.popLimit(limit)

          case 826 :
            let length:Int32 = try input.readRawVarint32()
            let oldLimit:Int32 = try input.pushLimit(length)
            while input.bytesUntilLimit() > 0 {
            let valueIntpackedEnum = try input.readEnum()
            if let enumspackedEnum = ProtobufUnittest.ForeignEnum(rawValue:valueIntpackedEnum) {
                 builderResult.packedEnum += [enumspackedEnum]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(103, value:Int64(valueIntpackedEnum))
            }
            }
            input.popLimit(oldLimit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // A message with the same fields as TestPackedTypes, but without packing. Used
  // to test packed <-> unpacked wire compatibility.
  final public class TestUnpackedTypes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var unpackedInt32:Array<Int32> = Array<Int32>()
    public private(set) var unpackedInt64:Array<Int64> = Array<Int64>()
    public private(set) var unpackedUint32:Array<UInt32> = Array<UInt32>()
    public private(set) var unpackedUint64:Array<UInt64> = Array<UInt64>()
    public private(set) var unpackedSint32:Array<Int32> = Array<Int32>()
    public private(set) var unpackedSint64:Array<Int64> = Array<Int64>()
    public private(set) var unpackedFixed32:Array<UInt32> = Array<UInt32>()
    public private(set) var unpackedFixed64:Array<UInt64> = Array<UInt64>()
    public private(set) var unpackedSfixed32:Array<Int32> = Array<Int32>()
    public private(set) var unpackedSfixed64:Array<Int64> = Array<Int64>()
    public private(set) var unpackedFloat:Array<Float> = Array<Float>()
    public private(set) var unpackedDouble:Array<Double> = Array<Double>()
    public private(set) var unpackedBool:Array<Bool> = Array<Bool>()
    private var unpackedEnumMemoizedSerializedSize:Int32 = 0
    public private(set) var unpackedEnum:Array<ProtobufUnittest.ForeignEnum> = Array<ProtobufUnittest.ForeignEnum>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if !unpackedInt32.isEmpty {
        for oneValueunpackedInt32 in unpackedInt32 {
          try output.writeInt32(90, value:oneValueunpackedInt32)
        }
      }
      if !unpackedInt64.isEmpty {
        for oneValueunpackedInt64 in unpackedInt64 {
          try output.writeInt64(91, value:oneValueunpackedInt64)
        }
      }
      if !unpackedUint32.isEmpty {
        for oneValueunpackedUint32 in unpackedUint32 {
          try output.writeUInt32(92, value:oneValueunpackedUint32)
        }
      }
      if !unpackedUint64.isEmpty {
        for oneValueunpackedUint64 in unpackedUint64 {
          try output.writeUInt64(93, value:oneValueunpackedUint64)
        }
      }
      if !unpackedSint32.isEmpty {
        for oneValueunpackedSint32 in unpackedSint32 {
          try output.writeSInt32(94, value:oneValueunpackedSint32)
        }
      }
      if !unpackedSint64.isEmpty {
        for oneValueunpackedSint64 in unpackedSint64 {
          try output.writeSInt64(95, value:oneValueunpackedSint64)
        }
      }
      if !unpackedFixed32.isEmpty {
        for oneValueunpackedFixed32 in unpackedFixed32 {
          try output.writeFixed32(96, value:oneValueunpackedFixed32)
        }
      }
      if !unpackedFixed64.isEmpty {
        for oneValueunpackedFixed64 in unpackedFixed64 {
          try output.writeFixed64(97, value:oneValueunpackedFixed64)
        }
      }
      if !unpackedSfixed32.isEmpty {
        for oneValueunpackedSfixed32 in unpackedSfixed32 {
          try output.writeSFixed32(98, value:oneValueunpackedSfixed32)
        }
      }
      if !unpackedSfixed64.isEmpty {
        for oneValueunpackedSfixed64 in unpackedSfixed64 {
          try output.writeSFixed64(99, value:oneValueunpackedSfixed64)
        }
      }
      if !unpackedFloat.isEmpty {
        for oneValueunpackedFloat in unpackedFloat {
          try output.writeFloat(100, value:oneValueunpackedFloat)
        }
      }
      if !unpackedDouble.isEmpty {
        for oneValueunpackedDouble in unpackedDouble {
          try output.writeDouble(101, value:oneValueunpackedDouble)
        }
      }
      if !unpackedBool.isEmpty {
        for oneValueunpackedBool in unpackedBool {
          try output.writeBool(102, value:oneValueunpackedBool)
        }
      }
      for oneValueOfunpackedEnum in unpackedEnum {
          try output.writeEnum(103, value:oneValueOfunpackedEnum.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeUnpackedInt32:Int32 = 0
      for oneValueunpackedInt32 in unpackedInt32 {
          dataSizeUnpackedInt32 += oneValueunpackedInt32.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeUnpackedInt32
      serialize_size += 2 * Int32(unpackedInt32.count)
      var dataSizeUnpackedInt64:Int32 = 0
      for oneValueunpackedInt64 in unpackedInt64 {
          dataSizeUnpackedInt64 += oneValueunpackedInt64.computeInt64SizeNoTag()
      }
      serialize_size += dataSizeUnpackedInt64
      serialize_size += 2 * Int32(unpackedInt64.count)
      var dataSizeUnpackedUint32:Int32 = 0
      for oneValueunpackedUint32 in unpackedUint32 {
          dataSizeUnpackedUint32 += oneValueunpackedUint32.computeUInt32SizeNoTag()
      }
      serialize_size += dataSizeUnpackedUint32
      serialize_size += 2 * Int32(unpackedUint32.count)
      var dataSizeUnpackedUint64:Int32 = 0
      for oneValueunpackedUint64 in unpackedUint64 {
          dataSizeUnpackedUint64 += oneValueunpackedUint64.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizeUnpackedUint64
      serialize_size += 2 * Int32(unpackedUint64.count)
      var dataSizeUnpackedSint32:Int32 = 0
      for oneValueunpackedSint32 in unpackedSint32 {
          dataSizeUnpackedSint32 += oneValueunpackedSint32.computeSInt32SizeNoTag()
      }
      serialize_size += dataSizeUnpackedSint32
      serialize_size += 2 * Int32(unpackedSint32.count)
      var dataSizeUnpackedSint64:Int32 = 0
      for oneValueunpackedSint64 in unpackedSint64 {
          dataSizeUnpackedSint64 += oneValueunpackedSint64.computeSInt64SizeNoTag()
      }
      serialize_size += dataSizeUnpackedSint64
      serialize_size += 2 * Int32(unpackedSint64.count)
      var dataSizeUnpackedFixed32:Int32 = 0
      dataSizeUnpackedFixed32 = 4 * Int32(unpackedFixed32.count)
      serialize_size += dataSizeUnpackedFixed32
      serialize_size += 2 * Int32(unpackedFixed32.count)
      var dataSizeUnpackedFixed64:Int32 = 0
      dataSizeUnpackedFixed64 = 8 * Int32(unpackedFixed64.count)
      serialize_size += dataSizeUnpackedFixed64
      serialize_size += 2 * Int32(unpackedFixed64.count)
      var dataSizeUnpackedSfixed32:Int32 = 0
      dataSizeUnpackedSfixed32 = 4 * Int32(unpackedSfixed32.count)
      serialize_size += dataSizeUnpackedSfixed32
      serialize_size += 2 * Int32(unpackedSfixed32.count)
      var dataSizeUnpackedSfixed64:Int32 = 0
      dataSizeUnpackedSfixed64 = 8 * Int32(unpackedSfixed64.count)
      serialize_size += dataSizeUnpackedSfixed64
      serialize_size += 2 * Int32(unpackedSfixed64.count)
      var dataSizeUnpackedFloat:Int32 = 0
      dataSizeUnpackedFloat = 4 * Int32(unpackedFloat.count)
      serialize_size += dataSizeUnpackedFloat
      serialize_size += 2 * Int32(unpackedFloat.count)
      var dataSizeUnpackedDouble:Int32 = 0
      dataSizeUnpackedDouble = 8 * Int32(unpackedDouble.count)
      serialize_size += dataSizeUnpackedDouble
      serialize_size += 2 * Int32(unpackedDouble.count)
      var dataSizeUnpackedBool:Int32 = 0
      dataSizeUnpackedBool = 1 * Int32(unpackedBool.count)
      serialize_size += dataSizeUnpackedBool
      serialize_size += 2 * Int32(unpackedBool.count)
      var dataSizeunpackedEnum:Int32 = 0
      for oneValueOfunpackedEnum in unpackedEnum {
          dataSizeunpackedEnum += oneValueOfunpackedEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeunpackedEnum
      serialize_size += (2 * Int32(unpackedEnum.count))
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestUnpackedTypes> {
      var mergedArray = Array<ProtobufUnittest.TestUnpackedTypes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestUnpackedTypes? {
      return try ProtobufUnittest.TestUnpackedTypes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestUnpackedTypes {
      return try ProtobufUnittest.TestUnpackedTypes.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestUnpackedTypes {
      return try ProtobufUnittest.TestUnpackedTypes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestUnpackedTypes {
      return try ProtobufUnittest.TestUnpackedTypes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestUnpackedTypes {
      return try ProtobufUnittest.TestUnpackedTypes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestUnpackedTypes {
      return try ProtobufUnittest.TestUnpackedTypes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestUnpackedTypes {
      return try ProtobufUnittest.TestUnpackedTypes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestUnpackedTypes.Builder {
      return ProtobufUnittest.TestUnpackedTypes.classBuilder() as! ProtobufUnittest.TestUnpackedTypes.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestUnpackedTypes.Builder {
      return classBuilder() as! ProtobufUnittest.TestUnpackedTypes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestUnpackedTypes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestUnpackedTypes.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestUnpackedTypes.Builder {
      return try ProtobufUnittest.TestUnpackedTypes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestUnpackedTypes) throws -> ProtobufUnittest.TestUnpackedTypes.Builder {
      return try ProtobufUnittest.TestUnpackedTypes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      var unpackedInt32ElementIndex:Int = 0
      for oneValueunpackedInt32 in unpackedInt32  {
          output += "\(indent) unpackedInt32[\(unpackedInt32ElementIndex)]: \(oneValueunpackedInt32)\n"
          unpackedInt32ElementIndex += 1
      }
      var unpackedInt64ElementIndex:Int = 0
      for oneValueunpackedInt64 in unpackedInt64  {
          output += "\(indent) unpackedInt64[\(unpackedInt64ElementIndex)]: \(oneValueunpackedInt64)\n"
          unpackedInt64ElementIndex += 1
      }
      var unpackedUint32ElementIndex:Int = 0
      for oneValueunpackedUint32 in unpackedUint32  {
          output += "\(indent) unpackedUint32[\(unpackedUint32ElementIndex)]: \(oneValueunpackedUint32)\n"
          unpackedUint32ElementIndex += 1
      }
      var unpackedUint64ElementIndex:Int = 0
      for oneValueunpackedUint64 in unpackedUint64  {
          output += "\(indent) unpackedUint64[\(unpackedUint64ElementIndex)]: \(oneValueunpackedUint64)\n"
          unpackedUint64ElementIndex += 1
      }
      var unpackedSint32ElementIndex:Int = 0
      for oneValueunpackedSint32 in unpackedSint32  {
          output += "\(indent) unpackedSint32[\(unpackedSint32ElementIndex)]: \(oneValueunpackedSint32)\n"
          unpackedSint32ElementIndex += 1
      }
      var unpackedSint64ElementIndex:Int = 0
      for oneValueunpackedSint64 in unpackedSint64  {
          output += "\(indent) unpackedSint64[\(unpackedSint64ElementIndex)]: \(oneValueunpackedSint64)\n"
          unpackedSint64ElementIndex += 1
      }
      var unpackedFixed32ElementIndex:Int = 0
      for oneValueunpackedFixed32 in unpackedFixed32  {
          output += "\(indent) unpackedFixed32[\(unpackedFixed32ElementIndex)]: \(oneValueunpackedFixed32)\n"
          unpackedFixed32ElementIndex += 1
      }
      var unpackedFixed64ElementIndex:Int = 0
      for oneValueunpackedFixed64 in unpackedFixed64  {
          output += "\(indent) unpackedFixed64[\(unpackedFixed64ElementIndex)]: \(oneValueunpackedFixed64)\n"
          unpackedFixed64ElementIndex += 1
      }
      var unpackedSfixed32ElementIndex:Int = 0
      for oneValueunpackedSfixed32 in unpackedSfixed32  {
          output += "\(indent) unpackedSfixed32[\(unpackedSfixed32ElementIndex)]: \(oneValueunpackedSfixed32)\n"
          unpackedSfixed32ElementIndex += 1
      }
      var unpackedSfixed64ElementIndex:Int = 0
      for oneValueunpackedSfixed64 in unpackedSfixed64  {
          output += "\(indent) unpackedSfixed64[\(unpackedSfixed64ElementIndex)]: \(oneValueunpackedSfixed64)\n"
          unpackedSfixed64ElementIndex += 1
      }
      var unpackedFloatElementIndex:Int = 0
      for oneValueunpackedFloat in unpackedFloat  {
          output += "\(indent) unpackedFloat[\(unpackedFloatElementIndex)]: \(oneValueunpackedFloat)\n"
          unpackedFloatElementIndex += 1
      }
      var unpackedDoubleElementIndex:Int = 0
      for oneValueunpackedDouble in unpackedDouble  {
          output += "\(indent) unpackedDouble[\(unpackedDoubleElementIndex)]: \(oneValueunpackedDouble)\n"
          unpackedDoubleElementIndex += 1
      }
      var unpackedBoolElementIndex:Int = 0
      for oneValueunpackedBool in unpackedBool  {
          output += "\(indent) unpackedBool[\(unpackedBoolElementIndex)]: \(oneValueunpackedBool)\n"
          unpackedBoolElementIndex += 1
      }
      var unpackedEnumElementIndex:Int = 0
      for oneValueOfunpackedEnum in unpackedEnum {
          output += "\(indent) unpackedEnum[\(unpackedEnumElementIndex)]: \(oneValueOfunpackedEnum.description)\n"
          unpackedEnumElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueunpackedInt32 in unpackedInt32 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedInt32.hashValue
            }
            for oneValueunpackedInt64 in unpackedInt64 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedInt64.hashValue
            }
            for oneValueunpackedUint32 in unpackedUint32 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedUint32.hashValue
            }
            for oneValueunpackedUint64 in unpackedUint64 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedUint64.hashValue
            }
            for oneValueunpackedSint32 in unpackedSint32 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedSint32.hashValue
            }
            for oneValueunpackedSint64 in unpackedSint64 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedSint64.hashValue
            }
            for oneValueunpackedFixed32 in unpackedFixed32 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedFixed32.hashValue
            }
            for oneValueunpackedFixed64 in unpackedFixed64 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedFixed64.hashValue
            }
            for oneValueunpackedSfixed32 in unpackedSfixed32 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedSfixed32.hashValue
            }
            for oneValueunpackedSfixed64 in unpackedSfixed64 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedSfixed64.hashValue
            }
            for oneValueunpackedFloat in unpackedFloat {
                hashCode = (hashCode &* 31) &+ oneValueunpackedFloat.hashValue
            }
            for oneValueunpackedDouble in unpackedDouble {
                hashCode = (hashCode &* 31) &+ oneValueunpackedDouble.hashValue
            }
            for oneValueunpackedBool in unpackedBool {
                hashCode = (hashCode &* 31) &+ oneValueunpackedBool.hashValue
            }
            for oneValueOfunpackedEnum in unpackedEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfunpackedEnum.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestUnpackedTypes"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestUnpackedTypes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestUnpackedTypes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestUnpackedTypes = ProtobufUnittest.TestUnpackedTypes()
      public func getMessage() -> ProtobufUnittest.TestUnpackedTypes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var unpackedInt32:Array<Int32> {
           get {
               return builderResult.unpackedInt32
           }
           set (array) {
               builderResult.unpackedInt32 = array
           }
      }
      public func setUnpackedInt32(_ value:Array<Int32>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedInt32 = value
        return self
      }
      public func clearUnpackedInt32() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedInt32.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedInt64:Array<Int64> {
           get {
               return builderResult.unpackedInt64
           }
           set (array) {
               builderResult.unpackedInt64 = array
           }
      }
      public func setUnpackedInt64(_ value:Array<Int64>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedInt64 = value
        return self
      }
      public func clearUnpackedInt64() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedInt64.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedUint32:Array<UInt32> {
           get {
               return builderResult.unpackedUint32
           }
           set (array) {
               builderResult.unpackedUint32 = array
           }
      }
      public func setUnpackedUint32(_ value:Array<UInt32>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedUint32 = value
        return self
      }
      public func clearUnpackedUint32() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedUint32.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedUint64:Array<UInt64> {
           get {
               return builderResult.unpackedUint64
           }
           set (array) {
               builderResult.unpackedUint64 = array
           }
      }
      public func setUnpackedUint64(_ value:Array<UInt64>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedUint64 = value
        return self
      }
      public func clearUnpackedUint64() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedUint64.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedSint32:Array<Int32> {
           get {
               return builderResult.unpackedSint32
           }
           set (array) {
               builderResult.unpackedSint32 = array
           }
      }
      public func setUnpackedSint32(_ value:Array<Int32>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedSint32 = value
        return self
      }
      public func clearUnpackedSint32() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedSint32.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedSint64:Array<Int64> {
           get {
               return builderResult.unpackedSint64
           }
           set (array) {
               builderResult.unpackedSint64 = array
           }
      }
      public func setUnpackedSint64(_ value:Array<Int64>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedSint64 = value
        return self
      }
      public func clearUnpackedSint64() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedSint64.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedFixed32:Array<UInt32> {
           get {
               return builderResult.unpackedFixed32
           }
           set (array) {
               builderResult.unpackedFixed32 = array
           }
      }
      public func setUnpackedFixed32(_ value:Array<UInt32>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedFixed32 = value
        return self
      }
      public func clearUnpackedFixed32() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedFixed32.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedFixed64:Array<UInt64> {
           get {
               return builderResult.unpackedFixed64
           }
           set (array) {
               builderResult.unpackedFixed64 = array
           }
      }
      public func setUnpackedFixed64(_ value:Array<UInt64>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedFixed64 = value
        return self
      }
      public func clearUnpackedFixed64() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedFixed64.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedSfixed32:Array<Int32> {
           get {
               return builderResult.unpackedSfixed32
           }
           set (array) {
               builderResult.unpackedSfixed32 = array
           }
      }
      public func setUnpackedSfixed32(_ value:Array<Int32>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedSfixed32 = value
        return self
      }
      public func clearUnpackedSfixed32() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedSfixed32.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedSfixed64:Array<Int64> {
           get {
               return builderResult.unpackedSfixed64
           }
           set (array) {
               builderResult.unpackedSfixed64 = array
           }
      }
      public func setUnpackedSfixed64(_ value:Array<Int64>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedSfixed64 = value
        return self
      }
      public func clearUnpackedSfixed64() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedSfixed64.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedFloat:Array<Float> {
           get {
               return builderResult.unpackedFloat
           }
           set (array) {
               builderResult.unpackedFloat = array
           }
      }
      public func setUnpackedFloat(_ value:Array<Float>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedFloat = value
        return self
      }
      public func clearUnpackedFloat() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedFloat.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedDouble:Array<Double> {
           get {
               return builderResult.unpackedDouble
           }
           set (array) {
               builderResult.unpackedDouble = array
           }
      }
      public func setUnpackedDouble(_ value:Array<Double>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedDouble = value
        return self
      }
      public func clearUnpackedDouble() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedDouble.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedBool:Array<Bool> {
           get {
               return builderResult.unpackedBool
           }
           set (array) {
               builderResult.unpackedBool = array
           }
      }
      public func setUnpackedBool(_ value:Array<Bool>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedBool = value
        return self
      }
      public func clearUnpackedBool() -> ProtobufUnittest.TestUnpackedTypes.Builder {
         builderResult.unpackedBool.removeAll(keepingCapacity: false)
         return self
      }
      public var unpackedEnum:Array<ProtobufUnittest.ForeignEnum> {
          get {
              return builderResult.unpackedEnum
          }
          set (value) {
              builderResult.unpackedEnum = value
          }
      }
      public func setUnpackedEnum(_ value:Array<ProtobufUnittest.ForeignEnum>) -> ProtobufUnittest.TestUnpackedTypes.Builder {
        self.unpackedEnum = value
        return self
      }
      public func clearUnpackedEnum() -> ProtobufUnittest.TestUnpackedTypes.Builder {
        builderResult.unpackedEnum.removeAll(keepingCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestUnpackedTypes.Builder {
        builderResult = ProtobufUnittest.TestUnpackedTypes()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestUnpackedTypes.Builder {
        return try ProtobufUnittest.TestUnpackedTypes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestUnpackedTypes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestUnpackedTypes {
        let returnMe:ProtobufUnittest.TestUnpackedTypes = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestUnpackedTypes) throws -> ProtobufUnittest.TestUnpackedTypes.Builder {
        if other == ProtobufUnittest.TestUnpackedTypes() {
         return self
        }
        if !other.unpackedInt32.isEmpty {
            builderResult.unpackedInt32 += other.unpackedInt32
        }
        if !other.unpackedInt64.isEmpty {
            builderResult.unpackedInt64 += other.unpackedInt64
        }
        if !other.unpackedUint32.isEmpty {
            builderResult.unpackedUint32 += other.unpackedUint32
        }
        if !other.unpackedUint64.isEmpty {
            builderResult.unpackedUint64 += other.unpackedUint64
        }
        if !other.unpackedSint32.isEmpty {
            builderResult.unpackedSint32 += other.unpackedSint32
        }
        if !other.unpackedSint64.isEmpty {
            builderResult.unpackedSint64 += other.unpackedSint64
        }
        if !other.unpackedFixed32.isEmpty {
            builderResult.unpackedFixed32 += other.unpackedFixed32
        }
        if !other.unpackedFixed64.isEmpty {
            builderResult.unpackedFixed64 += other.unpackedFixed64
        }
        if !other.unpackedSfixed32.isEmpty {
            builderResult.unpackedSfixed32 += other.unpackedSfixed32
        }
        if !other.unpackedSfixed64.isEmpty {
            builderResult.unpackedSfixed64 += other.unpackedSfixed64
        }
        if !other.unpackedFloat.isEmpty {
            builderResult.unpackedFloat += other.unpackedFloat
        }
        if !other.unpackedDouble.isEmpty {
            builderResult.unpackedDouble += other.unpackedDouble
        }
        if !other.unpackedBool.isEmpty {
            builderResult.unpackedBool += other.unpackedBool
        }
        if !other.unpackedEnum.isEmpty {
           builderResult.unpackedEnum += other.unpackedEnum
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestUnpackedTypes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestUnpackedTypes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 720 :
            unpackedInt32 += [try input.readInt32()]

          case 728 :
            unpackedInt64 += [try input.readInt64()]

          case 736 :
            unpackedUint32 += [try input.readUInt32()]

          case 744 :
            unpackedUint64 += [try input.readUInt64()]

          case 752 :
            unpackedSint32 += [try input.readSInt32()]

          case 760 :
            unpackedSint64 += [try input.readSInt64()]

          case 773 :
            unpackedFixed32 += [try input.readFixed32()]

          case 777 :
            unpackedFixed64 += [try input.readFixed64()]

          case 789 :
            unpackedSfixed32 += [try input.readSFixed32()]

          case 793 :
            unpackedSfixed64 += [try input.readSFixed64()]

          case 805 :
            unpackedFloat += [try input.readFloat()]

          case 809 :
            unpackedDouble += [try input.readDouble()]

          case 816 :
            unpackedBool += [try input.readBool()]

          case 824 :
            let valueIntunpackedEnum = try input.readEnum()
            if let enumsunpackedEnum = ProtobufUnittest.ForeignEnum(rawValue:valueIntunpackedEnum) {
                 builderResult.unpackedEnum += [enumsunpackedEnum]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(103, value:Int64(valueIntunpackedEnum))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestPackedExtensions : ExtendableMessage, GeneratedMessageProtocol{
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestPackedExtensions> {
      var mergedArray = Array<ProtobufUnittest.TestPackedExtensions>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestPackedExtensions? {
      return try ProtobufUnittest.TestPackedExtensions.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestPackedExtensions {
      return try ProtobufUnittest.TestPackedExtensions.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestPackedExtensions {
      return try ProtobufUnittest.TestPackedExtensions.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestPackedExtensions {
      return try ProtobufUnittest.TestPackedExtensions.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestPackedExtensions {
      return try ProtobufUnittest.TestPackedExtensions.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestPackedExtensions {
      return try ProtobufUnittest.TestPackedExtensions.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestPackedExtensions {
      return try ProtobufUnittest.TestPackedExtensions.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestPackedExtensions.Builder {
      return ProtobufUnittest.TestPackedExtensions.classBuilder() as! ProtobufUnittest.TestPackedExtensions.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestPackedExtensions.Builder {
      return classBuilder() as! ProtobufUnittest.TestPackedExtensions.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestPackedExtensions.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestPackedExtensions.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestPackedExtensions.Builder {
      return try ProtobufUnittest.TestPackedExtensions.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestPackedExtensions) throws -> ProtobufUnittest.TestPackedExtensions.Builder {
      return try ProtobufUnittest.TestPackedExtensions.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += try getExtensionDescription(Int32(1), endExclusive:Int32(536870912), indent:indent)
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestPackedExtensions"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestPackedExtensions"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestPackedExtensions.self
    }
    //Meta information declaration end

    final public class Builder : ExtendableMessageBuilder {
      private var builderResult:ProtobufUnittest.TestPackedExtensions = ProtobufUnittest.TestPackedExtensions()
      public func getMessage() -> ProtobufUnittest.TestPackedExtensions {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:ExtendableMessage {
           get {
               return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestPackedExtensions.Builder {
        builderResult = ProtobufUnittest.TestPackedExtensions()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestPackedExtensions.Builder {
        return try ProtobufUnittest.TestPackedExtensions.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestPackedExtensions {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestPackedExtensions {
        let returnMe:ProtobufUnittest.TestPackedExtensions = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestPackedExtensions) throws -> ProtobufUnittest.TestPackedExtensions.Builder {
        if other == ProtobufUnittest.TestPackedExtensions() {
         return self
        }
        try mergeExtensionFields(other)
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestPackedExtensions.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestPackedExtensions.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestUnpackedExtensions : ExtendableMessage, GeneratedMessageProtocol{
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestUnpackedExtensions> {
      var mergedArray = Array<ProtobufUnittest.TestUnpackedExtensions>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestUnpackedExtensions? {
      return try ProtobufUnittest.TestUnpackedExtensions.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestUnpackedExtensions {
      return try ProtobufUnittest.TestUnpackedExtensions.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestUnpackedExtensions {
      return try ProtobufUnittest.TestUnpackedExtensions.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestUnpackedExtensions {
      return try ProtobufUnittest.TestUnpackedExtensions.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestUnpackedExtensions {
      return try ProtobufUnittest.TestUnpackedExtensions.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestUnpackedExtensions {
      return try ProtobufUnittest.TestUnpackedExtensions.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestUnpackedExtensions {
      return try ProtobufUnittest.TestUnpackedExtensions.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestUnpackedExtensions.Builder {
      return ProtobufUnittest.TestUnpackedExtensions.classBuilder() as! ProtobufUnittest.TestUnpackedExtensions.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestUnpackedExtensions.Builder {
      return classBuilder() as! ProtobufUnittest.TestUnpackedExtensions.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestUnpackedExtensions.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestUnpackedExtensions.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestUnpackedExtensions.Builder {
      return try ProtobufUnittest.TestUnpackedExtensions.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestUnpackedExtensions) throws -> ProtobufUnittest.TestUnpackedExtensions.Builder {
      return try ProtobufUnittest.TestUnpackedExtensions.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += try getExtensionDescription(Int32(1), endExclusive:Int32(536870912), indent:indent)
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestUnpackedExtensions"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestUnpackedExtensions"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestUnpackedExtensions.self
    }
    //Meta information declaration end

    final public class Builder : ExtendableMessageBuilder {
      private var builderResult:ProtobufUnittest.TestUnpackedExtensions = ProtobufUnittest.TestUnpackedExtensions()
      public func getMessage() -> ProtobufUnittest.TestUnpackedExtensions {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:ExtendableMessage {
           get {
               return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestUnpackedExtensions.Builder {
        builderResult = ProtobufUnittest.TestUnpackedExtensions()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestUnpackedExtensions.Builder {
        return try ProtobufUnittest.TestUnpackedExtensions.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestUnpackedExtensions {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestUnpackedExtensions {
        let returnMe:ProtobufUnittest.TestUnpackedExtensions = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestUnpackedExtensions) throws -> ProtobufUnittest.TestUnpackedExtensions.Builder {
        if other == ProtobufUnittest.TestUnpackedExtensions() {
         return self
        }
        try mergeExtensionFields(other)
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestUnpackedExtensions.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestUnpackedExtensions.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Used by ExtensionSetTest/DynamicExtensions.  The test actually builds
  // a set of extensions to TestAllExtensions dynamically, based on the fields
  // of this message type.
  final public class TestDynamicExtensions : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class DynamicMessageType : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var dynamicField:Int32 = Int32(0)

        public private(set) var hasDynamicField:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasDynamicField {
            try output.writeInt32(2100, value:dynamicField)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasDynamicField {
            serialize_size += dynamicField.computeInt32Size(2100)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestDynamicExtensions.DynamicMessageType> {
          var mergedArray = Array<ProtobufUnittest.TestDynamicExtensions.DynamicMessageType>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType? {
          return try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.classBuilder() as! ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
          return classBuilder() as! ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
          return try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
          return try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasDynamicField {
            output += "\(indent) dynamicField: \(dynamicField) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasDynamicField {
                   hashCode = (hashCode &* 31) &+ dynamicField.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestDynamicExtensions.DynamicMessageType"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestDynamicExtensions.DynamicMessageType"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType = ProtobufUnittest.TestDynamicExtensions.DynamicMessageType()
          public func getMessage() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasDynamicField:Bool {
               get {
                    return builderResult.hasDynamicField
               }
          }
          public var dynamicField:Int32 {
               get {
                    return builderResult.dynamicField
               }
               set (value) {
                   builderResult.hasDynamicField = true
                   builderResult.dynamicField = value
               }
          }
          public func setDynamicField(_ value:Int32) -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
            self.dynamicField = value
            return self
          }
          public func clearDynamicField() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder{
               builderResult.hasDynamicField = false
               builderResult.dynamicField = Int32(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
            builderResult = ProtobufUnittest.TestDynamicExtensions.DynamicMessageType()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
            return try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
            let returnMe:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
            if other == ProtobufUnittest.TestDynamicExtensions.DynamicMessageType() {
             return self
            }
            if other.hasDynamicField {
                 dynamicField = other.dynamicField
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 16800 :
                dynamicField = try input.readInt32()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



      //Enum type declaration start 

      public enum DynamicEnumType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case DynamicFoo = 2200
        case DynamicBar = 2201
        case DynamicBaz = 2202

        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .DynamicFoo: return ".DynamicFoo"
                case .DynamicBar: return ".DynamicBar"
                case .DynamicBaz: return ".DynamicBaz"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var scalarExtension:UInt32 = UInt32(0)

    public private(set) var hasScalarExtension:Bool = false
    public private(set) var enumExtension:ProtobufUnittest.ForeignEnum = ProtobufUnittest.ForeignEnum.ForeignFoo
    public private(set) var hasEnumExtension:Bool = false
    public private(set) var dynamicEnumExtension:ProtobufUnittest.TestDynamicExtensions.DynamicEnumType = ProtobufUnittest.TestDynamicExtensions.DynamicEnumType.DynamicFoo
    public private(set) var hasDynamicEnumExtension:Bool = false
    public private(set) var messageExtension:ProtobufUnittest.ForeignMessage!
    public private(set) var hasMessageExtension:Bool = false
    public private(set) var dynamicMessageExtension:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType!
    public private(set) var hasDynamicMessageExtension:Bool = false
    public private(set) var repeatedExtension:Array<String> = Array<String>()
    public private(set) var packedExtension:Array<Int32> = Array<Int32>()
    private var packedExtensionMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasScalarExtension {
        try output.writeFixed32(2000, value:scalarExtension)
      }
      if hasEnumExtension {
        try output.writeEnum(2001, value:enumExtension.rawValue)
      }
      if hasDynamicEnumExtension {
        try output.writeEnum(2002, value:dynamicEnumExtension.rawValue)
      }
      if hasMessageExtension {
        try output.writeMessage(2003, value:messageExtension)
      }
      if hasDynamicMessageExtension {
        try output.writeMessage(2004, value:dynamicMessageExtension)
      }
      if !repeatedExtension.isEmpty {
        for oneValuerepeatedExtension in repeatedExtension {
          try output.writeString(2005, value:oneValuerepeatedExtension)
        }
      }
      if !packedExtension.isEmpty {
        try output.writeRawVarint32(16050)
        try output.writeRawVarint32(packedExtensionMemoizedSerializedSize)
        for oneValuepackedExtension in packedExtension {
          try output.writeSInt32NoTag(oneValuepackedExtension)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasScalarExtension {
        serialize_size += scalarExtension.computeFixed32Size(2000)
      }
      if (hasEnumExtension) {
        serialize_size += enumExtension.rawValue.computeEnumSize(2001)
      }
      if (hasDynamicEnumExtension) {
        serialize_size += dynamicEnumExtension.rawValue.computeEnumSize(2002)
      }
      if hasMessageExtension {
          if let varSizemessageExtension = messageExtension?.computeMessageSize(2003) {
              serialize_size += varSizemessageExtension
          }
      }
      if hasDynamicMessageExtension {
          if let varSizedynamicMessageExtension = dynamicMessageExtension?.computeMessageSize(2004) {
              serialize_size += varSizedynamicMessageExtension
          }
      }
      var dataSizeRepeatedExtension:Int32 = 0
      for oneValuerepeatedExtension in repeatedExtension {
          dataSizeRepeatedExtension += oneValuerepeatedExtension.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedExtension
      serialize_size += 2 * Int32(repeatedExtension.count)
      var dataSizePackedExtension:Int32 = 0
      for oneValuepackedExtension in packedExtension {
          dataSizePackedExtension += oneValuepackedExtension.computeSInt32SizeNoTag()
      }
      serialize_size += dataSizePackedExtension
      if !packedExtension.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedExtension.computeInt32SizeNoTag()
      }
      packedExtensionMemoizedSerializedSize = dataSizePackedExtension
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestDynamicExtensions> {
      var mergedArray = Array<ProtobufUnittest.TestDynamicExtensions>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDynamicExtensions? {
      return try ProtobufUnittest.TestDynamicExtensions.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestDynamicExtensions {
      return try ProtobufUnittest.TestDynamicExtensions.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDynamicExtensions {
      return try ProtobufUnittest.TestDynamicExtensions.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestDynamicExtensions {
      return try ProtobufUnittest.TestDynamicExtensions.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDynamicExtensions {
      return try ProtobufUnittest.TestDynamicExtensions.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDynamicExtensions {
      return try ProtobufUnittest.TestDynamicExtensions.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDynamicExtensions {
      return try ProtobufUnittest.TestDynamicExtensions.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestDynamicExtensions.Builder {
      return ProtobufUnittest.TestDynamicExtensions.classBuilder() as! ProtobufUnittest.TestDynamicExtensions.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestDynamicExtensions.Builder {
      return classBuilder() as! ProtobufUnittest.TestDynamicExtensions.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDynamicExtensions.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDynamicExtensions.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestDynamicExtensions.Builder {
      return try ProtobufUnittest.TestDynamicExtensions.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestDynamicExtensions) throws -> ProtobufUnittest.TestDynamicExtensions.Builder {
      return try ProtobufUnittest.TestDynamicExtensions.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasScalarExtension {
        output += "\(indent) scalarExtension: \(scalarExtension) \n"
      }
      if (hasEnumExtension) {
        output += "\(indent) enumExtension: \(enumExtension.description)\n"
      }
      if (hasDynamicEnumExtension) {
        output += "\(indent) dynamicEnumExtension: \(dynamicEnumExtension.description)\n"
      }
      if hasMessageExtension {
        output += "\(indent) messageExtension {\n"
        if let outDescMessageExtension = messageExtension {
          output += try outDescMessageExtension.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasDynamicMessageExtension {
        output += "\(indent) dynamicMessageExtension {\n"
        if let outDescDynamicMessageExtension = dynamicMessageExtension {
          output += try outDescDynamicMessageExtension.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var repeatedExtensionElementIndex:Int = 0
      for oneValuerepeatedExtension in repeatedExtension  {
          output += "\(indent) repeatedExtension[\(repeatedExtensionElementIndex)]: \(oneValuerepeatedExtension)\n"
          repeatedExtensionElementIndex += 1
      }
      var packedExtensionElementIndex:Int = 0
      for oneValuepackedExtension in packedExtension  {
          output += "\(indent) packedExtension[\(packedExtensionElementIndex)]: \(oneValuepackedExtension)\n"
          packedExtensionElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasScalarExtension {
               hashCode = (hashCode &* 31) &+ scalarExtension.hashValue
            }
            if hasEnumExtension {
               hashCode = (hashCode &* 31) &+ Int(enumExtension.rawValue)
            }
            if hasDynamicEnumExtension {
               hashCode = (hashCode &* 31) &+ Int(dynamicEnumExtension.rawValue)
            }
            if hasMessageExtension {
                if let hashValuemessageExtension = messageExtension?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemessageExtension
                }
            }
            if hasDynamicMessageExtension {
                if let hashValuedynamicMessageExtension = dynamicMessageExtension?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedynamicMessageExtension
                }
            }
            for oneValuerepeatedExtension in repeatedExtension {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedExtension.hashValue
            }
            for oneValuepackedExtension in packedExtension {
                hashCode = (hashCode &* 31) &+ oneValuepackedExtension.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestDynamicExtensions"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestDynamicExtensions"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestDynamicExtensions.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestDynamicExtensions = ProtobufUnittest.TestDynamicExtensions()
      public func getMessage() -> ProtobufUnittest.TestDynamicExtensions {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasScalarExtension:Bool {
           get {
                return builderResult.hasScalarExtension
           }
      }
      public var scalarExtension:UInt32 {
           get {
                return builderResult.scalarExtension
           }
           set (value) {
               builderResult.hasScalarExtension = true
               builderResult.scalarExtension = value
           }
      }
      public func setScalarExtension(_ value:UInt32) -> ProtobufUnittest.TestDynamicExtensions.Builder {
        self.scalarExtension = value
        return self
      }
      public func clearScalarExtension() -> ProtobufUnittest.TestDynamicExtensions.Builder{
           builderResult.hasScalarExtension = false
           builderResult.scalarExtension = UInt32(0)
           return self
      }
        public var hasEnumExtension:Bool{
            get {
                return builderResult.hasEnumExtension
            }
        }
        public var enumExtension:ProtobufUnittest.ForeignEnum {
            get {
                return builderResult.enumExtension
            }
            set (value) {
                builderResult.hasEnumExtension = true
                builderResult.enumExtension = value
            }
        }
        public func setEnumExtension(_ value:ProtobufUnittest.ForeignEnum) -> ProtobufUnittest.TestDynamicExtensions.Builder {
          self.enumExtension = value
          return self
        }
        public func clearEnumExtension() -> ProtobufUnittest.TestDynamicExtensions.Builder {
           builderResult.hasEnumExtension = false
           builderResult.enumExtension = .ForeignFoo
           return self
        }
        public var hasDynamicEnumExtension:Bool{
            get {
                return builderResult.hasDynamicEnumExtension
            }
        }
        public var dynamicEnumExtension:ProtobufUnittest.TestDynamicExtensions.DynamicEnumType {
            get {
                return builderResult.dynamicEnumExtension
            }
            set (value) {
                builderResult.hasDynamicEnumExtension = true
                builderResult.dynamicEnumExtension = value
            }
        }
        public func setDynamicEnumExtension(_ value:ProtobufUnittest.TestDynamicExtensions.DynamicEnumType) -> ProtobufUnittest.TestDynamicExtensions.Builder {
          self.dynamicEnumExtension = value
          return self
        }
        public func clearDynamicEnumExtension() -> ProtobufUnittest.TestDynamicExtensions.Builder {
           builderResult.hasDynamicEnumExtension = false
           builderResult.dynamicEnumExtension = .DynamicFoo
           return self
        }
      public var hasMessageExtension:Bool {
           get {
               return builderResult.hasMessageExtension
           }
      }
      public var messageExtension:ProtobufUnittest.ForeignMessage! {
           get {
               if messageExtensionBuilder_ != nil {
                  builderResult.messageExtension = messageExtensionBuilder_.getMessage()
               }
               return builderResult.messageExtension
           }
           set (value) {
               builderResult.hasMessageExtension = true
               builderResult.messageExtension = value
           }
      }
      private var messageExtensionBuilder_:ProtobufUnittest.ForeignMessage.Builder! {
           didSet {
              builderResult.hasMessageExtension = true
           }
      }
      public func getMessageExtensionBuilder() -> ProtobufUnittest.ForeignMessage.Builder {
        if messageExtensionBuilder_ == nil {
           messageExtensionBuilder_ = ProtobufUnittest.ForeignMessage.Builder()
           builderResult.messageExtension = messageExtensionBuilder_.getMessage()
           if messageExtension != nil {
              try! messageExtensionBuilder_.mergeFrom(messageExtension)
           }
        }
        return messageExtensionBuilder_
      }
      public func setMessageExtension(_ value:ProtobufUnittest.ForeignMessage!) -> ProtobufUnittest.TestDynamicExtensions.Builder {
        self.messageExtension = value
        return self
      }
      public func mergeMessageExtension(_ value:ProtobufUnittest.ForeignMessage) throws -> ProtobufUnittest.TestDynamicExtensions.Builder {
        if builderResult.hasMessageExtension {
          builderResult.messageExtension = try ProtobufUnittest.ForeignMessage.builderWithPrototype(builderResult.messageExtension).mergeFrom(value).buildPartial()
        } else {
          builderResult.messageExtension = value
        }
        builderResult.hasMessageExtension = true
        return self
      }
      public func clearMessageExtension() -> ProtobufUnittest.TestDynamicExtensions.Builder {
        messageExtensionBuilder_ = nil
        builderResult.hasMessageExtension = false
        builderResult.messageExtension = nil
        return self
      }
      public var hasDynamicMessageExtension:Bool {
           get {
               return builderResult.hasDynamicMessageExtension
           }
      }
      public var dynamicMessageExtension:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType! {
           get {
               if dynamicMessageExtensionBuilder_ != nil {
                  builderResult.dynamicMessageExtension = dynamicMessageExtensionBuilder_.getMessage()
               }
               return builderResult.dynamicMessageExtension
           }
           set (value) {
               builderResult.hasDynamicMessageExtension = true
               builderResult.dynamicMessageExtension = value
           }
      }
      private var dynamicMessageExtensionBuilder_:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder! {
           didSet {
              builderResult.hasDynamicMessageExtension = true
           }
      }
      public func getDynamicMessageExtensionBuilder() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder {
        if dynamicMessageExtensionBuilder_ == nil {
           dynamicMessageExtensionBuilder_ = ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder()
           builderResult.dynamicMessageExtension = dynamicMessageExtensionBuilder_.getMessage()
           if dynamicMessageExtension != nil {
              try! dynamicMessageExtensionBuilder_.mergeFrom(dynamicMessageExtension)
           }
        }
        return dynamicMessageExtensionBuilder_
      }
      public func setDynamicMessageExtension(_ value:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType!) -> ProtobufUnittest.TestDynamicExtensions.Builder {
        self.dynamicMessageExtension = value
        return self
      }
      public func mergeDynamicMessageExtension(_ value:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType) throws -> ProtobufUnittest.TestDynamicExtensions.Builder {
        if builderResult.hasDynamicMessageExtension {
          builderResult.dynamicMessageExtension = try ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builderWithPrototype(builderResult.dynamicMessageExtension).mergeFrom(value).buildPartial()
        } else {
          builderResult.dynamicMessageExtension = value
        }
        builderResult.hasDynamicMessageExtension = true
        return self
      }
      public func clearDynamicMessageExtension() -> ProtobufUnittest.TestDynamicExtensions.Builder {
        dynamicMessageExtensionBuilder_ = nil
        builderResult.hasDynamicMessageExtension = false
        builderResult.dynamicMessageExtension = nil
        return self
      }
      public var repeatedExtension:Array<String> {
           get {
               return builderResult.repeatedExtension
           }
           set (array) {
               builderResult.repeatedExtension = array
           }
      }
      public func setRepeatedExtension(_ value:Array<String>) -> ProtobufUnittest.TestDynamicExtensions.Builder {
        self.repeatedExtension = value
        return self
      }
      public func clearRepeatedExtension() -> ProtobufUnittest.TestDynamicExtensions.Builder {
         builderResult.repeatedExtension.removeAll(keepingCapacity: false)
         return self
      }
      public var packedExtension:Array<Int32> {
           get {
               return builderResult.packedExtension
           }
           set (array) {
               builderResult.packedExtension = array
           }
      }
      public func setPackedExtension(_ value:Array<Int32>) -> ProtobufUnittest.TestDynamicExtensions.Builder {
        self.packedExtension = value
        return self
      }
      public func clearPackedExtension() -> ProtobufUnittest.TestDynamicExtensions.Builder {
         builderResult.packedExtension.removeAll(keepingCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestDynamicExtensions.Builder {
        builderResult = ProtobufUnittest.TestDynamicExtensions()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestDynamicExtensions.Builder {
        return try ProtobufUnittest.TestDynamicExtensions.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestDynamicExtensions {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestDynamicExtensions {
        let returnMe:ProtobufUnittest.TestDynamicExtensions = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestDynamicExtensions) throws -> ProtobufUnittest.TestDynamicExtensions.Builder {
        if other == ProtobufUnittest.TestDynamicExtensions() {
         return self
        }
        if other.hasScalarExtension {
             scalarExtension = other.scalarExtension
        }
        if other.hasEnumExtension {
             enumExtension = other.enumExtension
        }
        if other.hasDynamicEnumExtension {
             dynamicEnumExtension = other.dynamicEnumExtension
        }
        if (other.hasMessageExtension) {
            try mergeMessageExtension(other.messageExtension)
        }
        if (other.hasDynamicMessageExtension) {
            try mergeDynamicMessageExtension(other.dynamicMessageExtension)
        }
        if !other.repeatedExtension.isEmpty {
            builderResult.repeatedExtension += other.repeatedExtension
        }
        if !other.packedExtension.isEmpty {
            builderResult.packedExtension += other.packedExtension
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestDynamicExtensions.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestDynamicExtensions.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 16005 :
            scalarExtension = try input.readFixed32()

          case 16008 :
            let valueIntenumExtension = try input.readEnum()
            if let enumsenumExtension = ProtobufUnittest.ForeignEnum(rawValue:valueIntenumExtension){
                 enumExtension = enumsenumExtension
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2001, value:Int64(valueIntenumExtension))
            }

          case 16016 :
            let valueIntdynamicEnumExtension = try input.readEnum()
            if let enumsdynamicEnumExtension = ProtobufUnittest.TestDynamicExtensions.DynamicEnumType(rawValue:valueIntdynamicEnumExtension){
                 dynamicEnumExtension = enumsdynamicEnumExtension
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2002, value:Int64(valueIntdynamicEnumExtension))
            }

          case 16026 :
            let subBuilder:ProtobufUnittest.ForeignMessage.Builder = ProtobufUnittest.ForeignMessage.Builder()
            if hasMessageExtension {
              try subBuilder.mergeFrom(messageExtension)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            messageExtension = subBuilder.buildPartial()

          case 16034 :
            let subBuilder:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder = ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.Builder()
            if hasDynamicMessageExtension {
              try subBuilder.mergeFrom(dynamicMessageExtension)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            dynamicMessageExtension = subBuilder.buildPartial()

          case 16042 :
            repeatedExtension += [try input.readString()]

          case 16050 :
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.packedExtension += [try input.readSInt32()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestRepeatedScalarDifferentTagSizes : GeneratedMessage, GeneratedMessageProtocol {
    // Parsing repeated fixed size values used to fail. This message needs to be
    // used in order to get a tag of the right size; all of the repeated fields
    // in TestAllTypes didn't trigger the check.
    public private(set) var repeatedFixed32:Array<UInt32> = Array<UInt32>()
    // Check for a varint type, just for good measure.
    public private(set) var repeatedInt32:Array<Int32> = Array<Int32>()
    // These have two-byte tags.
    public private(set) var repeatedFixed64:Array<UInt64> = Array<UInt64>()
    public private(set) var repeatedInt64:Array<Int64> = Array<Int64>()
    // Three byte tags.
    public private(set) var repeatedFloat:Array<Float> = Array<Float>()
    public private(set) var repeatedUint64:Array<UInt64> = Array<UInt64>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if !repeatedFixed32.isEmpty {
        for oneValuerepeatedFixed32 in repeatedFixed32 {
          try output.writeFixed32(12, value:oneValuerepeatedFixed32)
        }
      }
      if !repeatedInt32.isEmpty {
        for oneValuerepeatedInt32 in repeatedInt32 {
          try output.writeInt32(13, value:oneValuerepeatedInt32)
        }
      }
      if !repeatedFixed64.isEmpty {
        for oneValuerepeatedFixed64 in repeatedFixed64 {
          try output.writeFixed64(2046, value:oneValuerepeatedFixed64)
        }
      }
      if !repeatedInt64.isEmpty {
        for oneValuerepeatedInt64 in repeatedInt64 {
          try output.writeInt64(2047, value:oneValuerepeatedInt64)
        }
      }
      if !repeatedFloat.isEmpty {
        for oneValuerepeatedFloat in repeatedFloat {
          try output.writeFloat(262142, value:oneValuerepeatedFloat)
        }
      }
      if !repeatedUint64.isEmpty {
        for oneValuerepeatedUint64 in repeatedUint64 {
          try output.writeUInt64(262143, value:oneValuerepeatedUint64)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeRepeatedFixed32:Int32 = 0
      dataSizeRepeatedFixed32 = 4 * Int32(repeatedFixed32.count)
      serialize_size += dataSizeRepeatedFixed32
      serialize_size += 1 * Int32(repeatedFixed32.count)
      var dataSizeRepeatedInt32:Int32 = 0
      for oneValuerepeatedInt32 in repeatedInt32 {
          dataSizeRepeatedInt32 += oneValuerepeatedInt32.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt32
      serialize_size += 1 * Int32(repeatedInt32.count)
      var dataSizeRepeatedFixed64:Int32 = 0
      dataSizeRepeatedFixed64 = 8 * Int32(repeatedFixed64.count)
      serialize_size += dataSizeRepeatedFixed64
      serialize_size += 2 * Int32(repeatedFixed64.count)
      var dataSizeRepeatedInt64:Int32 = 0
      for oneValuerepeatedInt64 in repeatedInt64 {
          dataSizeRepeatedInt64 += oneValuerepeatedInt64.computeInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt64
      serialize_size += 2 * Int32(repeatedInt64.count)
      var dataSizeRepeatedFloat:Int32 = 0
      dataSizeRepeatedFloat = 4 * Int32(repeatedFloat.count)
      serialize_size += dataSizeRepeatedFloat
      serialize_size += 3 * Int32(repeatedFloat.count)
      var dataSizeRepeatedUint64:Int32 = 0
      for oneValuerepeatedUint64 in repeatedUint64 {
          dataSizeRepeatedUint64 += oneValuerepeatedUint64.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedUint64
      serialize_size += 3 * Int32(repeatedUint64.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestRepeatedScalarDifferentTagSizes> {
      var mergedArray = Array<ProtobufUnittest.TestRepeatedScalarDifferentTagSizes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes? {
      return try ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return try ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return try ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return try ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return try ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return try ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return try ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.classBuilder() as! ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
      return classBuilder() as! ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
      return try ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestRepeatedScalarDifferentTagSizes) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
      return try ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      var repeatedFixed32ElementIndex:Int = 0
      for oneValuerepeatedFixed32 in repeatedFixed32  {
          output += "\(indent) repeatedFixed32[\(repeatedFixed32ElementIndex)]: \(oneValuerepeatedFixed32)\n"
          repeatedFixed32ElementIndex += 1
      }
      var repeatedInt32ElementIndex:Int = 0
      for oneValuerepeatedInt32 in repeatedInt32  {
          output += "\(indent) repeatedInt32[\(repeatedInt32ElementIndex)]: \(oneValuerepeatedInt32)\n"
          repeatedInt32ElementIndex += 1
      }
      var repeatedFixed64ElementIndex:Int = 0
      for oneValuerepeatedFixed64 in repeatedFixed64  {
          output += "\(indent) repeatedFixed64[\(repeatedFixed64ElementIndex)]: \(oneValuerepeatedFixed64)\n"
          repeatedFixed64ElementIndex += 1
      }
      var repeatedInt64ElementIndex:Int = 0
      for oneValuerepeatedInt64 in repeatedInt64  {
          output += "\(indent) repeatedInt64[\(repeatedInt64ElementIndex)]: \(oneValuerepeatedInt64)\n"
          repeatedInt64ElementIndex += 1
      }
      var repeatedFloatElementIndex:Int = 0
      for oneValuerepeatedFloat in repeatedFloat  {
          output += "\(indent) repeatedFloat[\(repeatedFloatElementIndex)]: \(oneValuerepeatedFloat)\n"
          repeatedFloatElementIndex += 1
      }
      var repeatedUint64ElementIndex:Int = 0
      for oneValuerepeatedUint64 in repeatedUint64  {
          output += "\(indent) repeatedUint64[\(repeatedUint64ElementIndex)]: \(oneValuerepeatedUint64)\n"
          repeatedUint64ElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValuerepeatedFixed32 in repeatedFixed32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed32.hashValue
            }
            for oneValuerepeatedInt32 in repeatedInt32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt32.hashValue
            }
            for oneValuerepeatedFixed64 in repeatedFixed64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed64.hashValue
            }
            for oneValuerepeatedInt64 in repeatedInt64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt64.hashValue
            }
            for oneValuerepeatedFloat in repeatedFloat {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFloat.hashValue
            }
            for oneValuerepeatedUint64 in repeatedUint64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedUint64.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestRepeatedScalarDifferentTagSizes"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestRepeatedScalarDifferentTagSizes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestRepeatedScalarDifferentTagSizes = ProtobufUnittest.TestRepeatedScalarDifferentTagSizes()
      public func getMessage() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var repeatedFixed32:Array<UInt32> {
           get {
               return builderResult.repeatedFixed32
           }
           set (array) {
               builderResult.repeatedFixed32 = array
           }
      }
      public func setRepeatedFixed32(_ value:Array<UInt32>) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
        self.repeatedFixed32 = value
        return self
      }
      public func clearRepeatedFixed32() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
         builderResult.repeatedFixed32.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedInt32:Array<Int32> {
           get {
               return builderResult.repeatedInt32
           }
           set (array) {
               builderResult.repeatedInt32 = array
           }
      }
      public func setRepeatedInt32(_ value:Array<Int32>) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
        self.repeatedInt32 = value
        return self
      }
      public func clearRepeatedInt32() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
         builderResult.repeatedInt32.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedFixed64:Array<UInt64> {
           get {
               return builderResult.repeatedFixed64
           }
           set (array) {
               builderResult.repeatedFixed64 = array
           }
      }
      public func setRepeatedFixed64(_ value:Array<UInt64>) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
        self.repeatedFixed64 = value
        return self
      }
      public func clearRepeatedFixed64() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
         builderResult.repeatedFixed64.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedInt64:Array<Int64> {
           get {
               return builderResult.repeatedInt64
           }
           set (array) {
               builderResult.repeatedInt64 = array
           }
      }
      public func setRepeatedInt64(_ value:Array<Int64>) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
        self.repeatedInt64 = value
        return self
      }
      public func clearRepeatedInt64() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
         builderResult.repeatedInt64.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedFloat:Array<Float> {
           get {
               return builderResult.repeatedFloat
           }
           set (array) {
               builderResult.repeatedFloat = array
           }
      }
      public func setRepeatedFloat(_ value:Array<Float>) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
        self.repeatedFloat = value
        return self
      }
      public func clearRepeatedFloat() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
         builderResult.repeatedFloat.removeAll(keepingCapacity: false)
         return self
      }
      public var repeatedUint64:Array<UInt64> {
           get {
               return builderResult.repeatedUint64
           }
           set (array) {
               builderResult.repeatedUint64 = array
           }
      }
      public func setRepeatedUint64(_ value:Array<UInt64>) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
        self.repeatedUint64 = value
        return self
      }
      public func clearRepeatedUint64() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
         builderResult.repeatedUint64.removeAll(keepingCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
        builderResult = ProtobufUnittest.TestRepeatedScalarDifferentTagSizes()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
        return try ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
        let returnMe:ProtobufUnittest.TestRepeatedScalarDifferentTagSizes = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestRepeatedScalarDifferentTagSizes) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
        if other == ProtobufUnittest.TestRepeatedScalarDifferentTagSizes() {
         return self
        }
        if !other.repeatedFixed32.isEmpty {
            builderResult.repeatedFixed32 += other.repeatedFixed32
        }
        if !other.repeatedInt32.isEmpty {
            builderResult.repeatedInt32 += other.repeatedInt32
        }
        if !other.repeatedFixed64.isEmpty {
            builderResult.repeatedFixed64 += other.repeatedFixed64
        }
        if !other.repeatedInt64.isEmpty {
            builderResult.repeatedInt64 += other.repeatedInt64
        }
        if !other.repeatedFloat.isEmpty {
            builderResult.repeatedFloat += other.repeatedFloat
        }
        if !other.repeatedUint64.isEmpty {
            builderResult.repeatedUint64 += other.repeatedUint64
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 101 :
            repeatedFixed32 += [try input.readFixed32()]

          case 104 :
            repeatedInt32 += [try input.readInt32()]

          case 16369 :
            repeatedFixed64 += [try input.readFixed64()]

          case 16376 :
            repeatedInt64 += [try input.readInt64()]

          case 2097141 :
            repeatedFloat += [try input.readFloat()]

          case 2097144 :
            repeatedUint64 += [try input.readUInt64()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Test that if an optional or required message/group field appears multiple
  // times in the input, they need to be merged.
  final public class TestParsingMerge : ExtendableMessage, GeneratedMessageProtocol{


    //Nested type declaration start

      // RepeatedFieldsGenerator defines matching field types as TestParsingMerge,
      // except that all fields are repeated. In the tests, we will serialize the
      // RepeatedFieldsGenerator to bytes, and parse the bytes to TestParsingMerge.
      // Repeated fields in RepeatedFieldsGenerator are expected to be merged into
      // the corresponding required/optional fields in TestParsingMerge.
      final public class RepeatedFieldsGenerator : GeneratedMessage, GeneratedMessageProtocol {


        //Nested type declaration start

          final public class Group1 : GeneratedMessage, GeneratedMessageProtocol {
            public private(set) var field1:ProtobufUnittest.TestAllTypes!
            public private(set) var hasField1:Bool = false
            required public init() {
                 super.init()
            }
            override public func isInitialized() -> Bool {
             return true
            }
            override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
              if hasField1 {
                try output.writeMessage(11, value:field1)
              }
              try unknownFields.writeToCodedOutputStream(output)
            }
            override public func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasField1 {
                  if let varSizefield1 = field1?.computeMessageSize(11) {
                      serialize_size += varSizefield1
                  }
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1> {
              var mergedArray = Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1>()
              while let value = try parseFromDelimitedFromInputStream(input) {
                mergedArray += [value]
              }
              return mergedArray
            }
            public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1? {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder().mergeDelimitedFromInputStream(input)?.build()
            }
            public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
            }
            public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder().mergeFromInputStream(input).build()
            }
            public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder().mergeFromCodedInputStream(input).build()
            }
            public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func getBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.classBuilder() as! ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder
            }
            public func getBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
              return classBuilder() as! ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder
            }
            public override class func classBuilder() -> MessageBuilder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder()
            }
            public override func classBuilder() -> MessageBuilder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder()
            }
            public func toBuilder() throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builderWithPrototype(self)
            }
            public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder().mergeFrom(prototype)
            }
            override public func getDescription(_ indent:String) throws -> String {
              var output:String = ""
              if hasField1 {
                output += "\(indent) field1 {\n"
                if let outDescField1 = field1 {
                  output += try outDescField1.getDescription("\(indent)  ")
                }
                output += "\(indent) }\n"
              }
              output += unknownFields.getDescription(indent)
              return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasField1 {
                        if let hashValuefield1 = field1?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValuefield1
                        }
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1"
            }
            override public func className() -> String {
                return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1"
            }
            override public func classMetaType() -> GeneratedMessage.Type {
                return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.self
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
              private var builderResult:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1()
              public func getMessage() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
                  return builderResult
              }

              required override public init () {
                 super.init()
              }
              public var hasField1:Bool {
                   get {
                       return builderResult.hasField1
                   }
              }
              public var field1:ProtobufUnittest.TestAllTypes! {
                   get {
                       if field1Builder_ != nil {
                          builderResult.field1 = field1Builder_.getMessage()
                       }
                       return builderResult.field1
                   }
                   set (value) {
                       builderResult.hasField1 = true
                       builderResult.field1 = value
                   }
              }
              private var field1Builder_:ProtobufUnittest.TestAllTypes.Builder! {
                   didSet {
                      builderResult.hasField1 = true
                   }
              }
              public func getField1Builder() -> ProtobufUnittest.TestAllTypes.Builder {
                if field1Builder_ == nil {
                   field1Builder_ = ProtobufUnittest.TestAllTypes.Builder()
                   builderResult.field1 = field1Builder_.getMessage()
                   if field1 != nil {
                      try! field1Builder_.mergeFrom(field1)
                   }
                }
                return field1Builder_
              }
              public func setField1(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
                self.field1 = value
                return self
              }
              public func mergeField1(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
                if builderResult.hasField1 {
                  builderResult.field1 = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.field1).mergeFrom(value).buildPartial()
                } else {
                  builderResult.field1 = value
                }
                builderResult.hasField1 = true
                return self
              }
              public func clearField1() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
                field1Builder_ = nil
                builderResult.hasField1 = false
                builderResult.field1 = nil
                return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              public override func clear() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
                builderResult = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1()
                return self
              }
              public override func clone() throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
                return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builderWithPrototype(builderResult)
              }
              public override func build() throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
                   try checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
                let returnMe:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 = builderResult
                return returnMe
              }
              public func mergeFrom(_ other:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
                if other == ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1() {
                 return self
                }
                if (other.hasField1) {
                    try mergeField1(other.field1)
                }
                try mergeUnknownFields(other.unknownFields)
                return self
              }
              public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
                   return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  let protobufTag = try input.readTag()
                  switch protobufTag {
                  case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                  case 90 :
                    let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
                    if hasField1 {
                      try subBuilder.mergeFrom(field1)
                    }
                    try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                    field1 = subBuilder.buildPartial()

                  default:
                    if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                       unknownFields = try unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
            }

          }

        //Nested type declaration end



        //Nested type declaration start

          final public class Group2 : GeneratedMessage, GeneratedMessageProtocol {
            public private(set) var field1:ProtobufUnittest.TestAllTypes!
            public private(set) var hasField1:Bool = false
            required public init() {
                 super.init()
            }
            override public func isInitialized() -> Bool {
             return true
            }
            override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
              if hasField1 {
                try output.writeMessage(21, value:field1)
              }
              try unknownFields.writeToCodedOutputStream(output)
            }
            override public func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasField1 {
                  if let varSizefield1 = field1?.computeMessageSize(21) {
                      serialize_size += varSizefield1
                  }
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2> {
              var mergedArray = Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2>()
              while let value = try parseFromDelimitedFromInputStream(input) {
                mergedArray += [value]
              }
              return mergedArray
            }
            public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2? {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder().mergeDelimitedFromInputStream(input)?.build()
            }
            public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
            }
            public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder().mergeFromInputStream(input).build()
            }
            public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder().mergeFromCodedInputStream(input).build()
            }
            public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func getBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.classBuilder() as! ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder
            }
            public func getBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
              return classBuilder() as! ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder
            }
            public override class func classBuilder() -> MessageBuilder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder()
            }
            public override func classBuilder() -> MessageBuilder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder()
            }
            public func toBuilder() throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builderWithPrototype(self)
            }
            public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
              return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder().mergeFrom(prototype)
            }
            override public func getDescription(_ indent:String) throws -> String {
              var output:String = ""
              if hasField1 {
                output += "\(indent) field1 {\n"
                if let outDescField1 = field1 {
                  output += try outDescField1.getDescription("\(indent)  ")
                }
                output += "\(indent) }\n"
              }
              output += unknownFields.getDescription(indent)
              return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasField1 {
                        if let hashValuefield1 = field1?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValuefield1
                        }
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2"
            }
            override public func className() -> String {
                return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2"
            }
            override public func classMetaType() -> GeneratedMessage.Type {
                return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.self
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
              private var builderResult:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2()
              public func getMessage() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
                  return builderResult
              }

              required override public init () {
                 super.init()
              }
              public var hasField1:Bool {
                   get {
                       return builderResult.hasField1
                   }
              }
              public var field1:ProtobufUnittest.TestAllTypes! {
                   get {
                       if field1Builder_ != nil {
                          builderResult.field1 = field1Builder_.getMessage()
                       }
                       return builderResult.field1
                   }
                   set (value) {
                       builderResult.hasField1 = true
                       builderResult.field1 = value
                   }
              }
              private var field1Builder_:ProtobufUnittest.TestAllTypes.Builder! {
                   didSet {
                      builderResult.hasField1 = true
                   }
              }
              public func getField1Builder() -> ProtobufUnittest.TestAllTypes.Builder {
                if field1Builder_ == nil {
                   field1Builder_ = ProtobufUnittest.TestAllTypes.Builder()
                   builderResult.field1 = field1Builder_.getMessage()
                   if field1 != nil {
                      try! field1Builder_.mergeFrom(field1)
                   }
                }
                return field1Builder_
              }
              public func setField1(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
                self.field1 = value
                return self
              }
              public func mergeField1(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
                if builderResult.hasField1 {
                  builderResult.field1 = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.field1).mergeFrom(value).buildPartial()
                } else {
                  builderResult.field1 = value
                }
                builderResult.hasField1 = true
                return self
              }
              public func clearField1() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
                field1Builder_ = nil
                builderResult.hasField1 = false
                builderResult.field1 = nil
                return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              public override func clear() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
                builderResult = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2()
                return self
              }
              public override func clone() throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
                return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builderWithPrototype(builderResult)
              }
              public override func build() throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
                   try checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
                let returnMe:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 = builderResult
                return returnMe
              }
              public func mergeFrom(_ other:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
                if other == ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2() {
                 return self
                }
                if (other.hasField1) {
                    try mergeField1(other.field1)
                }
                try mergeUnknownFields(other.unknownFields)
                return self
              }
              public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
                   return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  let protobufTag = try input.readTag()
                  switch protobufTag {
                  case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                  case 170 :
                    let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
                    if hasField1 {
                      try subBuilder.mergeFrom(field1)
                    }
                    try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                    field1 = subBuilder.buildPartial()

                  default:
                    if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                       unknownFields = try unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
            }

          }

        //Nested type declaration end

        public private(set) var field1:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
        public private(set) var field2:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
        public private(set) var field3:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
        public private(set) var group1:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1>  = Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1>()
        public private(set) var group2:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2>  = Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2>()
        public private(set) var ext1:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
        public private(set) var ext2:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          for oneElementfield1 in field1 {
              try output.writeMessage(1, value:oneElementfield1)
          }
          for oneElementfield2 in field2 {
              try output.writeMessage(2, value:oneElementfield2)
          }
          for oneElementfield3 in field3 {
              try output.writeMessage(3, value:oneElementfield3)
          }
          for oneElementgroup1 in group1 {
              try output.writeGroup(10, value:oneElementgroup1)
          }
          for oneElementgroup2 in group2 {
              try output.writeGroup(20, value:oneElementgroup2)
          }
          for oneElementext1 in ext1 {
              try output.writeMessage(1000, value:oneElementext1)
          }
          for oneElementext2 in ext2 {
              try output.writeMessage(1001, value:oneElementext2)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          for oneElementfield1 in field1 {
              serialize_size += oneElementfield1.computeMessageSize(1)
          }
          for oneElementfield2 in field2 {
              serialize_size += oneElementfield2.computeMessageSize(2)
          }
          for oneElementfield3 in field3 {
              serialize_size += oneElementfield3.computeMessageSize(3)
          }
          for oneElementgroup1 in group1 {
              serialize_size += oneElementgroup1.computeGroupSize(10)
          }
          for oneElementgroup2 in group2 {
              serialize_size += oneElementgroup2.computeGroupSize(20)
          }
          for oneElementext1 in ext1 {
              serialize_size += oneElementext1.computeMessageSize(1000)
          }
          for oneElementext2 in ext2 {
              serialize_size += oneElementext2.computeMessageSize(1001)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator> {
          var mergedArray = Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator? {
          return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.classBuilder() as! ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
          return classBuilder() as! ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
          return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
          return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          var field1ElementIndex:Int = 0
          for oneElementfield1 in field1 {
              output += "\(indent) field1[\(field1ElementIndex)] {\n"
              output += try oneElementfield1.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              field1ElementIndex += 1
          }
          var field2ElementIndex:Int = 0
          for oneElementfield2 in field2 {
              output += "\(indent) field2[\(field2ElementIndex)] {\n"
              output += try oneElementfield2.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              field2ElementIndex += 1
          }
          var field3ElementIndex:Int = 0
          for oneElementfield3 in field3 {
              output += "\(indent) field3[\(field3ElementIndex)] {\n"
              output += try oneElementfield3.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              field3ElementIndex += 1
          }
          var group1ElementIndex:Int = 0
          for oneElementgroup1 in group1 {
              output += "\(indent) group1[\(group1ElementIndex)] {\n"
              output += try oneElementgroup1.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              group1ElementIndex += 1
          }
          var group2ElementIndex:Int = 0
          for oneElementgroup2 in group2 {
              output += "\(indent) group2[\(group2ElementIndex)] {\n"
              output += try oneElementgroup2.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              group2ElementIndex += 1
          }
          var ext1ElementIndex:Int = 0
          for oneElementext1 in ext1 {
              output += "\(indent) ext1[\(ext1ElementIndex)] {\n"
              output += try oneElementext1.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              ext1ElementIndex += 1
          }
          var ext2ElementIndex:Int = 0
          for oneElementext2 in ext2 {
              output += "\(indent) ext2[\(ext2ElementIndex)] {\n"
              output += try oneElementext2.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              ext2ElementIndex += 1
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementfield1 in field1 {
                    hashCode = (hashCode &* 31) &+ oneElementfield1.hashValue
                }
                for oneElementfield2 in field2 {
                    hashCode = (hashCode &* 31) &+ oneElementfield2.hashValue
                }
                for oneElementfield3 in field3 {
                    hashCode = (hashCode &* 31) &+ oneElementfield3.hashValue
                }
                for oneElementgroup1 in group1 {
                    hashCode = (hashCode &* 31) &+ oneElementgroup1.hashValue
                }
                for oneElementgroup2 in group2 {
                    hashCode = (hashCode &* 31) &+ oneElementgroup2.hashValue
                }
                for oneElementext1 in ext1 {
                    hashCode = (hashCode &* 31) &+ oneElementext1.hashValue
                }
                for oneElementext2 in ext2 {
                    hashCode = (hashCode &* 31) &+ oneElementext2.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator()
          public func getMessage() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var field1:Array<ProtobufUnittest.TestAllTypes> {
               get {
                   return builderResult.field1
               }
               set (value) {
                   builderResult.field1 = value
               }
          }
          public func setField1(_ value:Array<ProtobufUnittest.TestAllTypes>) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            self.field1 = value
            return self
          }
          public func clearField1() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            builderResult.field1.removeAll(keepingCapacity: false)
            return self
          }
          public var field2:Array<ProtobufUnittest.TestAllTypes> {
               get {
                   return builderResult.field2
               }
               set (value) {
                   builderResult.field2 = value
               }
          }
          public func setField2(_ value:Array<ProtobufUnittest.TestAllTypes>) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            self.field2 = value
            return self
          }
          public func clearField2() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            builderResult.field2.removeAll(keepingCapacity: false)
            return self
          }
          public var field3:Array<ProtobufUnittest.TestAllTypes> {
               get {
                   return builderResult.field3
               }
               set (value) {
                   builderResult.field3 = value
               }
          }
          public func setField3(_ value:Array<ProtobufUnittest.TestAllTypes>) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            self.field3 = value
            return self
          }
          public func clearField3() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            builderResult.field3.removeAll(keepingCapacity: false)
            return self
          }
          public var group1:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1> {
               get {
                   return builderResult.group1
               }
               set (value) {
                   builderResult.group1 = value
               }
          }
          public func setGroup1(_ value:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1>) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            self.group1 = value
            return self
          }
          public func clearGroup1() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            builderResult.group1.removeAll(keepingCapacity: false)
            return self
          }
          public var group2:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2> {
               get {
                   return builderResult.group2
               }
               set (value) {
                   builderResult.group2 = value
               }
          }
          public func setGroup2(_ value:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2>) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            self.group2 = value
            return self
          }
          public func clearGroup2() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            builderResult.group2.removeAll(keepingCapacity: false)
            return self
          }
          public var ext1:Array<ProtobufUnittest.TestAllTypes> {
               get {
                   return builderResult.ext1
               }
               set (value) {
                   builderResult.ext1 = value
               }
          }
          public func setExt1(_ value:Array<ProtobufUnittest.TestAllTypes>) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            self.ext1 = value
            return self
          }
          public func clearExt1() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            builderResult.ext1.removeAll(keepingCapacity: false)
            return self
          }
          public var ext2:Array<ProtobufUnittest.TestAllTypes> {
               get {
                   return builderResult.ext2
               }
               set (value) {
                   builderResult.ext2 = value
               }
          }
          public func setExt2(_ value:Array<ProtobufUnittest.TestAllTypes>) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            self.ext2 = value
            return self
          }
          public func clearExt2() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            builderResult.ext2.removeAll(keepingCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            builderResult = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            return try ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
            let returnMe:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            if other == ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator() {
             return self
            }
            if !other.field1.isEmpty  {
               builderResult.field1 += other.field1
            }
            if !other.field2.isEmpty  {
               builderResult.field2 += other.field2
            }
            if !other.field3.isEmpty  {
               builderResult.field3 += other.field3
            }
            if !other.group1.isEmpty  {
               builderResult.group1 += other.group1
            }
            if !other.group2.isEmpty  {
               builderResult.group2 += other.group2
            }
            if !other.ext1.isEmpty  {
               builderResult.ext1 += other.ext1
            }
            if !other.ext2.isEmpty  {
               builderResult.ext2 += other.ext2
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                let subBuilder = ProtobufUnittest.TestAllTypes.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                field1 += [subBuilder.buildPartial()]

              case 18 :
                let subBuilder = ProtobufUnittest.TestAllTypes.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                field2 += [subBuilder.buildPartial()]

              case 26 :
                let subBuilder = ProtobufUnittest.TestAllTypes.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                field3 += [subBuilder.buildPartial()]

              case 83 :
                let subBuilder = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.Builder()
                try input.readGroup(10,builder:subBuilder,extensionRegistry:extensionRegistry)
                group1 += [subBuilder.buildPartial()]

              case 163 :
                let subBuilder = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.Builder()
                try input.readGroup(20,builder:subBuilder,extensionRegistry:extensionRegistry)
                group2 += [subBuilder.buildPartial()]

              case 8002 :
                let subBuilder = ProtobufUnittest.TestAllTypes.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                ext1 += [subBuilder.buildPartial()]

              case 8010 :
                let subBuilder = ProtobufUnittest.TestAllTypes.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                ext2 += [subBuilder.buildPartial()]

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class OptionalGroup : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var optionalGroupAllTypes:ProtobufUnittest.TestAllTypes!
        public private(set) var hasOptionalGroupAllTypes:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasOptionalGroupAllTypes {
            try output.writeMessage(11, value:optionalGroupAllTypes)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasOptionalGroupAllTypes {
              if let varSizeoptionalGroupAllTypes = optionalGroupAllTypes?.computeMessageSize(11) {
                  serialize_size += varSizeoptionalGroupAllTypes
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestParsingMerge.OptionalGroup> {
          var mergedArray = Array<ProtobufUnittest.TestParsingMerge.OptionalGroup>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup? {
          return try ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return try ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return try ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return try ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return try ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return try ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return try ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.classBuilder() as! ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
          return classBuilder() as! ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
          return try ProtobufUnittest.TestParsingMerge.OptionalGroup.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestParsingMerge.OptionalGroup) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
          return try ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasOptionalGroupAllTypes {
            output += "\(indent) optionalGroupAllTypes {\n"
            if let outDescOptionalGroupAllTypes = optionalGroupAllTypes {
              output += try outDescOptionalGroupAllTypes.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasOptionalGroupAllTypes {
                    if let hashValueoptionalGroupAllTypes = optionalGroupAllTypes?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueoptionalGroupAllTypes
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.OptionalGroup"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.OptionalGroup"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestParsingMerge.OptionalGroup.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestParsingMerge.OptionalGroup = ProtobufUnittest.TestParsingMerge.OptionalGroup()
          public func getMessage() -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasOptionalGroupAllTypes:Bool {
               get {
                   return builderResult.hasOptionalGroupAllTypes
               }
          }
          public var optionalGroupAllTypes:ProtobufUnittest.TestAllTypes! {
               get {
                   if optionalGroupAllTypesBuilder_ != nil {
                      builderResult.optionalGroupAllTypes = optionalGroupAllTypesBuilder_.getMessage()
                   }
                   return builderResult.optionalGroupAllTypes
               }
               set (value) {
                   builderResult.hasOptionalGroupAllTypes = true
                   builderResult.optionalGroupAllTypes = value
               }
          }
          private var optionalGroupAllTypesBuilder_:ProtobufUnittest.TestAllTypes.Builder! {
               didSet {
                  builderResult.hasOptionalGroupAllTypes = true
               }
          }
          public func getOptionalGroupAllTypesBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
            if optionalGroupAllTypesBuilder_ == nil {
               optionalGroupAllTypesBuilder_ = ProtobufUnittest.TestAllTypes.Builder()
               builderResult.optionalGroupAllTypes = optionalGroupAllTypesBuilder_.getMessage()
               if optionalGroupAllTypes != nil {
                  try! optionalGroupAllTypesBuilder_.mergeFrom(optionalGroupAllTypes)
               }
            }
            return optionalGroupAllTypesBuilder_
          }
          public func setOptionalGroupAllTypes(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
            self.optionalGroupAllTypes = value
            return self
          }
          public func mergeOptionalGroupAllTypes(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
            if builderResult.hasOptionalGroupAllTypes {
              builderResult.optionalGroupAllTypes = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.optionalGroupAllTypes).mergeFrom(value).buildPartial()
            } else {
              builderResult.optionalGroupAllTypes = value
            }
            builderResult.hasOptionalGroupAllTypes = true
            return self
          }
          public func clearOptionalGroupAllTypes() -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
            optionalGroupAllTypesBuilder_ = nil
            builderResult.hasOptionalGroupAllTypes = false
            builderResult.optionalGroupAllTypes = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
            builderResult = ProtobufUnittest.TestParsingMerge.OptionalGroup()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
            return try ProtobufUnittest.TestParsingMerge.OptionalGroup.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
            let returnMe:ProtobufUnittest.TestParsingMerge.OptionalGroup = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestParsingMerge.OptionalGroup) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
            if other == ProtobufUnittest.TestParsingMerge.OptionalGroup() {
             return self
            }
            if (other.hasOptionalGroupAllTypes) {
                try mergeOptionalGroupAllTypes(other.optionalGroupAllTypes)
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 90 :
                let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
                if hasOptionalGroupAllTypes {
                  try subBuilder.mergeFrom(optionalGroupAllTypes)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalGroupAllTypes = subBuilder.buildPartial()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class RepeatedGroup : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var repeatedGroupAllTypes:ProtobufUnittest.TestAllTypes!
        public private(set) var hasRepeatedGroupAllTypes:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
          if hasRepeatedGroupAllTypes {
            try output.writeMessage(21, value:repeatedGroupAllTypes)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasRepeatedGroupAllTypes {
              if let varSizerepeatedGroupAllTypes = repeatedGroupAllTypes?.computeMessageSize(21) {
                  serialize_size += varSizerepeatedGroupAllTypes
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestParsingMerge.RepeatedGroup> {
          var mergedArray = Array<ProtobufUnittest.TestParsingMerge.RepeatedGroup>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup? {
          return try ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return try ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return try ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return try ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return try ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return try ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return try ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.classBuilder() as! ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder
        }
        public func getBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
          return classBuilder() as! ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
          return try ProtobufUnittest.TestParsingMerge.RepeatedGroup.builderWithPrototype(self)
        }
        public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestParsingMerge.RepeatedGroup) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
          return try ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder().mergeFrom(prototype)
        }
        override public func getDescription(_ indent:String) throws -> String {
          var output:String = ""
          if hasRepeatedGroupAllTypes {
            output += "\(indent) repeatedGroupAllTypes {\n"
            if let outDescRepeatedGroupAllTypes = repeatedGroupAllTypes {
              output += try outDescRepeatedGroupAllTypes.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasRepeatedGroupAllTypes {
                    if let hashValuerepeatedGroupAllTypes = repeatedGroupAllTypes?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuerepeatedGroupAllTypes
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.RepeatedGroup"
        }
        override public func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.RepeatedGroup"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestParsingMerge.RepeatedGroup.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.TestParsingMerge.RepeatedGroup = ProtobufUnittest.TestParsingMerge.RepeatedGroup()
          public func getMessage() -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasRepeatedGroupAllTypes:Bool {
               get {
                   return builderResult.hasRepeatedGroupAllTypes
               }
          }
          public var repeatedGroupAllTypes:ProtobufUnittest.TestAllTypes! {
               get {
                   if repeatedGroupAllTypesBuilder_ != nil {
                      builderResult.repeatedGroupAllTypes = repeatedGroupAllTypesBuilder_.getMessage()
                   }
                   return builderResult.repeatedGroupAllTypes
               }
               set (value) {
                   builderResult.hasRepeatedGroupAllTypes = true
                   builderResult.repeatedGroupAllTypes = value
               }
          }
          private var repeatedGroupAllTypesBuilder_:ProtobufUnittest.TestAllTypes.Builder! {
               didSet {
                  builderResult.hasRepeatedGroupAllTypes = true
               }
          }
          public func getRepeatedGroupAllTypesBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
            if repeatedGroupAllTypesBuilder_ == nil {
               repeatedGroupAllTypesBuilder_ = ProtobufUnittest.TestAllTypes.Builder()
               builderResult.repeatedGroupAllTypes = repeatedGroupAllTypesBuilder_.getMessage()
               if repeatedGroupAllTypes != nil {
                  try! repeatedGroupAllTypesBuilder_.mergeFrom(repeatedGroupAllTypes)
               }
            }
            return repeatedGroupAllTypesBuilder_
          }
          public func setRepeatedGroupAllTypes(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
            self.repeatedGroupAllTypes = value
            return self
          }
          public func mergeRepeatedGroupAllTypes(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
            if builderResult.hasRepeatedGroupAllTypes {
              builderResult.repeatedGroupAllTypes = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.repeatedGroupAllTypes).mergeFrom(value).buildPartial()
            } else {
              builderResult.repeatedGroupAllTypes = value
            }
            builderResult.hasRepeatedGroupAllTypes = true
            return self
          }
          public func clearRepeatedGroupAllTypes() -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
            repeatedGroupAllTypesBuilder_ = nil
            builderResult.hasRepeatedGroupAllTypes = false
            builderResult.repeatedGroupAllTypes = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
            builderResult = ProtobufUnittest.TestParsingMerge.RepeatedGroup()
            return self
          }
          public override func clone() throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
            return try ProtobufUnittest.TestParsingMerge.RepeatedGroup.builderWithPrototype(builderResult)
          }
          public override func build() throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
            let returnMe:ProtobufUnittest.TestParsingMerge.RepeatedGroup = builderResult
            return returnMe
          }
          public func mergeFrom(_ other:ProtobufUnittest.TestParsingMerge.RepeatedGroup) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
            if other == ProtobufUnittest.TestParsingMerge.RepeatedGroup() {
             return self
            }
            if (other.hasRepeatedGroupAllTypes) {
                try mergeRepeatedGroupAllTypes(other.repeatedGroupAllTypes)
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 170 :
                let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
                if hasRepeatedGroupAllTypes {
                  try subBuilder.mergeFrom(repeatedGroupAllTypes)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                repeatedGroupAllTypes = subBuilder.buildPartial()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end

    public private(set) var requiredAllTypes:ProtobufUnittest.TestAllTypes!
    public private(set) var hasRequiredAllTypes:Bool = false
    public private(set) var optionalAllTypes:ProtobufUnittest.TestAllTypes!
    public private(set) var hasOptionalAllTypes:Bool = false
    public private(set) var repeatedAllTypes:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
    public private(set) var optionalGroup:ProtobufUnittest.TestParsingMerge.OptionalGroup!
    public private(set) var hasOptionalGroup:Bool = false
    public private(set) var repeatedGroup:Array<ProtobufUnittest.TestParsingMerge.RepeatedGroup>  = Array<ProtobufUnittest.TestParsingMerge.RepeatedGroup>()
    public class func optionalExt() -> ConcreateExtensionField {
         return TestParsingMergeoptionalExt
    }
    public class func repeatedExt() -> ConcreateExtensionField {
         return TestParsingMergerepeatedExt
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !hasRequiredAllTypes {
        return false
      }
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasRequiredAllTypes {
        try output.writeMessage(1, value:requiredAllTypes)
      }
      if hasOptionalAllTypes {
        try output.writeMessage(2, value:optionalAllTypes)
      }
      for oneElementrepeatedAllTypes in repeatedAllTypes {
          try output.writeMessage(3, value:oneElementrepeatedAllTypes)
      }
      if hasOptionalGroup {
        try output.writeGroup(10, value:optionalGroup)
      }
      for oneElementrepeatedGroup in repeatedGroup {
          try output.writeGroup(20, value:oneElementrepeatedGroup)
      }
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasRequiredAllTypes {
          if let varSizerequiredAllTypes = requiredAllTypes?.computeMessageSize(1) {
              serialize_size += varSizerequiredAllTypes
          }
      }
      if hasOptionalAllTypes {
          if let varSizeoptionalAllTypes = optionalAllTypes?.computeMessageSize(2) {
              serialize_size += varSizeoptionalAllTypes
          }
      }
      for oneElementrepeatedAllTypes in repeatedAllTypes {
          serialize_size += oneElementrepeatedAllTypes.computeMessageSize(3)
      }
      if hasOptionalGroup {
          if let varSizeoptionalGroup = optionalGroup?.computeGroupSize(10) {
              serialize_size += varSizeoptionalGroup
          }
      }
      for oneElementrepeatedGroup in repeatedGroup {
          serialize_size += oneElementrepeatedGroup.computeGroupSize(20)
      }
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestParsingMerge> {
      var mergedArray = Array<ProtobufUnittest.TestParsingMerge>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge? {
      return try ProtobufUnittest.TestParsingMerge.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestParsingMerge {
      return try ProtobufUnittest.TestParsingMerge.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge {
      return try ProtobufUnittest.TestParsingMerge.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestParsingMerge {
      return try ProtobufUnittest.TestParsingMerge.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge {
      return try ProtobufUnittest.TestParsingMerge.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge {
      return try ProtobufUnittest.TestParsingMerge.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge {
      return try ProtobufUnittest.TestParsingMerge.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestParsingMerge.Builder {
      return ProtobufUnittest.TestParsingMerge.classBuilder() as! ProtobufUnittest.TestParsingMerge.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestParsingMerge.Builder {
      return classBuilder() as! ProtobufUnittest.TestParsingMerge.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestParsingMerge.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestParsingMerge.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestParsingMerge.Builder {
      return try ProtobufUnittest.TestParsingMerge.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestParsingMerge) throws -> ProtobufUnittest.TestParsingMerge.Builder {
      return try ProtobufUnittest.TestParsingMerge.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasRequiredAllTypes {
        output += "\(indent) requiredAllTypes {\n"
        if let outDescRequiredAllTypes = requiredAllTypes {
          output += try outDescRequiredAllTypes.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasOptionalAllTypes {
        output += "\(indent) optionalAllTypes {\n"
        if let outDescOptionalAllTypes = optionalAllTypes {
          output += try outDescOptionalAllTypes.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var repeatedAllTypesElementIndex:Int = 0
      for oneElementrepeatedAllTypes in repeatedAllTypes {
          output += "\(indent) repeatedAllTypes[\(repeatedAllTypesElementIndex)] {\n"
          output += try oneElementrepeatedAllTypes.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedAllTypesElementIndex += 1
      }
      if hasOptionalGroup {
        output += "\(indent) optionalGroup {\n"
        if let outDescOptionalGroup = optionalGroup {
          output += try outDescOptionalGroup.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var repeatedGroupElementIndex:Int = 0
      for oneElementrepeatedGroup in repeatedGroup {
          output += "\(indent) repeatedGroup[\(repeatedGroupElementIndex)] {\n"
          output += try oneElementrepeatedGroup.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedGroupElementIndex += 1
      }
      output += try getExtensionDescription(Int32(1000), endExclusive:Int32(536870912), indent:indent)
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasRequiredAllTypes {
                if let hashValuerequiredAllTypes = requiredAllTypes?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuerequiredAllTypes
                }
            }
            if hasOptionalAllTypes {
                if let hashValueoptionalAllTypes = optionalAllTypes?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalAllTypes
                }
            }
            for oneElementrepeatedAllTypes in repeatedAllTypes {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedAllTypes.hashValue
            }
            if hasOptionalGroup {
                if let hashValueoptionalGroup = optionalGroup?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalGroup
                }
            }
            for oneElementrepeatedGroup in repeatedGroup {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedGroup.hashValue
            }
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestParsingMerge"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestParsingMerge"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestParsingMerge.self
    }
    //Meta information declaration end

    final public class Builder : ExtendableMessageBuilder {
      private var builderResult:ProtobufUnittest.TestParsingMerge = ProtobufUnittest.TestParsingMerge()
      public func getMessage() -> ProtobufUnittest.TestParsingMerge {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasRequiredAllTypes:Bool {
           get {
               return builderResult.hasRequiredAllTypes
           }
      }
      public var requiredAllTypes:ProtobufUnittest.TestAllTypes! {
           get {
               if requiredAllTypesBuilder_ != nil {
                  builderResult.requiredAllTypes = requiredAllTypesBuilder_.getMessage()
               }
               return builderResult.requiredAllTypes
           }
           set (value) {
               builderResult.hasRequiredAllTypes = true
               builderResult.requiredAllTypes = value
           }
      }
      private var requiredAllTypesBuilder_:ProtobufUnittest.TestAllTypes.Builder! {
           didSet {
              builderResult.hasRequiredAllTypes = true
           }
      }
      public func getRequiredAllTypesBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
        if requiredAllTypesBuilder_ == nil {
           requiredAllTypesBuilder_ = ProtobufUnittest.TestAllTypes.Builder()
           builderResult.requiredAllTypes = requiredAllTypesBuilder_.getMessage()
           if requiredAllTypes != nil {
              try! requiredAllTypesBuilder_.mergeFrom(requiredAllTypes)
           }
        }
        return requiredAllTypesBuilder_
      }
      public func setRequiredAllTypes(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.TestParsingMerge.Builder {
        self.requiredAllTypes = value
        return self
      }
      public func mergeRequiredAllTypes(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestParsingMerge.Builder {
        if builderResult.hasRequiredAllTypes {
          builderResult.requiredAllTypes = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.requiredAllTypes).mergeFrom(value).buildPartial()
        } else {
          builderResult.requiredAllTypes = value
        }
        builderResult.hasRequiredAllTypes = true
        return self
      }
      public func clearRequiredAllTypes() -> ProtobufUnittest.TestParsingMerge.Builder {
        requiredAllTypesBuilder_ = nil
        builderResult.hasRequiredAllTypes = false
        builderResult.requiredAllTypes = nil
        return self
      }
      public var hasOptionalAllTypes:Bool {
           get {
               return builderResult.hasOptionalAllTypes
           }
      }
      public var optionalAllTypes:ProtobufUnittest.TestAllTypes! {
           get {
               if optionalAllTypesBuilder_ != nil {
                  builderResult.optionalAllTypes = optionalAllTypesBuilder_.getMessage()
               }
               return builderResult.optionalAllTypes
           }
           set (value) {
               builderResult.hasOptionalAllTypes = true
               builderResult.optionalAllTypes = value
           }
      }
      private var optionalAllTypesBuilder_:ProtobufUnittest.TestAllTypes.Builder! {
           didSet {
              builderResult.hasOptionalAllTypes = true
           }
      }
      public func getOptionalAllTypesBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
        if optionalAllTypesBuilder_ == nil {
           optionalAllTypesBuilder_ = ProtobufUnittest.TestAllTypes.Builder()
           builderResult.optionalAllTypes = optionalAllTypesBuilder_.getMessage()
           if optionalAllTypes != nil {
              try! optionalAllTypesBuilder_.mergeFrom(optionalAllTypes)
           }
        }
        return optionalAllTypesBuilder_
      }
      public func setOptionalAllTypes(_ value:ProtobufUnittest.TestAllTypes!) -> ProtobufUnittest.TestParsingMerge.Builder {
        self.optionalAllTypes = value
        return self
      }
      public func mergeOptionalAllTypes(_ value:ProtobufUnittest.TestAllTypes) throws -> ProtobufUnittest.TestParsingMerge.Builder {
        if builderResult.hasOptionalAllTypes {
          builderResult.optionalAllTypes = try ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.optionalAllTypes).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalAllTypes = value
        }
        builderResult.hasOptionalAllTypes = true
        return self
      }
      public func clearOptionalAllTypes() -> ProtobufUnittest.TestParsingMerge.Builder {
        optionalAllTypesBuilder_ = nil
        builderResult.hasOptionalAllTypes = false
        builderResult.optionalAllTypes = nil
        return self
      }
      public var repeatedAllTypes:Array<ProtobufUnittest.TestAllTypes> {
           get {
               return builderResult.repeatedAllTypes
           }
           set (value) {
               builderResult.repeatedAllTypes = value
           }
      }
      public func setRepeatedAllTypes(_ value:Array<ProtobufUnittest.TestAllTypes>) -> ProtobufUnittest.TestParsingMerge.Builder {
        self.repeatedAllTypes = value
        return self
      }
      public func clearRepeatedAllTypes() -> ProtobufUnittest.TestParsingMerge.Builder {
        builderResult.repeatedAllTypes.removeAll(keepingCapacity: false)
        return self
      }
      public var hasOptionalGroup:Bool {
           get {
               return builderResult.hasOptionalGroup
           }
      }
      public var optionalGroup:ProtobufUnittest.TestParsingMerge.OptionalGroup! {
           get {
               if optionalGroupBuilder_ != nil {
                  builderResult.optionalGroup = optionalGroupBuilder_.getMessage()
               }
               return builderResult.optionalGroup
           }
           set (value) {
               builderResult.hasOptionalGroup = true
               builderResult.optionalGroup = value
           }
      }
      private var optionalGroupBuilder_:ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder! {
           didSet {
              builderResult.hasOptionalGroup = true
           }
      }
      public func getOptionalGroupBuilder() -> ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder {
        if optionalGroupBuilder_ == nil {
           optionalGroupBuilder_ = ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder()
           builderResult.optionalGroup = optionalGroupBuilder_.getMessage()
           if optionalGroup != nil {
              try! optionalGroupBuilder_.mergeFrom(optionalGroup)
           }
        }
        return optionalGroupBuilder_
      }
      public func setOptionalGroup(_ value:ProtobufUnittest.TestParsingMerge.OptionalGroup!) -> ProtobufUnittest.TestParsingMerge.Builder {
        self.optionalGroup = value
        return self
      }
      public func mergeOptionalGroup(_ value:ProtobufUnittest.TestParsingMerge.OptionalGroup) throws -> ProtobufUnittest.TestParsingMerge.Builder {
        if builderResult.hasOptionalGroup {
          builderResult.optionalGroup = try ProtobufUnittest.TestParsingMerge.OptionalGroup.builderWithPrototype(builderResult.optionalGroup).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalGroup = value
        }
        builderResult.hasOptionalGroup = true
        return self
      }
      public func clearOptionalGroup() -> ProtobufUnittest.TestParsingMerge.Builder {
        optionalGroupBuilder_ = nil
        builderResult.hasOptionalGroup = false
        builderResult.optionalGroup = nil
        return self
      }
      public var repeatedGroup:Array<ProtobufUnittest.TestParsingMerge.RepeatedGroup> {
           get {
               return builderResult.repeatedGroup
           }
           set (value) {
               builderResult.repeatedGroup = value
           }
      }
      public func setRepeatedGroup(_ value:Array<ProtobufUnittest.TestParsingMerge.RepeatedGroup>) -> ProtobufUnittest.TestParsingMerge.Builder {
        self.repeatedGroup = value
        return self
      }
      public func clearRepeatedGroup() -> ProtobufUnittest.TestParsingMerge.Builder {
        builderResult.repeatedGroup.removeAll(keepingCapacity: false)
        return self
      }
      override public var internalGetResult:ExtendableMessage {
           get {
               return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestParsingMerge.Builder {
        builderResult = ProtobufUnittest.TestParsingMerge()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestParsingMerge.Builder {
        return try ProtobufUnittest.TestParsingMerge.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestParsingMerge {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestParsingMerge {
        let returnMe:ProtobufUnittest.TestParsingMerge = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestParsingMerge) throws -> ProtobufUnittest.TestParsingMerge.Builder {
        if other == ProtobufUnittest.TestParsingMerge() {
         return self
        }
        if (other.hasRequiredAllTypes) {
            try mergeRequiredAllTypes(other.requiredAllTypes)
        }
        if (other.hasOptionalAllTypes) {
            try mergeOptionalAllTypes(other.optionalAllTypes)
        }
        if !other.repeatedAllTypes.isEmpty  {
           builderResult.repeatedAllTypes += other.repeatedAllTypes
        }
        if (other.hasOptionalGroup) {
            try mergeOptionalGroup(other.optionalGroup)
        }
        if !other.repeatedGroup.isEmpty  {
           builderResult.repeatedGroup += other.repeatedGroup
        }
        try mergeExtensionFields(other)
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestParsingMerge.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestParsingMerge.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
            if hasRequiredAllTypes {
              try subBuilder.mergeFrom(requiredAllTypes)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            requiredAllTypes = subBuilder.buildPartial()

          case 18 :
            let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
            if hasOptionalAllTypes {
              try subBuilder.mergeFrom(optionalAllTypes)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalAllTypes = subBuilder.buildPartial()

          case 26 :
            let subBuilder = ProtobufUnittest.TestAllTypes.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedAllTypes += [subBuilder.buildPartial()]

          case 83 :
            let subBuilder:ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder = ProtobufUnittest.TestParsingMerge.OptionalGroup.Builder()
            if hasOptionalGroup {
              try subBuilder.mergeFrom(optionalGroup)
            }
            try input.readGroup(10, builder:subBuilder, extensionRegistry:extensionRegistry)
            optionalGroup = subBuilder.buildPartial()

          case 163 :
            let subBuilder = ProtobufUnittest.TestParsingMerge.RepeatedGroup.Builder()
            try input.readGroup(20,builder:subBuilder,extensionRegistry:extensionRegistry)
            repeatedGroup += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TestCommentInjectionMessage : GeneratedMessage, GeneratedMessageProtocol {
    // */ <- This should not close the generated doc comment
    public private(set) var a:String = "*/ <- Neither should this."

    public private(set) var hasA:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasA {
        try output.writeString(1, value:a)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.TestCommentInjectionMessage> {
      var mergedArray = Array<ProtobufUnittest.TestCommentInjectionMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestCommentInjectionMessage? {
      return try ProtobufUnittest.TestCommentInjectionMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.TestCommentInjectionMessage {
      return try ProtobufUnittest.TestCommentInjectionMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestCommentInjectionMessage {
      return try ProtobufUnittest.TestCommentInjectionMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.TestCommentInjectionMessage {
      return try ProtobufUnittest.TestCommentInjectionMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestCommentInjectionMessage {
      return try ProtobufUnittest.TestCommentInjectionMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestCommentInjectionMessage {
      return try ProtobufUnittest.TestCommentInjectionMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestCommentInjectionMessage {
      return try ProtobufUnittest.TestCommentInjectionMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestCommentInjectionMessage.Builder {
      return ProtobufUnittest.TestCommentInjectionMessage.classBuilder() as! ProtobufUnittest.TestCommentInjectionMessage.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestCommentInjectionMessage.Builder {
      return classBuilder() as! ProtobufUnittest.TestCommentInjectionMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestCommentInjectionMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestCommentInjectionMessage.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestCommentInjectionMessage.Builder {
      return try ProtobufUnittest.TestCommentInjectionMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.TestCommentInjectionMessage) throws -> ProtobufUnittest.TestCommentInjectionMessage.Builder {
      return try ProtobufUnittest.TestCommentInjectionMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestCommentInjectionMessage"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestCommentInjectionMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestCommentInjectionMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestCommentInjectionMessage = ProtobufUnittest.TestCommentInjectionMessage()
      public func getMessage() -> ProtobufUnittest.TestCommentInjectionMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasA:Bool {
           get {
                return builderResult.hasA
           }
      }
      public var a:String {
           get {
                return builderResult.a
           }
           set (value) {
               builderResult.hasA = true
               builderResult.a = value
           }
      }
      public func setA(_ value:String) -> ProtobufUnittest.TestCommentInjectionMessage.Builder {
        self.a = value
        return self
      }
      public func clearA() -> ProtobufUnittest.TestCommentInjectionMessage.Builder{
           builderResult.hasA = false
           builderResult.a = "*/ <- Neither should this."
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.TestCommentInjectionMessage.Builder {
        builderResult = ProtobufUnittest.TestCommentInjectionMessage()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.TestCommentInjectionMessage.Builder {
        return try ProtobufUnittest.TestCommentInjectionMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.TestCommentInjectionMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestCommentInjectionMessage {
        let returnMe:ProtobufUnittest.TestCommentInjectionMessage = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.TestCommentInjectionMessage) throws -> ProtobufUnittest.TestCommentInjectionMessage.Builder {
        if other == ProtobufUnittest.TestCommentInjectionMessage() {
         return self
        }
        if other.hasA {
             a = other.a
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.TestCommentInjectionMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestCommentInjectionMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            a = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  // Test that RPC services work.
  final public class FooRequest : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.FooRequest> {
      var mergedArray = Array<ProtobufUnittest.FooRequest>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.FooRequest? {
      return try ProtobufUnittest.FooRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.FooRequest {
      return try ProtobufUnittest.FooRequest.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooRequest {
      return try ProtobufUnittest.FooRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.FooRequest {
      return try ProtobufUnittest.FooRequest.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooRequest {
      return try ProtobufUnittest.FooRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.FooRequest {
      return try ProtobufUnittest.FooRequest.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooRequest {
      return try ProtobufUnittest.FooRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.FooRequest.Builder {
      return ProtobufUnittest.FooRequest.classBuilder() as! ProtobufUnittest.FooRequest.Builder
    }
    public func getBuilder() -> ProtobufUnittest.FooRequest.Builder {
      return classBuilder() as! ProtobufUnittest.FooRequest.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooRequest.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooRequest.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.FooRequest.Builder {
      return try ProtobufUnittest.FooRequest.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.FooRequest) throws -> ProtobufUnittest.FooRequest.Builder {
      return try ProtobufUnittest.FooRequest.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.FooRequest"
    }
    override public func className() -> String {
        return "ProtobufUnittest.FooRequest"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.FooRequest.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.FooRequest = ProtobufUnittest.FooRequest()
      public func getMessage() -> ProtobufUnittest.FooRequest {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.FooRequest.Builder {
        builderResult = ProtobufUnittest.FooRequest()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.FooRequest.Builder {
        return try ProtobufUnittest.FooRequest.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.FooRequest {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.FooRequest {
        let returnMe:ProtobufUnittest.FooRequest = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.FooRequest) throws -> ProtobufUnittest.FooRequest.Builder {
        if other == ProtobufUnittest.FooRequest() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.FooRequest.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooRequest.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class FooResponse : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.FooResponse> {
      var mergedArray = Array<ProtobufUnittest.FooResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.FooResponse? {
      return try ProtobufUnittest.FooResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.FooResponse {
      return try ProtobufUnittest.FooResponse.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooResponse {
      return try ProtobufUnittest.FooResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.FooResponse {
      return try ProtobufUnittest.FooResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooResponse {
      return try ProtobufUnittest.FooResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.FooResponse {
      return try ProtobufUnittest.FooResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooResponse {
      return try ProtobufUnittest.FooResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.FooResponse.Builder {
      return ProtobufUnittest.FooResponse.classBuilder() as! ProtobufUnittest.FooResponse.Builder
    }
    public func getBuilder() -> ProtobufUnittest.FooResponse.Builder {
      return classBuilder() as! ProtobufUnittest.FooResponse.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooResponse.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooResponse.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.FooResponse.Builder {
      return try ProtobufUnittest.FooResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.FooResponse) throws -> ProtobufUnittest.FooResponse.Builder {
      return try ProtobufUnittest.FooResponse.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.FooResponse"
    }
    override public func className() -> String {
        return "ProtobufUnittest.FooResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.FooResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.FooResponse = ProtobufUnittest.FooResponse()
      public func getMessage() -> ProtobufUnittest.FooResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.FooResponse.Builder {
        builderResult = ProtobufUnittest.FooResponse()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.FooResponse.Builder {
        return try ProtobufUnittest.FooResponse.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.FooResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.FooResponse {
        let returnMe:ProtobufUnittest.FooResponse = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.FooResponse) throws -> ProtobufUnittest.FooResponse.Builder {
        if other == ProtobufUnittest.FooResponse() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.FooResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class FooClientMessage : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.FooClientMessage> {
      var mergedArray = Array<ProtobufUnittest.FooClientMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.FooClientMessage? {
      return try ProtobufUnittest.FooClientMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.FooClientMessage {
      return try ProtobufUnittest.FooClientMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooClientMessage {
      return try ProtobufUnittest.FooClientMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.FooClientMessage {
      return try ProtobufUnittest.FooClientMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooClientMessage {
      return try ProtobufUnittest.FooClientMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.FooClientMessage {
      return try ProtobufUnittest.FooClientMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooClientMessage {
      return try ProtobufUnittest.FooClientMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.FooClientMessage.Builder {
      return ProtobufUnittest.FooClientMessage.classBuilder() as! ProtobufUnittest.FooClientMessage.Builder
    }
    public func getBuilder() -> ProtobufUnittest.FooClientMessage.Builder {
      return classBuilder() as! ProtobufUnittest.FooClientMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooClientMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooClientMessage.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.FooClientMessage.Builder {
      return try ProtobufUnittest.FooClientMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.FooClientMessage) throws -> ProtobufUnittest.FooClientMessage.Builder {
      return try ProtobufUnittest.FooClientMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.FooClientMessage"
    }
    override public func className() -> String {
        return "ProtobufUnittest.FooClientMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.FooClientMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.FooClientMessage = ProtobufUnittest.FooClientMessage()
      public func getMessage() -> ProtobufUnittest.FooClientMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.FooClientMessage.Builder {
        builderResult = ProtobufUnittest.FooClientMessage()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.FooClientMessage.Builder {
        return try ProtobufUnittest.FooClientMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.FooClientMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.FooClientMessage {
        let returnMe:ProtobufUnittest.FooClientMessage = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.FooClientMessage) throws -> ProtobufUnittest.FooClientMessage.Builder {
        if other == ProtobufUnittest.FooClientMessage() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.FooClientMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooClientMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class FooServerMessage : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.FooServerMessage> {
      var mergedArray = Array<ProtobufUnittest.FooServerMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.FooServerMessage? {
      return try ProtobufUnittest.FooServerMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.FooServerMessage {
      return try ProtobufUnittest.FooServerMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooServerMessage {
      return try ProtobufUnittest.FooServerMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.FooServerMessage {
      return try ProtobufUnittest.FooServerMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooServerMessage {
      return try ProtobufUnittest.FooServerMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.FooServerMessage {
      return try ProtobufUnittest.FooServerMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooServerMessage {
      return try ProtobufUnittest.FooServerMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.FooServerMessage.Builder {
      return ProtobufUnittest.FooServerMessage.classBuilder() as! ProtobufUnittest.FooServerMessage.Builder
    }
    public func getBuilder() -> ProtobufUnittest.FooServerMessage.Builder {
      return classBuilder() as! ProtobufUnittest.FooServerMessage.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooServerMessage.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooServerMessage.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.FooServerMessage.Builder {
      return try ProtobufUnittest.FooServerMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.FooServerMessage) throws -> ProtobufUnittest.FooServerMessage.Builder {
      return try ProtobufUnittest.FooServerMessage.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.FooServerMessage"
    }
    override public func className() -> String {
        return "ProtobufUnittest.FooServerMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.FooServerMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.FooServerMessage = ProtobufUnittest.FooServerMessage()
      public func getMessage() -> ProtobufUnittest.FooServerMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.FooServerMessage.Builder {
        builderResult = ProtobufUnittest.FooServerMessage()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.FooServerMessage.Builder {
        return try ProtobufUnittest.FooServerMessage.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.FooServerMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.FooServerMessage {
        let returnMe:ProtobufUnittest.FooServerMessage = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.FooServerMessage) throws -> ProtobufUnittest.FooServerMessage.Builder {
        if other == ProtobufUnittest.FooServerMessage() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.FooServerMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.FooServerMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class BarRequest : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.BarRequest> {
      var mergedArray = Array<ProtobufUnittest.BarRequest>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.BarRequest? {
      return try ProtobufUnittest.BarRequest.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.BarRequest {
      return try ProtobufUnittest.BarRequest.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BarRequest {
      return try ProtobufUnittest.BarRequest.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.BarRequest {
      return try ProtobufUnittest.BarRequest.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BarRequest {
      return try ProtobufUnittest.BarRequest.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.BarRequest {
      return try ProtobufUnittest.BarRequest.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BarRequest {
      return try ProtobufUnittest.BarRequest.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.BarRequest.Builder {
      return ProtobufUnittest.BarRequest.classBuilder() as! ProtobufUnittest.BarRequest.Builder
    }
    public func getBuilder() -> ProtobufUnittest.BarRequest.Builder {
      return classBuilder() as! ProtobufUnittest.BarRequest.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BarRequest.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BarRequest.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.BarRequest.Builder {
      return try ProtobufUnittest.BarRequest.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.BarRequest) throws -> ProtobufUnittest.BarRequest.Builder {
      return try ProtobufUnittest.BarRequest.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.BarRequest"
    }
    override public func className() -> String {
        return "ProtobufUnittest.BarRequest"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.BarRequest.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.BarRequest = ProtobufUnittest.BarRequest()
      public func getMessage() -> ProtobufUnittest.BarRequest {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.BarRequest.Builder {
        builderResult = ProtobufUnittest.BarRequest()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.BarRequest.Builder {
        return try ProtobufUnittest.BarRequest.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.BarRequest {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.BarRequest {
        let returnMe:ProtobufUnittest.BarRequest = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.BarRequest) throws -> ProtobufUnittest.BarRequest.Builder {
        if other == ProtobufUnittest.BarRequest() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.BarRequest.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BarRequest.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class BarResponse : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:NSInputStream) throws -> Array<ProtobufUnittest.BarResponse> {
      var mergedArray = Array<ProtobufUnittest.BarResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.BarResponse? {
      return try ProtobufUnittest.BarResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:NSData) throws -> ProtobufUnittest.BarResponse {
      return try ProtobufUnittest.BarResponse.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BarResponse {
      return try ProtobufUnittest.BarResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream) throws -> ProtobufUnittest.BarResponse {
      return try ProtobufUnittest.BarResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BarResponse {
      return try ProtobufUnittest.BarResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.BarResponse {
      return try ProtobufUnittest.BarResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BarResponse {
      return try ProtobufUnittest.BarResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.BarResponse.Builder {
      return ProtobufUnittest.BarResponse.classBuilder() as! ProtobufUnittest.BarResponse.Builder
    }
    public func getBuilder() -> ProtobufUnittest.BarResponse.Builder {
      return classBuilder() as! ProtobufUnittest.BarResponse.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BarResponse.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BarResponse.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.BarResponse.Builder {
      return try ProtobufUnittest.BarResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:ProtobufUnittest.BarResponse) throws -> ProtobufUnittest.BarResponse.Builder {
      return try ProtobufUnittest.BarResponse.Builder().mergeFrom(prototype)
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output:String = ""
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.BarResponse"
    }
    override public func className() -> String {
        return "ProtobufUnittest.BarResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.BarResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.BarResponse = ProtobufUnittest.BarResponse()
      public func getMessage() -> ProtobufUnittest.BarResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProtobufUnittest.BarResponse.Builder {
        builderResult = ProtobufUnittest.BarResponse()
        return self
      }
      public override func clone() throws -> ProtobufUnittest.BarResponse.Builder {
        return try ProtobufUnittest.BarResponse.builderWithPrototype(builderResult)
      }
      public override func build() throws -> ProtobufUnittest.BarResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.BarResponse {
        let returnMe:ProtobufUnittest.BarResponse = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:ProtobufUnittest.BarResponse) throws -> ProtobufUnittest.BarResponse.Builder {
        if other == ProtobufUnittest.BarResponse() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> ProtobufUnittest.BarResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.BarResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
