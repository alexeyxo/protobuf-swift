// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file unittest_no_field_presence.proto

import Foundation
import ProtocolBuffers


internal struct Proto2NofieldpresenceUnittest { }

internal func == (lhs: Proto2NofieldpresenceUnittest.TestAllTypes, rhs: Proto2NofieldpresenceUnittest.TestAllTypes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalInt32 == rhs.hasOptionalInt32) && (!lhs.hasOptionalInt32 || lhs.optionalInt32 == rhs.optionalInt32)
  fieldCheck = fieldCheck && (lhs.hasOptionalInt64 == rhs.hasOptionalInt64) && (!lhs.hasOptionalInt64 || lhs.optionalInt64 == rhs.optionalInt64)
  fieldCheck = fieldCheck && (lhs.hasOptionalUint32 == rhs.hasOptionalUint32) && (!lhs.hasOptionalUint32 || lhs.optionalUint32 == rhs.optionalUint32)
  fieldCheck = fieldCheck && (lhs.hasOptionalUint64 == rhs.hasOptionalUint64) && (!lhs.hasOptionalUint64 || lhs.optionalUint64 == rhs.optionalUint64)
  fieldCheck = fieldCheck && (lhs.hasOptionalSint32 == rhs.hasOptionalSint32) && (!lhs.hasOptionalSint32 || lhs.optionalSint32 == rhs.optionalSint32)
  fieldCheck = fieldCheck && (lhs.hasOptionalSint64 == rhs.hasOptionalSint64) && (!lhs.hasOptionalSint64 || lhs.optionalSint64 == rhs.optionalSint64)
  fieldCheck = fieldCheck && (lhs.hasOptionalFixed32 == rhs.hasOptionalFixed32) && (!lhs.hasOptionalFixed32 || lhs.optionalFixed32 == rhs.optionalFixed32)
  fieldCheck = fieldCheck && (lhs.hasOptionalFixed64 == rhs.hasOptionalFixed64) && (!lhs.hasOptionalFixed64 || lhs.optionalFixed64 == rhs.optionalFixed64)
  fieldCheck = fieldCheck && (lhs.hasOptionalSfixed32 == rhs.hasOptionalSfixed32) && (!lhs.hasOptionalSfixed32 || lhs.optionalSfixed32 == rhs.optionalSfixed32)
  fieldCheck = fieldCheck && (lhs.hasOptionalSfixed64 == rhs.hasOptionalSfixed64) && (!lhs.hasOptionalSfixed64 || lhs.optionalSfixed64 == rhs.optionalSfixed64)
  fieldCheck = fieldCheck && (lhs.hasOptionalFloat == rhs.hasOptionalFloat) && (!lhs.hasOptionalFloat || lhs.optionalFloat == rhs.optionalFloat)
  fieldCheck = fieldCheck && (lhs.hasOptionalDouble == rhs.hasOptionalDouble) && (!lhs.hasOptionalDouble || lhs.optionalDouble == rhs.optionalDouble)
  fieldCheck = fieldCheck && (lhs.hasOptionalBool == rhs.hasOptionalBool) && (!lhs.hasOptionalBool || lhs.optionalBool == rhs.optionalBool)
  fieldCheck = fieldCheck && (lhs.hasOptionalString == rhs.hasOptionalString) && (!lhs.hasOptionalString || lhs.optionalString == rhs.optionalString)
  fieldCheck = fieldCheck && (lhs.hasOptionalBytes == rhs.hasOptionalBytes) && (!lhs.hasOptionalBytes || lhs.optionalBytes == rhs.optionalBytes)
  fieldCheck = fieldCheck && (lhs.hasOptionalNestedMessage == rhs.hasOptionalNestedMessage) && (!lhs.hasOptionalNestedMessage || lhs.optionalNestedMessage == rhs.optionalNestedMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalForeignMessage == rhs.hasOptionalForeignMessage) && (!lhs.hasOptionalForeignMessage || lhs.optionalForeignMessage == rhs.optionalForeignMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalProto2Message == rhs.hasOptionalProto2Message) && (!lhs.hasOptionalProto2Message || lhs.optionalProto2Message == rhs.optionalProto2Message)
  fieldCheck = fieldCheck && (lhs.hasOptionalNestedEnum == rhs.hasOptionalNestedEnum) && (!lhs.hasOptionalNestedEnum || lhs.optionalNestedEnum == rhs.optionalNestedEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalForeignEnum == rhs.hasOptionalForeignEnum) && (!lhs.hasOptionalForeignEnum || lhs.optionalForeignEnum == rhs.optionalForeignEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalStringPiece == rhs.hasOptionalStringPiece) && (!lhs.hasOptionalStringPiece || lhs.optionalStringPiece == rhs.optionalStringPiece)
  fieldCheck = fieldCheck && (lhs.hasOptionalCord == rhs.hasOptionalCord) && (!lhs.hasOptionalCord || lhs.optionalCord == rhs.optionalCord)
  fieldCheck = fieldCheck && (lhs.hasOptionalLazyMessage == rhs.hasOptionalLazyMessage) && (!lhs.hasOptionalLazyMessage || lhs.optionalLazyMessage == rhs.optionalLazyMessage)
  fieldCheck = fieldCheck && (lhs.repeatedInt32 == rhs.repeatedInt32)
  fieldCheck = fieldCheck && (lhs.repeatedInt64 == rhs.repeatedInt64)
  fieldCheck = fieldCheck && (lhs.repeatedUint32 == rhs.repeatedUint32)
  fieldCheck = fieldCheck && (lhs.repeatedUint64 == rhs.repeatedUint64)
  fieldCheck = fieldCheck && (lhs.repeatedSint32 == rhs.repeatedSint32)
  fieldCheck = fieldCheck && (lhs.repeatedSint64 == rhs.repeatedSint64)
  fieldCheck = fieldCheck && (lhs.repeatedFixed32 == rhs.repeatedFixed32)
  fieldCheck = fieldCheck && (lhs.repeatedFixed64 == rhs.repeatedFixed64)
  fieldCheck = fieldCheck && (lhs.repeatedSfixed32 == rhs.repeatedSfixed32)
  fieldCheck = fieldCheck && (lhs.repeatedSfixed64 == rhs.repeatedSfixed64)
  fieldCheck = fieldCheck && (lhs.repeatedFloat == rhs.repeatedFloat)
  fieldCheck = fieldCheck && (lhs.repeatedDouble == rhs.repeatedDouble)
  fieldCheck = fieldCheck && (lhs.repeatedBool == rhs.repeatedBool)
  fieldCheck = fieldCheck && (lhs.repeatedString == rhs.repeatedString)
  fieldCheck = fieldCheck && (lhs.repeatedBytes == rhs.repeatedBytes)
  fieldCheck = fieldCheck && (lhs.repeatedNestedMessage == rhs.repeatedNestedMessage)
  fieldCheck = fieldCheck && (lhs.repeatedForeignMessage == rhs.repeatedForeignMessage)
  fieldCheck = fieldCheck && (lhs.repeatedProto2Message == rhs.repeatedProto2Message)
  fieldCheck = fieldCheck && (lhs.repeatedNestedEnum == rhs.repeatedNestedEnum)
  fieldCheck = fieldCheck && (lhs.repeatedForeignEnum == rhs.repeatedForeignEnum)
  fieldCheck = fieldCheck && (lhs.repeatedStringPiece == rhs.repeatedStringPiece)
  fieldCheck = fieldCheck && (lhs.repeatedCord == rhs.repeatedCord)
  fieldCheck = fieldCheck && (lhs.repeatedLazyMessage == rhs.repeatedLazyMessage)
  fieldCheck = fieldCheck && (lhs.hasOneofUint32 == rhs.hasOneofUint32) && (!lhs.hasOneofUint32 || lhs.oneofUint32 == rhs.oneofUint32)
  fieldCheck = fieldCheck && (lhs.hasOneofNestedMessage == rhs.hasOneofNestedMessage) && (!lhs.hasOneofNestedMessage || lhs.oneofNestedMessage == rhs.oneofNestedMessage)
  fieldCheck = fieldCheck && (lhs.hasOneofString == rhs.hasOneofString) && (!lhs.hasOneofString || lhs.oneofString == rhs.oneofString)
  fieldCheck = fieldCheck && (lhs.hasOneofEnum == rhs.hasOneofEnum) && (!lhs.hasOneofEnum || lhs.oneofEnum == rhs.oneofEnum)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage, rhs: Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Proto2NofieldpresenceUnittest.TestProto2Required, rhs: Proto2NofieldpresenceUnittest.TestProto2Required) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasProto2 == rhs.hasProto2) && (!lhs.hasProto2 || lhs.proto2 == rhs.proto2)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Proto2NofieldpresenceUnittest.ForeignMessage, rhs: Proto2NofieldpresenceUnittest.ForeignMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasC == rhs.hasC) && (!lhs.hasC || lhs.c == rhs.c)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension Proto2NofieldpresenceUnittest {
  internal struct UnittestNoFieldPresenceRoot {
    internal static var sharedInstance : UnittestNoFieldPresenceRoot {
     struct Static {
         static let instance : UnittestNoFieldPresenceRoot = UnittestNoFieldPresenceRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      ProtobufUnittest.UnittestRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  internal enum ForeignEnum:Int32 {
    case ForeignFoo = 0
    case ForeignBar = 1
    case ForeignBaz = 2

  }

  //Enum type declaration end 

  final internal class TestAllTypes : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasBb:Bool = false
        private(set) var bb:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasBb {
            output.writeInt32(1, value:bb)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasBb {
            serialize_size += bb.computeInt32Size(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder().mergeFromData(data, extensionRegistry:Proto2NofieldpresenceUnittest.UnittestNoFieldPresenceRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.classBuilder() as! Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder
        }
        internal func getBuilder() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
          return classBuilder() as! Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder()
        }
        internal func toBuilder() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
          return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasBb {
            output += "\(indent) bb: \(bb) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasBb {
                   hashCode = (hashCode &* 31) &+ bb.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage"
        }
        override internal func className() -> String {
            return "Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage()
          internal func getMessage() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasBb:Bool {
               get {
                    return builderResult.hasBb
               }
          }
          var bb:Int32 {
               get {
                    return builderResult.bb
               }
               set (value) {
                   builderResult.hasBb = true
                   builderResult.bb = value
               }
          }
          func setBb(value:Int32) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
            self.bb = value
            return self
          }
          internal func clearBb() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder{
               builderResult.hasBb = false
               builderResult.bb = Int32(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
            builderResult = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage()
            return self
          }
          internal override func clone() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
            return Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult)
          }
          internal override func build() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage {
            let returnMe:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage = builderResult
            return returnMe
          }
          internal func mergeFrom(other:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
            if other == Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage() {
             return self
            }
            if other.hasBb {
                 bb = other.bb
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                bb = input.readInt32()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //OneOf declaration start

    internal enum OneofField {
      case OneofFieldOneOfNotSet

      internal func checkOneOfIsSet() -> Bool {
           switch self {
           case .OneofFieldOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case OneofUint32(UInt32)

      internal static func getOneofUint32(value:OneofField) -> UInt32? {
           switch value {
           case .OneofUint32(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofNestedMessage(Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage)

      internal static func getOneofNestedMessage(value:OneofField) -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage? {
           switch value {
           case .OneofNestedMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofString(String)

      internal static func getOneofString(value:OneofField) -> String? {
           switch value {
           case .OneofString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofEnum(TestAllTypes.NestedEnum)

      internal static func getOneofEnum(value:OneofField) -> TestAllTypes.NestedEnum? {
           switch value {
           case .OneofEnum(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageOneofField:TestAllTypes.OneofField =  TestAllTypes.OneofField.OneofFieldOneOfNotSet


      //Enum type declaration start 

      internal enum NestedEnum:Int32 {
        case Foo = 0
        case Bar = 1
        case Baz = 2

      }

      //Enum type declaration end 

    private(set) var hasOptionalInt32:Bool = false
    private(set) var optionalInt32:Int32 = Int32(0)

    private(set) var hasOptionalInt64:Bool = false
    private(set) var optionalInt64:Int64 = Int64(0)

    private(set) var hasOptionalUint32:Bool = false
    private(set) var optionalUint32:UInt32 = UInt32(0)

    private(set) var hasOptionalUint64:Bool = false
    private(set) var optionalUint64:UInt64 = UInt64(0)

    private(set) var hasOptionalSint32:Bool = false
    private(set) var optionalSint32:Int32 = Int32(0)

    private(set) var hasOptionalSint64:Bool = false
    private(set) var optionalSint64:Int64 = Int64(0)

    private(set) var hasOptionalFixed32:Bool = false
    private(set) var optionalFixed32:UInt32 = UInt32(0)

    private(set) var hasOptionalFixed64:Bool = false
    private(set) var optionalFixed64:UInt64 = UInt64(0)

    private(set) var hasOptionalSfixed32:Bool = false
    private(set) var optionalSfixed32:Int32 = Int32(0)

    private(set) var hasOptionalSfixed64:Bool = false
    private(set) var optionalSfixed64:Int64 = Int64(0)

    private(set) var hasOptionalFloat:Bool = false
    private(set) var optionalFloat:Float = Float(0)

    private(set) var hasOptionalDouble:Bool = false
    private(set) var optionalDouble:Double = Double(0)

    private(set) var hasOptionalBool:Bool = false
    private(set) var optionalBool:Bool = false

    private(set) var hasOptionalString:Bool = false
    private(set) var optionalString:String = ""

    private(set) var hasOptionalBytes:Bool = false
    private(set) var optionalBytes:NSData = NSData()

    private(set) var hasOptionalNestedMessage:Bool = false
    private(set) var optionalNestedMessage:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage!
    private(set) var hasOptionalForeignMessage:Bool = false
    private(set) var optionalForeignMessage:Proto2NofieldpresenceUnittest.ForeignMessage!
    private(set) var hasOptionalProto2Message:Bool = false
    private(set) var optionalProto2Message:ProtobufUnittest.TestAllTypes!
    private(set) var optionalNestedEnum:TestAllTypes.NestedEnum = TestAllTypes.NestedEnum.Foo
    private(set) var hasOptionalNestedEnum:Bool = false
    private(set) var optionalForeignEnum:Proto2NofieldpresenceUnittest.ForeignEnum = Proto2NofieldpresenceUnittest.ForeignEnum.ForeignFoo
    private(set) var hasOptionalForeignEnum:Bool = false
    private(set) var hasOptionalStringPiece:Bool = false
    private(set) var optionalStringPiece:String = ""

    private(set) var hasOptionalCord:Bool = false
    private(set) var optionalCord:String = ""

    private(set) var hasOptionalLazyMessage:Bool = false
    private(set) var optionalLazyMessage:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage!
    private(set) var repeatedInt32:Array<Int32> = Array<Int32>()
    private(set) var repeatedInt64:Array<Int64> = Array<Int64>()
    private(set) var repeatedUint32:Array<UInt32> = Array<UInt32>()
    private(set) var repeatedUint64:Array<UInt64> = Array<UInt64>()
    private(set) var repeatedSint32:Array<Int32> = Array<Int32>()
    private(set) var repeatedSint64:Array<Int64> = Array<Int64>()
    private(set) var repeatedFixed32:Array<UInt32> = Array<UInt32>()
    private(set) var repeatedFixed64:Array<UInt64> = Array<UInt64>()
    private(set) var repeatedSfixed32:Array<Int32> = Array<Int32>()
    private(set) var repeatedSfixed64:Array<Int64> = Array<Int64>()
    private(set) var repeatedFloat:Array<Float> = Array<Float>()
    private(set) var repeatedDouble:Array<Double> = Array<Double>()
    private(set) var repeatedBool:Array<Bool> = Array<Bool>()
    private(set) var repeatedString:Array<String> = Array<String>()
    private(set) var repeatedBytes:Array<NSData> = Array<NSData>()
    private(set) var repeatedNestedMessage:Array<Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage>  = Array<Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage>()
    private(set) var repeatedForeignMessage:Array<Proto2NofieldpresenceUnittest.ForeignMessage>  = Array<Proto2NofieldpresenceUnittest.ForeignMessage>()
    private(set) var repeatedProto2Message:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
    private var repeatedNestedEnumMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedNestedEnum:Array<TestAllTypes.NestedEnum> = Array<TestAllTypes.NestedEnum>()
    private var repeatedForeignEnumMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedForeignEnum:Array<Proto2NofieldpresenceUnittest.ForeignEnum> = Array<Proto2NofieldpresenceUnittest.ForeignEnum>()
    private(set) var repeatedStringPiece:Array<String> = Array<String>()
    private(set) var repeatedCord:Array<String> = Array<String>()
    private(set) var repeatedLazyMessage:Array<Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage>  = Array<Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage>()
    private(set) var hasOneofUint32:Bool {
          get {
               if TestAllTypes.OneofField.getOneofUint32(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofUint32:UInt32!{
         get {
              return TestAllTypes.OneofField.getOneofUint32(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofUint32(newvalue)
         }
    }
    private(set) var hasOneofNestedMessage:Bool {
          get {
               if TestAllTypes.OneofField.getOneofNestedMessage(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofNestedMessage:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage!{
         get {
              return TestAllTypes.OneofField.getOneofNestedMessage(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofNestedMessage(newvalue)
         }
    }
    private(set) var hasOneofString:Bool {
          get {
               if TestAllTypes.OneofField.getOneofString(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofString:String!{
         get {
              return TestAllTypes.OneofField.getOneofString(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofString(newvalue)
         }
    }
    private(set) var hasOneofEnum:Bool {
          get {
               if TestAllTypes.OneofField.getOneofEnum(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofEnum:TestAllTypes.NestedEnum!{
         get {
              return TestAllTypes.OneofField.getOneofEnum(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofEnum(newvalue)
         }
    }
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasOptionalInt32 {
        output.writeInt32(1, value:optionalInt32)
      }
      if hasOptionalInt64 {
        output.writeInt64(2, value:optionalInt64)
      }
      if hasOptionalUint32 {
        output.writeUInt32(3, value:optionalUint32)
      }
      if hasOptionalUint64 {
        output.writeUInt64(4, value:optionalUint64)
      }
      if hasOptionalSint32 {
        output.writeSInt32(5, value:optionalSint32)
      }
      if hasOptionalSint64 {
        output.writeSInt64(6, value:optionalSint64)
      }
      if hasOptionalFixed32 {
        output.writeFixed32(7, value:optionalFixed32)
      }
      if hasOptionalFixed64 {
        output.writeFixed64(8, value:optionalFixed64)
      }
      if hasOptionalSfixed32 {
        output.writeSFixed32(9, value:optionalSfixed32)
      }
      if hasOptionalSfixed64 {
        output.writeSFixed64(10, value:optionalSfixed64)
      }
      if hasOptionalFloat {
        output.writeFloat(11, value:optionalFloat)
      }
      if hasOptionalDouble {
        output.writeDouble(12, value:optionalDouble)
      }
      if hasOptionalBool {
        output.writeBool(13, value:optionalBool)
      }
      if hasOptionalString {
        output.writeString(14, value:optionalString)
      }
      if hasOptionalBytes {
        output.writeData(15, value:optionalBytes)
      }
      if hasOptionalNestedMessage {
        output.writeMessage(18, value:optionalNestedMessage)
      }
      if hasOptionalForeignMessage {
        output.writeMessage(19, value:optionalForeignMessage)
      }
      if hasOptionalProto2Message {
        output.writeMessage(20, value:optionalProto2Message)
      }
      if hasOptionalNestedEnum {
        output.writeEnum(21, value:optionalNestedEnum.rawValue)
      }
      if hasOptionalForeignEnum {
        output.writeEnum(22, value:optionalForeignEnum.rawValue)
      }
      if hasOptionalStringPiece {
        output.writeString(24, value:optionalStringPiece)
      }
      if hasOptionalCord {
        output.writeString(25, value:optionalCord)
      }
      if hasOptionalLazyMessage {
        output.writeMessage(30, value:optionalLazyMessage)
      }
      if !repeatedInt32.isEmpty {
        for oneValuerepeatedInt32 in repeatedInt32 {
          output.writeInt32(31, value:oneValuerepeatedInt32)
        }
      }
      if !repeatedInt64.isEmpty {
        for oneValuerepeatedInt64 in repeatedInt64 {
          output.writeInt64(32, value:oneValuerepeatedInt64)
        }
      }
      if !repeatedUint32.isEmpty {
        for oneValuerepeatedUint32 in repeatedUint32 {
          output.writeUInt32(33, value:oneValuerepeatedUint32)
        }
      }
      if !repeatedUint64.isEmpty {
        for oneValuerepeatedUint64 in repeatedUint64 {
          output.writeUInt64(34, value:oneValuerepeatedUint64)
        }
      }
      if !repeatedSint32.isEmpty {
        for oneValuerepeatedSint32 in repeatedSint32 {
          output.writeSInt32(35, value:oneValuerepeatedSint32)
        }
      }
      if !repeatedSint64.isEmpty {
        for oneValuerepeatedSint64 in repeatedSint64 {
          output.writeSInt64(36, value:oneValuerepeatedSint64)
        }
      }
      if !repeatedFixed32.isEmpty {
        for oneValuerepeatedFixed32 in repeatedFixed32 {
          output.writeFixed32(37, value:oneValuerepeatedFixed32)
        }
      }
      if !repeatedFixed64.isEmpty {
        for oneValuerepeatedFixed64 in repeatedFixed64 {
          output.writeFixed64(38, value:oneValuerepeatedFixed64)
        }
      }
      if !repeatedSfixed32.isEmpty {
        for oneValuerepeatedSfixed32 in repeatedSfixed32 {
          output.writeSFixed32(39, value:oneValuerepeatedSfixed32)
        }
      }
      if !repeatedSfixed64.isEmpty {
        for oneValuerepeatedSfixed64 in repeatedSfixed64 {
          output.writeSFixed64(40, value:oneValuerepeatedSfixed64)
        }
      }
      if !repeatedFloat.isEmpty {
        for oneValuerepeatedFloat in repeatedFloat {
          output.writeFloat(41, value:oneValuerepeatedFloat)
        }
      }
      if !repeatedDouble.isEmpty {
        for oneValuerepeatedDouble in repeatedDouble {
          output.writeDouble(42, value:oneValuerepeatedDouble)
        }
      }
      if !repeatedBool.isEmpty {
        for oneValuerepeatedBool in repeatedBool {
          output.writeBool(43, value:oneValuerepeatedBool)
        }
      }
      if !repeatedString.isEmpty {
        for oneValuerepeatedString in repeatedString {
          output.writeString(44, value:oneValuerepeatedString)
        }
      }
      if !repeatedBytes.isEmpty {
        for oneValuerepeatedBytes in repeatedBytes {
          output.writeData(45, value:oneValuerepeatedBytes)
        }
      }
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          output.writeMessage(48, value:oneElementrepeatedNestedMessage)
      }
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          output.writeMessage(49, value:oneElementrepeatedForeignMessage)
      }
      for oneElementrepeatedProto2Message in repeatedProto2Message {
          output.writeMessage(50, value:oneElementrepeatedProto2Message)
      }
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          output.writeEnum(51, value:oneValueOfrepeatedNestedEnum.rawValue)
      }
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          output.writeEnum(52, value:oneValueOfrepeatedForeignEnum.rawValue)
      }
      if !repeatedStringPiece.isEmpty {
        for oneValuerepeatedStringPiece in repeatedStringPiece {
          output.writeString(54, value:oneValuerepeatedStringPiece)
        }
      }
      if !repeatedCord.isEmpty {
        for oneValuerepeatedCord in repeatedCord {
          output.writeString(55, value:oneValuerepeatedCord)
        }
      }
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          output.writeMessage(57, value:oneElementrepeatedLazyMessage)
      }
      if hasOneofUint32 {
        output.writeUInt32(111, value:oneofUint32)
      }
      if hasOneofNestedMessage {
        output.writeMessage(112, value:oneofNestedMessage)
      }
      if hasOneofString {
        output.writeString(113, value:oneofString)
      }
      if hasOneofEnum {
        output.writeEnum(114, value:oneofEnum.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOptionalInt32 {
        serialize_size += optionalInt32.computeInt32Size(1)
      }
      if hasOptionalInt64 {
        serialize_size += optionalInt64.computeInt64Size(2)
      }
      if hasOptionalUint32 {
        serialize_size += optionalUint32.computeUInt32Size(3)
      }
      if hasOptionalUint64 {
        serialize_size += optionalUint64.computeUInt64Size(4)
      }
      if hasOptionalSint32 {
        serialize_size += optionalSint32.computeSInt32Size(5)
      }
      if hasOptionalSint64 {
        serialize_size += optionalSint64.computeSInt64Size(6)
      }
      if hasOptionalFixed32 {
        serialize_size += optionalFixed32.computeFixed32Size(7)
      }
      if hasOptionalFixed64 {
        serialize_size += optionalFixed64.computeFixed64Size(8)
      }
      if hasOptionalSfixed32 {
        serialize_size += optionalSfixed32.computeSFixed32Size(9)
      }
      if hasOptionalSfixed64 {
        serialize_size += optionalSfixed64.computeSFixed64Size(10)
      }
      if hasOptionalFloat {
        serialize_size += optionalFloat.computeFloatSize(11)
      }
      if hasOptionalDouble {
        serialize_size += optionalDouble.computeDoubleSize(12)
      }
      if hasOptionalBool {
        serialize_size += optionalBool.computeBoolSize(13)
      }
      if hasOptionalString {
        serialize_size += optionalString.computeStringSize(14)
      }
      if hasOptionalBytes {
        serialize_size += optionalBytes.computeDataSize(15)
      }
      if hasOptionalNestedMessage {
          if let varSizeoptionalNestedMessage = optionalNestedMessage?.computeMessageSize(18) {
              serialize_size += varSizeoptionalNestedMessage
          }
      }
      if hasOptionalForeignMessage {
          if let varSizeoptionalForeignMessage = optionalForeignMessage?.computeMessageSize(19) {
              serialize_size += varSizeoptionalForeignMessage
          }
      }
      if hasOptionalProto2Message {
          if let varSizeoptionalProto2Message = optionalProto2Message?.computeMessageSize(20) {
              serialize_size += varSizeoptionalProto2Message
          }
      }
      if (hasOptionalNestedEnum) {
        serialize_size += optionalNestedEnum.rawValue.computeEnumSize(21)
      }
      if (hasOptionalForeignEnum) {
        serialize_size += optionalForeignEnum.rawValue.computeEnumSize(22)
      }
      if hasOptionalStringPiece {
        serialize_size += optionalStringPiece.computeStringSize(24)
      }
      if hasOptionalCord {
        serialize_size += optionalCord.computeStringSize(25)
      }
      if hasOptionalLazyMessage {
          if let varSizeoptionalLazyMessage = optionalLazyMessage?.computeMessageSize(30) {
              serialize_size += varSizeoptionalLazyMessage
          }
      }
      var dataSizeRepeatedInt32:Int32 = 0
      for oneValuerepeatedInt32 in repeatedInt32 {
          dataSizeRepeatedInt32 += oneValuerepeatedInt32.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt32
      serialize_size += 2 * Int32(repeatedInt32.count)
      var dataSizeRepeatedInt64:Int32 = 0
      for oneValuerepeatedInt64 in repeatedInt64 {
          dataSizeRepeatedInt64 += oneValuerepeatedInt64.computeInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt64
      serialize_size += 2 * Int32(repeatedInt64.count)
      var dataSizeRepeatedUint32:Int32 = 0
      for oneValuerepeatedUint32 in repeatedUint32 {
          dataSizeRepeatedUint32 += oneValuerepeatedUint32.computeUInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedUint32
      serialize_size += 2 * Int32(repeatedUint32.count)
      var dataSizeRepeatedUint64:Int32 = 0
      for oneValuerepeatedUint64 in repeatedUint64 {
          dataSizeRepeatedUint64 += oneValuerepeatedUint64.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedUint64
      serialize_size += 2 * Int32(repeatedUint64.count)
      var dataSizeRepeatedSint32:Int32 = 0
      for oneValuerepeatedSint32 in repeatedSint32 {
          dataSizeRepeatedSint32 += oneValuerepeatedSint32.computeSInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedSint32
      serialize_size += 2 * Int32(repeatedSint32.count)
      var dataSizeRepeatedSint64:Int32 = 0
      for oneValuerepeatedSint64 in repeatedSint64 {
          dataSizeRepeatedSint64 += oneValuerepeatedSint64.computeSInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedSint64
      serialize_size += 2 * Int32(repeatedSint64.count)
      var dataSizeRepeatedFixed32:Int32 = 0
      dataSizeRepeatedFixed32 = 4 * Int32(repeatedFixed32.count)
      serialize_size += dataSizeRepeatedFixed32
      serialize_size += 2 * Int32(repeatedFixed32.count)
      var dataSizeRepeatedFixed64:Int32 = 0
      dataSizeRepeatedFixed64 = 8 * Int32(repeatedFixed64.count)
      serialize_size += dataSizeRepeatedFixed64
      serialize_size += 2 * Int32(repeatedFixed64.count)
      var dataSizeRepeatedSfixed32:Int32 = 0
      dataSizeRepeatedSfixed32 = 4 * Int32(repeatedSfixed32.count)
      serialize_size += dataSizeRepeatedSfixed32
      serialize_size += 2 * Int32(repeatedSfixed32.count)
      var dataSizeRepeatedSfixed64:Int32 = 0
      dataSizeRepeatedSfixed64 = 8 * Int32(repeatedSfixed64.count)
      serialize_size += dataSizeRepeatedSfixed64
      serialize_size += 2 * Int32(repeatedSfixed64.count)
      var dataSizeRepeatedFloat:Int32 = 0
      dataSizeRepeatedFloat = 4 * Int32(repeatedFloat.count)
      serialize_size += dataSizeRepeatedFloat
      serialize_size += 2 * Int32(repeatedFloat.count)
      var dataSizeRepeatedDouble:Int32 = 0
      dataSizeRepeatedDouble = 8 * Int32(repeatedDouble.count)
      serialize_size += dataSizeRepeatedDouble
      serialize_size += 2 * Int32(repeatedDouble.count)
      var dataSizeRepeatedBool:Int32 = 0
      dataSizeRepeatedBool = 1 * Int32(repeatedBool.count)
      serialize_size += dataSizeRepeatedBool
      serialize_size += 2 * Int32(repeatedBool.count)
      var dataSizeRepeatedString:Int32 = 0
      for oneValuerepeatedString in repeatedString {
          dataSizeRepeatedString += oneValuerepeatedString.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedString
      serialize_size += 2 * Int32(repeatedString.count)
      var dataSizeRepeatedBytes:Int32 = 0
      for oneValuerepeatedBytes in repeatedBytes {
          dataSizeRepeatedBytes += oneValuerepeatedBytes.computeDataSizeNoTag()
      }
      serialize_size += dataSizeRepeatedBytes
      serialize_size += 2 * Int32(repeatedBytes.count)
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          serialize_size += oneElementrepeatedNestedMessage.computeMessageSize(48)
      }
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          serialize_size += oneElementrepeatedForeignMessage.computeMessageSize(49)
      }
      for oneElementrepeatedProto2Message in repeatedProto2Message {
          serialize_size += oneElementrepeatedProto2Message.computeMessageSize(50)
      }
      var dataSizerepeatedNestedEnum:Int32 = 0
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          dataSizerepeatedNestedEnum += oneValueOfrepeatedNestedEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedNestedEnum
      serialize_size += (2 * Int32(repeatedNestedEnum.count))
      var dataSizerepeatedForeignEnum:Int32 = 0
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          dataSizerepeatedForeignEnum += oneValueOfrepeatedForeignEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedForeignEnum
      serialize_size += (2 * Int32(repeatedForeignEnum.count))
      var dataSizeRepeatedStringPiece:Int32 = 0
      for oneValuerepeatedStringPiece in repeatedStringPiece {
          dataSizeRepeatedStringPiece += oneValuerepeatedStringPiece.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedStringPiece
      serialize_size += 2 * Int32(repeatedStringPiece.count)
      var dataSizeRepeatedCord:Int32 = 0
      for oneValuerepeatedCord in repeatedCord {
          dataSizeRepeatedCord += oneValuerepeatedCord.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedCord
      serialize_size += 2 * Int32(repeatedCord.count)
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          serialize_size += oneElementrepeatedLazyMessage.computeMessageSize(57)
      }
      if hasOneofUint32 {
        serialize_size += oneofUint32.computeUInt32Size(111)
      }
      if hasOneofNestedMessage {
          if let varSizeoneofNestedMessage = oneofNestedMessage?.computeMessageSize(112) {
              serialize_size += varSizeoneofNestedMessage
          }
      }
      if hasOneofString {
        serialize_size += oneofString.computeStringSize(113)
      }
      if (hasOneofEnum) {
        serialize_size += oneofEnum.rawValue.computeEnumSize(114)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Proto2NofieldpresenceUnittest.TestAllTypes {
      return Proto2NofieldpresenceUnittest.TestAllTypes.Builder().mergeFromData(data, extensionRegistry:Proto2NofieldpresenceUnittest.UnittestNoFieldPresenceRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestAllTypes {
      return Proto2NofieldpresenceUnittest.TestAllTypes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Proto2NofieldpresenceUnittest.TestAllTypes {
      return Proto2NofieldpresenceUnittest.TestAllTypes.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestAllTypes {
      return Proto2NofieldpresenceUnittest.TestAllTypes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Proto2NofieldpresenceUnittest.TestAllTypes {
      return Proto2NofieldpresenceUnittest.TestAllTypes.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestAllTypes {
      return Proto2NofieldpresenceUnittest.TestAllTypes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
      return Proto2NofieldpresenceUnittest.TestAllTypes.classBuilder() as! Proto2NofieldpresenceUnittest.TestAllTypes.Builder
    }
    internal func getBuilder() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
      return classBuilder() as! Proto2NofieldpresenceUnittest.TestAllTypes.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Proto2NofieldpresenceUnittest.TestAllTypes.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Proto2NofieldpresenceUnittest.TestAllTypes.Builder()
    }
    internal func toBuilder() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
      return Proto2NofieldpresenceUnittest.TestAllTypes.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Proto2NofieldpresenceUnittest.TestAllTypes) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
      return Proto2NofieldpresenceUnittest.TestAllTypes.Builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasOptionalInt32 {
        output += "\(indent) optionalInt32: \(optionalInt32) \n"
      }
      if hasOptionalInt64 {
        output += "\(indent) optionalInt64: \(optionalInt64) \n"
      }
      if hasOptionalUint32 {
        output += "\(indent) optionalUint32: \(optionalUint32) \n"
      }
      if hasOptionalUint64 {
        output += "\(indent) optionalUint64: \(optionalUint64) \n"
      }
      if hasOptionalSint32 {
        output += "\(indent) optionalSint32: \(optionalSint32) \n"
      }
      if hasOptionalSint64 {
        output += "\(indent) optionalSint64: \(optionalSint64) \n"
      }
      if hasOptionalFixed32 {
        output += "\(indent) optionalFixed32: \(optionalFixed32) \n"
      }
      if hasOptionalFixed64 {
        output += "\(indent) optionalFixed64: \(optionalFixed64) \n"
      }
      if hasOptionalSfixed32 {
        output += "\(indent) optionalSfixed32: \(optionalSfixed32) \n"
      }
      if hasOptionalSfixed64 {
        output += "\(indent) optionalSfixed64: \(optionalSfixed64) \n"
      }
      if hasOptionalFloat {
        output += "\(indent) optionalFloat: \(optionalFloat) \n"
      }
      if hasOptionalDouble {
        output += "\(indent) optionalDouble: \(optionalDouble) \n"
      }
      if hasOptionalBool {
        output += "\(indent) optionalBool: \(optionalBool) \n"
      }
      if hasOptionalString {
        output += "\(indent) optionalString: \(optionalString) \n"
      }
      if hasOptionalBytes {
        output += "\(indent) optionalBytes: \(optionalBytes) \n"
      }
      if hasOptionalNestedMessage {
        output += "\(indent) optionalNestedMessage {\n"
        optionalNestedMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalForeignMessage {
        output += "\(indent) optionalForeignMessage {\n"
        optionalForeignMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalProto2Message {
        output += "\(indent) optionalProto2Message {\n"
        optionalProto2Message?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if (hasOptionalNestedEnum) {
        output += "\(indent) optionalNestedEnum: \(optionalNestedEnum.rawValue)\n"
      }
      if (hasOptionalForeignEnum) {
        output += "\(indent) optionalForeignEnum: \(optionalForeignEnum.rawValue)\n"
      }
      if hasOptionalStringPiece {
        output += "\(indent) optionalStringPiece: \(optionalStringPiece) \n"
      }
      if hasOptionalCord {
        output += "\(indent) optionalCord: \(optionalCord) \n"
      }
      if hasOptionalLazyMessage {
        output += "\(indent) optionalLazyMessage {\n"
        optionalLazyMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var repeatedInt32ElementIndex:Int = 0
      for oneValuerepeatedInt32 in repeatedInt32  {
          output += "\(indent) repeatedInt32[\(repeatedInt32ElementIndex)]: \(oneValuerepeatedInt32)\n"
          repeatedInt32ElementIndex++
      }
      var repeatedInt64ElementIndex:Int = 0
      for oneValuerepeatedInt64 in repeatedInt64  {
          output += "\(indent) repeatedInt64[\(repeatedInt64ElementIndex)]: \(oneValuerepeatedInt64)\n"
          repeatedInt64ElementIndex++
      }
      var repeatedUint32ElementIndex:Int = 0
      for oneValuerepeatedUint32 in repeatedUint32  {
          output += "\(indent) repeatedUint32[\(repeatedUint32ElementIndex)]: \(oneValuerepeatedUint32)\n"
          repeatedUint32ElementIndex++
      }
      var repeatedUint64ElementIndex:Int = 0
      for oneValuerepeatedUint64 in repeatedUint64  {
          output += "\(indent) repeatedUint64[\(repeatedUint64ElementIndex)]: \(oneValuerepeatedUint64)\n"
          repeatedUint64ElementIndex++
      }
      var repeatedSint32ElementIndex:Int = 0
      for oneValuerepeatedSint32 in repeatedSint32  {
          output += "\(indent) repeatedSint32[\(repeatedSint32ElementIndex)]: \(oneValuerepeatedSint32)\n"
          repeatedSint32ElementIndex++
      }
      var repeatedSint64ElementIndex:Int = 0
      for oneValuerepeatedSint64 in repeatedSint64  {
          output += "\(indent) repeatedSint64[\(repeatedSint64ElementIndex)]: \(oneValuerepeatedSint64)\n"
          repeatedSint64ElementIndex++
      }
      var repeatedFixed32ElementIndex:Int = 0
      for oneValuerepeatedFixed32 in repeatedFixed32  {
          output += "\(indent) repeatedFixed32[\(repeatedFixed32ElementIndex)]: \(oneValuerepeatedFixed32)\n"
          repeatedFixed32ElementIndex++
      }
      var repeatedFixed64ElementIndex:Int = 0
      for oneValuerepeatedFixed64 in repeatedFixed64  {
          output += "\(indent) repeatedFixed64[\(repeatedFixed64ElementIndex)]: \(oneValuerepeatedFixed64)\n"
          repeatedFixed64ElementIndex++
      }
      var repeatedSfixed32ElementIndex:Int = 0
      for oneValuerepeatedSfixed32 in repeatedSfixed32  {
          output += "\(indent) repeatedSfixed32[\(repeatedSfixed32ElementIndex)]: \(oneValuerepeatedSfixed32)\n"
          repeatedSfixed32ElementIndex++
      }
      var repeatedSfixed64ElementIndex:Int = 0
      for oneValuerepeatedSfixed64 in repeatedSfixed64  {
          output += "\(indent) repeatedSfixed64[\(repeatedSfixed64ElementIndex)]: \(oneValuerepeatedSfixed64)\n"
          repeatedSfixed64ElementIndex++
      }
      var repeatedFloatElementIndex:Int = 0
      for oneValuerepeatedFloat in repeatedFloat  {
          output += "\(indent) repeatedFloat[\(repeatedFloatElementIndex)]: \(oneValuerepeatedFloat)\n"
          repeatedFloatElementIndex++
      }
      var repeatedDoubleElementIndex:Int = 0
      for oneValuerepeatedDouble in repeatedDouble  {
          output += "\(indent) repeatedDouble[\(repeatedDoubleElementIndex)]: \(oneValuerepeatedDouble)\n"
          repeatedDoubleElementIndex++
      }
      var repeatedBoolElementIndex:Int = 0
      for oneValuerepeatedBool in repeatedBool  {
          output += "\(indent) repeatedBool[\(repeatedBoolElementIndex)]: \(oneValuerepeatedBool)\n"
          repeatedBoolElementIndex++
      }
      var repeatedStringElementIndex:Int = 0
      for oneValuerepeatedString in repeatedString  {
          output += "\(indent) repeatedString[\(repeatedStringElementIndex)]: \(oneValuerepeatedString)\n"
          repeatedStringElementIndex++
      }
      var repeatedBytesElementIndex:Int = 0
      for oneValuerepeatedBytes in repeatedBytes  {
          output += "\(indent) repeatedBytes[\(repeatedBytesElementIndex)]: \(oneValuerepeatedBytes)\n"
          repeatedBytesElementIndex++
      }
      var repeatedNestedMessageElementIndex:Int = 0
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          output += "\(indent) repeatedNestedMessage[\(repeatedNestedMessageElementIndex)] {\n"
          oneElementrepeatedNestedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedNestedMessageElementIndex++
      }
      var repeatedForeignMessageElementIndex:Int = 0
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          output += "\(indent) repeatedForeignMessage[\(repeatedForeignMessageElementIndex)] {\n"
          oneElementrepeatedForeignMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedForeignMessageElementIndex++
      }
      var repeatedProto2MessageElementIndex:Int = 0
      for oneElementrepeatedProto2Message in repeatedProto2Message {
          output += "\(indent) repeatedProto2Message[\(repeatedProto2MessageElementIndex)] {\n"
          oneElementrepeatedProto2Message.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedProto2MessageElementIndex++
      }
      var repeatedNestedEnumElementIndex:Int = 0
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          output += "\(indent) repeatedNestedEnum[\(repeatedNestedEnumElementIndex)]: \(oneValueOfrepeatedNestedEnum.rawValue)\n"
          repeatedNestedEnumElementIndex++
      }
      var repeatedForeignEnumElementIndex:Int = 0
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          output += "\(indent) repeatedForeignEnum[\(repeatedForeignEnumElementIndex)]: \(oneValueOfrepeatedForeignEnum.rawValue)\n"
          repeatedForeignEnumElementIndex++
      }
      var repeatedStringPieceElementIndex:Int = 0
      for oneValuerepeatedStringPiece in repeatedStringPiece  {
          output += "\(indent) repeatedStringPiece[\(repeatedStringPieceElementIndex)]: \(oneValuerepeatedStringPiece)\n"
          repeatedStringPieceElementIndex++
      }
      var repeatedCordElementIndex:Int = 0
      for oneValuerepeatedCord in repeatedCord  {
          output += "\(indent) repeatedCord[\(repeatedCordElementIndex)]: \(oneValuerepeatedCord)\n"
          repeatedCordElementIndex++
      }
      var repeatedLazyMessageElementIndex:Int = 0
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          output += "\(indent) repeatedLazyMessage[\(repeatedLazyMessageElementIndex)] {\n"
          oneElementrepeatedLazyMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedLazyMessageElementIndex++
      }
      if hasOneofUint32 {
        output += "\(indent) oneofUint32: \(oneofUint32) \n"
      }
      if hasOneofNestedMessage {
        output += "\(indent) oneofNestedMessage {\n"
        oneofNestedMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOneofString {
        output += "\(indent) oneofString: \(oneofString) \n"
      }
      if (hasOneofEnum) {
        output += "\(indent) oneofEnum: \(oneofEnum.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOptionalInt32 {
               hashCode = (hashCode &* 31) &+ optionalInt32.hashValue
            }
            if hasOptionalInt64 {
               hashCode = (hashCode &* 31) &+ optionalInt64.hashValue
            }
            if hasOptionalUint32 {
               hashCode = (hashCode &* 31) &+ optionalUint32.hashValue
            }
            if hasOptionalUint64 {
               hashCode = (hashCode &* 31) &+ optionalUint64.hashValue
            }
            if hasOptionalSint32 {
               hashCode = (hashCode &* 31) &+ optionalSint32.hashValue
            }
            if hasOptionalSint64 {
               hashCode = (hashCode &* 31) &+ optionalSint64.hashValue
            }
            if hasOptionalFixed32 {
               hashCode = (hashCode &* 31) &+ optionalFixed32.hashValue
            }
            if hasOptionalFixed64 {
               hashCode = (hashCode &* 31) &+ optionalFixed64.hashValue
            }
            if hasOptionalSfixed32 {
               hashCode = (hashCode &* 31) &+ optionalSfixed32.hashValue
            }
            if hasOptionalSfixed64 {
               hashCode = (hashCode &* 31) &+ optionalSfixed64.hashValue
            }
            if hasOptionalFloat {
               hashCode = (hashCode &* 31) &+ optionalFloat.hashValue
            }
            if hasOptionalDouble {
               hashCode = (hashCode &* 31) &+ optionalDouble.hashValue
            }
            if hasOptionalBool {
               hashCode = (hashCode &* 31) &+ optionalBool.hashValue
            }
            if hasOptionalString {
               hashCode = (hashCode &* 31) &+ optionalString.hashValue
            }
            if hasOptionalBytes {
               hashCode = (hashCode &* 31) &+ optionalBytes.hashValue
            }
            if hasOptionalNestedMessage {
                if let hashValueoptionalNestedMessage = optionalNestedMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalNestedMessage
                }
            }
            if hasOptionalForeignMessage {
                if let hashValueoptionalForeignMessage = optionalForeignMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalForeignMessage
                }
            }
            if hasOptionalProto2Message {
                if let hashValueoptionalProto2Message = optionalProto2Message?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalProto2Message
                }
            }
            if hasOptionalNestedEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalNestedEnum.rawValue)
            }
            if hasOptionalForeignEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalForeignEnum.rawValue)
            }
            if hasOptionalStringPiece {
               hashCode = (hashCode &* 31) &+ optionalStringPiece.hashValue
            }
            if hasOptionalCord {
               hashCode = (hashCode &* 31) &+ optionalCord.hashValue
            }
            if hasOptionalLazyMessage {
                if let hashValueoptionalLazyMessage = optionalLazyMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalLazyMessage
                }
            }
            for oneValuerepeatedInt32 in repeatedInt32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt32.hashValue
            }
            for oneValuerepeatedInt64 in repeatedInt64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt64.hashValue
            }
            for oneValuerepeatedUint32 in repeatedUint32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedUint32.hashValue
            }
            for oneValuerepeatedUint64 in repeatedUint64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedUint64.hashValue
            }
            for oneValuerepeatedSint32 in repeatedSint32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSint32.hashValue
            }
            for oneValuerepeatedSint64 in repeatedSint64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSint64.hashValue
            }
            for oneValuerepeatedFixed32 in repeatedFixed32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed32.hashValue
            }
            for oneValuerepeatedFixed64 in repeatedFixed64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed64.hashValue
            }
            for oneValuerepeatedSfixed32 in repeatedSfixed32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSfixed32.hashValue
            }
            for oneValuerepeatedSfixed64 in repeatedSfixed64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSfixed64.hashValue
            }
            for oneValuerepeatedFloat in repeatedFloat {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFloat.hashValue
            }
            for oneValuerepeatedDouble in repeatedDouble {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedDouble.hashValue
            }
            for oneValuerepeatedBool in repeatedBool {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedBool.hashValue
            }
            for oneValuerepeatedString in repeatedString {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedString.hashValue
            }
            for oneValuerepeatedBytes in repeatedBytes {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedBytes.hashValue
            }
            for oneElementrepeatedNestedMessage in repeatedNestedMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedNestedMessage.hashValue
            }
            for oneElementrepeatedForeignMessage in repeatedForeignMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedForeignMessage.hashValue
            }
            for oneElementrepeatedProto2Message in repeatedProto2Message {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedProto2Message.hashValue
            }
            for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedNestedEnum.rawValue)
            }
            for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedForeignEnum.rawValue)
            }
            for oneValuerepeatedStringPiece in repeatedStringPiece {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedStringPiece.hashValue
            }
            for oneValuerepeatedCord in repeatedCord {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedCord.hashValue
            }
            for oneElementrepeatedLazyMessage in repeatedLazyMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedLazyMessage.hashValue
            }
            if hasOneofUint32 {
               hashCode = (hashCode &* 31) &+ oneofUint32.hashValue
            }
            if hasOneofNestedMessage {
                if let hashValueoneofNestedMessage = oneofNestedMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoneofNestedMessage
                }
            }
            if hasOneofString {
               hashCode = (hashCode &* 31) &+ oneofString.hashValue
            }
            if hasOneofEnum {
               hashCode = (hashCode &* 31) &+ Int(oneofEnum.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Proto2NofieldpresenceUnittest.TestAllTypes"
    }
    override internal func className() -> String {
        return "Proto2NofieldpresenceUnittest.TestAllTypes"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Proto2NofieldpresenceUnittest.TestAllTypes.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:Proto2NofieldpresenceUnittest.TestAllTypes = Proto2NofieldpresenceUnittest.TestAllTypes()
      internal func getMessage() -> Proto2NofieldpresenceUnittest.TestAllTypes {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasOptionalInt32:Bool {
           get {
                return builderResult.hasOptionalInt32
           }
      }
      var optionalInt32:Int32 {
           get {
                return builderResult.optionalInt32
           }
           set (value) {
               builderResult.hasOptionalInt32 = true
               builderResult.optionalInt32 = value
           }
      }
      func setOptionalInt32(value:Int32) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalInt32 = value
        return self
      }
      internal func clearOptionalInt32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalInt32 = false
           builderResult.optionalInt32 = Int32(0)
           return self
      }
      var hasOptionalInt64:Bool {
           get {
                return builderResult.hasOptionalInt64
           }
      }
      var optionalInt64:Int64 {
           get {
                return builderResult.optionalInt64
           }
           set (value) {
               builderResult.hasOptionalInt64 = true
               builderResult.optionalInt64 = value
           }
      }
      func setOptionalInt64(value:Int64) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalInt64 = value
        return self
      }
      internal func clearOptionalInt64() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalInt64 = false
           builderResult.optionalInt64 = Int64(0)
           return self
      }
      var hasOptionalUint32:Bool {
           get {
                return builderResult.hasOptionalUint32
           }
      }
      var optionalUint32:UInt32 {
           get {
                return builderResult.optionalUint32
           }
           set (value) {
               builderResult.hasOptionalUint32 = true
               builderResult.optionalUint32 = value
           }
      }
      func setOptionalUint32(value:UInt32) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalUint32 = value
        return self
      }
      internal func clearOptionalUint32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalUint32 = false
           builderResult.optionalUint32 = UInt32(0)
           return self
      }
      var hasOptionalUint64:Bool {
           get {
                return builderResult.hasOptionalUint64
           }
      }
      var optionalUint64:UInt64 {
           get {
                return builderResult.optionalUint64
           }
           set (value) {
               builderResult.hasOptionalUint64 = true
               builderResult.optionalUint64 = value
           }
      }
      func setOptionalUint64(value:UInt64) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalUint64 = value
        return self
      }
      internal func clearOptionalUint64() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalUint64 = false
           builderResult.optionalUint64 = UInt64(0)
           return self
      }
      var hasOptionalSint32:Bool {
           get {
                return builderResult.hasOptionalSint32
           }
      }
      var optionalSint32:Int32 {
           get {
                return builderResult.optionalSint32
           }
           set (value) {
               builderResult.hasOptionalSint32 = true
               builderResult.optionalSint32 = value
           }
      }
      func setOptionalSint32(value:Int32) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalSint32 = value
        return self
      }
      internal func clearOptionalSint32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalSint32 = false
           builderResult.optionalSint32 = Int32(0)
           return self
      }
      var hasOptionalSint64:Bool {
           get {
                return builderResult.hasOptionalSint64
           }
      }
      var optionalSint64:Int64 {
           get {
                return builderResult.optionalSint64
           }
           set (value) {
               builderResult.hasOptionalSint64 = true
               builderResult.optionalSint64 = value
           }
      }
      func setOptionalSint64(value:Int64) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalSint64 = value
        return self
      }
      internal func clearOptionalSint64() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalSint64 = false
           builderResult.optionalSint64 = Int64(0)
           return self
      }
      var hasOptionalFixed32:Bool {
           get {
                return builderResult.hasOptionalFixed32
           }
      }
      var optionalFixed32:UInt32 {
           get {
                return builderResult.optionalFixed32
           }
           set (value) {
               builderResult.hasOptionalFixed32 = true
               builderResult.optionalFixed32 = value
           }
      }
      func setOptionalFixed32(value:UInt32) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalFixed32 = value
        return self
      }
      internal func clearOptionalFixed32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalFixed32 = false
           builderResult.optionalFixed32 = UInt32(0)
           return self
      }
      var hasOptionalFixed64:Bool {
           get {
                return builderResult.hasOptionalFixed64
           }
      }
      var optionalFixed64:UInt64 {
           get {
                return builderResult.optionalFixed64
           }
           set (value) {
               builderResult.hasOptionalFixed64 = true
               builderResult.optionalFixed64 = value
           }
      }
      func setOptionalFixed64(value:UInt64) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalFixed64 = value
        return self
      }
      internal func clearOptionalFixed64() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalFixed64 = false
           builderResult.optionalFixed64 = UInt64(0)
           return self
      }
      var hasOptionalSfixed32:Bool {
           get {
                return builderResult.hasOptionalSfixed32
           }
      }
      var optionalSfixed32:Int32 {
           get {
                return builderResult.optionalSfixed32
           }
           set (value) {
               builderResult.hasOptionalSfixed32 = true
               builderResult.optionalSfixed32 = value
           }
      }
      func setOptionalSfixed32(value:Int32) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalSfixed32 = value
        return self
      }
      internal func clearOptionalSfixed32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalSfixed32 = false
           builderResult.optionalSfixed32 = Int32(0)
           return self
      }
      var hasOptionalSfixed64:Bool {
           get {
                return builderResult.hasOptionalSfixed64
           }
      }
      var optionalSfixed64:Int64 {
           get {
                return builderResult.optionalSfixed64
           }
           set (value) {
               builderResult.hasOptionalSfixed64 = true
               builderResult.optionalSfixed64 = value
           }
      }
      func setOptionalSfixed64(value:Int64) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalSfixed64 = value
        return self
      }
      internal func clearOptionalSfixed64() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalSfixed64 = false
           builderResult.optionalSfixed64 = Int64(0)
           return self
      }
      var hasOptionalFloat:Bool {
           get {
                return builderResult.hasOptionalFloat
           }
      }
      var optionalFloat:Float {
           get {
                return builderResult.optionalFloat
           }
           set (value) {
               builderResult.hasOptionalFloat = true
               builderResult.optionalFloat = value
           }
      }
      func setOptionalFloat(value:Float) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalFloat = value
        return self
      }
      internal func clearOptionalFloat() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalFloat = false
           builderResult.optionalFloat = Float(0)
           return self
      }
      var hasOptionalDouble:Bool {
           get {
                return builderResult.hasOptionalDouble
           }
      }
      var optionalDouble:Double {
           get {
                return builderResult.optionalDouble
           }
           set (value) {
               builderResult.hasOptionalDouble = true
               builderResult.optionalDouble = value
           }
      }
      func setOptionalDouble(value:Double) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalDouble = value
        return self
      }
      internal func clearOptionalDouble() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalDouble = false
           builderResult.optionalDouble = Double(0)
           return self
      }
      var hasOptionalBool:Bool {
           get {
                return builderResult.hasOptionalBool
           }
      }
      var optionalBool:Bool {
           get {
                return builderResult.optionalBool
           }
           set (value) {
               builderResult.hasOptionalBool = true
               builderResult.optionalBool = value
           }
      }
      func setOptionalBool(value:Bool) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalBool = value
        return self
      }
      internal func clearOptionalBool() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalBool = false
           builderResult.optionalBool = false
           return self
      }
      var hasOptionalString:Bool {
           get {
                return builderResult.hasOptionalString
           }
      }
      var optionalString:String {
           get {
                return builderResult.optionalString
           }
           set (value) {
               builderResult.hasOptionalString = true
               builderResult.optionalString = value
           }
      }
      func setOptionalString(value:String) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalString = value
        return self
      }
      internal func clearOptionalString() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalString = false
           builderResult.optionalString = ""
           return self
      }
      var hasOptionalBytes:Bool {
           get {
                return builderResult.hasOptionalBytes
           }
      }
      var optionalBytes:NSData {
           get {
                return builderResult.optionalBytes
           }
           set (value) {
               builderResult.hasOptionalBytes = true
               builderResult.optionalBytes = value
           }
      }
      func setOptionalBytes(value:NSData) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalBytes = value
        return self
      }
      internal func clearOptionalBytes() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalBytes = false
           builderResult.optionalBytes = NSData()
           return self
      }
      var hasOptionalNestedMessage:Bool {
           get {
               return builderResult.hasOptionalNestedMessage
           }
      }
      var optionalNestedMessage:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage! {
           get {
               if optionalNestedMessageBuilder_ != nil {
                  builderResult.optionalNestedMessage = optionalNestedMessageBuilder_.getMessage()
               }
               return builderResult.optionalNestedMessage
           }
           set (value) {
               builderResult.hasOptionalNestedMessage = true
               builderResult.optionalNestedMessage = value
           }
      }
      private var optionalNestedMessageBuilder_:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder! {
           didSet {
              builderResult.hasOptionalNestedMessage = true
           }
      }
      internal func getOptionalNestedMessageBuilder() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
        if optionalNestedMessageBuilder_ == nil {
           optionalNestedMessageBuilder_ = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder()
           builderResult.optionalNestedMessage = optionalNestedMessageBuilder_.getMessage()
           if optionalNestedMessage != nil {
              optionalNestedMessageBuilder_.mergeFrom(optionalNestedMessage)
           }
        }
        return optionalNestedMessageBuilder_
      }
      func setOptionalNestedMessage(value:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage!) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalNestedMessage = value
        return self
      }
      internal func mergeOptionalNestedMessage(value:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        if builderResult.hasOptionalNestedMessage {
          builderResult.optionalNestedMessage = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.optionalNestedMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalNestedMessage = value
        }
        builderResult.hasOptionalNestedMessage = true
        return self
      }
      internal func clearOptionalNestedMessage() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        optionalNestedMessageBuilder_ = nil
        builderResult.hasOptionalNestedMessage = false
        builderResult.optionalNestedMessage = nil
        return self
      }
      var hasOptionalForeignMessage:Bool {
           get {
               return builderResult.hasOptionalForeignMessage
           }
      }
      var optionalForeignMessage:Proto2NofieldpresenceUnittest.ForeignMessage! {
           get {
               if optionalForeignMessageBuilder_ != nil {
                  builderResult.optionalForeignMessage = optionalForeignMessageBuilder_.getMessage()
               }
               return builderResult.optionalForeignMessage
           }
           set (value) {
               builderResult.hasOptionalForeignMessage = true
               builderResult.optionalForeignMessage = value
           }
      }
      private var optionalForeignMessageBuilder_:Proto2NofieldpresenceUnittest.ForeignMessage.Builder! {
           didSet {
              builderResult.hasOptionalForeignMessage = true
           }
      }
      internal func getOptionalForeignMessageBuilder() -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
        if optionalForeignMessageBuilder_ == nil {
           optionalForeignMessageBuilder_ = Proto2NofieldpresenceUnittest.ForeignMessage.Builder()
           builderResult.optionalForeignMessage = optionalForeignMessageBuilder_.getMessage()
           if optionalForeignMessage != nil {
              optionalForeignMessageBuilder_.mergeFrom(optionalForeignMessage)
           }
        }
        return optionalForeignMessageBuilder_
      }
      func setOptionalForeignMessage(value:Proto2NofieldpresenceUnittest.ForeignMessage!) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalForeignMessage = value
        return self
      }
      internal func mergeOptionalForeignMessage(value:Proto2NofieldpresenceUnittest.ForeignMessage) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        if builderResult.hasOptionalForeignMessage {
          builderResult.optionalForeignMessage = Proto2NofieldpresenceUnittest.ForeignMessage.builderWithPrototype(builderResult.optionalForeignMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalForeignMessage = value
        }
        builderResult.hasOptionalForeignMessage = true
        return self
      }
      internal func clearOptionalForeignMessage() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        optionalForeignMessageBuilder_ = nil
        builderResult.hasOptionalForeignMessage = false
        builderResult.optionalForeignMessage = nil
        return self
      }
      var hasOptionalProto2Message:Bool {
           get {
               return builderResult.hasOptionalProto2Message
           }
      }
      var optionalProto2Message:ProtobufUnittest.TestAllTypes! {
           get {
               if optionalProto2MessageBuilder_ != nil {
                  builderResult.optionalProto2Message = optionalProto2MessageBuilder_.getMessage()
               }
               return builderResult.optionalProto2Message
           }
           set (value) {
               builderResult.hasOptionalProto2Message = true
               builderResult.optionalProto2Message = value
           }
      }
      private var optionalProto2MessageBuilder_:ProtobufUnittest.TestAllTypes.Builder! {
           didSet {
              builderResult.hasOptionalProto2Message = true
           }
      }
      internal func getOptionalProto2MessageBuilder() -> ProtobufUnittest.TestAllTypes.Builder {
        if optionalProto2MessageBuilder_ == nil {
           optionalProto2MessageBuilder_ = ProtobufUnittest.TestAllTypes.Builder()
           builderResult.optionalProto2Message = optionalProto2MessageBuilder_.getMessage()
           if optionalProto2Message != nil {
              optionalProto2MessageBuilder_.mergeFrom(optionalProto2Message)
           }
        }
        return optionalProto2MessageBuilder_
      }
      func setOptionalProto2Message(value:ProtobufUnittest.TestAllTypes!) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalProto2Message = value
        return self
      }
      internal func mergeOptionalProto2Message(value:ProtobufUnittest.TestAllTypes) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        if builderResult.hasOptionalProto2Message {
          builderResult.optionalProto2Message = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.optionalProto2Message).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalProto2Message = value
        }
        builderResult.hasOptionalProto2Message = true
        return self
      }
      internal func clearOptionalProto2Message() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        optionalProto2MessageBuilder_ = nil
        builderResult.hasOptionalProto2Message = false
        builderResult.optionalProto2Message = nil
        return self
      }
        var hasOptionalNestedEnum:Bool{
            get {
                return builderResult.hasOptionalNestedEnum
            }
        }
        var optionalNestedEnum:TestAllTypes.NestedEnum {
            get {
                return builderResult.optionalNestedEnum
            }
            set (value) {
                builderResult.hasOptionalNestedEnum = true
                builderResult.optionalNestedEnum = value
            }
        }
        internal func setOptionalNestedEnum(value:TestAllTypes.NestedEnum) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
          self.optionalNestedEnum = value
          return self
        }
        internal func clearOptionalNestedEnum() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
           builderResult.hasOptionalNestedEnum = false
           builderResult.optionalNestedEnum = .Foo
           return self
        }
        var hasOptionalForeignEnum:Bool{
            get {
                return builderResult.hasOptionalForeignEnum
            }
        }
        var optionalForeignEnum:Proto2NofieldpresenceUnittest.ForeignEnum {
            get {
                return builderResult.optionalForeignEnum
            }
            set (value) {
                builderResult.hasOptionalForeignEnum = true
                builderResult.optionalForeignEnum = value
            }
        }
        internal func setOptionalForeignEnum(value:Proto2NofieldpresenceUnittest.ForeignEnum) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
          self.optionalForeignEnum = value
          return self
        }
        internal func clearOptionalForeignEnum() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
           builderResult.hasOptionalForeignEnum = false
           builderResult.optionalForeignEnum = .ForeignFoo
           return self
        }
      var hasOptionalStringPiece:Bool {
           get {
                return builderResult.hasOptionalStringPiece
           }
      }
      var optionalStringPiece:String {
           get {
                return builderResult.optionalStringPiece
           }
           set (value) {
               builderResult.hasOptionalStringPiece = true
               builderResult.optionalStringPiece = value
           }
      }
      func setOptionalStringPiece(value:String) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalStringPiece = value
        return self
      }
      internal func clearOptionalStringPiece() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalStringPiece = false
           builderResult.optionalStringPiece = ""
           return self
      }
      var hasOptionalCord:Bool {
           get {
                return builderResult.hasOptionalCord
           }
      }
      var optionalCord:String {
           get {
                return builderResult.optionalCord
           }
           set (value) {
               builderResult.hasOptionalCord = true
               builderResult.optionalCord = value
           }
      }
      func setOptionalCord(value:String) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalCord = value
        return self
      }
      internal func clearOptionalCord() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOptionalCord = false
           builderResult.optionalCord = ""
           return self
      }
      var hasOptionalLazyMessage:Bool {
           get {
               return builderResult.hasOptionalLazyMessage
           }
      }
      var optionalLazyMessage:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage! {
           get {
               if optionalLazyMessageBuilder_ != nil {
                  builderResult.optionalLazyMessage = optionalLazyMessageBuilder_.getMessage()
               }
               return builderResult.optionalLazyMessage
           }
           set (value) {
               builderResult.hasOptionalLazyMessage = true
               builderResult.optionalLazyMessage = value
           }
      }
      private var optionalLazyMessageBuilder_:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder! {
           didSet {
              builderResult.hasOptionalLazyMessage = true
           }
      }
      internal func getOptionalLazyMessageBuilder() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
        if optionalLazyMessageBuilder_ == nil {
           optionalLazyMessageBuilder_ = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder()
           builderResult.optionalLazyMessage = optionalLazyMessageBuilder_.getMessage()
           if optionalLazyMessage != nil {
              optionalLazyMessageBuilder_.mergeFrom(optionalLazyMessage)
           }
        }
        return optionalLazyMessageBuilder_
      }
      func setOptionalLazyMessage(value:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage!) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.optionalLazyMessage = value
        return self
      }
      internal func mergeOptionalLazyMessage(value:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        if builderResult.hasOptionalLazyMessage {
          builderResult.optionalLazyMessage = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.optionalLazyMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalLazyMessage = value
        }
        builderResult.hasOptionalLazyMessage = true
        return self
      }
      internal func clearOptionalLazyMessage() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        optionalLazyMessageBuilder_ = nil
        builderResult.hasOptionalLazyMessage = false
        builderResult.optionalLazyMessage = nil
        return self
      }
      var repeatedInt32:Array<Int32> {
           get {
               return builderResult.repeatedInt32
           }
           set (array) {
               builderResult.repeatedInt32 = array
           }
      }
      func setRepeatedInt32(value:Array<Int32>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedInt32 = value
        return self
      }
      internal func clearRepeatedInt32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedInt32.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedInt64:Array<Int64> {
           get {
               return builderResult.repeatedInt64
           }
           set (array) {
               builderResult.repeatedInt64 = array
           }
      }
      func setRepeatedInt64(value:Array<Int64>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedInt64 = value
        return self
      }
      internal func clearRepeatedInt64() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedInt64.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedUint32:Array<UInt32> {
           get {
               return builderResult.repeatedUint32
           }
           set (array) {
               builderResult.repeatedUint32 = array
           }
      }
      func setRepeatedUint32(value:Array<UInt32>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedUint32 = value
        return self
      }
      internal func clearRepeatedUint32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedUint32.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedUint64:Array<UInt64> {
           get {
               return builderResult.repeatedUint64
           }
           set (array) {
               builderResult.repeatedUint64 = array
           }
      }
      func setRepeatedUint64(value:Array<UInt64>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedUint64 = value
        return self
      }
      internal func clearRepeatedUint64() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedUint64.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedSint32:Array<Int32> {
           get {
               return builderResult.repeatedSint32
           }
           set (array) {
               builderResult.repeatedSint32 = array
           }
      }
      func setRepeatedSint32(value:Array<Int32>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedSint32 = value
        return self
      }
      internal func clearRepeatedSint32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedSint32.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedSint64:Array<Int64> {
           get {
               return builderResult.repeatedSint64
           }
           set (array) {
               builderResult.repeatedSint64 = array
           }
      }
      func setRepeatedSint64(value:Array<Int64>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedSint64 = value
        return self
      }
      internal func clearRepeatedSint64() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedSint64.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedFixed32:Array<UInt32> {
           get {
               return builderResult.repeatedFixed32
           }
           set (array) {
               builderResult.repeatedFixed32 = array
           }
      }
      func setRepeatedFixed32(value:Array<UInt32>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedFixed32 = value
        return self
      }
      internal func clearRepeatedFixed32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedFixed32.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedFixed64:Array<UInt64> {
           get {
               return builderResult.repeatedFixed64
           }
           set (array) {
               builderResult.repeatedFixed64 = array
           }
      }
      func setRepeatedFixed64(value:Array<UInt64>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedFixed64 = value
        return self
      }
      internal func clearRepeatedFixed64() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedFixed64.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedSfixed32:Array<Int32> {
           get {
               return builderResult.repeatedSfixed32
           }
           set (array) {
               builderResult.repeatedSfixed32 = array
           }
      }
      func setRepeatedSfixed32(value:Array<Int32>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedSfixed32 = value
        return self
      }
      internal func clearRepeatedSfixed32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedSfixed32.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedSfixed64:Array<Int64> {
           get {
               return builderResult.repeatedSfixed64
           }
           set (array) {
               builderResult.repeatedSfixed64 = array
           }
      }
      func setRepeatedSfixed64(value:Array<Int64>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedSfixed64 = value
        return self
      }
      internal func clearRepeatedSfixed64() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedSfixed64.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedFloat:Array<Float> {
           get {
               return builderResult.repeatedFloat
           }
           set (array) {
               builderResult.repeatedFloat = array
           }
      }
      func setRepeatedFloat(value:Array<Float>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedFloat = value
        return self
      }
      internal func clearRepeatedFloat() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedFloat.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedDouble:Array<Double> {
           get {
               return builderResult.repeatedDouble
           }
           set (array) {
               builderResult.repeatedDouble = array
           }
      }
      func setRepeatedDouble(value:Array<Double>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedDouble = value
        return self
      }
      internal func clearRepeatedDouble() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedDouble.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedBool:Array<Bool> {
           get {
               return builderResult.repeatedBool
           }
           set (array) {
               builderResult.repeatedBool = array
           }
      }
      func setRepeatedBool(value:Array<Bool>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedBool = value
        return self
      }
      internal func clearRepeatedBool() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedBool.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedString:Array<String> {
           get {
               return builderResult.repeatedString
           }
           set (array) {
               builderResult.repeatedString = array
           }
      }
      func setRepeatedString(value:Array<String>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedString = value
        return self
      }
      internal func clearRepeatedString() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedString.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedBytes:Array<NSData> {
           get {
               return builderResult.repeatedBytes
           }
           set (array) {
               builderResult.repeatedBytes = array
           }
      }
      func setRepeatedBytes(value:Array<NSData>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedBytes = value
        return self
      }
      internal func clearRepeatedBytes() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedBytes.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedNestedMessage:Array<Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage> {
           get {
               return builderResult.repeatedNestedMessage
           }
           set (value) {
               builderResult.repeatedNestedMessage = value
           }
      }
      func setRepeatedNestedMessage(value:Array<Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedNestedMessage = value
        return self
      }
      internal func clearRepeatedNestedMessage() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        builderResult.repeatedNestedMessage.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedForeignMessage:Array<Proto2NofieldpresenceUnittest.ForeignMessage> {
           get {
               return builderResult.repeatedForeignMessage
           }
           set (value) {
               builderResult.repeatedForeignMessage = value
           }
      }
      func setRepeatedForeignMessage(value:Array<Proto2NofieldpresenceUnittest.ForeignMessage>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedForeignMessage = value
        return self
      }
      internal func clearRepeatedForeignMessage() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        builderResult.repeatedForeignMessage.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedProto2Message:Array<ProtobufUnittest.TestAllTypes> {
           get {
               return builderResult.repeatedProto2Message
           }
           set (value) {
               builderResult.repeatedProto2Message = value
           }
      }
      func setRepeatedProto2Message(value:Array<ProtobufUnittest.TestAllTypes>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedProto2Message = value
        return self
      }
      internal func clearRepeatedProto2Message() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        builderResult.repeatedProto2Message.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedNestedEnum:Array<TestAllTypes.NestedEnum> {
          get {
              return builderResult.repeatedNestedEnum
          }
          set (value) {
              builderResult.repeatedNestedEnum = value
          }
      }
      func setRepeatedNestedEnum(value:Array<TestAllTypes.NestedEnum>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedNestedEnum = value
        return self
      }
      internal func clearRepeatedNestedEnum() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        builderResult.repeatedNestedEnum.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedForeignEnum:Array<Proto2NofieldpresenceUnittest.ForeignEnum> {
          get {
              return builderResult.repeatedForeignEnum
          }
          set (value) {
              builderResult.repeatedForeignEnum = value
          }
      }
      func setRepeatedForeignEnum(value:Array<Proto2NofieldpresenceUnittest.ForeignEnum>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedForeignEnum = value
        return self
      }
      internal func clearRepeatedForeignEnum() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        builderResult.repeatedForeignEnum.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedStringPiece:Array<String> {
           get {
               return builderResult.repeatedStringPiece
           }
           set (array) {
               builderResult.repeatedStringPiece = array
           }
      }
      func setRepeatedStringPiece(value:Array<String>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedStringPiece = value
        return self
      }
      internal func clearRepeatedStringPiece() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedStringPiece.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedCord:Array<String> {
           get {
               return builderResult.repeatedCord
           }
           set (array) {
               builderResult.repeatedCord = array
           }
      }
      func setRepeatedCord(value:Array<String>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedCord = value
        return self
      }
      internal func clearRepeatedCord() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
         builderResult.repeatedCord.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedLazyMessage:Array<Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage> {
           get {
               return builderResult.repeatedLazyMessage
           }
           set (value) {
               builderResult.repeatedLazyMessage = value
           }
      }
      func setRepeatedLazyMessage(value:Array<Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage>) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.repeatedLazyMessage = value
        return self
      }
      internal func clearRepeatedLazyMessage() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        builderResult.repeatedLazyMessage.removeAll(keepingCapacity: false)
        return self
      }
      var hasOneofUint32:Bool {
           get {
                return builderResult.hasOneofUint32
           }
      }
      var oneofUint32:UInt32 {
           get {
                return builderResult.oneofUint32
           }
           set (value) {
               builderResult.hasOneofUint32 = true
               builderResult.oneofUint32 = value
           }
      }
      func setOneofUint32(value:UInt32) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.oneofUint32 = value
        return self
      }
      internal func clearOneofUint32() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOneofUint32 = false
           builderResult.oneofUint32 = UInt32(0)
           return self
      }
      var hasOneofNestedMessage:Bool {
           get {
               return builderResult.hasOneofNestedMessage
           }
      }
      var oneofNestedMessage:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage! {
           get {
               if oneofNestedMessageBuilder_ != nil {
                  builderResult.oneofNestedMessage = oneofNestedMessageBuilder_.getMessage()
               }
               return builderResult.oneofNestedMessage
           }
           set (value) {
               builderResult.hasOneofNestedMessage = true
               builderResult.oneofNestedMessage = value
           }
      }
      private var oneofNestedMessageBuilder_:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder! {
           didSet {
              builderResult.hasOneofNestedMessage = true
           }
      }
      internal func getOneofNestedMessageBuilder() -> Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder {
        if oneofNestedMessageBuilder_ == nil {
           oneofNestedMessageBuilder_ = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder()
           builderResult.oneofNestedMessage = oneofNestedMessageBuilder_.getMessage()
           if oneofNestedMessage != nil {
              oneofNestedMessageBuilder_.mergeFrom(oneofNestedMessage)
           }
        }
        return oneofNestedMessageBuilder_
      }
      func setOneofNestedMessage(value:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage!) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.oneofNestedMessage = value
        return self
      }
      internal func mergeOneofNestedMessage(value:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        if builderResult.hasOneofNestedMessage {
          builderResult.oneofNestedMessage = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.oneofNestedMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.oneofNestedMessage = value
        }
        builderResult.hasOneofNestedMessage = true
        return self
      }
      internal func clearOneofNestedMessage() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        oneofNestedMessageBuilder_ = nil
        builderResult.hasOneofNestedMessage = false
        builderResult.oneofNestedMessage = nil
        return self
      }
      var hasOneofString:Bool {
           get {
                return builderResult.hasOneofString
           }
      }
      var oneofString:String {
           get {
                return builderResult.oneofString
           }
           set (value) {
               builderResult.hasOneofString = true
               builderResult.oneofString = value
           }
      }
      func setOneofString(value:String) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        self.oneofString = value
        return self
      }
      internal func clearOneofString() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder{
           builderResult.hasOneofString = false
           builderResult.oneofString = ""
           return self
      }
        var hasOneofEnum:Bool{
            get {
                return builderResult.hasOneofEnum
            }
        }
        var oneofEnum:TestAllTypes.NestedEnum {
            get {
                return builderResult.oneofEnum
            }
            set (value) {
                builderResult.hasOneofEnum = true
                builderResult.oneofEnum = value
            }
        }
        internal func setOneofEnum(value:TestAllTypes.NestedEnum) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
          self.oneofEnum = value
          return self
        }
        internal func clearOneofEnum() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
           builderResult.hasOneofEnum = false
           builderResult.oneofEnum = .Foo
           return self
        }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        builderResult = Proto2NofieldpresenceUnittest.TestAllTypes()
        return self
      }
      internal override func clone() -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        return Proto2NofieldpresenceUnittest.TestAllTypes.builderWithPrototype(builderResult)
      }
      internal override func build() -> Proto2NofieldpresenceUnittest.TestAllTypes {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Proto2NofieldpresenceUnittest.TestAllTypes {
        let returnMe:Proto2NofieldpresenceUnittest.TestAllTypes = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Proto2NofieldpresenceUnittest.TestAllTypes) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        if other == Proto2NofieldpresenceUnittest.TestAllTypes() {
         return self
        }
        if other.hasOptionalInt32 {
             optionalInt32 = other.optionalInt32
        }
        if other.hasOptionalInt64 {
             optionalInt64 = other.optionalInt64
        }
        if other.hasOptionalUint32 {
             optionalUint32 = other.optionalUint32
        }
        if other.hasOptionalUint64 {
             optionalUint64 = other.optionalUint64
        }
        if other.hasOptionalSint32 {
             optionalSint32 = other.optionalSint32
        }
        if other.hasOptionalSint64 {
             optionalSint64 = other.optionalSint64
        }
        if other.hasOptionalFixed32 {
             optionalFixed32 = other.optionalFixed32
        }
        if other.hasOptionalFixed64 {
             optionalFixed64 = other.optionalFixed64
        }
        if other.hasOptionalSfixed32 {
             optionalSfixed32 = other.optionalSfixed32
        }
        if other.hasOptionalSfixed64 {
             optionalSfixed64 = other.optionalSfixed64
        }
        if other.hasOptionalFloat {
             optionalFloat = other.optionalFloat
        }
        if other.hasOptionalDouble {
             optionalDouble = other.optionalDouble
        }
        if other.hasOptionalBool {
             optionalBool = other.optionalBool
        }
        if other.hasOptionalString {
             optionalString = other.optionalString
        }
        if other.hasOptionalBytes {
             optionalBytes = other.optionalBytes
        }
        if (other.hasOptionalNestedMessage) {
            mergeOptionalNestedMessage(other.optionalNestedMessage)
        }
        if (other.hasOptionalForeignMessage) {
            mergeOptionalForeignMessage(other.optionalForeignMessage)
        }
        if (other.hasOptionalProto2Message) {
            mergeOptionalProto2Message(other.optionalProto2Message)
        }
        if other.hasOptionalNestedEnum {
             optionalNestedEnum = other.optionalNestedEnum
        }
        if other.hasOptionalForeignEnum {
             optionalForeignEnum = other.optionalForeignEnum
        }
        if other.hasOptionalStringPiece {
             optionalStringPiece = other.optionalStringPiece
        }
        if other.hasOptionalCord {
             optionalCord = other.optionalCord
        }
        if (other.hasOptionalLazyMessage) {
            mergeOptionalLazyMessage(other.optionalLazyMessage)
        }
        if !other.repeatedInt32.isEmpty {
            builderResult.repeatedInt32 += other.repeatedInt32
        }
        if !other.repeatedInt64.isEmpty {
            builderResult.repeatedInt64 += other.repeatedInt64
        }
        if !other.repeatedUint32.isEmpty {
            builderResult.repeatedUint32 += other.repeatedUint32
        }
        if !other.repeatedUint64.isEmpty {
            builderResult.repeatedUint64 += other.repeatedUint64
        }
        if !other.repeatedSint32.isEmpty {
            builderResult.repeatedSint32 += other.repeatedSint32
        }
        if !other.repeatedSint64.isEmpty {
            builderResult.repeatedSint64 += other.repeatedSint64
        }
        if !other.repeatedFixed32.isEmpty {
            builderResult.repeatedFixed32 += other.repeatedFixed32
        }
        if !other.repeatedFixed64.isEmpty {
            builderResult.repeatedFixed64 += other.repeatedFixed64
        }
        if !other.repeatedSfixed32.isEmpty {
            builderResult.repeatedSfixed32 += other.repeatedSfixed32
        }
        if !other.repeatedSfixed64.isEmpty {
            builderResult.repeatedSfixed64 += other.repeatedSfixed64
        }
        if !other.repeatedFloat.isEmpty {
            builderResult.repeatedFloat += other.repeatedFloat
        }
        if !other.repeatedDouble.isEmpty {
            builderResult.repeatedDouble += other.repeatedDouble
        }
        if !other.repeatedBool.isEmpty {
            builderResult.repeatedBool += other.repeatedBool
        }
        if !other.repeatedString.isEmpty {
            builderResult.repeatedString += other.repeatedString
        }
        if !other.repeatedBytes.isEmpty {
            builderResult.repeatedBytes += other.repeatedBytes
        }
        if !other.repeatedNestedMessage.isEmpty  {
           builderResult.repeatedNestedMessage += other.repeatedNestedMessage
        }
        if !other.repeatedForeignMessage.isEmpty  {
           builderResult.repeatedForeignMessage += other.repeatedForeignMessage
        }
        if !other.repeatedProto2Message.isEmpty  {
           builderResult.repeatedProto2Message += other.repeatedProto2Message
        }
        if !other.repeatedNestedEnum.isEmpty {
           builderResult.repeatedNestedEnum += other.repeatedNestedEnum
        }
        if !other.repeatedForeignEnum.isEmpty {
           builderResult.repeatedForeignEnum += other.repeatedForeignEnum
        }
        if !other.repeatedStringPiece.isEmpty {
            builderResult.repeatedStringPiece += other.repeatedStringPiece
        }
        if !other.repeatedCord.isEmpty {
            builderResult.repeatedCord += other.repeatedCord
        }
        if !other.repeatedLazyMessage.isEmpty  {
           builderResult.repeatedLazyMessage += other.repeatedLazyMessage
        }
        if other.hasOneofUint32 {
             oneofUint32 = other.oneofUint32
        }
        if (other.hasOneofNestedMessage) {
            mergeOneofNestedMessage(other.oneofNestedMessage)
        }
        if other.hasOneofString {
             oneofString = other.oneofString
        }
        if other.hasOneofEnum {
             oneofEnum = other.oneofEnum
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestAllTypes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 8 :
            optionalInt32 = input.readInt32()

          case 16 :
            optionalInt64 = input.readInt64()

          case 24 :
            optionalUint32 = input.readUInt32()

          case 32 :
            optionalUint64 = input.readUInt64()

          case 40 :
            optionalSint32 = input.readSInt32()

          case 48 :
            optionalSint64 = input.readSInt64()

          case 61 :
            optionalFixed32 = input.readFixed32()

          case 65 :
            optionalFixed64 = input.readFixed64()

          case 77 :
            optionalSfixed32 = input.readSFixed32()

          case 81 :
            optionalSfixed64 = input.readSFixed64()

          case 93 :
            optionalFloat = input.readFloat()

          case 97 :
            optionalDouble = input.readDouble()

          case 104 :
            optionalBool = input.readBool()

          case 114 :
            optionalString = input.readString()

          case 122 :
            optionalBytes = input.readData()

          case 146 :
            let subBuilder:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder()
            if hasOptionalNestedMessage {
              subBuilder.mergeFrom(optionalNestedMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalNestedMessage = subBuilder.buildPartial()

          case 154 :
            let subBuilder:Proto2NofieldpresenceUnittest.ForeignMessage.Builder = Proto2NofieldpresenceUnittest.ForeignMessage.Builder()
            if hasOptionalForeignMessage {
              subBuilder.mergeFrom(optionalForeignMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalForeignMessage = subBuilder.buildPartial()

          case 162 :
            let subBuilder:ProtobufUnittest.TestAllTypes.Builder = ProtobufUnittest.TestAllTypes.Builder()
            if hasOptionalProto2Message {
              subBuilder.mergeFrom(optionalProto2Message)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalProto2Message = subBuilder.buildPartial()

          case 168 :
            let valueIntoptionalNestedEnum = input.readEnum()
            if let enumsoptionalNestedEnum = TestAllTypes.NestedEnum(rawValue:valueIntoptionalNestedEnum){
                 optionalNestedEnum = enumsoptionalNestedEnum
            } else {
                 unknownFieldsBuilder.mergeVarintField(21, value:Int64(valueIntoptionalNestedEnum))
            }

          case 176 :
            let valueIntoptionalForeignEnum = input.readEnum()
            if let enumsoptionalForeignEnum = Proto2NofieldpresenceUnittest.ForeignEnum(rawValue:valueIntoptionalForeignEnum){
                 optionalForeignEnum = enumsoptionalForeignEnum
            } else {
                 unknownFieldsBuilder.mergeVarintField(22, value:Int64(valueIntoptionalForeignEnum))
            }

          case 194 :
            optionalStringPiece = input.readString()

          case 202 :
            optionalCord = input.readString()

          case 242 :
            let subBuilder:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder()
            if hasOptionalLazyMessage {
              subBuilder.mergeFrom(optionalLazyMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalLazyMessage = subBuilder.buildPartial()

          case 248 :
            repeatedInt32 += [input.readInt32()]

          case 256 :
            repeatedInt64 += [input.readInt64()]

          case 264 :
            repeatedUint32 += [input.readUInt32()]

          case 272 :
            repeatedUint64 += [input.readUInt64()]

          case 280 :
            repeatedSint32 += [input.readSInt32()]

          case 288 :
            repeatedSint64 += [input.readSInt64()]

          case 301 :
            repeatedFixed32 += [input.readFixed32()]

          case 305 :
            repeatedFixed64 += [input.readFixed64()]

          case 317 :
            repeatedSfixed32 += [input.readSFixed32()]

          case 321 :
            repeatedSfixed64 += [input.readSFixed64()]

          case 333 :
            repeatedFloat += [input.readFloat()]

          case 337 :
            repeatedDouble += [input.readDouble()]

          case 344 :
            repeatedBool += [input.readBool()]

          case 354 :
            repeatedString += [input.readString()]

          case 362 :
            repeatedBytes += [input.readData()]

          case 386 :
            let subBuilder = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedNestedMessage += [subBuilder.buildPartial()]

          case 394 :
            let subBuilder = Proto2NofieldpresenceUnittest.ForeignMessage.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedForeignMessage += [subBuilder.buildPartial()]

          case 402 :
            let subBuilder = ProtobufUnittest.TestAllTypes.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedProto2Message += [subBuilder.buildPartial()]

          case 408 :
            let valueIntrepeatedNestedEnum = input.readEnum()
            if let enumsrepeatedNestedEnum = TestAllTypes.NestedEnum(rawValue:valueIntrepeatedNestedEnum) {
                 builderResult.repeatedNestedEnum += [enumsrepeatedNestedEnum]
            } else {
                 unknownFieldsBuilder.mergeVarintField(51, value:Int64(valueIntrepeatedNestedEnum))
            }

          case 416 :
            let valueIntrepeatedForeignEnum = input.readEnum()
            if let enumsrepeatedForeignEnum = Proto2NofieldpresenceUnittest.ForeignEnum(rawValue:valueIntrepeatedForeignEnum) {
                 builderResult.repeatedForeignEnum += [enumsrepeatedForeignEnum]
            } else {
                 unknownFieldsBuilder.mergeVarintField(52, value:Int64(valueIntrepeatedForeignEnum))
            }

          case 434 :
            repeatedStringPiece += [input.readString()]

          case 442 :
            repeatedCord += [input.readString()]

          case 458 :
            let subBuilder = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedLazyMessage += [subBuilder.buildPartial()]

          case 888 :
            oneofUint32 = input.readUInt32()

          case 898 :
            let subBuilder:Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder = Proto2NofieldpresenceUnittest.TestAllTypes.NestedMessage.Builder()
            if hasOneofNestedMessage {
              subBuilder.mergeFrom(oneofNestedMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            oneofNestedMessage = subBuilder.buildPartial()

          case 906 :
            oneofString = input.readString()

          case 912 :
            let valueIntoneofEnum = input.readEnum()
            if let enumsoneofEnum = TestAllTypes.NestedEnum(rawValue:valueIntoneofEnum){
                 oneofEnum = enumsoneofEnum
            } else {
                 unknownFieldsBuilder.mergeVarintField(114, value:Int64(valueIntoneofEnum))
            }

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final internal class TestProto2Required : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasProto2:Bool = false
    private(set) var proto2:ProtobufUnittest.TestRequired!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if hasProto2 {
       if !proto2.isInitialized() {
         return false
       }
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasProto2 {
        output.writeMessage(1, value:proto2)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasProto2 {
          if let varSizeproto2 = proto2?.computeMessageSize(1) {
              serialize_size += varSizeproto2
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Proto2NofieldpresenceUnittest.TestProto2Required {
      return Proto2NofieldpresenceUnittest.TestProto2Required.Builder().mergeFromData(data, extensionRegistry:Proto2NofieldpresenceUnittest.UnittestNoFieldPresenceRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestProto2Required {
      return Proto2NofieldpresenceUnittest.TestProto2Required.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Proto2NofieldpresenceUnittest.TestProto2Required {
      return Proto2NofieldpresenceUnittest.TestProto2Required.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestProto2Required {
      return Proto2NofieldpresenceUnittest.TestProto2Required.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Proto2NofieldpresenceUnittest.TestProto2Required {
      return Proto2NofieldpresenceUnittest.TestProto2Required.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestProto2Required {
      return Proto2NofieldpresenceUnittest.TestProto2Required.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
      return Proto2NofieldpresenceUnittest.TestProto2Required.classBuilder() as! Proto2NofieldpresenceUnittest.TestProto2Required.Builder
    }
    internal func getBuilder() -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
      return classBuilder() as! Proto2NofieldpresenceUnittest.TestProto2Required.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Proto2NofieldpresenceUnittest.TestProto2Required.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Proto2NofieldpresenceUnittest.TestProto2Required.Builder()
    }
    internal func toBuilder() -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
      return Proto2NofieldpresenceUnittest.TestProto2Required.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Proto2NofieldpresenceUnittest.TestProto2Required) -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
      return Proto2NofieldpresenceUnittest.TestProto2Required.Builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasProto2 {
        output += "\(indent) proto2 {\n"
        proto2?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasProto2 {
                if let hashValueproto2 = proto2?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueproto2
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Proto2NofieldpresenceUnittest.TestProto2Required"
    }
    override internal func className() -> String {
        return "Proto2NofieldpresenceUnittest.TestProto2Required"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Proto2NofieldpresenceUnittest.TestProto2Required.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:Proto2NofieldpresenceUnittest.TestProto2Required = Proto2NofieldpresenceUnittest.TestProto2Required()
      internal func getMessage() -> Proto2NofieldpresenceUnittest.TestProto2Required {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasProto2:Bool {
           get {
               return builderResult.hasProto2
           }
      }
      var proto2:ProtobufUnittest.TestRequired! {
           get {
               if proto2Builder_ != nil {
                  builderResult.proto2 = proto2Builder_.getMessage()
               }
               return builderResult.proto2
           }
           set (value) {
               builderResult.hasProto2 = true
               builderResult.proto2 = value
           }
      }
      private var proto2Builder_:ProtobufUnittest.TestRequired.Builder! {
           didSet {
              builderResult.hasProto2 = true
           }
      }
      internal func getProto2Builder() -> ProtobufUnittest.TestRequired.Builder {
        if proto2Builder_ == nil {
           proto2Builder_ = ProtobufUnittest.TestRequired.Builder()
           builderResult.proto2 = proto2Builder_.getMessage()
           if proto2 != nil {
              proto2Builder_.mergeFrom(proto2)
           }
        }
        return proto2Builder_
      }
      func setProto2(value:ProtobufUnittest.TestRequired!) -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
        self.proto2 = value
        return self
      }
      internal func mergeProto2(value:ProtobufUnittest.TestRequired) -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
        if builderResult.hasProto2 {
          builderResult.proto2 = ProtobufUnittest.TestRequired.builderWithPrototype(builderResult.proto2).mergeFrom(value).buildPartial()
        } else {
          builderResult.proto2 = value
        }
        builderResult.hasProto2 = true
        return self
      }
      internal func clearProto2() -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
        proto2Builder_ = nil
        builderResult.hasProto2 = false
        builderResult.proto2 = nil
        return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
        builderResult = Proto2NofieldpresenceUnittest.TestProto2Required()
        return self
      }
      internal override func clone() -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
        return Proto2NofieldpresenceUnittest.TestProto2Required.builderWithPrototype(builderResult)
      }
      internal override func build() -> Proto2NofieldpresenceUnittest.TestProto2Required {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Proto2NofieldpresenceUnittest.TestProto2Required {
        let returnMe:Proto2NofieldpresenceUnittest.TestProto2Required = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Proto2NofieldpresenceUnittest.TestProto2Required) -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
        if other == Proto2NofieldpresenceUnittest.TestProto2Required() {
         return self
        }
        if (other.hasProto2) {
            mergeProto2(other.proto2)
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.TestProto2Required.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestRequired.Builder = ProtobufUnittest.TestRequired.Builder()
            if hasProto2 {
              subBuilder.mergeFrom(proto2)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            proto2 = subBuilder.buildPartial()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final internal class ForeignMessage : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasC:Bool = false
    private(set) var c:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasC {
        output.writeInt32(1, value:c)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasC {
        serialize_size += c.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Proto2NofieldpresenceUnittest.ForeignMessage {
      return Proto2NofieldpresenceUnittest.ForeignMessage.Builder().mergeFromData(data, extensionRegistry:Proto2NofieldpresenceUnittest.UnittestNoFieldPresenceRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.ForeignMessage {
      return Proto2NofieldpresenceUnittest.ForeignMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Proto2NofieldpresenceUnittest.ForeignMessage {
      return Proto2NofieldpresenceUnittest.ForeignMessage.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.ForeignMessage {
      return Proto2NofieldpresenceUnittest.ForeignMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Proto2NofieldpresenceUnittest.ForeignMessage {
      return Proto2NofieldpresenceUnittest.ForeignMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.ForeignMessage {
      return Proto2NofieldpresenceUnittest.ForeignMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
      return Proto2NofieldpresenceUnittest.ForeignMessage.classBuilder() as! Proto2NofieldpresenceUnittest.ForeignMessage.Builder
    }
    internal func getBuilder() -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
      return classBuilder() as! Proto2NofieldpresenceUnittest.ForeignMessage.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Proto2NofieldpresenceUnittest.ForeignMessage.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Proto2NofieldpresenceUnittest.ForeignMessage.Builder()
    }
    internal func toBuilder() -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
      return Proto2NofieldpresenceUnittest.ForeignMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Proto2NofieldpresenceUnittest.ForeignMessage) -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
      return Proto2NofieldpresenceUnittest.ForeignMessage.Builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasC {
        output += "\(indent) c: \(c) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasC {
               hashCode = (hashCode &* 31) &+ c.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Proto2NofieldpresenceUnittest.ForeignMessage"
    }
    override internal func className() -> String {
        return "Proto2NofieldpresenceUnittest.ForeignMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Proto2NofieldpresenceUnittest.ForeignMessage.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:Proto2NofieldpresenceUnittest.ForeignMessage = Proto2NofieldpresenceUnittest.ForeignMessage()
      internal func getMessage() -> Proto2NofieldpresenceUnittest.ForeignMessage {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasC:Bool {
           get {
                return builderResult.hasC
           }
      }
      var c:Int32 {
           get {
                return builderResult.c
           }
           set (value) {
               builderResult.hasC = true
               builderResult.c = value
           }
      }
      func setC(value:Int32) -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
        self.c = value
        return self
      }
      internal func clearC() -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder{
           builderResult.hasC = false
           builderResult.c = Int32(0)
           return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
        builderResult = Proto2NofieldpresenceUnittest.ForeignMessage()
        return self
      }
      internal override func clone() -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
        return Proto2NofieldpresenceUnittest.ForeignMessage.builderWithPrototype(builderResult)
      }
      internal override func build() -> Proto2NofieldpresenceUnittest.ForeignMessage {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Proto2NofieldpresenceUnittest.ForeignMessage {
        let returnMe:Proto2NofieldpresenceUnittest.ForeignMessage = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Proto2NofieldpresenceUnittest.ForeignMessage) -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
        if other == Proto2NofieldpresenceUnittest.ForeignMessage() {
         return self
        }
        if other.hasC {
             c = other.c
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Proto2NofieldpresenceUnittest.ForeignMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 8 :
            c = input.readInt32()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
