// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file unittest_no_arena.proto

import Foundation
import ProtocolBuffers


internal struct ProtobufUnittestNoArena { }

internal func == (lhs: ProtobufUnittestNoArena.TestAllTypes, rhs: ProtobufUnittestNoArena.TestAllTypes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalInt32 == rhs.hasOptionalInt32) && (!lhs.hasOptionalInt32 || lhs.optionalInt32 == rhs.optionalInt32)
  fieldCheck = fieldCheck && (lhs.hasOptionalInt64 == rhs.hasOptionalInt64) && (!lhs.hasOptionalInt64 || lhs.optionalInt64 == rhs.optionalInt64)
  fieldCheck = fieldCheck && (lhs.hasOptionalUint32 == rhs.hasOptionalUint32) && (!lhs.hasOptionalUint32 || lhs.optionalUint32 == rhs.optionalUint32)
  fieldCheck = fieldCheck && (lhs.hasOptionalUint64 == rhs.hasOptionalUint64) && (!lhs.hasOptionalUint64 || lhs.optionalUint64 == rhs.optionalUint64)
  fieldCheck = fieldCheck && (lhs.hasOptionalSint32 == rhs.hasOptionalSint32) && (!lhs.hasOptionalSint32 || lhs.optionalSint32 == rhs.optionalSint32)
  fieldCheck = fieldCheck && (lhs.hasOptionalSint64 == rhs.hasOptionalSint64) && (!lhs.hasOptionalSint64 || lhs.optionalSint64 == rhs.optionalSint64)
  fieldCheck = fieldCheck && (lhs.hasOptionalFixed32 == rhs.hasOptionalFixed32) && (!lhs.hasOptionalFixed32 || lhs.optionalFixed32 == rhs.optionalFixed32)
  fieldCheck = fieldCheck && (lhs.hasOptionalFixed64 == rhs.hasOptionalFixed64) && (!lhs.hasOptionalFixed64 || lhs.optionalFixed64 == rhs.optionalFixed64)
  fieldCheck = fieldCheck && (lhs.hasOptionalSfixed32 == rhs.hasOptionalSfixed32) && (!lhs.hasOptionalSfixed32 || lhs.optionalSfixed32 == rhs.optionalSfixed32)
  fieldCheck = fieldCheck && (lhs.hasOptionalSfixed64 == rhs.hasOptionalSfixed64) && (!lhs.hasOptionalSfixed64 || lhs.optionalSfixed64 == rhs.optionalSfixed64)
  fieldCheck = fieldCheck && (lhs.hasOptionalFloat == rhs.hasOptionalFloat) && (!lhs.hasOptionalFloat || lhs.optionalFloat == rhs.optionalFloat)
  fieldCheck = fieldCheck && (lhs.hasOptionalDouble == rhs.hasOptionalDouble) && (!lhs.hasOptionalDouble || lhs.optionalDouble == rhs.optionalDouble)
  fieldCheck = fieldCheck && (lhs.hasOptionalBool == rhs.hasOptionalBool) && (!lhs.hasOptionalBool || lhs.optionalBool == rhs.optionalBool)
  fieldCheck = fieldCheck && (lhs.hasOptionalString == rhs.hasOptionalString) && (!lhs.hasOptionalString || lhs.optionalString == rhs.optionalString)
  fieldCheck = fieldCheck && (lhs.hasOptionalBytes == rhs.hasOptionalBytes) && (!lhs.hasOptionalBytes || lhs.optionalBytes == rhs.optionalBytes)
  fieldCheck = fieldCheck && (lhs.hasOptionalGroup == rhs.hasOptionalGroup) && (!lhs.hasOptionalGroup || lhs.optionalGroup == rhs.optionalGroup)
  fieldCheck = fieldCheck && (lhs.hasOptionalNestedMessage == rhs.hasOptionalNestedMessage) && (!lhs.hasOptionalNestedMessage || lhs.optionalNestedMessage == rhs.optionalNestedMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalForeignMessage == rhs.hasOptionalForeignMessage) && (!lhs.hasOptionalForeignMessage || lhs.optionalForeignMessage == rhs.optionalForeignMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalImportMessage == rhs.hasOptionalImportMessage) && (!lhs.hasOptionalImportMessage || lhs.optionalImportMessage == rhs.optionalImportMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalNestedEnum == rhs.hasOptionalNestedEnum) && (!lhs.hasOptionalNestedEnum || lhs.optionalNestedEnum == rhs.optionalNestedEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalForeignEnum == rhs.hasOptionalForeignEnum) && (!lhs.hasOptionalForeignEnum || lhs.optionalForeignEnum == rhs.optionalForeignEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalImportEnum == rhs.hasOptionalImportEnum) && (!lhs.hasOptionalImportEnum || lhs.optionalImportEnum == rhs.optionalImportEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalStringPiece == rhs.hasOptionalStringPiece) && (!lhs.hasOptionalStringPiece || lhs.optionalStringPiece == rhs.optionalStringPiece)
  fieldCheck = fieldCheck && (lhs.hasOptionalCord == rhs.hasOptionalCord) && (!lhs.hasOptionalCord || lhs.optionalCord == rhs.optionalCord)
  fieldCheck = fieldCheck && (lhs.hasOptionalPublicImportMessage == rhs.hasOptionalPublicImportMessage) && (!lhs.hasOptionalPublicImportMessage || lhs.optionalPublicImportMessage == rhs.optionalPublicImportMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalLazyMessage == rhs.hasOptionalLazyMessage) && (!lhs.hasOptionalLazyMessage || lhs.optionalLazyMessage == rhs.optionalLazyMessage)
  fieldCheck = fieldCheck && (lhs.repeatedInt32 == rhs.repeatedInt32)
  fieldCheck = fieldCheck && (lhs.repeatedInt64 == rhs.repeatedInt64)
  fieldCheck = fieldCheck && (lhs.repeatedUint32 == rhs.repeatedUint32)
  fieldCheck = fieldCheck && (lhs.repeatedUint64 == rhs.repeatedUint64)
  fieldCheck = fieldCheck && (lhs.repeatedSint32 == rhs.repeatedSint32)
  fieldCheck = fieldCheck && (lhs.repeatedSint64 == rhs.repeatedSint64)
  fieldCheck = fieldCheck && (lhs.repeatedFixed32 == rhs.repeatedFixed32)
  fieldCheck = fieldCheck && (lhs.repeatedFixed64 == rhs.repeatedFixed64)
  fieldCheck = fieldCheck && (lhs.repeatedSfixed32 == rhs.repeatedSfixed32)
  fieldCheck = fieldCheck && (lhs.repeatedSfixed64 == rhs.repeatedSfixed64)
  fieldCheck = fieldCheck && (lhs.repeatedFloat == rhs.repeatedFloat)
  fieldCheck = fieldCheck && (lhs.repeatedDouble == rhs.repeatedDouble)
  fieldCheck = fieldCheck && (lhs.repeatedBool == rhs.repeatedBool)
  fieldCheck = fieldCheck && (lhs.repeatedString == rhs.repeatedString)
  fieldCheck = fieldCheck && (lhs.repeatedBytes == rhs.repeatedBytes)
  fieldCheck = fieldCheck && (lhs.repeatedGroup == rhs.repeatedGroup)
  fieldCheck = fieldCheck && (lhs.repeatedNestedMessage == rhs.repeatedNestedMessage)
  fieldCheck = fieldCheck && (lhs.repeatedForeignMessage == rhs.repeatedForeignMessage)
  fieldCheck = fieldCheck && (lhs.repeatedImportMessage == rhs.repeatedImportMessage)
  fieldCheck = fieldCheck && (lhs.repeatedNestedEnum == rhs.repeatedNestedEnum)
  fieldCheck = fieldCheck && (lhs.repeatedForeignEnum == rhs.repeatedForeignEnum)
  fieldCheck = fieldCheck && (lhs.repeatedImportEnum == rhs.repeatedImportEnum)
  fieldCheck = fieldCheck && (lhs.repeatedStringPiece == rhs.repeatedStringPiece)
  fieldCheck = fieldCheck && (lhs.repeatedCord == rhs.repeatedCord)
  fieldCheck = fieldCheck && (lhs.repeatedLazyMessage == rhs.repeatedLazyMessage)
  fieldCheck = fieldCheck && (lhs.hasDefaultInt32 == rhs.hasDefaultInt32) && (!lhs.hasDefaultInt32 || lhs.defaultInt32 == rhs.defaultInt32)
  fieldCheck = fieldCheck && (lhs.hasDefaultInt64 == rhs.hasDefaultInt64) && (!lhs.hasDefaultInt64 || lhs.defaultInt64 == rhs.defaultInt64)
  fieldCheck = fieldCheck && (lhs.hasDefaultUint32 == rhs.hasDefaultUint32) && (!lhs.hasDefaultUint32 || lhs.defaultUint32 == rhs.defaultUint32)
  fieldCheck = fieldCheck && (lhs.hasDefaultUint64 == rhs.hasDefaultUint64) && (!lhs.hasDefaultUint64 || lhs.defaultUint64 == rhs.defaultUint64)
  fieldCheck = fieldCheck && (lhs.hasDefaultSint32 == rhs.hasDefaultSint32) && (!lhs.hasDefaultSint32 || lhs.defaultSint32 == rhs.defaultSint32)
  fieldCheck = fieldCheck && (lhs.hasDefaultSint64 == rhs.hasDefaultSint64) && (!lhs.hasDefaultSint64 || lhs.defaultSint64 == rhs.defaultSint64)
  fieldCheck = fieldCheck && (lhs.hasDefaultFixed32 == rhs.hasDefaultFixed32) && (!lhs.hasDefaultFixed32 || lhs.defaultFixed32 == rhs.defaultFixed32)
  fieldCheck = fieldCheck && (lhs.hasDefaultFixed64 == rhs.hasDefaultFixed64) && (!lhs.hasDefaultFixed64 || lhs.defaultFixed64 == rhs.defaultFixed64)
  fieldCheck = fieldCheck && (lhs.hasDefaultSfixed32 == rhs.hasDefaultSfixed32) && (!lhs.hasDefaultSfixed32 || lhs.defaultSfixed32 == rhs.defaultSfixed32)
  fieldCheck = fieldCheck && (lhs.hasDefaultSfixed64 == rhs.hasDefaultSfixed64) && (!lhs.hasDefaultSfixed64 || lhs.defaultSfixed64 == rhs.defaultSfixed64)
  fieldCheck = fieldCheck && (lhs.hasDefaultFloat == rhs.hasDefaultFloat) && (!lhs.hasDefaultFloat || lhs.defaultFloat == rhs.defaultFloat)
  fieldCheck = fieldCheck && (lhs.hasDefaultDouble == rhs.hasDefaultDouble) && (!lhs.hasDefaultDouble || lhs.defaultDouble == rhs.defaultDouble)
  fieldCheck = fieldCheck && (lhs.hasDefaultBool == rhs.hasDefaultBool) && (!lhs.hasDefaultBool || lhs.defaultBool == rhs.defaultBool)
  fieldCheck = fieldCheck && (lhs.hasDefaultString == rhs.hasDefaultString) && (!lhs.hasDefaultString || lhs.defaultString == rhs.defaultString)
  fieldCheck = fieldCheck && (lhs.hasDefaultBytes == rhs.hasDefaultBytes) && (!lhs.hasDefaultBytes || lhs.defaultBytes == rhs.defaultBytes)
  fieldCheck = fieldCheck && (lhs.hasDefaultNestedEnum == rhs.hasDefaultNestedEnum) && (!lhs.hasDefaultNestedEnum || lhs.defaultNestedEnum == rhs.defaultNestedEnum)
  fieldCheck = fieldCheck && (lhs.hasDefaultForeignEnum == rhs.hasDefaultForeignEnum) && (!lhs.hasDefaultForeignEnum || lhs.defaultForeignEnum == rhs.defaultForeignEnum)
  fieldCheck = fieldCheck && (lhs.hasDefaultImportEnum == rhs.hasDefaultImportEnum) && (!lhs.hasDefaultImportEnum || lhs.defaultImportEnum == rhs.defaultImportEnum)
  fieldCheck = fieldCheck && (lhs.hasDefaultStringPiece == rhs.hasDefaultStringPiece) && (!lhs.hasDefaultStringPiece || lhs.defaultStringPiece == rhs.defaultStringPiece)
  fieldCheck = fieldCheck && (lhs.hasDefaultCord == rhs.hasDefaultCord) && (!lhs.hasDefaultCord || lhs.defaultCord == rhs.defaultCord)
  fieldCheck = fieldCheck && (lhs.hasOneofUint32 == rhs.hasOneofUint32) && (!lhs.hasOneofUint32 || lhs.oneofUint32 == rhs.oneofUint32)
  fieldCheck = fieldCheck && (lhs.hasOneofNestedMessage == rhs.hasOneofNestedMessage) && (!lhs.hasOneofNestedMessage || lhs.oneofNestedMessage == rhs.oneofNestedMessage)
  fieldCheck = fieldCheck && (lhs.hasOneofString == rhs.hasOneofString) && (!lhs.hasOneofString || lhs.oneofString == rhs.oneofString)
  fieldCheck = fieldCheck && (lhs.hasOneofBytes == rhs.hasOneofBytes) && (!lhs.hasOneofBytes || lhs.oneofBytes == rhs.oneofBytes)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittestNoArena.TestAllTypes.NestedMessage, rhs: ProtobufUnittestNoArena.TestAllTypes.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittestNoArena.TestAllTypes.OptionalGroup, rhs: ProtobufUnittestNoArena.TestAllTypes.OptionalGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup, rhs: ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittestNoArena.ForeignMessage, rhs: ProtobufUnittestNoArena.ForeignMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasC == rhs.hasC) && (!lhs.hasC || lhs.c == rhs.c)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittestNoArena.TestNoArenaMessage, rhs: ProtobufUnittestNoArena.TestNoArenaMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasArenaMessage == rhs.hasArenaMessage) && (!lhs.hasArenaMessage || lhs.arenaMessage == rhs.arenaMessage)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension ProtobufUnittestNoArena {
  internal struct UnittestNoArenaRoot {
    internal static var sharedInstance : UnittestNoArenaRoot {
     struct Static {
         static let instance : UnittestNoArenaRoot = UnittestNoArenaRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      ProtobufUnittestImport.UnittestImportRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Proto2ArenaUnittest.UnittestArenaRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  internal enum ForeignEnum:Int32 {
    case ForeignFoo = 4
    case ForeignBar = 5
    case ForeignBaz = 6

  }

  //Enum type declaration end 

  final internal class TestAllTypes : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasBb:Bool = false
        private(set) var bb:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasBb {
            output.writeInt32(1, value:bb)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasBb {
            serialize_size += bb.computeInt32Size(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittestNoArena.UnittestNoArenaRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.classBuilder() as! ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder
        }
        internal func getBuilder() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
          return classBuilder() as! ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder()
        }
        internal func toBuilder() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittestNoArena.TestAllTypes.NestedMessage) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
          return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasBb {
            output += "\(indent) bb: \(bb) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasBb {
                   hashCode = (hashCode &* 31) &+ bb.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittestNoArena.TestAllTypes.NestedMessage"
        }
        override internal func className() -> String {
            return "ProtobufUnittestNoArena.TestAllTypes.NestedMessage"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittestNoArena.TestAllTypes.NestedMessage = ProtobufUnittestNoArena.TestAllTypes.NestedMessage()
          internal func getMessage() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasBb:Bool {
               get {
                    return builderResult.hasBb
               }
          }
          var bb:Int32 {
               get {
                    return builderResult.bb
               }
               set (value) {
                   builderResult.hasBb = true
                   builderResult.bb = value
               }
          }
          func setBb(value:Int32) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
            self.bb = value
            return self
          }
          internal func clearBb() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder{
               builderResult.hasBb = false
               builderResult.bb = Int32(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
            builderResult = ProtobufUnittestNoArena.TestAllTypes.NestedMessage()
            return self
          }
          internal override func clone() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
            return ProtobufUnittestNoArena.TestAllTypes.NestedMessage.builderWithPrototype(builderResult)
          }
          internal override func build() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage {
            let returnMe:ProtobufUnittestNoArena.TestAllTypes.NestedMessage = builderResult
            return returnMe
          }
          internal func mergeFrom(other:ProtobufUnittestNoArena.TestAllTypes.NestedMessage) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
            if other == ProtobufUnittestNoArena.TestAllTypes.NestedMessage() {
             return self
            }
            if other.hasBb {
                 bb = other.bb
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                bb = input.readInt32()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class OptionalGroup : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(17, value:a)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(17)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittestNoArena.UnittestNoArenaRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.classBuilder() as! ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder
        }
        internal func getBuilder() -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
          return classBuilder() as! ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder()
        }
        internal func toBuilder() -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittestNoArena.TestAllTypes.OptionalGroup) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
          return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittestNoArena.TestAllTypes.OptionalGroup"
        }
        override internal func className() -> String {
            return "ProtobufUnittestNoArena.TestAllTypes.OptionalGroup"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittestNoArena.TestAllTypes.OptionalGroup = ProtobufUnittestNoArena.TestAllTypes.OptionalGroup()
          internal func getMessage() -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasA:Bool {
               get {
                    return builderResult.hasA
               }
          }
          var a:Int32 {
               get {
                    return builderResult.a
               }
               set (value) {
                   builderResult.hasA = true
                   builderResult.a = value
               }
          }
          func setA(value:Int32) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
            self.a = value
            return self
          }
          internal func clearA() -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder{
               builderResult.hasA = false
               builderResult.a = Int32(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
            builderResult = ProtobufUnittestNoArena.TestAllTypes.OptionalGroup()
            return self
          }
          internal override func clone() -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
            return ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.builderWithPrototype(builderResult)
          }
          internal override func build() -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup {
            let returnMe:ProtobufUnittestNoArena.TestAllTypes.OptionalGroup = builderResult
            return returnMe
          }
          internal func mergeFrom(other:ProtobufUnittestNoArena.TestAllTypes.OptionalGroup) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
            if other == ProtobufUnittestNoArena.TestAllTypes.OptionalGroup() {
             return self
            }
            if other.hasA {
                 a = other.a
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 136 :
                a = input.readInt32()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class RepeatedGroup : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(47, value:a)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(47)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittestNoArena.UnittestNoArenaRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.classBuilder() as! ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder
        }
        internal func getBuilder() -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder {
          return classBuilder() as! ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder()
        }
        internal func toBuilder() -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder {
          return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup"
        }
        override internal func className() -> String {
            return "ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup = ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup()
          internal func getMessage() -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasA:Bool {
               get {
                    return builderResult.hasA
               }
          }
          var a:Int32 {
               get {
                    return builderResult.a
               }
               set (value) {
                   builderResult.hasA = true
                   builderResult.a = value
               }
          }
          func setA(value:Int32) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder {
            self.a = value
            return self
          }
          internal func clearA() -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder{
               builderResult.hasA = false
               builderResult.a = Int32(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder {
            builderResult = ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup()
            return self
          }
          internal override func clone() -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder {
            return ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.builderWithPrototype(builderResult)
          }
          internal override func build() -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup {
            let returnMe:ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup = builderResult
            return returnMe
          }
          internal func mergeFrom(other:ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder {
            if other == ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup() {
             return self
            }
            if other.hasA {
                 a = other.a
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 376 :
                a = input.readInt32()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //OneOf declaration start

    internal enum OneofField {
      case OneofFieldOneOfNotSet

      internal func checkOneOfIsSet() -> Bool {
           switch self {
           case .OneofFieldOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case OneofUint32(UInt32)

      internal static func getOneofUint32(value:OneofField) -> UInt32? {
           switch value {
           case .OneofUint32(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofNestedMessage(ProtobufUnittestNoArena.TestAllTypes.NestedMessage)

      internal static func getOneofNestedMessage(value:OneofField) -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage? {
           switch value {
           case .OneofNestedMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofString(String)

      internal static func getOneofString(value:OneofField) -> String? {
           switch value {
           case .OneofString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofBytes(NSData)

      internal static func getOneofBytes(value:OneofField) -> NSData? {
           switch value {
           case .OneofBytes(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageOneofField:TestAllTypes.OneofField =  TestAllTypes.OneofField.OneofFieldOneOfNotSet


      //Enum type declaration start 

      internal enum NestedEnum:Int32 {
        case Foo = 1
        case Bar = 2
        case Baz = 3
        case Neg = -1

      }

      //Enum type declaration end 

    private(set) var hasOptionalInt32:Bool = false
    private(set) var optionalInt32:Int32 = Int32(0)

    private(set) var hasOptionalInt64:Bool = false
    private(set) var optionalInt64:Int64 = Int64(0)

    private(set) var hasOptionalUint32:Bool = false
    private(set) var optionalUint32:UInt32 = UInt32(0)

    private(set) var hasOptionalUint64:Bool = false
    private(set) var optionalUint64:UInt64 = UInt64(0)

    private(set) var hasOptionalSint32:Bool = false
    private(set) var optionalSint32:Int32 = Int32(0)

    private(set) var hasOptionalSint64:Bool = false
    private(set) var optionalSint64:Int64 = Int64(0)

    private(set) var hasOptionalFixed32:Bool = false
    private(set) var optionalFixed32:UInt32 = UInt32(0)

    private(set) var hasOptionalFixed64:Bool = false
    private(set) var optionalFixed64:UInt64 = UInt64(0)

    private(set) var hasOptionalSfixed32:Bool = false
    private(set) var optionalSfixed32:Int32 = Int32(0)

    private(set) var hasOptionalSfixed64:Bool = false
    private(set) var optionalSfixed64:Int64 = Int64(0)

    private(set) var hasOptionalFloat:Bool = false
    private(set) var optionalFloat:Float = Float(0)

    private(set) var hasOptionalDouble:Bool = false
    private(set) var optionalDouble:Double = Double(0)

    private(set) var hasOptionalBool:Bool = false
    private(set) var optionalBool:Bool = false

    private(set) var hasOptionalString:Bool = false
    private(set) var optionalString:String = ""

    private(set) var hasOptionalBytes:Bool = false
    private(set) var optionalBytes:NSData = NSData()

    private(set) var hasOptionalGroup:Bool = false
    private(set) var optionalGroup:ProtobufUnittestNoArena.TestAllTypes.OptionalGroup!
    private(set) var hasOptionalNestedMessage:Bool = false
    private(set) var optionalNestedMessage:ProtobufUnittestNoArena.TestAllTypes.NestedMessage!
    private(set) var hasOptionalForeignMessage:Bool = false
    private(set) var optionalForeignMessage:ProtobufUnittestNoArena.ForeignMessage!
    private(set) var hasOptionalImportMessage:Bool = false
    private(set) var optionalImportMessage:ProtobufUnittestImport.ImportMessage!
    private(set) var optionalNestedEnum:TestAllTypes.NestedEnum = TestAllTypes.NestedEnum.Foo
    private(set) var hasOptionalNestedEnum:Bool = false
    private(set) var optionalForeignEnum:ProtobufUnittestNoArena.ForeignEnum = ProtobufUnittestNoArena.ForeignEnum.ForeignFoo
    private(set) var hasOptionalForeignEnum:Bool = false
    private(set) var optionalImportEnum:ProtobufUnittestImport.ImportEnum = ProtobufUnittestImport.ImportEnum.ImportFoo
    private(set) var hasOptionalImportEnum:Bool = false
    private(set) var hasOptionalStringPiece:Bool = false
    private(set) var optionalStringPiece:String = ""

    private(set) var hasOptionalCord:Bool = false
    private(set) var optionalCord:String = ""

    private(set) var hasOptionalPublicImportMessage:Bool = false
    private(set) var optionalPublicImportMessage:ProtobufUnittestImport.PublicImportMessage!
    private(set) var hasOptionalLazyMessage:Bool = false
    private(set) var optionalLazyMessage:ProtobufUnittestNoArena.TestAllTypes.NestedMessage!
    private(set) var repeatedInt32:Array<Int32> = Array<Int32>()
    private(set) var repeatedInt64:Array<Int64> = Array<Int64>()
    private(set) var repeatedUint32:Array<UInt32> = Array<UInt32>()
    private(set) var repeatedUint64:Array<UInt64> = Array<UInt64>()
    private(set) var repeatedSint32:Array<Int32> = Array<Int32>()
    private(set) var repeatedSint64:Array<Int64> = Array<Int64>()
    private(set) var repeatedFixed32:Array<UInt32> = Array<UInt32>()
    private(set) var repeatedFixed64:Array<UInt64> = Array<UInt64>()
    private(set) var repeatedSfixed32:Array<Int32> = Array<Int32>()
    private(set) var repeatedSfixed64:Array<Int64> = Array<Int64>()
    private(set) var repeatedFloat:Array<Float> = Array<Float>()
    private(set) var repeatedDouble:Array<Double> = Array<Double>()
    private(set) var repeatedBool:Array<Bool> = Array<Bool>()
    private(set) var repeatedString:Array<String> = Array<String>()
    private(set) var repeatedBytes:Array<NSData> = Array<NSData>()
    private(set) var repeatedGroup:Array<ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup>  = Array<ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup>()
    private(set) var repeatedNestedMessage:Array<ProtobufUnittestNoArena.TestAllTypes.NestedMessage>  = Array<ProtobufUnittestNoArena.TestAllTypes.NestedMessage>()
    private(set) var repeatedForeignMessage:Array<ProtobufUnittestNoArena.ForeignMessage>  = Array<ProtobufUnittestNoArena.ForeignMessage>()
    private(set) var repeatedImportMessage:Array<ProtobufUnittestImport.ImportMessage>  = Array<ProtobufUnittestImport.ImportMessage>()
    private var repeatedNestedEnumMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedNestedEnum:Array<TestAllTypes.NestedEnum> = Array<TestAllTypes.NestedEnum>()
    private var repeatedForeignEnumMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedForeignEnum:Array<ProtobufUnittestNoArena.ForeignEnum> = Array<ProtobufUnittestNoArena.ForeignEnum>()
    private var repeatedImportEnumMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedImportEnum:Array<ProtobufUnittestImport.ImportEnum> = Array<ProtobufUnittestImport.ImportEnum>()
    private(set) var repeatedStringPiece:Array<String> = Array<String>()
    private(set) var repeatedCord:Array<String> = Array<String>()
    private(set) var repeatedLazyMessage:Array<ProtobufUnittestNoArena.TestAllTypes.NestedMessage>  = Array<ProtobufUnittestNoArena.TestAllTypes.NestedMessage>()
    private(set) var hasDefaultInt32:Bool = false
    private(set) var defaultInt32:Int32 = Int32(41)

    private(set) var hasDefaultInt64:Bool = false
    private(set) var defaultInt64:Int64 = Int64(42)

    private(set) var hasDefaultUint32:Bool = false
    private(set) var defaultUint32:UInt32 = UInt32(43)

    private(set) var hasDefaultUint64:Bool = false
    private(set) var defaultUint64:UInt64 = UInt64(44)

    private(set) var hasDefaultSint32:Bool = false
    private(set) var defaultSint32:Int32 = Int32(-45)

    private(set) var hasDefaultSint64:Bool = false
    private(set) var defaultSint64:Int64 = Int64(46)

    private(set) var hasDefaultFixed32:Bool = false
    private(set) var defaultFixed32:UInt32 = UInt32(47)

    private(set) var hasDefaultFixed64:Bool = false
    private(set) var defaultFixed64:UInt64 = UInt64(48)

    private(set) var hasDefaultSfixed32:Bool = false
    private(set) var defaultSfixed32:Int32 = Int32(49)

    private(set) var hasDefaultSfixed64:Bool = false
    private(set) var defaultSfixed64:Int64 = Int64(-50)

    private(set) var hasDefaultFloat:Bool = false
    private(set) var defaultFloat:Float = Float(51.5)

    private(set) var hasDefaultDouble:Bool = false
    private(set) var defaultDouble:Double = Double(52000)

    private(set) var hasDefaultBool:Bool = false
    private(set) var defaultBool:Bool = true

    private(set) var hasDefaultString:Bool = false
    private(set) var defaultString:String = "hello"

    private(set) var hasDefaultBytes:Bool = false
    private(set) var defaultBytes:NSData = NSData(bytes:([UInt8]() + "world".utf8), length:5)

    private(set) var defaultNestedEnum:TestAllTypes.NestedEnum = TestAllTypes.NestedEnum.Bar
    private(set) var hasDefaultNestedEnum:Bool = false
    private(set) var defaultForeignEnum:ProtobufUnittestNoArena.ForeignEnum = ProtobufUnittestNoArena.ForeignEnum.ForeignBar
    private(set) var hasDefaultForeignEnum:Bool = false
    private(set) var defaultImportEnum:ProtobufUnittestImport.ImportEnum = ProtobufUnittestImport.ImportEnum.ImportBar
    private(set) var hasDefaultImportEnum:Bool = false
    private(set) var hasDefaultStringPiece:Bool = false
    private(set) var defaultStringPiece:String = "abc"

    private(set) var hasDefaultCord:Bool = false
    private(set) var defaultCord:String = "123"

    private(set) var hasOneofUint32:Bool {
          get {
               if TestAllTypes.OneofField.getOneofUint32(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofUint32:UInt32!{
         get {
              return TestAllTypes.OneofField.getOneofUint32(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofUint32(newvalue)
         }
    }
    private(set) var hasOneofNestedMessage:Bool {
          get {
               if TestAllTypes.OneofField.getOneofNestedMessage(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofNestedMessage:ProtobufUnittestNoArena.TestAllTypes.NestedMessage!{
         get {
              return TestAllTypes.OneofField.getOneofNestedMessage(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofNestedMessage(newvalue)
         }
    }
    private(set) var hasOneofString:Bool {
          get {
               if TestAllTypes.OneofField.getOneofString(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofString:String!{
         get {
              return TestAllTypes.OneofField.getOneofString(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofString(newvalue)
         }
    }
    private(set) var hasOneofBytes:Bool {
          get {
               if TestAllTypes.OneofField.getOneofBytes(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofBytes:NSData!{
         get {
              return TestAllTypes.OneofField.getOneofBytes(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = TestAllTypes.OneofField.OneofBytes(newvalue)
         }
    }
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasOptionalInt32 {
        output.writeInt32(1, value:optionalInt32)
      }
      if hasOptionalInt64 {
        output.writeInt64(2, value:optionalInt64)
      }
      if hasOptionalUint32 {
        output.writeUInt32(3, value:optionalUint32)
      }
      if hasOptionalUint64 {
        output.writeUInt64(4, value:optionalUint64)
      }
      if hasOptionalSint32 {
        output.writeSInt32(5, value:optionalSint32)
      }
      if hasOptionalSint64 {
        output.writeSInt64(6, value:optionalSint64)
      }
      if hasOptionalFixed32 {
        output.writeFixed32(7, value:optionalFixed32)
      }
      if hasOptionalFixed64 {
        output.writeFixed64(8, value:optionalFixed64)
      }
      if hasOptionalSfixed32 {
        output.writeSFixed32(9, value:optionalSfixed32)
      }
      if hasOptionalSfixed64 {
        output.writeSFixed64(10, value:optionalSfixed64)
      }
      if hasOptionalFloat {
        output.writeFloat(11, value:optionalFloat)
      }
      if hasOptionalDouble {
        output.writeDouble(12, value:optionalDouble)
      }
      if hasOptionalBool {
        output.writeBool(13, value:optionalBool)
      }
      if hasOptionalString {
        output.writeString(14, value:optionalString)
      }
      if hasOptionalBytes {
        output.writeData(15, value:optionalBytes)
      }
      if hasOptionalGroup {
        output.writeGroup(16, value:optionalGroup)
      }
      if hasOptionalNestedMessage {
        output.writeMessage(18, value:optionalNestedMessage)
      }
      if hasOptionalForeignMessage {
        output.writeMessage(19, value:optionalForeignMessage)
      }
      if hasOptionalImportMessage {
        output.writeMessage(20, value:optionalImportMessage)
      }
      if hasOptionalNestedEnum {
        output.writeEnum(21, value:optionalNestedEnum.rawValue)
      }
      if hasOptionalForeignEnum {
        output.writeEnum(22, value:optionalForeignEnum.rawValue)
      }
      if hasOptionalImportEnum {
        output.writeEnum(23, value:optionalImportEnum.rawValue)
      }
      if hasOptionalStringPiece {
        output.writeString(24, value:optionalStringPiece)
      }
      if hasOptionalCord {
        output.writeString(25, value:optionalCord)
      }
      if hasOptionalPublicImportMessage {
        output.writeMessage(26, value:optionalPublicImportMessage)
      }
      if hasOptionalLazyMessage {
        output.writeMessage(27, value:optionalLazyMessage)
      }
      if !repeatedInt32.isEmpty {
        for oneValuerepeatedInt32 in repeatedInt32 {
          output.writeInt32(31, value:oneValuerepeatedInt32)
        }
      }
      if !repeatedInt64.isEmpty {
        for oneValuerepeatedInt64 in repeatedInt64 {
          output.writeInt64(32, value:oneValuerepeatedInt64)
        }
      }
      if !repeatedUint32.isEmpty {
        for oneValuerepeatedUint32 in repeatedUint32 {
          output.writeUInt32(33, value:oneValuerepeatedUint32)
        }
      }
      if !repeatedUint64.isEmpty {
        for oneValuerepeatedUint64 in repeatedUint64 {
          output.writeUInt64(34, value:oneValuerepeatedUint64)
        }
      }
      if !repeatedSint32.isEmpty {
        for oneValuerepeatedSint32 in repeatedSint32 {
          output.writeSInt32(35, value:oneValuerepeatedSint32)
        }
      }
      if !repeatedSint64.isEmpty {
        for oneValuerepeatedSint64 in repeatedSint64 {
          output.writeSInt64(36, value:oneValuerepeatedSint64)
        }
      }
      if !repeatedFixed32.isEmpty {
        for oneValuerepeatedFixed32 in repeatedFixed32 {
          output.writeFixed32(37, value:oneValuerepeatedFixed32)
        }
      }
      if !repeatedFixed64.isEmpty {
        for oneValuerepeatedFixed64 in repeatedFixed64 {
          output.writeFixed64(38, value:oneValuerepeatedFixed64)
        }
      }
      if !repeatedSfixed32.isEmpty {
        for oneValuerepeatedSfixed32 in repeatedSfixed32 {
          output.writeSFixed32(39, value:oneValuerepeatedSfixed32)
        }
      }
      if !repeatedSfixed64.isEmpty {
        for oneValuerepeatedSfixed64 in repeatedSfixed64 {
          output.writeSFixed64(40, value:oneValuerepeatedSfixed64)
        }
      }
      if !repeatedFloat.isEmpty {
        for oneValuerepeatedFloat in repeatedFloat {
          output.writeFloat(41, value:oneValuerepeatedFloat)
        }
      }
      if !repeatedDouble.isEmpty {
        for oneValuerepeatedDouble in repeatedDouble {
          output.writeDouble(42, value:oneValuerepeatedDouble)
        }
      }
      if !repeatedBool.isEmpty {
        for oneValuerepeatedBool in repeatedBool {
          output.writeBool(43, value:oneValuerepeatedBool)
        }
      }
      if !repeatedString.isEmpty {
        for oneValuerepeatedString in repeatedString {
          output.writeString(44, value:oneValuerepeatedString)
        }
      }
      if !repeatedBytes.isEmpty {
        for oneValuerepeatedBytes in repeatedBytes {
          output.writeData(45, value:oneValuerepeatedBytes)
        }
      }
      for oneElementrepeatedGroup in repeatedGroup {
          output.writeGroup(46, value:oneElementrepeatedGroup)
      }
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          output.writeMessage(48, value:oneElementrepeatedNestedMessage)
      }
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          output.writeMessage(49, value:oneElementrepeatedForeignMessage)
      }
      for oneElementrepeatedImportMessage in repeatedImportMessage {
          output.writeMessage(50, value:oneElementrepeatedImportMessage)
      }
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          output.writeEnum(51, value:oneValueOfrepeatedNestedEnum.rawValue)
      }
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          output.writeEnum(52, value:oneValueOfrepeatedForeignEnum.rawValue)
      }
      for oneValueOfrepeatedImportEnum in repeatedImportEnum {
          output.writeEnum(53, value:oneValueOfrepeatedImportEnum.rawValue)
      }
      if !repeatedStringPiece.isEmpty {
        for oneValuerepeatedStringPiece in repeatedStringPiece {
          output.writeString(54, value:oneValuerepeatedStringPiece)
        }
      }
      if !repeatedCord.isEmpty {
        for oneValuerepeatedCord in repeatedCord {
          output.writeString(55, value:oneValuerepeatedCord)
        }
      }
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          output.writeMessage(57, value:oneElementrepeatedLazyMessage)
      }
      if hasDefaultInt32 {
        output.writeInt32(61, value:defaultInt32)
      }
      if hasDefaultInt64 {
        output.writeInt64(62, value:defaultInt64)
      }
      if hasDefaultUint32 {
        output.writeUInt32(63, value:defaultUint32)
      }
      if hasDefaultUint64 {
        output.writeUInt64(64, value:defaultUint64)
      }
      if hasDefaultSint32 {
        output.writeSInt32(65, value:defaultSint32)
      }
      if hasDefaultSint64 {
        output.writeSInt64(66, value:defaultSint64)
      }
      if hasDefaultFixed32 {
        output.writeFixed32(67, value:defaultFixed32)
      }
      if hasDefaultFixed64 {
        output.writeFixed64(68, value:defaultFixed64)
      }
      if hasDefaultSfixed32 {
        output.writeSFixed32(69, value:defaultSfixed32)
      }
      if hasDefaultSfixed64 {
        output.writeSFixed64(70, value:defaultSfixed64)
      }
      if hasDefaultFloat {
        output.writeFloat(71, value:defaultFloat)
      }
      if hasDefaultDouble {
        output.writeDouble(72, value:defaultDouble)
      }
      if hasDefaultBool {
        output.writeBool(73, value:defaultBool)
      }
      if hasDefaultString {
        output.writeString(74, value:defaultString)
      }
      if hasDefaultBytes {
        output.writeData(75, value:defaultBytes)
      }
      if hasDefaultNestedEnum {
        output.writeEnum(81, value:defaultNestedEnum.rawValue)
      }
      if hasDefaultForeignEnum {
        output.writeEnum(82, value:defaultForeignEnum.rawValue)
      }
      if hasDefaultImportEnum {
        output.writeEnum(83, value:defaultImportEnum.rawValue)
      }
      if hasDefaultStringPiece {
        output.writeString(84, value:defaultStringPiece)
      }
      if hasDefaultCord {
        output.writeString(85, value:defaultCord)
      }
      if hasOneofUint32 {
        output.writeUInt32(111, value:oneofUint32)
      }
      if hasOneofNestedMessage {
        output.writeMessage(112, value:oneofNestedMessage)
      }
      if hasOneofString {
        output.writeString(113, value:oneofString)
      }
      if hasOneofBytes {
        output.writeData(114, value:oneofBytes)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOptionalInt32 {
        serialize_size += optionalInt32.computeInt32Size(1)
      }
      if hasOptionalInt64 {
        serialize_size += optionalInt64.computeInt64Size(2)
      }
      if hasOptionalUint32 {
        serialize_size += optionalUint32.computeUInt32Size(3)
      }
      if hasOptionalUint64 {
        serialize_size += optionalUint64.computeUInt64Size(4)
      }
      if hasOptionalSint32 {
        serialize_size += optionalSint32.computeSInt32Size(5)
      }
      if hasOptionalSint64 {
        serialize_size += optionalSint64.computeSInt64Size(6)
      }
      if hasOptionalFixed32 {
        serialize_size += optionalFixed32.computeFixed32Size(7)
      }
      if hasOptionalFixed64 {
        serialize_size += optionalFixed64.computeFixed64Size(8)
      }
      if hasOptionalSfixed32 {
        serialize_size += optionalSfixed32.computeSFixed32Size(9)
      }
      if hasOptionalSfixed64 {
        serialize_size += optionalSfixed64.computeSFixed64Size(10)
      }
      if hasOptionalFloat {
        serialize_size += optionalFloat.computeFloatSize(11)
      }
      if hasOptionalDouble {
        serialize_size += optionalDouble.computeDoubleSize(12)
      }
      if hasOptionalBool {
        serialize_size += optionalBool.computeBoolSize(13)
      }
      if hasOptionalString {
        serialize_size += optionalString.computeStringSize(14)
      }
      if hasOptionalBytes {
        serialize_size += optionalBytes.computeDataSize(15)
      }
      if hasOptionalGroup {
          if let varSizeoptionalGroup = optionalGroup?.computeGroupSize(16) {
              serialize_size += varSizeoptionalGroup
          }
      }
      if hasOptionalNestedMessage {
          if let varSizeoptionalNestedMessage = optionalNestedMessage?.computeMessageSize(18) {
              serialize_size += varSizeoptionalNestedMessage
          }
      }
      if hasOptionalForeignMessage {
          if let varSizeoptionalForeignMessage = optionalForeignMessage?.computeMessageSize(19) {
              serialize_size += varSizeoptionalForeignMessage
          }
      }
      if hasOptionalImportMessage {
          if let varSizeoptionalImportMessage = optionalImportMessage?.computeMessageSize(20) {
              serialize_size += varSizeoptionalImportMessage
          }
      }
      if (hasOptionalNestedEnum) {
        serialize_size += optionalNestedEnum.rawValue.computeEnumSize(21)
      }
      if (hasOptionalForeignEnum) {
        serialize_size += optionalForeignEnum.rawValue.computeEnumSize(22)
      }
      if (hasOptionalImportEnum) {
        serialize_size += optionalImportEnum.rawValue.computeEnumSize(23)
      }
      if hasOptionalStringPiece {
        serialize_size += optionalStringPiece.computeStringSize(24)
      }
      if hasOptionalCord {
        serialize_size += optionalCord.computeStringSize(25)
      }
      if hasOptionalPublicImportMessage {
          if let varSizeoptionalPublicImportMessage = optionalPublicImportMessage?.computeMessageSize(26) {
              serialize_size += varSizeoptionalPublicImportMessage
          }
      }
      if hasOptionalLazyMessage {
          if let varSizeoptionalLazyMessage = optionalLazyMessage?.computeMessageSize(27) {
              serialize_size += varSizeoptionalLazyMessage
          }
      }
      var dataSizeRepeatedInt32:Int32 = 0
      for oneValuerepeatedInt32 in repeatedInt32 {
          dataSizeRepeatedInt32 += oneValuerepeatedInt32.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt32
      serialize_size += 2 * Int32(repeatedInt32.count)
      var dataSizeRepeatedInt64:Int32 = 0
      for oneValuerepeatedInt64 in repeatedInt64 {
          dataSizeRepeatedInt64 += oneValuerepeatedInt64.computeInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt64
      serialize_size += 2 * Int32(repeatedInt64.count)
      var dataSizeRepeatedUint32:Int32 = 0
      for oneValuerepeatedUint32 in repeatedUint32 {
          dataSizeRepeatedUint32 += oneValuerepeatedUint32.computeUInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedUint32
      serialize_size += 2 * Int32(repeatedUint32.count)
      var dataSizeRepeatedUint64:Int32 = 0
      for oneValuerepeatedUint64 in repeatedUint64 {
          dataSizeRepeatedUint64 += oneValuerepeatedUint64.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedUint64
      serialize_size += 2 * Int32(repeatedUint64.count)
      var dataSizeRepeatedSint32:Int32 = 0
      for oneValuerepeatedSint32 in repeatedSint32 {
          dataSizeRepeatedSint32 += oneValuerepeatedSint32.computeSInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedSint32
      serialize_size += 2 * Int32(repeatedSint32.count)
      var dataSizeRepeatedSint64:Int32 = 0
      for oneValuerepeatedSint64 in repeatedSint64 {
          dataSizeRepeatedSint64 += oneValuerepeatedSint64.computeSInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedSint64
      serialize_size += 2 * Int32(repeatedSint64.count)
      var dataSizeRepeatedFixed32:Int32 = 0
      dataSizeRepeatedFixed32 = 4 * Int32(repeatedFixed32.count)
      serialize_size += dataSizeRepeatedFixed32
      serialize_size += 2 * Int32(repeatedFixed32.count)
      var dataSizeRepeatedFixed64:Int32 = 0
      dataSizeRepeatedFixed64 = 8 * Int32(repeatedFixed64.count)
      serialize_size += dataSizeRepeatedFixed64
      serialize_size += 2 * Int32(repeatedFixed64.count)
      var dataSizeRepeatedSfixed32:Int32 = 0
      dataSizeRepeatedSfixed32 = 4 * Int32(repeatedSfixed32.count)
      serialize_size += dataSizeRepeatedSfixed32
      serialize_size += 2 * Int32(repeatedSfixed32.count)
      var dataSizeRepeatedSfixed64:Int32 = 0
      dataSizeRepeatedSfixed64 = 8 * Int32(repeatedSfixed64.count)
      serialize_size += dataSizeRepeatedSfixed64
      serialize_size += 2 * Int32(repeatedSfixed64.count)
      var dataSizeRepeatedFloat:Int32 = 0
      dataSizeRepeatedFloat = 4 * Int32(repeatedFloat.count)
      serialize_size += dataSizeRepeatedFloat
      serialize_size += 2 * Int32(repeatedFloat.count)
      var dataSizeRepeatedDouble:Int32 = 0
      dataSizeRepeatedDouble = 8 * Int32(repeatedDouble.count)
      serialize_size += dataSizeRepeatedDouble
      serialize_size += 2 * Int32(repeatedDouble.count)
      var dataSizeRepeatedBool:Int32 = 0
      dataSizeRepeatedBool = 1 * Int32(repeatedBool.count)
      serialize_size += dataSizeRepeatedBool
      serialize_size += 2 * Int32(repeatedBool.count)
      var dataSizeRepeatedString:Int32 = 0
      for oneValuerepeatedString in repeatedString {
          dataSizeRepeatedString += oneValuerepeatedString.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedString
      serialize_size += 2 * Int32(repeatedString.count)
      var dataSizeRepeatedBytes:Int32 = 0
      for oneValuerepeatedBytes in repeatedBytes {
          dataSizeRepeatedBytes += oneValuerepeatedBytes.computeDataSizeNoTag()
      }
      serialize_size += dataSizeRepeatedBytes
      serialize_size += 2 * Int32(repeatedBytes.count)
      for oneElementrepeatedGroup in repeatedGroup {
          serialize_size += oneElementrepeatedGroup.computeGroupSize(46)
      }
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          serialize_size += oneElementrepeatedNestedMessage.computeMessageSize(48)
      }
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          serialize_size += oneElementrepeatedForeignMessage.computeMessageSize(49)
      }
      for oneElementrepeatedImportMessage in repeatedImportMessage {
          serialize_size += oneElementrepeatedImportMessage.computeMessageSize(50)
      }
      var dataSizerepeatedNestedEnum:Int32 = 0
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          dataSizerepeatedNestedEnum += oneValueOfrepeatedNestedEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedNestedEnum
      serialize_size += (2 * Int32(repeatedNestedEnum.count))
      var dataSizerepeatedForeignEnum:Int32 = 0
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          dataSizerepeatedForeignEnum += oneValueOfrepeatedForeignEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedForeignEnum
      serialize_size += (2 * Int32(repeatedForeignEnum.count))
      var dataSizerepeatedImportEnum:Int32 = 0
      for oneValueOfrepeatedImportEnum in repeatedImportEnum {
          dataSizerepeatedImportEnum += oneValueOfrepeatedImportEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedImportEnum
      serialize_size += (2 * Int32(repeatedImportEnum.count))
      var dataSizeRepeatedStringPiece:Int32 = 0
      for oneValuerepeatedStringPiece in repeatedStringPiece {
          dataSizeRepeatedStringPiece += oneValuerepeatedStringPiece.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedStringPiece
      serialize_size += 2 * Int32(repeatedStringPiece.count)
      var dataSizeRepeatedCord:Int32 = 0
      for oneValuerepeatedCord in repeatedCord {
          dataSizeRepeatedCord += oneValuerepeatedCord.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedCord
      serialize_size += 2 * Int32(repeatedCord.count)
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          serialize_size += oneElementrepeatedLazyMessage.computeMessageSize(57)
      }
      if hasDefaultInt32 {
        serialize_size += defaultInt32.computeInt32Size(61)
      }
      if hasDefaultInt64 {
        serialize_size += defaultInt64.computeInt64Size(62)
      }
      if hasDefaultUint32 {
        serialize_size += defaultUint32.computeUInt32Size(63)
      }
      if hasDefaultUint64 {
        serialize_size += defaultUint64.computeUInt64Size(64)
      }
      if hasDefaultSint32 {
        serialize_size += defaultSint32.computeSInt32Size(65)
      }
      if hasDefaultSint64 {
        serialize_size += defaultSint64.computeSInt64Size(66)
      }
      if hasDefaultFixed32 {
        serialize_size += defaultFixed32.computeFixed32Size(67)
      }
      if hasDefaultFixed64 {
        serialize_size += defaultFixed64.computeFixed64Size(68)
      }
      if hasDefaultSfixed32 {
        serialize_size += defaultSfixed32.computeSFixed32Size(69)
      }
      if hasDefaultSfixed64 {
        serialize_size += defaultSfixed64.computeSFixed64Size(70)
      }
      if hasDefaultFloat {
        serialize_size += defaultFloat.computeFloatSize(71)
      }
      if hasDefaultDouble {
        serialize_size += defaultDouble.computeDoubleSize(72)
      }
      if hasDefaultBool {
        serialize_size += defaultBool.computeBoolSize(73)
      }
      if hasDefaultString {
        serialize_size += defaultString.computeStringSize(74)
      }
      if hasDefaultBytes {
        serialize_size += defaultBytes.computeDataSize(75)
      }
      if (hasDefaultNestedEnum) {
        serialize_size += defaultNestedEnum.rawValue.computeEnumSize(81)
      }
      if (hasDefaultForeignEnum) {
        serialize_size += defaultForeignEnum.rawValue.computeEnumSize(82)
      }
      if (hasDefaultImportEnum) {
        serialize_size += defaultImportEnum.rawValue.computeEnumSize(83)
      }
      if hasDefaultStringPiece {
        serialize_size += defaultStringPiece.computeStringSize(84)
      }
      if hasDefaultCord {
        serialize_size += defaultCord.computeStringSize(85)
      }
      if hasOneofUint32 {
        serialize_size += oneofUint32.computeUInt32Size(111)
      }
      if hasOneofNestedMessage {
          if let varSizeoneofNestedMessage = oneofNestedMessage?.computeMessageSize(112) {
              serialize_size += varSizeoneofNestedMessage
          }
      }
      if hasOneofString {
        serialize_size += oneofString.computeStringSize(113)
      }
      if hasOneofBytes {
        serialize_size += oneofBytes.computeDataSize(114)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittestNoArena.TestAllTypes {
      return ProtobufUnittestNoArena.TestAllTypes.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittestNoArena.UnittestNoArenaRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes {
      return ProtobufUnittestNoArena.TestAllTypes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittestNoArena.TestAllTypes {
      return ProtobufUnittestNoArena.TestAllTypes.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes {
      return ProtobufUnittestNoArena.TestAllTypes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.TestAllTypes {
      return ProtobufUnittestNoArena.TestAllTypes.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes {
      return ProtobufUnittestNoArena.TestAllTypes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
      return ProtobufUnittestNoArena.TestAllTypes.classBuilder() as! ProtobufUnittestNoArena.TestAllTypes.Builder
    }
    internal func getBuilder() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
      return classBuilder() as! ProtobufUnittestNoArena.TestAllTypes.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittestNoArena.TestAllTypes.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittestNoArena.TestAllTypes.Builder()
    }
    internal func toBuilder() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
      return ProtobufUnittestNoArena.TestAllTypes.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittestNoArena.TestAllTypes) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
      return ProtobufUnittestNoArena.TestAllTypes.Builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasOptionalInt32 {
        output += "\(indent) optionalInt32: \(optionalInt32) \n"
      }
      if hasOptionalInt64 {
        output += "\(indent) optionalInt64: \(optionalInt64) \n"
      }
      if hasOptionalUint32 {
        output += "\(indent) optionalUint32: \(optionalUint32) \n"
      }
      if hasOptionalUint64 {
        output += "\(indent) optionalUint64: \(optionalUint64) \n"
      }
      if hasOptionalSint32 {
        output += "\(indent) optionalSint32: \(optionalSint32) \n"
      }
      if hasOptionalSint64 {
        output += "\(indent) optionalSint64: \(optionalSint64) \n"
      }
      if hasOptionalFixed32 {
        output += "\(indent) optionalFixed32: \(optionalFixed32) \n"
      }
      if hasOptionalFixed64 {
        output += "\(indent) optionalFixed64: \(optionalFixed64) \n"
      }
      if hasOptionalSfixed32 {
        output += "\(indent) optionalSfixed32: \(optionalSfixed32) \n"
      }
      if hasOptionalSfixed64 {
        output += "\(indent) optionalSfixed64: \(optionalSfixed64) \n"
      }
      if hasOptionalFloat {
        output += "\(indent) optionalFloat: \(optionalFloat) \n"
      }
      if hasOptionalDouble {
        output += "\(indent) optionalDouble: \(optionalDouble) \n"
      }
      if hasOptionalBool {
        output += "\(indent) optionalBool: \(optionalBool) \n"
      }
      if hasOptionalString {
        output += "\(indent) optionalString: \(optionalString) \n"
      }
      if hasOptionalBytes {
        output += "\(indent) optionalBytes: \(optionalBytes) \n"
      }
      if hasOptionalGroup {
        output += "\(indent) optionalGroup {\n"
        optionalGroup?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalNestedMessage {
        output += "\(indent) optionalNestedMessage {\n"
        optionalNestedMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalForeignMessage {
        output += "\(indent) optionalForeignMessage {\n"
        optionalForeignMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalImportMessage {
        output += "\(indent) optionalImportMessage {\n"
        optionalImportMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if (hasOptionalNestedEnum) {
        output += "\(indent) optionalNestedEnum: \(optionalNestedEnum.rawValue)\n"
      }
      if (hasOptionalForeignEnum) {
        output += "\(indent) optionalForeignEnum: \(optionalForeignEnum.rawValue)\n"
      }
      if (hasOptionalImportEnum) {
        output += "\(indent) optionalImportEnum: \(optionalImportEnum.rawValue)\n"
      }
      if hasOptionalStringPiece {
        output += "\(indent) optionalStringPiece: \(optionalStringPiece) \n"
      }
      if hasOptionalCord {
        output += "\(indent) optionalCord: \(optionalCord) \n"
      }
      if hasOptionalPublicImportMessage {
        output += "\(indent) optionalPublicImportMessage {\n"
        optionalPublicImportMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalLazyMessage {
        output += "\(indent) optionalLazyMessage {\n"
        optionalLazyMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var repeatedInt32ElementIndex:Int = 0
      for oneValuerepeatedInt32 in repeatedInt32  {
          output += "\(indent) repeatedInt32[\(repeatedInt32ElementIndex)]: \(oneValuerepeatedInt32)\n"
          repeatedInt32ElementIndex++
      }
      var repeatedInt64ElementIndex:Int = 0
      for oneValuerepeatedInt64 in repeatedInt64  {
          output += "\(indent) repeatedInt64[\(repeatedInt64ElementIndex)]: \(oneValuerepeatedInt64)\n"
          repeatedInt64ElementIndex++
      }
      var repeatedUint32ElementIndex:Int = 0
      for oneValuerepeatedUint32 in repeatedUint32  {
          output += "\(indent) repeatedUint32[\(repeatedUint32ElementIndex)]: \(oneValuerepeatedUint32)\n"
          repeatedUint32ElementIndex++
      }
      var repeatedUint64ElementIndex:Int = 0
      for oneValuerepeatedUint64 in repeatedUint64  {
          output += "\(indent) repeatedUint64[\(repeatedUint64ElementIndex)]: \(oneValuerepeatedUint64)\n"
          repeatedUint64ElementIndex++
      }
      var repeatedSint32ElementIndex:Int = 0
      for oneValuerepeatedSint32 in repeatedSint32  {
          output += "\(indent) repeatedSint32[\(repeatedSint32ElementIndex)]: \(oneValuerepeatedSint32)\n"
          repeatedSint32ElementIndex++
      }
      var repeatedSint64ElementIndex:Int = 0
      for oneValuerepeatedSint64 in repeatedSint64  {
          output += "\(indent) repeatedSint64[\(repeatedSint64ElementIndex)]: \(oneValuerepeatedSint64)\n"
          repeatedSint64ElementIndex++
      }
      var repeatedFixed32ElementIndex:Int = 0
      for oneValuerepeatedFixed32 in repeatedFixed32  {
          output += "\(indent) repeatedFixed32[\(repeatedFixed32ElementIndex)]: \(oneValuerepeatedFixed32)\n"
          repeatedFixed32ElementIndex++
      }
      var repeatedFixed64ElementIndex:Int = 0
      for oneValuerepeatedFixed64 in repeatedFixed64  {
          output += "\(indent) repeatedFixed64[\(repeatedFixed64ElementIndex)]: \(oneValuerepeatedFixed64)\n"
          repeatedFixed64ElementIndex++
      }
      var repeatedSfixed32ElementIndex:Int = 0
      for oneValuerepeatedSfixed32 in repeatedSfixed32  {
          output += "\(indent) repeatedSfixed32[\(repeatedSfixed32ElementIndex)]: \(oneValuerepeatedSfixed32)\n"
          repeatedSfixed32ElementIndex++
      }
      var repeatedSfixed64ElementIndex:Int = 0
      for oneValuerepeatedSfixed64 in repeatedSfixed64  {
          output += "\(indent) repeatedSfixed64[\(repeatedSfixed64ElementIndex)]: \(oneValuerepeatedSfixed64)\n"
          repeatedSfixed64ElementIndex++
      }
      var repeatedFloatElementIndex:Int = 0
      for oneValuerepeatedFloat in repeatedFloat  {
          output += "\(indent) repeatedFloat[\(repeatedFloatElementIndex)]: \(oneValuerepeatedFloat)\n"
          repeatedFloatElementIndex++
      }
      var repeatedDoubleElementIndex:Int = 0
      for oneValuerepeatedDouble in repeatedDouble  {
          output += "\(indent) repeatedDouble[\(repeatedDoubleElementIndex)]: \(oneValuerepeatedDouble)\n"
          repeatedDoubleElementIndex++
      }
      var repeatedBoolElementIndex:Int = 0
      for oneValuerepeatedBool in repeatedBool  {
          output += "\(indent) repeatedBool[\(repeatedBoolElementIndex)]: \(oneValuerepeatedBool)\n"
          repeatedBoolElementIndex++
      }
      var repeatedStringElementIndex:Int = 0
      for oneValuerepeatedString in repeatedString  {
          output += "\(indent) repeatedString[\(repeatedStringElementIndex)]: \(oneValuerepeatedString)\n"
          repeatedStringElementIndex++
      }
      var repeatedBytesElementIndex:Int = 0
      for oneValuerepeatedBytes in repeatedBytes  {
          output += "\(indent) repeatedBytes[\(repeatedBytesElementIndex)]: \(oneValuerepeatedBytes)\n"
          repeatedBytesElementIndex++
      }
      var repeatedGroupElementIndex:Int = 0
      for oneElementrepeatedGroup in repeatedGroup {
          output += "\(indent) repeatedGroup[\(repeatedGroupElementIndex)] {\n"
          oneElementrepeatedGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedGroupElementIndex++
      }
      var repeatedNestedMessageElementIndex:Int = 0
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          output += "\(indent) repeatedNestedMessage[\(repeatedNestedMessageElementIndex)] {\n"
          oneElementrepeatedNestedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedNestedMessageElementIndex++
      }
      var repeatedForeignMessageElementIndex:Int = 0
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          output += "\(indent) repeatedForeignMessage[\(repeatedForeignMessageElementIndex)] {\n"
          oneElementrepeatedForeignMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedForeignMessageElementIndex++
      }
      var repeatedImportMessageElementIndex:Int = 0
      for oneElementrepeatedImportMessage in repeatedImportMessage {
          output += "\(indent) repeatedImportMessage[\(repeatedImportMessageElementIndex)] {\n"
          oneElementrepeatedImportMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedImportMessageElementIndex++
      }
      var repeatedNestedEnumElementIndex:Int = 0
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          output += "\(indent) repeatedNestedEnum[\(repeatedNestedEnumElementIndex)]: \(oneValueOfrepeatedNestedEnum.rawValue)\n"
          repeatedNestedEnumElementIndex++
      }
      var repeatedForeignEnumElementIndex:Int = 0
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          output += "\(indent) repeatedForeignEnum[\(repeatedForeignEnumElementIndex)]: \(oneValueOfrepeatedForeignEnum.rawValue)\n"
          repeatedForeignEnumElementIndex++
      }
      var repeatedImportEnumElementIndex:Int = 0
      for oneValueOfrepeatedImportEnum in repeatedImportEnum {
          output += "\(indent) repeatedImportEnum[\(repeatedImportEnumElementIndex)]: \(oneValueOfrepeatedImportEnum.rawValue)\n"
          repeatedImportEnumElementIndex++
      }
      var repeatedStringPieceElementIndex:Int = 0
      for oneValuerepeatedStringPiece in repeatedStringPiece  {
          output += "\(indent) repeatedStringPiece[\(repeatedStringPieceElementIndex)]: \(oneValuerepeatedStringPiece)\n"
          repeatedStringPieceElementIndex++
      }
      var repeatedCordElementIndex:Int = 0
      for oneValuerepeatedCord in repeatedCord  {
          output += "\(indent) repeatedCord[\(repeatedCordElementIndex)]: \(oneValuerepeatedCord)\n"
          repeatedCordElementIndex++
      }
      var repeatedLazyMessageElementIndex:Int = 0
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          output += "\(indent) repeatedLazyMessage[\(repeatedLazyMessageElementIndex)] {\n"
          oneElementrepeatedLazyMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedLazyMessageElementIndex++
      }
      if hasDefaultInt32 {
        output += "\(indent) defaultInt32: \(defaultInt32) \n"
      }
      if hasDefaultInt64 {
        output += "\(indent) defaultInt64: \(defaultInt64) \n"
      }
      if hasDefaultUint32 {
        output += "\(indent) defaultUint32: \(defaultUint32) \n"
      }
      if hasDefaultUint64 {
        output += "\(indent) defaultUint64: \(defaultUint64) \n"
      }
      if hasDefaultSint32 {
        output += "\(indent) defaultSint32: \(defaultSint32) \n"
      }
      if hasDefaultSint64 {
        output += "\(indent) defaultSint64: \(defaultSint64) \n"
      }
      if hasDefaultFixed32 {
        output += "\(indent) defaultFixed32: \(defaultFixed32) \n"
      }
      if hasDefaultFixed64 {
        output += "\(indent) defaultFixed64: \(defaultFixed64) \n"
      }
      if hasDefaultSfixed32 {
        output += "\(indent) defaultSfixed32: \(defaultSfixed32) \n"
      }
      if hasDefaultSfixed64 {
        output += "\(indent) defaultSfixed64: \(defaultSfixed64) \n"
      }
      if hasDefaultFloat {
        output += "\(indent) defaultFloat: \(defaultFloat) \n"
      }
      if hasDefaultDouble {
        output += "\(indent) defaultDouble: \(defaultDouble) \n"
      }
      if hasDefaultBool {
        output += "\(indent) defaultBool: \(defaultBool) \n"
      }
      if hasDefaultString {
        output += "\(indent) defaultString: \(defaultString) \n"
      }
      if hasDefaultBytes {
        output += "\(indent) defaultBytes: \(defaultBytes) \n"
      }
      if (hasDefaultNestedEnum) {
        output += "\(indent) defaultNestedEnum: \(defaultNestedEnum.rawValue)\n"
      }
      if (hasDefaultForeignEnum) {
        output += "\(indent) defaultForeignEnum: \(defaultForeignEnum.rawValue)\n"
      }
      if (hasDefaultImportEnum) {
        output += "\(indent) defaultImportEnum: \(defaultImportEnum.rawValue)\n"
      }
      if hasDefaultStringPiece {
        output += "\(indent) defaultStringPiece: \(defaultStringPiece) \n"
      }
      if hasDefaultCord {
        output += "\(indent) defaultCord: \(defaultCord) \n"
      }
      if hasOneofUint32 {
        output += "\(indent) oneofUint32: \(oneofUint32) \n"
      }
      if hasOneofNestedMessage {
        output += "\(indent) oneofNestedMessage {\n"
        oneofNestedMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOneofString {
        output += "\(indent) oneofString: \(oneofString) \n"
      }
      if hasOneofBytes {
        output += "\(indent) oneofBytes: \(oneofBytes) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOptionalInt32 {
               hashCode = (hashCode &* 31) &+ optionalInt32.hashValue
            }
            if hasOptionalInt64 {
               hashCode = (hashCode &* 31) &+ optionalInt64.hashValue
            }
            if hasOptionalUint32 {
               hashCode = (hashCode &* 31) &+ optionalUint32.hashValue
            }
            if hasOptionalUint64 {
               hashCode = (hashCode &* 31) &+ optionalUint64.hashValue
            }
            if hasOptionalSint32 {
               hashCode = (hashCode &* 31) &+ optionalSint32.hashValue
            }
            if hasOptionalSint64 {
               hashCode = (hashCode &* 31) &+ optionalSint64.hashValue
            }
            if hasOptionalFixed32 {
               hashCode = (hashCode &* 31) &+ optionalFixed32.hashValue
            }
            if hasOptionalFixed64 {
               hashCode = (hashCode &* 31) &+ optionalFixed64.hashValue
            }
            if hasOptionalSfixed32 {
               hashCode = (hashCode &* 31) &+ optionalSfixed32.hashValue
            }
            if hasOptionalSfixed64 {
               hashCode = (hashCode &* 31) &+ optionalSfixed64.hashValue
            }
            if hasOptionalFloat {
               hashCode = (hashCode &* 31) &+ optionalFloat.hashValue
            }
            if hasOptionalDouble {
               hashCode = (hashCode &* 31) &+ optionalDouble.hashValue
            }
            if hasOptionalBool {
               hashCode = (hashCode &* 31) &+ optionalBool.hashValue
            }
            if hasOptionalString {
               hashCode = (hashCode &* 31) &+ optionalString.hashValue
            }
            if hasOptionalBytes {
               hashCode = (hashCode &* 31) &+ optionalBytes.hashValue
            }
            if hasOptionalGroup {
                if let hashValueoptionalGroup = optionalGroup?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalGroup
                }
            }
            if hasOptionalNestedMessage {
                if let hashValueoptionalNestedMessage = optionalNestedMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalNestedMessage
                }
            }
            if hasOptionalForeignMessage {
                if let hashValueoptionalForeignMessage = optionalForeignMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalForeignMessage
                }
            }
            if hasOptionalImportMessage {
                if let hashValueoptionalImportMessage = optionalImportMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalImportMessage
                }
            }
            if hasOptionalNestedEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalNestedEnum.rawValue)
            }
            if hasOptionalForeignEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalForeignEnum.rawValue)
            }
            if hasOptionalImportEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalImportEnum.rawValue)
            }
            if hasOptionalStringPiece {
               hashCode = (hashCode &* 31) &+ optionalStringPiece.hashValue
            }
            if hasOptionalCord {
               hashCode = (hashCode &* 31) &+ optionalCord.hashValue
            }
            if hasOptionalPublicImportMessage {
                if let hashValueoptionalPublicImportMessage = optionalPublicImportMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalPublicImportMessage
                }
            }
            if hasOptionalLazyMessage {
                if let hashValueoptionalLazyMessage = optionalLazyMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalLazyMessage
                }
            }
            for oneValuerepeatedInt32 in repeatedInt32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt32.hashValue
            }
            for oneValuerepeatedInt64 in repeatedInt64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt64.hashValue
            }
            for oneValuerepeatedUint32 in repeatedUint32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedUint32.hashValue
            }
            for oneValuerepeatedUint64 in repeatedUint64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedUint64.hashValue
            }
            for oneValuerepeatedSint32 in repeatedSint32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSint32.hashValue
            }
            for oneValuerepeatedSint64 in repeatedSint64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSint64.hashValue
            }
            for oneValuerepeatedFixed32 in repeatedFixed32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed32.hashValue
            }
            for oneValuerepeatedFixed64 in repeatedFixed64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed64.hashValue
            }
            for oneValuerepeatedSfixed32 in repeatedSfixed32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSfixed32.hashValue
            }
            for oneValuerepeatedSfixed64 in repeatedSfixed64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSfixed64.hashValue
            }
            for oneValuerepeatedFloat in repeatedFloat {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFloat.hashValue
            }
            for oneValuerepeatedDouble in repeatedDouble {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedDouble.hashValue
            }
            for oneValuerepeatedBool in repeatedBool {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedBool.hashValue
            }
            for oneValuerepeatedString in repeatedString {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedString.hashValue
            }
            for oneValuerepeatedBytes in repeatedBytes {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedBytes.hashValue
            }
            for oneElementrepeatedGroup in repeatedGroup {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedGroup.hashValue
            }
            for oneElementrepeatedNestedMessage in repeatedNestedMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedNestedMessage.hashValue
            }
            for oneElementrepeatedForeignMessage in repeatedForeignMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedForeignMessage.hashValue
            }
            for oneElementrepeatedImportMessage in repeatedImportMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedImportMessage.hashValue
            }
            for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedNestedEnum.rawValue)
            }
            for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedForeignEnum.rawValue)
            }
            for oneValueOfrepeatedImportEnum in repeatedImportEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedImportEnum.rawValue)
            }
            for oneValuerepeatedStringPiece in repeatedStringPiece {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedStringPiece.hashValue
            }
            for oneValuerepeatedCord in repeatedCord {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedCord.hashValue
            }
            for oneElementrepeatedLazyMessage in repeatedLazyMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedLazyMessage.hashValue
            }
            if hasDefaultInt32 {
               hashCode = (hashCode &* 31) &+ defaultInt32.hashValue
            }
            if hasDefaultInt64 {
               hashCode = (hashCode &* 31) &+ defaultInt64.hashValue
            }
            if hasDefaultUint32 {
               hashCode = (hashCode &* 31) &+ defaultUint32.hashValue
            }
            if hasDefaultUint64 {
               hashCode = (hashCode &* 31) &+ defaultUint64.hashValue
            }
            if hasDefaultSint32 {
               hashCode = (hashCode &* 31) &+ defaultSint32.hashValue
            }
            if hasDefaultSint64 {
               hashCode = (hashCode &* 31) &+ defaultSint64.hashValue
            }
            if hasDefaultFixed32 {
               hashCode = (hashCode &* 31) &+ defaultFixed32.hashValue
            }
            if hasDefaultFixed64 {
               hashCode = (hashCode &* 31) &+ defaultFixed64.hashValue
            }
            if hasDefaultSfixed32 {
               hashCode = (hashCode &* 31) &+ defaultSfixed32.hashValue
            }
            if hasDefaultSfixed64 {
               hashCode = (hashCode &* 31) &+ defaultSfixed64.hashValue
            }
            if hasDefaultFloat {
               hashCode = (hashCode &* 31) &+ defaultFloat.hashValue
            }
            if hasDefaultDouble {
               hashCode = (hashCode &* 31) &+ defaultDouble.hashValue
            }
            if hasDefaultBool {
               hashCode = (hashCode &* 31) &+ defaultBool.hashValue
            }
            if hasDefaultString {
               hashCode = (hashCode &* 31) &+ defaultString.hashValue
            }
            if hasDefaultBytes {
               hashCode = (hashCode &* 31) &+ defaultBytes.hashValue
            }
            if hasDefaultNestedEnum {
               hashCode = (hashCode &* 31) &+ Int(defaultNestedEnum.rawValue)
            }
            if hasDefaultForeignEnum {
               hashCode = (hashCode &* 31) &+ Int(defaultForeignEnum.rawValue)
            }
            if hasDefaultImportEnum {
               hashCode = (hashCode &* 31) &+ Int(defaultImportEnum.rawValue)
            }
            if hasDefaultStringPiece {
               hashCode = (hashCode &* 31) &+ defaultStringPiece.hashValue
            }
            if hasDefaultCord {
               hashCode = (hashCode &* 31) &+ defaultCord.hashValue
            }
            if hasOneofUint32 {
               hashCode = (hashCode &* 31) &+ oneofUint32.hashValue
            }
            if hasOneofNestedMessage {
                if let hashValueoneofNestedMessage = oneofNestedMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoneofNestedMessage
                }
            }
            if hasOneofString {
               hashCode = (hashCode &* 31) &+ oneofString.hashValue
            }
            if hasOneofBytes {
               hashCode = (hashCode &* 31) &+ oneofBytes.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittestNoArena.TestAllTypes"
    }
    override internal func className() -> String {
        return "ProtobufUnittestNoArena.TestAllTypes"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittestNoArena.TestAllTypes.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittestNoArena.TestAllTypes = ProtobufUnittestNoArena.TestAllTypes()
      internal func getMessage() -> ProtobufUnittestNoArena.TestAllTypes {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasOptionalInt32:Bool {
           get {
                return builderResult.hasOptionalInt32
           }
      }
      var optionalInt32:Int32 {
           get {
                return builderResult.optionalInt32
           }
           set (value) {
               builderResult.hasOptionalInt32 = true
               builderResult.optionalInt32 = value
           }
      }
      func setOptionalInt32(value:Int32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalInt32 = value
        return self
      }
      internal func clearOptionalInt32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalInt32 = false
           builderResult.optionalInt32 = Int32(0)
           return self
      }
      var hasOptionalInt64:Bool {
           get {
                return builderResult.hasOptionalInt64
           }
      }
      var optionalInt64:Int64 {
           get {
                return builderResult.optionalInt64
           }
           set (value) {
               builderResult.hasOptionalInt64 = true
               builderResult.optionalInt64 = value
           }
      }
      func setOptionalInt64(value:Int64) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalInt64 = value
        return self
      }
      internal func clearOptionalInt64() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalInt64 = false
           builderResult.optionalInt64 = Int64(0)
           return self
      }
      var hasOptionalUint32:Bool {
           get {
                return builderResult.hasOptionalUint32
           }
      }
      var optionalUint32:UInt32 {
           get {
                return builderResult.optionalUint32
           }
           set (value) {
               builderResult.hasOptionalUint32 = true
               builderResult.optionalUint32 = value
           }
      }
      func setOptionalUint32(value:UInt32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalUint32 = value
        return self
      }
      internal func clearOptionalUint32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalUint32 = false
           builderResult.optionalUint32 = UInt32(0)
           return self
      }
      var hasOptionalUint64:Bool {
           get {
                return builderResult.hasOptionalUint64
           }
      }
      var optionalUint64:UInt64 {
           get {
                return builderResult.optionalUint64
           }
           set (value) {
               builderResult.hasOptionalUint64 = true
               builderResult.optionalUint64 = value
           }
      }
      func setOptionalUint64(value:UInt64) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalUint64 = value
        return self
      }
      internal func clearOptionalUint64() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalUint64 = false
           builderResult.optionalUint64 = UInt64(0)
           return self
      }
      var hasOptionalSint32:Bool {
           get {
                return builderResult.hasOptionalSint32
           }
      }
      var optionalSint32:Int32 {
           get {
                return builderResult.optionalSint32
           }
           set (value) {
               builderResult.hasOptionalSint32 = true
               builderResult.optionalSint32 = value
           }
      }
      func setOptionalSint32(value:Int32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalSint32 = value
        return self
      }
      internal func clearOptionalSint32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalSint32 = false
           builderResult.optionalSint32 = Int32(0)
           return self
      }
      var hasOptionalSint64:Bool {
           get {
                return builderResult.hasOptionalSint64
           }
      }
      var optionalSint64:Int64 {
           get {
                return builderResult.optionalSint64
           }
           set (value) {
               builderResult.hasOptionalSint64 = true
               builderResult.optionalSint64 = value
           }
      }
      func setOptionalSint64(value:Int64) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalSint64 = value
        return self
      }
      internal func clearOptionalSint64() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalSint64 = false
           builderResult.optionalSint64 = Int64(0)
           return self
      }
      var hasOptionalFixed32:Bool {
           get {
                return builderResult.hasOptionalFixed32
           }
      }
      var optionalFixed32:UInt32 {
           get {
                return builderResult.optionalFixed32
           }
           set (value) {
               builderResult.hasOptionalFixed32 = true
               builderResult.optionalFixed32 = value
           }
      }
      func setOptionalFixed32(value:UInt32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalFixed32 = value
        return self
      }
      internal func clearOptionalFixed32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalFixed32 = false
           builderResult.optionalFixed32 = UInt32(0)
           return self
      }
      var hasOptionalFixed64:Bool {
           get {
                return builderResult.hasOptionalFixed64
           }
      }
      var optionalFixed64:UInt64 {
           get {
                return builderResult.optionalFixed64
           }
           set (value) {
               builderResult.hasOptionalFixed64 = true
               builderResult.optionalFixed64 = value
           }
      }
      func setOptionalFixed64(value:UInt64) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalFixed64 = value
        return self
      }
      internal func clearOptionalFixed64() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalFixed64 = false
           builderResult.optionalFixed64 = UInt64(0)
           return self
      }
      var hasOptionalSfixed32:Bool {
           get {
                return builderResult.hasOptionalSfixed32
           }
      }
      var optionalSfixed32:Int32 {
           get {
                return builderResult.optionalSfixed32
           }
           set (value) {
               builderResult.hasOptionalSfixed32 = true
               builderResult.optionalSfixed32 = value
           }
      }
      func setOptionalSfixed32(value:Int32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalSfixed32 = value
        return self
      }
      internal func clearOptionalSfixed32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalSfixed32 = false
           builderResult.optionalSfixed32 = Int32(0)
           return self
      }
      var hasOptionalSfixed64:Bool {
           get {
                return builderResult.hasOptionalSfixed64
           }
      }
      var optionalSfixed64:Int64 {
           get {
                return builderResult.optionalSfixed64
           }
           set (value) {
               builderResult.hasOptionalSfixed64 = true
               builderResult.optionalSfixed64 = value
           }
      }
      func setOptionalSfixed64(value:Int64) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalSfixed64 = value
        return self
      }
      internal func clearOptionalSfixed64() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalSfixed64 = false
           builderResult.optionalSfixed64 = Int64(0)
           return self
      }
      var hasOptionalFloat:Bool {
           get {
                return builderResult.hasOptionalFloat
           }
      }
      var optionalFloat:Float {
           get {
                return builderResult.optionalFloat
           }
           set (value) {
               builderResult.hasOptionalFloat = true
               builderResult.optionalFloat = value
           }
      }
      func setOptionalFloat(value:Float) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalFloat = value
        return self
      }
      internal func clearOptionalFloat() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalFloat = false
           builderResult.optionalFloat = Float(0)
           return self
      }
      var hasOptionalDouble:Bool {
           get {
                return builderResult.hasOptionalDouble
           }
      }
      var optionalDouble:Double {
           get {
                return builderResult.optionalDouble
           }
           set (value) {
               builderResult.hasOptionalDouble = true
               builderResult.optionalDouble = value
           }
      }
      func setOptionalDouble(value:Double) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalDouble = value
        return self
      }
      internal func clearOptionalDouble() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalDouble = false
           builderResult.optionalDouble = Double(0)
           return self
      }
      var hasOptionalBool:Bool {
           get {
                return builderResult.hasOptionalBool
           }
      }
      var optionalBool:Bool {
           get {
                return builderResult.optionalBool
           }
           set (value) {
               builderResult.hasOptionalBool = true
               builderResult.optionalBool = value
           }
      }
      func setOptionalBool(value:Bool) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalBool = value
        return self
      }
      internal func clearOptionalBool() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalBool = false
           builderResult.optionalBool = false
           return self
      }
      var hasOptionalString:Bool {
           get {
                return builderResult.hasOptionalString
           }
      }
      var optionalString:String {
           get {
                return builderResult.optionalString
           }
           set (value) {
               builderResult.hasOptionalString = true
               builderResult.optionalString = value
           }
      }
      func setOptionalString(value:String) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalString = value
        return self
      }
      internal func clearOptionalString() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalString = false
           builderResult.optionalString = ""
           return self
      }
      var hasOptionalBytes:Bool {
           get {
                return builderResult.hasOptionalBytes
           }
      }
      var optionalBytes:NSData {
           get {
                return builderResult.optionalBytes
           }
           set (value) {
               builderResult.hasOptionalBytes = true
               builderResult.optionalBytes = value
           }
      }
      func setOptionalBytes(value:NSData) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalBytes = value
        return self
      }
      internal func clearOptionalBytes() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalBytes = false
           builderResult.optionalBytes = NSData()
           return self
      }
      var hasOptionalGroup:Bool {
           get {
               return builderResult.hasOptionalGroup
           }
      }
      var optionalGroup:ProtobufUnittestNoArena.TestAllTypes.OptionalGroup! {
           get {
               if optionalGroupBuilder_ != nil {
                  builderResult.optionalGroup = optionalGroupBuilder_.getMessage()
               }
               return builderResult.optionalGroup
           }
           set (value) {
               builderResult.hasOptionalGroup = true
               builderResult.optionalGroup = value
           }
      }
      private var optionalGroupBuilder_:ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder! {
           didSet {
              builderResult.hasOptionalGroup = true
           }
      }
      internal func getOptionalGroupBuilder() -> ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder {
        if optionalGroupBuilder_ == nil {
           optionalGroupBuilder_ = ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder()
           builderResult.optionalGroup = optionalGroupBuilder_.getMessage()
           if optionalGroup != nil {
              optionalGroupBuilder_.mergeFrom(optionalGroup)
           }
        }
        return optionalGroupBuilder_
      }
      func setOptionalGroup(value:ProtobufUnittestNoArena.TestAllTypes.OptionalGroup!) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalGroup = value
        return self
      }
      internal func mergeOptionalGroup(value:ProtobufUnittestNoArena.TestAllTypes.OptionalGroup) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        if builderResult.hasOptionalGroup {
          builderResult.optionalGroup = ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.builderWithPrototype(builderResult.optionalGroup).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalGroup = value
        }
        builderResult.hasOptionalGroup = true
        return self
      }
      internal func clearOptionalGroup() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        optionalGroupBuilder_ = nil
        builderResult.hasOptionalGroup = false
        builderResult.optionalGroup = nil
        return self
      }
      var hasOptionalNestedMessage:Bool {
           get {
               return builderResult.hasOptionalNestedMessage
           }
      }
      var optionalNestedMessage:ProtobufUnittestNoArena.TestAllTypes.NestedMessage! {
           get {
               if optionalNestedMessageBuilder_ != nil {
                  builderResult.optionalNestedMessage = optionalNestedMessageBuilder_.getMessage()
               }
               return builderResult.optionalNestedMessage
           }
           set (value) {
               builderResult.hasOptionalNestedMessage = true
               builderResult.optionalNestedMessage = value
           }
      }
      private var optionalNestedMessageBuilder_:ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder! {
           didSet {
              builderResult.hasOptionalNestedMessage = true
           }
      }
      internal func getOptionalNestedMessageBuilder() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
        if optionalNestedMessageBuilder_ == nil {
           optionalNestedMessageBuilder_ = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder()
           builderResult.optionalNestedMessage = optionalNestedMessageBuilder_.getMessage()
           if optionalNestedMessage != nil {
              optionalNestedMessageBuilder_.mergeFrom(optionalNestedMessage)
           }
        }
        return optionalNestedMessageBuilder_
      }
      func setOptionalNestedMessage(value:ProtobufUnittestNoArena.TestAllTypes.NestedMessage!) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalNestedMessage = value
        return self
      }
      internal func mergeOptionalNestedMessage(value:ProtobufUnittestNoArena.TestAllTypes.NestedMessage) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        if builderResult.hasOptionalNestedMessage {
          builderResult.optionalNestedMessage = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.optionalNestedMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalNestedMessage = value
        }
        builderResult.hasOptionalNestedMessage = true
        return self
      }
      internal func clearOptionalNestedMessage() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        optionalNestedMessageBuilder_ = nil
        builderResult.hasOptionalNestedMessage = false
        builderResult.optionalNestedMessage = nil
        return self
      }
      var hasOptionalForeignMessage:Bool {
           get {
               return builderResult.hasOptionalForeignMessage
           }
      }
      var optionalForeignMessage:ProtobufUnittestNoArena.ForeignMessage! {
           get {
               if optionalForeignMessageBuilder_ != nil {
                  builderResult.optionalForeignMessage = optionalForeignMessageBuilder_.getMessage()
               }
               return builderResult.optionalForeignMessage
           }
           set (value) {
               builderResult.hasOptionalForeignMessage = true
               builderResult.optionalForeignMessage = value
           }
      }
      private var optionalForeignMessageBuilder_:ProtobufUnittestNoArena.ForeignMessage.Builder! {
           didSet {
              builderResult.hasOptionalForeignMessage = true
           }
      }
      internal func getOptionalForeignMessageBuilder() -> ProtobufUnittestNoArena.ForeignMessage.Builder {
        if optionalForeignMessageBuilder_ == nil {
           optionalForeignMessageBuilder_ = ProtobufUnittestNoArena.ForeignMessage.Builder()
           builderResult.optionalForeignMessage = optionalForeignMessageBuilder_.getMessage()
           if optionalForeignMessage != nil {
              optionalForeignMessageBuilder_.mergeFrom(optionalForeignMessage)
           }
        }
        return optionalForeignMessageBuilder_
      }
      func setOptionalForeignMessage(value:ProtobufUnittestNoArena.ForeignMessage!) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalForeignMessage = value
        return self
      }
      internal func mergeOptionalForeignMessage(value:ProtobufUnittestNoArena.ForeignMessage) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        if builderResult.hasOptionalForeignMessage {
          builderResult.optionalForeignMessage = ProtobufUnittestNoArena.ForeignMessage.builderWithPrototype(builderResult.optionalForeignMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalForeignMessage = value
        }
        builderResult.hasOptionalForeignMessage = true
        return self
      }
      internal func clearOptionalForeignMessage() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        optionalForeignMessageBuilder_ = nil
        builderResult.hasOptionalForeignMessage = false
        builderResult.optionalForeignMessage = nil
        return self
      }
      var hasOptionalImportMessage:Bool {
           get {
               return builderResult.hasOptionalImportMessage
           }
      }
      var optionalImportMessage:ProtobufUnittestImport.ImportMessage! {
           get {
               if optionalImportMessageBuilder_ != nil {
                  builderResult.optionalImportMessage = optionalImportMessageBuilder_.getMessage()
               }
               return builderResult.optionalImportMessage
           }
           set (value) {
               builderResult.hasOptionalImportMessage = true
               builderResult.optionalImportMessage = value
           }
      }
      private var optionalImportMessageBuilder_:ProtobufUnittestImport.ImportMessage.Builder! {
           didSet {
              builderResult.hasOptionalImportMessage = true
           }
      }
      internal func getOptionalImportMessageBuilder() -> ProtobufUnittestImport.ImportMessage.Builder {
        if optionalImportMessageBuilder_ == nil {
           optionalImportMessageBuilder_ = ProtobufUnittestImport.ImportMessage.Builder()
           builderResult.optionalImportMessage = optionalImportMessageBuilder_.getMessage()
           if optionalImportMessage != nil {
              optionalImportMessageBuilder_.mergeFrom(optionalImportMessage)
           }
        }
        return optionalImportMessageBuilder_
      }
      func setOptionalImportMessage(value:ProtobufUnittestImport.ImportMessage!) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalImportMessage = value
        return self
      }
      internal func mergeOptionalImportMessage(value:ProtobufUnittestImport.ImportMessage) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        if builderResult.hasOptionalImportMessage {
          builderResult.optionalImportMessage = ProtobufUnittestImport.ImportMessage.builderWithPrototype(builderResult.optionalImportMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalImportMessage = value
        }
        builderResult.hasOptionalImportMessage = true
        return self
      }
      internal func clearOptionalImportMessage() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        optionalImportMessageBuilder_ = nil
        builderResult.hasOptionalImportMessage = false
        builderResult.optionalImportMessage = nil
        return self
      }
        var hasOptionalNestedEnum:Bool{
            get {
                return builderResult.hasOptionalNestedEnum
            }
        }
        var optionalNestedEnum:TestAllTypes.NestedEnum {
            get {
                return builderResult.optionalNestedEnum
            }
            set (value) {
                builderResult.hasOptionalNestedEnum = true
                builderResult.optionalNestedEnum = value
            }
        }
        internal func setOptionalNestedEnum(value:TestAllTypes.NestedEnum) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
          self.optionalNestedEnum = value
          return self
        }
        internal func clearOptionalNestedEnum() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
           builderResult.hasOptionalNestedEnum = false
           builderResult.optionalNestedEnum = .Foo
           return self
        }
        var hasOptionalForeignEnum:Bool{
            get {
                return builderResult.hasOptionalForeignEnum
            }
        }
        var optionalForeignEnum:ProtobufUnittestNoArena.ForeignEnum {
            get {
                return builderResult.optionalForeignEnum
            }
            set (value) {
                builderResult.hasOptionalForeignEnum = true
                builderResult.optionalForeignEnum = value
            }
        }
        internal func setOptionalForeignEnum(value:ProtobufUnittestNoArena.ForeignEnum) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
          self.optionalForeignEnum = value
          return self
        }
        internal func clearOptionalForeignEnum() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
           builderResult.hasOptionalForeignEnum = false
           builderResult.optionalForeignEnum = .ForeignFoo
           return self
        }
        var hasOptionalImportEnum:Bool{
            get {
                return builderResult.hasOptionalImportEnum
            }
        }
        var optionalImportEnum:ProtobufUnittestImport.ImportEnum {
            get {
                return builderResult.optionalImportEnum
            }
            set (value) {
                builderResult.hasOptionalImportEnum = true
                builderResult.optionalImportEnum = value
            }
        }
        internal func setOptionalImportEnum(value:ProtobufUnittestImport.ImportEnum) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
          self.optionalImportEnum = value
          return self
        }
        internal func clearOptionalImportEnum() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
           builderResult.hasOptionalImportEnum = false
           builderResult.optionalImportEnum = .ImportFoo
           return self
        }
      var hasOptionalStringPiece:Bool {
           get {
                return builderResult.hasOptionalStringPiece
           }
      }
      var optionalStringPiece:String {
           get {
                return builderResult.optionalStringPiece
           }
           set (value) {
               builderResult.hasOptionalStringPiece = true
               builderResult.optionalStringPiece = value
           }
      }
      func setOptionalStringPiece(value:String) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalStringPiece = value
        return self
      }
      internal func clearOptionalStringPiece() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalStringPiece = false
           builderResult.optionalStringPiece = ""
           return self
      }
      var hasOptionalCord:Bool {
           get {
                return builderResult.hasOptionalCord
           }
      }
      var optionalCord:String {
           get {
                return builderResult.optionalCord
           }
           set (value) {
               builderResult.hasOptionalCord = true
               builderResult.optionalCord = value
           }
      }
      func setOptionalCord(value:String) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalCord = value
        return self
      }
      internal func clearOptionalCord() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOptionalCord = false
           builderResult.optionalCord = ""
           return self
      }
      var hasOptionalPublicImportMessage:Bool {
           get {
               return builderResult.hasOptionalPublicImportMessage
           }
      }
      var optionalPublicImportMessage:ProtobufUnittestImport.PublicImportMessage! {
           get {
               if optionalPublicImportMessageBuilder_ != nil {
                  builderResult.optionalPublicImportMessage = optionalPublicImportMessageBuilder_.getMessage()
               }
               return builderResult.optionalPublicImportMessage
           }
           set (value) {
               builderResult.hasOptionalPublicImportMessage = true
               builderResult.optionalPublicImportMessage = value
           }
      }
      private var optionalPublicImportMessageBuilder_:ProtobufUnittestImport.PublicImportMessage.Builder! {
           didSet {
              builderResult.hasOptionalPublicImportMessage = true
           }
      }
      internal func getOptionalPublicImportMessageBuilder() -> ProtobufUnittestImport.PublicImportMessage.Builder {
        if optionalPublicImportMessageBuilder_ == nil {
           optionalPublicImportMessageBuilder_ = ProtobufUnittestImport.PublicImportMessage.Builder()
           builderResult.optionalPublicImportMessage = optionalPublicImportMessageBuilder_.getMessage()
           if optionalPublicImportMessage != nil {
              optionalPublicImportMessageBuilder_.mergeFrom(optionalPublicImportMessage)
           }
        }
        return optionalPublicImportMessageBuilder_
      }
      func setOptionalPublicImportMessage(value:ProtobufUnittestImport.PublicImportMessage!) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalPublicImportMessage = value
        return self
      }
      internal func mergeOptionalPublicImportMessage(value:ProtobufUnittestImport.PublicImportMessage) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        if builderResult.hasOptionalPublicImportMessage {
          builderResult.optionalPublicImportMessage = ProtobufUnittestImport.PublicImportMessage.builderWithPrototype(builderResult.optionalPublicImportMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalPublicImportMessage = value
        }
        builderResult.hasOptionalPublicImportMessage = true
        return self
      }
      internal func clearOptionalPublicImportMessage() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        optionalPublicImportMessageBuilder_ = nil
        builderResult.hasOptionalPublicImportMessage = false
        builderResult.optionalPublicImportMessage = nil
        return self
      }
      var hasOptionalLazyMessage:Bool {
           get {
               return builderResult.hasOptionalLazyMessage
           }
      }
      var optionalLazyMessage:ProtobufUnittestNoArena.TestAllTypes.NestedMessage! {
           get {
               if optionalLazyMessageBuilder_ != nil {
                  builderResult.optionalLazyMessage = optionalLazyMessageBuilder_.getMessage()
               }
               return builderResult.optionalLazyMessage
           }
           set (value) {
               builderResult.hasOptionalLazyMessage = true
               builderResult.optionalLazyMessage = value
           }
      }
      private var optionalLazyMessageBuilder_:ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder! {
           didSet {
              builderResult.hasOptionalLazyMessage = true
           }
      }
      internal func getOptionalLazyMessageBuilder() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
        if optionalLazyMessageBuilder_ == nil {
           optionalLazyMessageBuilder_ = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder()
           builderResult.optionalLazyMessage = optionalLazyMessageBuilder_.getMessage()
           if optionalLazyMessage != nil {
              optionalLazyMessageBuilder_.mergeFrom(optionalLazyMessage)
           }
        }
        return optionalLazyMessageBuilder_
      }
      func setOptionalLazyMessage(value:ProtobufUnittestNoArena.TestAllTypes.NestedMessage!) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.optionalLazyMessage = value
        return self
      }
      internal func mergeOptionalLazyMessage(value:ProtobufUnittestNoArena.TestAllTypes.NestedMessage) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        if builderResult.hasOptionalLazyMessage {
          builderResult.optionalLazyMessage = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.optionalLazyMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalLazyMessage = value
        }
        builderResult.hasOptionalLazyMessage = true
        return self
      }
      internal func clearOptionalLazyMessage() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        optionalLazyMessageBuilder_ = nil
        builderResult.hasOptionalLazyMessage = false
        builderResult.optionalLazyMessage = nil
        return self
      }
      var repeatedInt32:Array<Int32> {
           get {
               return builderResult.repeatedInt32
           }
           set (array) {
               builderResult.repeatedInt32 = array
           }
      }
      func setRepeatedInt32(value:Array<Int32>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedInt32 = value
        return self
      }
      internal func clearRepeatedInt32() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedInt32.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedInt64:Array<Int64> {
           get {
               return builderResult.repeatedInt64
           }
           set (array) {
               builderResult.repeatedInt64 = array
           }
      }
      func setRepeatedInt64(value:Array<Int64>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedInt64 = value
        return self
      }
      internal func clearRepeatedInt64() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedInt64.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedUint32:Array<UInt32> {
           get {
               return builderResult.repeatedUint32
           }
           set (array) {
               builderResult.repeatedUint32 = array
           }
      }
      func setRepeatedUint32(value:Array<UInt32>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedUint32 = value
        return self
      }
      internal func clearRepeatedUint32() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedUint32.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedUint64:Array<UInt64> {
           get {
               return builderResult.repeatedUint64
           }
           set (array) {
               builderResult.repeatedUint64 = array
           }
      }
      func setRepeatedUint64(value:Array<UInt64>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedUint64 = value
        return self
      }
      internal func clearRepeatedUint64() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedUint64.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedSint32:Array<Int32> {
           get {
               return builderResult.repeatedSint32
           }
           set (array) {
               builderResult.repeatedSint32 = array
           }
      }
      func setRepeatedSint32(value:Array<Int32>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedSint32 = value
        return self
      }
      internal func clearRepeatedSint32() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedSint32.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedSint64:Array<Int64> {
           get {
               return builderResult.repeatedSint64
           }
           set (array) {
               builderResult.repeatedSint64 = array
           }
      }
      func setRepeatedSint64(value:Array<Int64>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedSint64 = value
        return self
      }
      internal func clearRepeatedSint64() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedSint64.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedFixed32:Array<UInt32> {
           get {
               return builderResult.repeatedFixed32
           }
           set (array) {
               builderResult.repeatedFixed32 = array
           }
      }
      func setRepeatedFixed32(value:Array<UInt32>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedFixed32 = value
        return self
      }
      internal func clearRepeatedFixed32() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedFixed32.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedFixed64:Array<UInt64> {
           get {
               return builderResult.repeatedFixed64
           }
           set (array) {
               builderResult.repeatedFixed64 = array
           }
      }
      func setRepeatedFixed64(value:Array<UInt64>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedFixed64 = value
        return self
      }
      internal func clearRepeatedFixed64() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedFixed64.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedSfixed32:Array<Int32> {
           get {
               return builderResult.repeatedSfixed32
           }
           set (array) {
               builderResult.repeatedSfixed32 = array
           }
      }
      func setRepeatedSfixed32(value:Array<Int32>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedSfixed32 = value
        return self
      }
      internal func clearRepeatedSfixed32() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedSfixed32.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedSfixed64:Array<Int64> {
           get {
               return builderResult.repeatedSfixed64
           }
           set (array) {
               builderResult.repeatedSfixed64 = array
           }
      }
      func setRepeatedSfixed64(value:Array<Int64>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedSfixed64 = value
        return self
      }
      internal func clearRepeatedSfixed64() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedSfixed64.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedFloat:Array<Float> {
           get {
               return builderResult.repeatedFloat
           }
           set (array) {
               builderResult.repeatedFloat = array
           }
      }
      func setRepeatedFloat(value:Array<Float>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedFloat = value
        return self
      }
      internal func clearRepeatedFloat() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedFloat.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedDouble:Array<Double> {
           get {
               return builderResult.repeatedDouble
           }
           set (array) {
               builderResult.repeatedDouble = array
           }
      }
      func setRepeatedDouble(value:Array<Double>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedDouble = value
        return self
      }
      internal func clearRepeatedDouble() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedDouble.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedBool:Array<Bool> {
           get {
               return builderResult.repeatedBool
           }
           set (array) {
               builderResult.repeatedBool = array
           }
      }
      func setRepeatedBool(value:Array<Bool>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedBool = value
        return self
      }
      internal func clearRepeatedBool() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedBool.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedString:Array<String> {
           get {
               return builderResult.repeatedString
           }
           set (array) {
               builderResult.repeatedString = array
           }
      }
      func setRepeatedString(value:Array<String>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedString = value
        return self
      }
      internal func clearRepeatedString() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedString.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedBytes:Array<NSData> {
           get {
               return builderResult.repeatedBytes
           }
           set (array) {
               builderResult.repeatedBytes = array
           }
      }
      func setRepeatedBytes(value:Array<NSData>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedBytes = value
        return self
      }
      internal func clearRepeatedBytes() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedBytes.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedGroup:Array<ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup> {
           get {
               return builderResult.repeatedGroup
           }
           set (value) {
               builderResult.repeatedGroup = value
           }
      }
      func setRepeatedGroup(value:Array<ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedGroup = value
        return self
      }
      internal func clearRepeatedGroup() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        builderResult.repeatedGroup.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedNestedMessage:Array<ProtobufUnittestNoArena.TestAllTypes.NestedMessage> {
           get {
               return builderResult.repeatedNestedMessage
           }
           set (value) {
               builderResult.repeatedNestedMessage = value
           }
      }
      func setRepeatedNestedMessage(value:Array<ProtobufUnittestNoArena.TestAllTypes.NestedMessage>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedNestedMessage = value
        return self
      }
      internal func clearRepeatedNestedMessage() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        builderResult.repeatedNestedMessage.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedForeignMessage:Array<ProtobufUnittestNoArena.ForeignMessage> {
           get {
               return builderResult.repeatedForeignMessage
           }
           set (value) {
               builderResult.repeatedForeignMessage = value
           }
      }
      func setRepeatedForeignMessage(value:Array<ProtobufUnittestNoArena.ForeignMessage>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedForeignMessage = value
        return self
      }
      internal func clearRepeatedForeignMessage() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        builderResult.repeatedForeignMessage.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedImportMessage:Array<ProtobufUnittestImport.ImportMessage> {
           get {
               return builderResult.repeatedImportMessage
           }
           set (value) {
               builderResult.repeatedImportMessage = value
           }
      }
      func setRepeatedImportMessage(value:Array<ProtobufUnittestImport.ImportMessage>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedImportMessage = value
        return self
      }
      internal func clearRepeatedImportMessage() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        builderResult.repeatedImportMessage.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedNestedEnum:Array<TestAllTypes.NestedEnum> {
          get {
              return builderResult.repeatedNestedEnum
          }
          set (value) {
              builderResult.repeatedNestedEnum = value
          }
      }
      func setRepeatedNestedEnum(value:Array<TestAllTypes.NestedEnum>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedNestedEnum = value
        return self
      }
      internal func clearRepeatedNestedEnum() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        builderResult.repeatedNestedEnum.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedForeignEnum:Array<ProtobufUnittestNoArena.ForeignEnum> {
          get {
              return builderResult.repeatedForeignEnum
          }
          set (value) {
              builderResult.repeatedForeignEnum = value
          }
      }
      func setRepeatedForeignEnum(value:Array<ProtobufUnittestNoArena.ForeignEnum>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedForeignEnum = value
        return self
      }
      internal func clearRepeatedForeignEnum() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        builderResult.repeatedForeignEnum.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedImportEnum:Array<ProtobufUnittestImport.ImportEnum> {
          get {
              return builderResult.repeatedImportEnum
          }
          set (value) {
              builderResult.repeatedImportEnum = value
          }
      }
      func setRepeatedImportEnum(value:Array<ProtobufUnittestImport.ImportEnum>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedImportEnum = value
        return self
      }
      internal func clearRepeatedImportEnum() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        builderResult.repeatedImportEnum.removeAll(keepingCapacity: false)
        return self
      }
      var repeatedStringPiece:Array<String> {
           get {
               return builderResult.repeatedStringPiece
           }
           set (array) {
               builderResult.repeatedStringPiece = array
           }
      }
      func setRepeatedStringPiece(value:Array<String>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedStringPiece = value
        return self
      }
      internal func clearRepeatedStringPiece() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedStringPiece.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedCord:Array<String> {
           get {
               return builderResult.repeatedCord
           }
           set (array) {
               builderResult.repeatedCord = array
           }
      }
      func setRepeatedCord(value:Array<String>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedCord = value
        return self
      }
      internal func clearRepeatedCord() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
         builderResult.repeatedCord.removeAll(keepingCapacity: false)
         return self
      }
      var repeatedLazyMessage:Array<ProtobufUnittestNoArena.TestAllTypes.NestedMessage> {
           get {
               return builderResult.repeatedLazyMessage
           }
           set (value) {
               builderResult.repeatedLazyMessage = value
           }
      }
      func setRepeatedLazyMessage(value:Array<ProtobufUnittestNoArena.TestAllTypes.NestedMessage>) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.repeatedLazyMessage = value
        return self
      }
      internal func clearRepeatedLazyMessage() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        builderResult.repeatedLazyMessage.removeAll(keepingCapacity: false)
        return self
      }
      var hasDefaultInt32:Bool {
           get {
                return builderResult.hasDefaultInt32
           }
      }
      var defaultInt32:Int32 {
           get {
                return builderResult.defaultInt32
           }
           set (value) {
               builderResult.hasDefaultInt32 = true
               builderResult.defaultInt32 = value
           }
      }
      func setDefaultInt32(value:Int32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultInt32 = value
        return self
      }
      internal func clearDefaultInt32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultInt32 = false
           builderResult.defaultInt32 = Int32(41)
           return self
      }
      var hasDefaultInt64:Bool {
           get {
                return builderResult.hasDefaultInt64
           }
      }
      var defaultInt64:Int64 {
           get {
                return builderResult.defaultInt64
           }
           set (value) {
               builderResult.hasDefaultInt64 = true
               builderResult.defaultInt64 = value
           }
      }
      func setDefaultInt64(value:Int64) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultInt64 = value
        return self
      }
      internal func clearDefaultInt64() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultInt64 = false
           builderResult.defaultInt64 = Int64(42)
           return self
      }
      var hasDefaultUint32:Bool {
           get {
                return builderResult.hasDefaultUint32
           }
      }
      var defaultUint32:UInt32 {
           get {
                return builderResult.defaultUint32
           }
           set (value) {
               builderResult.hasDefaultUint32 = true
               builderResult.defaultUint32 = value
           }
      }
      func setDefaultUint32(value:UInt32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultUint32 = value
        return self
      }
      internal func clearDefaultUint32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultUint32 = false
           builderResult.defaultUint32 = UInt32(43)
           return self
      }
      var hasDefaultUint64:Bool {
           get {
                return builderResult.hasDefaultUint64
           }
      }
      var defaultUint64:UInt64 {
           get {
                return builderResult.defaultUint64
           }
           set (value) {
               builderResult.hasDefaultUint64 = true
               builderResult.defaultUint64 = value
           }
      }
      func setDefaultUint64(value:UInt64) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultUint64 = value
        return self
      }
      internal func clearDefaultUint64() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultUint64 = false
           builderResult.defaultUint64 = UInt64(44)
           return self
      }
      var hasDefaultSint32:Bool {
           get {
                return builderResult.hasDefaultSint32
           }
      }
      var defaultSint32:Int32 {
           get {
                return builderResult.defaultSint32
           }
           set (value) {
               builderResult.hasDefaultSint32 = true
               builderResult.defaultSint32 = value
           }
      }
      func setDefaultSint32(value:Int32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultSint32 = value
        return self
      }
      internal func clearDefaultSint32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultSint32 = false
           builderResult.defaultSint32 = Int32(-45)
           return self
      }
      var hasDefaultSint64:Bool {
           get {
                return builderResult.hasDefaultSint64
           }
      }
      var defaultSint64:Int64 {
           get {
                return builderResult.defaultSint64
           }
           set (value) {
               builderResult.hasDefaultSint64 = true
               builderResult.defaultSint64 = value
           }
      }
      func setDefaultSint64(value:Int64) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultSint64 = value
        return self
      }
      internal func clearDefaultSint64() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultSint64 = false
           builderResult.defaultSint64 = Int64(46)
           return self
      }
      var hasDefaultFixed32:Bool {
           get {
                return builderResult.hasDefaultFixed32
           }
      }
      var defaultFixed32:UInt32 {
           get {
                return builderResult.defaultFixed32
           }
           set (value) {
               builderResult.hasDefaultFixed32 = true
               builderResult.defaultFixed32 = value
           }
      }
      func setDefaultFixed32(value:UInt32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultFixed32 = value
        return self
      }
      internal func clearDefaultFixed32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultFixed32 = false
           builderResult.defaultFixed32 = UInt32(47)
           return self
      }
      var hasDefaultFixed64:Bool {
           get {
                return builderResult.hasDefaultFixed64
           }
      }
      var defaultFixed64:UInt64 {
           get {
                return builderResult.defaultFixed64
           }
           set (value) {
               builderResult.hasDefaultFixed64 = true
               builderResult.defaultFixed64 = value
           }
      }
      func setDefaultFixed64(value:UInt64) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultFixed64 = value
        return self
      }
      internal func clearDefaultFixed64() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultFixed64 = false
           builderResult.defaultFixed64 = UInt64(48)
           return self
      }
      var hasDefaultSfixed32:Bool {
           get {
                return builderResult.hasDefaultSfixed32
           }
      }
      var defaultSfixed32:Int32 {
           get {
                return builderResult.defaultSfixed32
           }
           set (value) {
               builderResult.hasDefaultSfixed32 = true
               builderResult.defaultSfixed32 = value
           }
      }
      func setDefaultSfixed32(value:Int32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultSfixed32 = value
        return self
      }
      internal func clearDefaultSfixed32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultSfixed32 = false
           builderResult.defaultSfixed32 = Int32(49)
           return self
      }
      var hasDefaultSfixed64:Bool {
           get {
                return builderResult.hasDefaultSfixed64
           }
      }
      var defaultSfixed64:Int64 {
           get {
                return builderResult.defaultSfixed64
           }
           set (value) {
               builderResult.hasDefaultSfixed64 = true
               builderResult.defaultSfixed64 = value
           }
      }
      func setDefaultSfixed64(value:Int64) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultSfixed64 = value
        return self
      }
      internal func clearDefaultSfixed64() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultSfixed64 = false
           builderResult.defaultSfixed64 = Int64(-50)
           return self
      }
      var hasDefaultFloat:Bool {
           get {
                return builderResult.hasDefaultFloat
           }
      }
      var defaultFloat:Float {
           get {
                return builderResult.defaultFloat
           }
           set (value) {
               builderResult.hasDefaultFloat = true
               builderResult.defaultFloat = value
           }
      }
      func setDefaultFloat(value:Float) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultFloat = value
        return self
      }
      internal func clearDefaultFloat() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultFloat = false
           builderResult.defaultFloat = Float(51.5)
           return self
      }
      var hasDefaultDouble:Bool {
           get {
                return builderResult.hasDefaultDouble
           }
      }
      var defaultDouble:Double {
           get {
                return builderResult.defaultDouble
           }
           set (value) {
               builderResult.hasDefaultDouble = true
               builderResult.defaultDouble = value
           }
      }
      func setDefaultDouble(value:Double) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultDouble = value
        return self
      }
      internal func clearDefaultDouble() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultDouble = false
           builderResult.defaultDouble = Double(52000)
           return self
      }
      var hasDefaultBool:Bool {
           get {
                return builderResult.hasDefaultBool
           }
      }
      var defaultBool:Bool {
           get {
                return builderResult.defaultBool
           }
           set (value) {
               builderResult.hasDefaultBool = true
               builderResult.defaultBool = value
           }
      }
      func setDefaultBool(value:Bool) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultBool = value
        return self
      }
      internal func clearDefaultBool() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultBool = false
           builderResult.defaultBool = true
           return self
      }
      var hasDefaultString:Bool {
           get {
                return builderResult.hasDefaultString
           }
      }
      var defaultString:String {
           get {
                return builderResult.defaultString
           }
           set (value) {
               builderResult.hasDefaultString = true
               builderResult.defaultString = value
           }
      }
      func setDefaultString(value:String) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultString = value
        return self
      }
      internal func clearDefaultString() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultString = false
           builderResult.defaultString = "hello"
           return self
      }
      var hasDefaultBytes:Bool {
           get {
                return builderResult.hasDefaultBytes
           }
      }
      var defaultBytes:NSData {
           get {
                return builderResult.defaultBytes
           }
           set (value) {
               builderResult.hasDefaultBytes = true
               builderResult.defaultBytes = value
           }
      }
      func setDefaultBytes(value:NSData) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultBytes = value
        return self
      }
      internal func clearDefaultBytes() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultBytes = false
           builderResult.defaultBytes = NSData(bytes:([UInt8]() + "world".utf8), length:5)
           return self
      }
        var hasDefaultNestedEnum:Bool{
            get {
                return builderResult.hasDefaultNestedEnum
            }
        }
        var defaultNestedEnum:TestAllTypes.NestedEnum {
            get {
                return builderResult.defaultNestedEnum
            }
            set (value) {
                builderResult.hasDefaultNestedEnum = true
                builderResult.defaultNestedEnum = value
            }
        }
        internal func setDefaultNestedEnum(value:TestAllTypes.NestedEnum) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
          self.defaultNestedEnum = value
          return self
        }
        internal func clearDefaultNestedEnum() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
           builderResult.hasDefaultNestedEnum = false
           builderResult.defaultNestedEnum = .Bar
           return self
        }
        var hasDefaultForeignEnum:Bool{
            get {
                return builderResult.hasDefaultForeignEnum
            }
        }
        var defaultForeignEnum:ProtobufUnittestNoArena.ForeignEnum {
            get {
                return builderResult.defaultForeignEnum
            }
            set (value) {
                builderResult.hasDefaultForeignEnum = true
                builderResult.defaultForeignEnum = value
            }
        }
        internal func setDefaultForeignEnum(value:ProtobufUnittestNoArena.ForeignEnum) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
          self.defaultForeignEnum = value
          return self
        }
        internal func clearDefaultForeignEnum() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
           builderResult.hasDefaultForeignEnum = false
           builderResult.defaultForeignEnum = .ForeignBar
           return self
        }
        var hasDefaultImportEnum:Bool{
            get {
                return builderResult.hasDefaultImportEnum
            }
        }
        var defaultImportEnum:ProtobufUnittestImport.ImportEnum {
            get {
                return builderResult.defaultImportEnum
            }
            set (value) {
                builderResult.hasDefaultImportEnum = true
                builderResult.defaultImportEnum = value
            }
        }
        internal func setDefaultImportEnum(value:ProtobufUnittestImport.ImportEnum) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
          self.defaultImportEnum = value
          return self
        }
        internal func clearDefaultImportEnum() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
           builderResult.hasDefaultImportEnum = false
           builderResult.defaultImportEnum = .ImportBar
           return self
        }
      var hasDefaultStringPiece:Bool {
           get {
                return builderResult.hasDefaultStringPiece
           }
      }
      var defaultStringPiece:String {
           get {
                return builderResult.defaultStringPiece
           }
           set (value) {
               builderResult.hasDefaultStringPiece = true
               builderResult.defaultStringPiece = value
           }
      }
      func setDefaultStringPiece(value:String) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultStringPiece = value
        return self
      }
      internal func clearDefaultStringPiece() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultStringPiece = false
           builderResult.defaultStringPiece = "abc"
           return self
      }
      var hasDefaultCord:Bool {
           get {
                return builderResult.hasDefaultCord
           }
      }
      var defaultCord:String {
           get {
                return builderResult.defaultCord
           }
           set (value) {
               builderResult.hasDefaultCord = true
               builderResult.defaultCord = value
           }
      }
      func setDefaultCord(value:String) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.defaultCord = value
        return self
      }
      internal func clearDefaultCord() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasDefaultCord = false
           builderResult.defaultCord = "123"
           return self
      }
      var hasOneofUint32:Bool {
           get {
                return builderResult.hasOneofUint32
           }
      }
      var oneofUint32:UInt32 {
           get {
                return builderResult.oneofUint32
           }
           set (value) {
               builderResult.hasOneofUint32 = true
               builderResult.oneofUint32 = value
           }
      }
      func setOneofUint32(value:UInt32) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.oneofUint32 = value
        return self
      }
      internal func clearOneofUint32() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOneofUint32 = false
           builderResult.oneofUint32 = UInt32(0)
           return self
      }
      var hasOneofNestedMessage:Bool {
           get {
               return builderResult.hasOneofNestedMessage
           }
      }
      var oneofNestedMessage:ProtobufUnittestNoArena.TestAllTypes.NestedMessage! {
           get {
               if oneofNestedMessageBuilder_ != nil {
                  builderResult.oneofNestedMessage = oneofNestedMessageBuilder_.getMessage()
               }
               return builderResult.oneofNestedMessage
           }
           set (value) {
               builderResult.hasOneofNestedMessage = true
               builderResult.oneofNestedMessage = value
           }
      }
      private var oneofNestedMessageBuilder_:ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder! {
           didSet {
              builderResult.hasOneofNestedMessage = true
           }
      }
      internal func getOneofNestedMessageBuilder() -> ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder {
        if oneofNestedMessageBuilder_ == nil {
           oneofNestedMessageBuilder_ = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder()
           builderResult.oneofNestedMessage = oneofNestedMessageBuilder_.getMessage()
           if oneofNestedMessage != nil {
              oneofNestedMessageBuilder_.mergeFrom(oneofNestedMessage)
           }
        }
        return oneofNestedMessageBuilder_
      }
      func setOneofNestedMessage(value:ProtobufUnittestNoArena.TestAllTypes.NestedMessage!) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.oneofNestedMessage = value
        return self
      }
      internal func mergeOneofNestedMessage(value:ProtobufUnittestNoArena.TestAllTypes.NestedMessage) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        if builderResult.hasOneofNestedMessage {
          builderResult.oneofNestedMessage = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.oneofNestedMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.oneofNestedMessage = value
        }
        builderResult.hasOneofNestedMessage = true
        return self
      }
      internal func clearOneofNestedMessage() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        oneofNestedMessageBuilder_ = nil
        builderResult.hasOneofNestedMessage = false
        builderResult.oneofNestedMessage = nil
        return self
      }
      var hasOneofString:Bool {
           get {
                return builderResult.hasOneofString
           }
      }
      var oneofString:String {
           get {
                return builderResult.oneofString
           }
           set (value) {
               builderResult.hasOneofString = true
               builderResult.oneofString = value
           }
      }
      func setOneofString(value:String) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.oneofString = value
        return self
      }
      internal func clearOneofString() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOneofString = false
           builderResult.oneofString = ""
           return self
      }
      var hasOneofBytes:Bool {
           get {
                return builderResult.hasOneofBytes
           }
      }
      var oneofBytes:NSData {
           get {
                return builderResult.oneofBytes
           }
           set (value) {
               builderResult.hasOneofBytes = true
               builderResult.oneofBytes = value
           }
      }
      func setOneofBytes(value:NSData) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        self.oneofBytes = value
        return self
      }
      internal func clearOneofBytes() -> ProtobufUnittestNoArena.TestAllTypes.Builder{
           builderResult.hasOneofBytes = false
           builderResult.oneofBytes = NSData()
           return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        builderResult = ProtobufUnittestNoArena.TestAllTypes()
        return self
      }
      internal override func clone() -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        return ProtobufUnittestNoArena.TestAllTypes.builderWithPrototype(builderResult)
      }
      internal override func build() -> ProtobufUnittestNoArena.TestAllTypes {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> ProtobufUnittestNoArena.TestAllTypes {
        let returnMe:ProtobufUnittestNoArena.TestAllTypes = builderResult
        return returnMe
      }
      internal func mergeFrom(other:ProtobufUnittestNoArena.TestAllTypes) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        if other == ProtobufUnittestNoArena.TestAllTypes() {
         return self
        }
        if other.hasOptionalInt32 {
             optionalInt32 = other.optionalInt32
        }
        if other.hasOptionalInt64 {
             optionalInt64 = other.optionalInt64
        }
        if other.hasOptionalUint32 {
             optionalUint32 = other.optionalUint32
        }
        if other.hasOptionalUint64 {
             optionalUint64 = other.optionalUint64
        }
        if other.hasOptionalSint32 {
             optionalSint32 = other.optionalSint32
        }
        if other.hasOptionalSint64 {
             optionalSint64 = other.optionalSint64
        }
        if other.hasOptionalFixed32 {
             optionalFixed32 = other.optionalFixed32
        }
        if other.hasOptionalFixed64 {
             optionalFixed64 = other.optionalFixed64
        }
        if other.hasOptionalSfixed32 {
             optionalSfixed32 = other.optionalSfixed32
        }
        if other.hasOptionalSfixed64 {
             optionalSfixed64 = other.optionalSfixed64
        }
        if other.hasOptionalFloat {
             optionalFloat = other.optionalFloat
        }
        if other.hasOptionalDouble {
             optionalDouble = other.optionalDouble
        }
        if other.hasOptionalBool {
             optionalBool = other.optionalBool
        }
        if other.hasOptionalString {
             optionalString = other.optionalString
        }
        if other.hasOptionalBytes {
             optionalBytes = other.optionalBytes
        }
        if (other.hasOptionalGroup) {
            mergeOptionalGroup(other.optionalGroup)
        }
        if (other.hasOptionalNestedMessage) {
            mergeOptionalNestedMessage(other.optionalNestedMessage)
        }
        if (other.hasOptionalForeignMessage) {
            mergeOptionalForeignMessage(other.optionalForeignMessage)
        }
        if (other.hasOptionalImportMessage) {
            mergeOptionalImportMessage(other.optionalImportMessage)
        }
        if other.hasOptionalNestedEnum {
             optionalNestedEnum = other.optionalNestedEnum
        }
        if other.hasOptionalForeignEnum {
             optionalForeignEnum = other.optionalForeignEnum
        }
        if other.hasOptionalImportEnum {
             optionalImportEnum = other.optionalImportEnum
        }
        if other.hasOptionalStringPiece {
             optionalStringPiece = other.optionalStringPiece
        }
        if other.hasOptionalCord {
             optionalCord = other.optionalCord
        }
        if (other.hasOptionalPublicImportMessage) {
            mergeOptionalPublicImportMessage(other.optionalPublicImportMessage)
        }
        if (other.hasOptionalLazyMessage) {
            mergeOptionalLazyMessage(other.optionalLazyMessage)
        }
        if !other.repeatedInt32.isEmpty {
            builderResult.repeatedInt32 += other.repeatedInt32
        }
        if !other.repeatedInt64.isEmpty {
            builderResult.repeatedInt64 += other.repeatedInt64
        }
        if !other.repeatedUint32.isEmpty {
            builderResult.repeatedUint32 += other.repeatedUint32
        }
        if !other.repeatedUint64.isEmpty {
            builderResult.repeatedUint64 += other.repeatedUint64
        }
        if !other.repeatedSint32.isEmpty {
            builderResult.repeatedSint32 += other.repeatedSint32
        }
        if !other.repeatedSint64.isEmpty {
            builderResult.repeatedSint64 += other.repeatedSint64
        }
        if !other.repeatedFixed32.isEmpty {
            builderResult.repeatedFixed32 += other.repeatedFixed32
        }
        if !other.repeatedFixed64.isEmpty {
            builderResult.repeatedFixed64 += other.repeatedFixed64
        }
        if !other.repeatedSfixed32.isEmpty {
            builderResult.repeatedSfixed32 += other.repeatedSfixed32
        }
        if !other.repeatedSfixed64.isEmpty {
            builderResult.repeatedSfixed64 += other.repeatedSfixed64
        }
        if !other.repeatedFloat.isEmpty {
            builderResult.repeatedFloat += other.repeatedFloat
        }
        if !other.repeatedDouble.isEmpty {
            builderResult.repeatedDouble += other.repeatedDouble
        }
        if !other.repeatedBool.isEmpty {
            builderResult.repeatedBool += other.repeatedBool
        }
        if !other.repeatedString.isEmpty {
            builderResult.repeatedString += other.repeatedString
        }
        if !other.repeatedBytes.isEmpty {
            builderResult.repeatedBytes += other.repeatedBytes
        }
        if !other.repeatedGroup.isEmpty  {
           builderResult.repeatedGroup += other.repeatedGroup
        }
        if !other.repeatedNestedMessage.isEmpty  {
           builderResult.repeatedNestedMessage += other.repeatedNestedMessage
        }
        if !other.repeatedForeignMessage.isEmpty  {
           builderResult.repeatedForeignMessage += other.repeatedForeignMessage
        }
        if !other.repeatedImportMessage.isEmpty  {
           builderResult.repeatedImportMessage += other.repeatedImportMessage
        }
        if !other.repeatedNestedEnum.isEmpty {
           builderResult.repeatedNestedEnum += other.repeatedNestedEnum
        }
        if !other.repeatedForeignEnum.isEmpty {
           builderResult.repeatedForeignEnum += other.repeatedForeignEnum
        }
        if !other.repeatedImportEnum.isEmpty {
           builderResult.repeatedImportEnum += other.repeatedImportEnum
        }
        if !other.repeatedStringPiece.isEmpty {
            builderResult.repeatedStringPiece += other.repeatedStringPiece
        }
        if !other.repeatedCord.isEmpty {
            builderResult.repeatedCord += other.repeatedCord
        }
        if !other.repeatedLazyMessage.isEmpty  {
           builderResult.repeatedLazyMessage += other.repeatedLazyMessage
        }
        if other.hasDefaultInt32 {
             defaultInt32 = other.defaultInt32
        }
        if other.hasDefaultInt64 {
             defaultInt64 = other.defaultInt64
        }
        if other.hasDefaultUint32 {
             defaultUint32 = other.defaultUint32
        }
        if other.hasDefaultUint64 {
             defaultUint64 = other.defaultUint64
        }
        if other.hasDefaultSint32 {
             defaultSint32 = other.defaultSint32
        }
        if other.hasDefaultSint64 {
             defaultSint64 = other.defaultSint64
        }
        if other.hasDefaultFixed32 {
             defaultFixed32 = other.defaultFixed32
        }
        if other.hasDefaultFixed64 {
             defaultFixed64 = other.defaultFixed64
        }
        if other.hasDefaultSfixed32 {
             defaultSfixed32 = other.defaultSfixed32
        }
        if other.hasDefaultSfixed64 {
             defaultSfixed64 = other.defaultSfixed64
        }
        if other.hasDefaultFloat {
             defaultFloat = other.defaultFloat
        }
        if other.hasDefaultDouble {
             defaultDouble = other.defaultDouble
        }
        if other.hasDefaultBool {
             defaultBool = other.defaultBool
        }
        if other.hasDefaultString {
             defaultString = other.defaultString
        }
        if other.hasDefaultBytes {
             defaultBytes = other.defaultBytes
        }
        if other.hasDefaultNestedEnum {
             defaultNestedEnum = other.defaultNestedEnum
        }
        if other.hasDefaultForeignEnum {
             defaultForeignEnum = other.defaultForeignEnum
        }
        if other.hasDefaultImportEnum {
             defaultImportEnum = other.defaultImportEnum
        }
        if other.hasDefaultStringPiece {
             defaultStringPiece = other.defaultStringPiece
        }
        if other.hasDefaultCord {
             defaultCord = other.defaultCord
        }
        if other.hasOneofUint32 {
             oneofUint32 = other.oneofUint32
        }
        if (other.hasOneofNestedMessage) {
            mergeOneofNestedMessage(other.oneofNestedMessage)
        }
        if other.hasOneofString {
             oneofString = other.oneofString
        }
        if other.hasOneofBytes {
             oneofBytes = other.oneofBytes
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestAllTypes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 8 :
            optionalInt32 = input.readInt32()

          case 16 :
            optionalInt64 = input.readInt64()

          case 24 :
            optionalUint32 = input.readUInt32()

          case 32 :
            optionalUint64 = input.readUInt64()

          case 40 :
            optionalSint32 = input.readSInt32()

          case 48 :
            optionalSint64 = input.readSInt64()

          case 61 :
            optionalFixed32 = input.readFixed32()

          case 65 :
            optionalFixed64 = input.readFixed64()

          case 77 :
            optionalSfixed32 = input.readSFixed32()

          case 81 :
            optionalSfixed64 = input.readSFixed64()

          case 93 :
            optionalFloat = input.readFloat()

          case 97 :
            optionalDouble = input.readDouble()

          case 104 :
            optionalBool = input.readBool()

          case 114 :
            optionalString = input.readString()

          case 122 :
            optionalBytes = input.readData()

          case 131 :
            let subBuilder:ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder = ProtobufUnittestNoArena.TestAllTypes.OptionalGroup.Builder()
            if hasOptionalGroup {
              subBuilder.mergeFrom(optionalGroup)
            }
            input.readGroup(16, builder:subBuilder, extensionRegistry:extensionRegistry)
            optionalGroup = subBuilder.buildPartial()

          case 146 :
            let subBuilder:ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder()
            if hasOptionalNestedMessage {
              subBuilder.mergeFrom(optionalNestedMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalNestedMessage = subBuilder.buildPartial()

          case 154 :
            let subBuilder:ProtobufUnittestNoArena.ForeignMessage.Builder = ProtobufUnittestNoArena.ForeignMessage.Builder()
            if hasOptionalForeignMessage {
              subBuilder.mergeFrom(optionalForeignMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalForeignMessage = subBuilder.buildPartial()

          case 162 :
            let subBuilder:ProtobufUnittestImport.ImportMessage.Builder = ProtobufUnittestImport.ImportMessage.Builder()
            if hasOptionalImportMessage {
              subBuilder.mergeFrom(optionalImportMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalImportMessage = subBuilder.buildPartial()

          case 168 :
            let valueIntoptionalNestedEnum = input.readEnum()
            if let enumsoptionalNestedEnum = TestAllTypes.NestedEnum(rawValue:valueIntoptionalNestedEnum){
                 optionalNestedEnum = enumsoptionalNestedEnum
            } else {
                 unknownFieldsBuilder.mergeVarintField(21, value:Int64(valueIntoptionalNestedEnum))
            }

          case 176 :
            let valueIntoptionalForeignEnum = input.readEnum()
            if let enumsoptionalForeignEnum = ProtobufUnittestNoArena.ForeignEnum(rawValue:valueIntoptionalForeignEnum){
                 optionalForeignEnum = enumsoptionalForeignEnum
            } else {
                 unknownFieldsBuilder.mergeVarintField(22, value:Int64(valueIntoptionalForeignEnum))
            }

          case 184 :
            let valueIntoptionalImportEnum = input.readEnum()
            if let enumsoptionalImportEnum = ProtobufUnittestImport.ImportEnum(rawValue:valueIntoptionalImportEnum){
                 optionalImportEnum = enumsoptionalImportEnum
            } else {
                 unknownFieldsBuilder.mergeVarintField(23, value:Int64(valueIntoptionalImportEnum))
            }

          case 194 :
            optionalStringPiece = input.readString()

          case 202 :
            optionalCord = input.readString()

          case 210 :
            let subBuilder:ProtobufUnittestImport.PublicImportMessage.Builder = ProtobufUnittestImport.PublicImportMessage.Builder()
            if hasOptionalPublicImportMessage {
              subBuilder.mergeFrom(optionalPublicImportMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalPublicImportMessage = subBuilder.buildPartial()

          case 218 :
            let subBuilder:ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder()
            if hasOptionalLazyMessage {
              subBuilder.mergeFrom(optionalLazyMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalLazyMessage = subBuilder.buildPartial()

          case 248 :
            repeatedInt32 += [input.readInt32()]

          case 256 :
            repeatedInt64 += [input.readInt64()]

          case 264 :
            repeatedUint32 += [input.readUInt32()]

          case 272 :
            repeatedUint64 += [input.readUInt64()]

          case 280 :
            repeatedSint32 += [input.readSInt32()]

          case 288 :
            repeatedSint64 += [input.readSInt64()]

          case 301 :
            repeatedFixed32 += [input.readFixed32()]

          case 305 :
            repeatedFixed64 += [input.readFixed64()]

          case 317 :
            repeatedSfixed32 += [input.readSFixed32()]

          case 321 :
            repeatedSfixed64 += [input.readSFixed64()]

          case 333 :
            repeatedFloat += [input.readFloat()]

          case 337 :
            repeatedDouble += [input.readDouble()]

          case 344 :
            repeatedBool += [input.readBool()]

          case 354 :
            repeatedString += [input.readString()]

          case 362 :
            repeatedBytes += [input.readData()]

          case 371 :
            let subBuilder = ProtobufUnittestNoArena.TestAllTypes.RepeatedGroup.Builder()
            input.readGroup(46,builder:subBuilder,extensionRegistry:extensionRegistry)
            repeatedGroup += [subBuilder.buildPartial()]

          case 386 :
            let subBuilder = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedNestedMessage += [subBuilder.buildPartial()]

          case 394 :
            let subBuilder = ProtobufUnittestNoArena.ForeignMessage.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedForeignMessage += [subBuilder.buildPartial()]

          case 402 :
            let subBuilder = ProtobufUnittestImport.ImportMessage.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedImportMessage += [subBuilder.buildPartial()]

          case 408 :
            let valueIntrepeatedNestedEnum = input.readEnum()
            if let enumsrepeatedNestedEnum = TestAllTypes.NestedEnum(rawValue:valueIntrepeatedNestedEnum) {
                 builderResult.repeatedNestedEnum += [enumsrepeatedNestedEnum]
            } else {
                 unknownFieldsBuilder.mergeVarintField(51, value:Int64(valueIntrepeatedNestedEnum))
            }

          case 416 :
            let valueIntrepeatedForeignEnum = input.readEnum()
            if let enumsrepeatedForeignEnum = ProtobufUnittestNoArena.ForeignEnum(rawValue:valueIntrepeatedForeignEnum) {
                 builderResult.repeatedForeignEnum += [enumsrepeatedForeignEnum]
            } else {
                 unknownFieldsBuilder.mergeVarintField(52, value:Int64(valueIntrepeatedForeignEnum))
            }

          case 424 :
            let valueIntrepeatedImportEnum = input.readEnum()
            if let enumsrepeatedImportEnum = ProtobufUnittestImport.ImportEnum(rawValue:valueIntrepeatedImportEnum) {
                 builderResult.repeatedImportEnum += [enumsrepeatedImportEnum]
            } else {
                 unknownFieldsBuilder.mergeVarintField(53, value:Int64(valueIntrepeatedImportEnum))
            }

          case 434 :
            repeatedStringPiece += [input.readString()]

          case 442 :
            repeatedCord += [input.readString()]

          case 458 :
            let subBuilder = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedLazyMessage += [subBuilder.buildPartial()]

          case 488 :
            defaultInt32 = input.readInt32()

          case 496 :
            defaultInt64 = input.readInt64()

          case 504 :
            defaultUint32 = input.readUInt32()

          case 512 :
            defaultUint64 = input.readUInt64()

          case 520 :
            defaultSint32 = input.readSInt32()

          case 528 :
            defaultSint64 = input.readSInt64()

          case 541 :
            defaultFixed32 = input.readFixed32()

          case 545 :
            defaultFixed64 = input.readFixed64()

          case 557 :
            defaultSfixed32 = input.readSFixed32()

          case 561 :
            defaultSfixed64 = input.readSFixed64()

          case 573 :
            defaultFloat = input.readFloat()

          case 577 :
            defaultDouble = input.readDouble()

          case 584 :
            defaultBool = input.readBool()

          case 594 :
            defaultString = input.readString()

          case 602 :
            defaultBytes = input.readData()

          case 648 :
            let valueIntdefaultNestedEnum = input.readEnum()
            if let enumsdefaultNestedEnum = TestAllTypes.NestedEnum(rawValue:valueIntdefaultNestedEnum){
                 defaultNestedEnum = enumsdefaultNestedEnum
            } else {
                 unknownFieldsBuilder.mergeVarintField(81, value:Int64(valueIntdefaultNestedEnum))
            }

          case 656 :
            let valueIntdefaultForeignEnum = input.readEnum()
            if let enumsdefaultForeignEnum = ProtobufUnittestNoArena.ForeignEnum(rawValue:valueIntdefaultForeignEnum){
                 defaultForeignEnum = enumsdefaultForeignEnum
            } else {
                 unknownFieldsBuilder.mergeVarintField(82, value:Int64(valueIntdefaultForeignEnum))
            }

          case 664 :
            let valueIntdefaultImportEnum = input.readEnum()
            if let enumsdefaultImportEnum = ProtobufUnittestImport.ImportEnum(rawValue:valueIntdefaultImportEnum){
                 defaultImportEnum = enumsdefaultImportEnum
            } else {
                 unknownFieldsBuilder.mergeVarintField(83, value:Int64(valueIntdefaultImportEnum))
            }

          case 674 :
            defaultStringPiece = input.readString()

          case 682 :
            defaultCord = input.readString()

          case 888 :
            oneofUint32 = input.readUInt32()

          case 898 :
            let subBuilder:ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder = ProtobufUnittestNoArena.TestAllTypes.NestedMessage.Builder()
            if hasOneofNestedMessage {
              subBuilder.mergeFrom(oneofNestedMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            oneofNestedMessage = subBuilder.buildPartial()

          case 906 :
            oneofString = input.readString()

          case 914 :
            oneofBytes = input.readData()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final internal class ForeignMessage : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasC:Bool = false
    private(set) var c:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasC {
        output.writeInt32(1, value:c)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasC {
        serialize_size += c.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittestNoArena.ForeignMessage {
      return ProtobufUnittestNoArena.ForeignMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittestNoArena.UnittestNoArenaRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.ForeignMessage {
      return ProtobufUnittestNoArena.ForeignMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittestNoArena.ForeignMessage {
      return ProtobufUnittestNoArena.ForeignMessage.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.ForeignMessage {
      return ProtobufUnittestNoArena.ForeignMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.ForeignMessage {
      return ProtobufUnittestNoArena.ForeignMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.ForeignMessage {
      return ProtobufUnittestNoArena.ForeignMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> ProtobufUnittestNoArena.ForeignMessage.Builder {
      return ProtobufUnittestNoArena.ForeignMessage.classBuilder() as! ProtobufUnittestNoArena.ForeignMessage.Builder
    }
    internal func getBuilder() -> ProtobufUnittestNoArena.ForeignMessage.Builder {
      return classBuilder() as! ProtobufUnittestNoArena.ForeignMessage.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittestNoArena.ForeignMessage.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittestNoArena.ForeignMessage.Builder()
    }
    internal func toBuilder() -> ProtobufUnittestNoArena.ForeignMessage.Builder {
      return ProtobufUnittestNoArena.ForeignMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittestNoArena.ForeignMessage) -> ProtobufUnittestNoArena.ForeignMessage.Builder {
      return ProtobufUnittestNoArena.ForeignMessage.Builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasC {
        output += "\(indent) c: \(c) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasC {
               hashCode = (hashCode &* 31) &+ c.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittestNoArena.ForeignMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittestNoArena.ForeignMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittestNoArena.ForeignMessage.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittestNoArena.ForeignMessage = ProtobufUnittestNoArena.ForeignMessage()
      internal func getMessage() -> ProtobufUnittestNoArena.ForeignMessage {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasC:Bool {
           get {
                return builderResult.hasC
           }
      }
      var c:Int32 {
           get {
                return builderResult.c
           }
           set (value) {
               builderResult.hasC = true
               builderResult.c = value
           }
      }
      func setC(value:Int32) -> ProtobufUnittestNoArena.ForeignMessage.Builder {
        self.c = value
        return self
      }
      internal func clearC() -> ProtobufUnittestNoArena.ForeignMessage.Builder{
           builderResult.hasC = false
           builderResult.c = Int32(0)
           return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> ProtobufUnittestNoArena.ForeignMessage.Builder {
        builderResult = ProtobufUnittestNoArena.ForeignMessage()
        return self
      }
      internal override func clone() -> ProtobufUnittestNoArena.ForeignMessage.Builder {
        return ProtobufUnittestNoArena.ForeignMessage.builderWithPrototype(builderResult)
      }
      internal override func build() -> ProtobufUnittestNoArena.ForeignMessage {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> ProtobufUnittestNoArena.ForeignMessage {
        let returnMe:ProtobufUnittestNoArena.ForeignMessage = builderResult
        return returnMe
      }
      internal func mergeFrom(other:ProtobufUnittestNoArena.ForeignMessage) -> ProtobufUnittestNoArena.ForeignMessage.Builder {
        if other == ProtobufUnittestNoArena.ForeignMessage() {
         return self
        }
        if other.hasC {
             c = other.c
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.ForeignMessage.Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.ForeignMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 8 :
            c = input.readInt32()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final internal class TestNoArenaMessage : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasArenaMessage:Bool = false
    private(set) var arenaMessage:Proto2ArenaUnittest.ArenaMessage!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasArenaMessage {
        output.writeMessage(1, value:arenaMessage)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasArenaMessage {
          if let varSizearenaMessage = arenaMessage?.computeMessageSize(1) {
              serialize_size += varSizearenaMessage
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittestNoArena.TestNoArenaMessage {
      return ProtobufUnittestNoArena.TestNoArenaMessage.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittestNoArena.UnittestNoArenaRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestNoArenaMessage {
      return ProtobufUnittestNoArena.TestNoArenaMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittestNoArena.TestNoArenaMessage {
      return ProtobufUnittestNoArena.TestNoArenaMessage.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestNoArenaMessage {
      return ProtobufUnittestNoArena.TestNoArenaMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.TestNoArenaMessage {
      return ProtobufUnittestNoArena.TestNoArenaMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestNoArenaMessage {
      return ProtobufUnittestNoArena.TestNoArenaMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
      return ProtobufUnittestNoArena.TestNoArenaMessage.classBuilder() as! ProtobufUnittestNoArena.TestNoArenaMessage.Builder
    }
    internal func getBuilder() -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
      return classBuilder() as! ProtobufUnittestNoArena.TestNoArenaMessage.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittestNoArena.TestNoArenaMessage.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittestNoArena.TestNoArenaMessage.Builder()
    }
    internal func toBuilder() -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
      return ProtobufUnittestNoArena.TestNoArenaMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittestNoArena.TestNoArenaMessage) -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
      return ProtobufUnittestNoArena.TestNoArenaMessage.Builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasArenaMessage {
        output += "\(indent) arenaMessage {\n"
        arenaMessage?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasArenaMessage {
                if let hashValuearenaMessage = arenaMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuearenaMessage
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittestNoArena.TestNoArenaMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittestNoArena.TestNoArenaMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittestNoArena.TestNoArenaMessage.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittestNoArena.TestNoArenaMessage = ProtobufUnittestNoArena.TestNoArenaMessage()
      internal func getMessage() -> ProtobufUnittestNoArena.TestNoArenaMessage {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasArenaMessage:Bool {
           get {
               return builderResult.hasArenaMessage
           }
      }
      var arenaMessage:Proto2ArenaUnittest.ArenaMessage! {
           get {
               if arenaMessageBuilder_ != nil {
                  builderResult.arenaMessage = arenaMessageBuilder_.getMessage()
               }
               return builderResult.arenaMessage
           }
           set (value) {
               builderResult.hasArenaMessage = true
               builderResult.arenaMessage = value
           }
      }
      private var arenaMessageBuilder_:Proto2ArenaUnittest.ArenaMessage.Builder! {
           didSet {
              builderResult.hasArenaMessage = true
           }
      }
      internal func getArenaMessageBuilder() -> Proto2ArenaUnittest.ArenaMessage.Builder {
        if arenaMessageBuilder_ == nil {
           arenaMessageBuilder_ = Proto2ArenaUnittest.ArenaMessage.Builder()
           builderResult.arenaMessage = arenaMessageBuilder_.getMessage()
           if arenaMessage != nil {
              arenaMessageBuilder_.mergeFrom(arenaMessage)
           }
        }
        return arenaMessageBuilder_
      }
      func setArenaMessage(value:Proto2ArenaUnittest.ArenaMessage!) -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
        self.arenaMessage = value
        return self
      }
      internal func mergeArenaMessage(value:Proto2ArenaUnittest.ArenaMessage) -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
        if builderResult.hasArenaMessage {
          builderResult.arenaMessage = Proto2ArenaUnittest.ArenaMessage.builderWithPrototype(builderResult.arenaMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.arenaMessage = value
        }
        builderResult.hasArenaMessage = true
        return self
      }
      internal func clearArenaMessage() -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
        arenaMessageBuilder_ = nil
        builderResult.hasArenaMessage = false
        builderResult.arenaMessage = nil
        return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
        builderResult = ProtobufUnittestNoArena.TestNoArenaMessage()
        return self
      }
      internal override func clone() -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
        return ProtobufUnittestNoArena.TestNoArenaMessage.builderWithPrototype(builderResult)
      }
      internal override func build() -> ProtobufUnittestNoArena.TestNoArenaMessage {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> ProtobufUnittestNoArena.TestNoArenaMessage {
        let returnMe:ProtobufUnittestNoArena.TestNoArenaMessage = builderResult
        return returnMe
      }
      internal func mergeFrom(other:ProtobufUnittestNoArena.TestNoArenaMessage) -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
        if other == ProtobufUnittestNoArena.TestNoArenaMessage() {
         return self
        }
        if (other.hasArenaMessage) {
            mergeArenaMessage(other.arenaMessage)
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittestNoArena.TestNoArenaMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:Proto2ArenaUnittest.ArenaMessage.Builder = Proto2ArenaUnittest.ArenaMessage.Builder()
            if hasArenaMessage {
              subBuilder.mergeFrom(arenaMessage)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            arenaMessage = subBuilder.buildPartial()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
