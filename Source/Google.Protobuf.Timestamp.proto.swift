// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "timestamp.proto"
// Syntax "Proto3"

import Foundation

public extension Google.Protobuf{}

public func == (lhs: Google.Protobuf.Timestamp, rhs: Google.Protobuf.Timestamp) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSeconds == rhs.hasSeconds) && (!lhs.hasSeconds || lhs.seconds == rhs.seconds)
  fieldCheck = fieldCheck && (lhs.hasNanos == rhs.hasNanos) && (!lhs.hasNanos || lhs.nanos == rhs.nanos)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Google.Protobuf {
  public struct TimestampRoot {
    public static var sharedInstance : TimestampRoot {
     struct Static {
         static let instance : TimestampRoot = TimestampRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Google.Protobuf.SwiftDescriptorRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(_ registry:ExtensionRegistry) {
    }
  }

  // A Timestamp represents a point in time independent of any time zone
  // or calendar, represented as seconds and fractions of seconds at
  // nanosecond resolution in UTC Epoch time. It is encoded using the
  // Proleptic Gregorian Calendar which extends the Gregorian calendar
  // backwards to year one. It is encoded assuming all minutes are 60
  // seconds long, i.e. leap seconds are "smeared" so that no leap second
  // table is needed for interpretation. Range is from
  // 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
  // By restricting to that range, we ensure that we can convert to
  // and from  RFC 3339 date strings.
  // See [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).
  // Example 1: Compute Timestamp from POSIX `time()`.
  //     Timestamp timestamp;
  //     timestamp.set_seconds(time(NULL));
  //     timestamp.set_nanos(0);
  // Example 2: Compute Timestamp from POSIX `gettimeofday()`.
  //     struct timeval tv;
  //     gettimeofday(&tv, NULL);
  //     Timestamp timestamp;
  //     timestamp.set_seconds(tv.tv_sec);
  //     timestamp.set_nanos(tv.tv_usec * 1000);
  // Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
  //     FILETIME ft;
  //     GetSystemTimeAsFileTime(&ft);
  //     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;
  //     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
  //     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
  //     Timestamp timestamp;
  //     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
  //     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
  // Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
  //     long millis = System.currentTimeMillis();
  //     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
  //         .setNanos((int) ((millis % 1000) * 1000000)).build();
  // Example 5: Compute Timestamp from Python `datetime.datetime`.
  //     now = datetime.datetime.utcnow()
  //     seconds = int(time.mktime(now.timetuple()))
  //     nanos = now.microsecond * 1000
  //     timestamp = Timestamp(seconds=seconds, nanos=nanos)
  final public class Timestamp : GeneratedMessage, GeneratedMessageProtocol {
    // Represents seconds of UTC time since Unix epoch
    // 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to
    // 9999-12-31T23:59:59Z inclusive.
    public private(set) var hasSeconds:Bool = false
    public private(set) var seconds:Int64 = Int64(0)

    // Non-negative fractions of a second at nanosecond resolution. Negative
    // second values with fractions must still have non-negative nanos values
    // that count forward in time. Must be from 0 to 999,999,999
    // inclusive.
    public private(set) var hasNanos:Bool = false
    public private(set) var nanos:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasSeconds {
        try output.writeInt64(1, value:seconds)
      }
      if hasNanos {
        try output.writeInt32(2, value:nanos)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSeconds {
        serialize_size += seconds.computeInt64Size(1)
      }
      if hasNanos {
        serialize_size += nanos.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:InputStream) throws -> Array<Google.Protobuf.Timestamp> {
      var mergedArray = Array<Google.Protobuf.Timestamp>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:InputStream) throws -> Google.Protobuf.Timestamp? {
      return try Google.Protobuf.Timestamp.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:Data) throws -> Google.Protobuf.Timestamp {
      return try Google.Protobuf.Timestamp.Builder().mergeFromData(data, extensionRegistry:Google.Protobuf.TimestampRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:Data, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Timestamp {
      return try Google.Protobuf.Timestamp.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:InputStream) throws -> Google.Protobuf.Timestamp {
      return try Google.Protobuf.Timestamp.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:InputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Timestamp {
      return try Google.Protobuf.Timestamp.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.Timestamp {
      return try Google.Protobuf.Timestamp.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Timestamp {
      return try Google.Protobuf.Timestamp.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Google.Protobuf.Timestamp.Builder {
      return Google.Protobuf.Timestamp.classBuilder() as! Google.Protobuf.Timestamp.Builder
    }
    public func getBuilder() -> Google.Protobuf.Timestamp.Builder {
      return classBuilder() as! Google.Protobuf.Timestamp.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Google.Protobuf.Timestamp.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Google.Protobuf.Timestamp.Builder()
    }
    public func toBuilder() throws -> Google.Protobuf.Timestamp.Builder {
      return try Google.Protobuf.Timestamp.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:Google.Protobuf.Timestamp) throws -> Google.Protobuf.Timestamp.Builder {
      return try Google.Protobuf.Timestamp.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasSeconds {
        jsonMap["seconds"] = "\(seconds)"
      }
      if hasNanos {
        jsonMap["nanos"] = NSNumber(value:nanos)
      }
      return jsonMap
    }
    override class public func decode(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.Timestamp {
      return try Google.Protobuf.Timestamp.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(_ data:Data) throws -> Google.Protobuf.Timestamp {
      return try Google.Protobuf.Timestamp.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output = ""
      if hasSeconds {
        output += "\(indent) seconds: \(seconds) \n"
      }
      if hasNanos {
        output += "\(indent) nanos: \(nanos) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSeconds {
               hashCode = (hashCode &* 31) &+ seconds.hashValue
            }
            if hasNanos {
               hashCode = (hashCode &* 31) &+ nanos.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Google.Protobuf.Timestamp"
    }
    override public func className() -> String {
        return "Google.Protobuf.Timestamp"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Google.Protobuf.Timestamp.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Google.Protobuf.Timestamp = Google.Protobuf.Timestamp()
      public func getMessage() -> Google.Protobuf.Timestamp {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSeconds:Bool {
           get {
                return builderResult.hasSeconds
           }
      }
      public var seconds:Int64 {
           get {
                return builderResult.seconds
           }
           set (value) {
               builderResult.hasSeconds = true
               builderResult.seconds = value
           }
      }
      public func setSeconds(_ value:Int64) -> Google.Protobuf.Timestamp.Builder {
        self.seconds = value
        return self
      }
      public func clearSeconds() -> Google.Protobuf.Timestamp.Builder{
           builderResult.hasSeconds = false
           builderResult.seconds = Int64(0)
           return self
      }
      public var hasNanos:Bool {
           get {
                return builderResult.hasNanos
           }
      }
      public var nanos:Int32 {
           get {
                return builderResult.nanos
           }
           set (value) {
               builderResult.hasNanos = true
               builderResult.nanos = value
           }
      }
      public func setNanos(_ value:Int32) -> Google.Protobuf.Timestamp.Builder {
        self.nanos = value
        return self
      }
      public func clearNanos() -> Google.Protobuf.Timestamp.Builder{
           builderResult.hasNanos = false
           builderResult.nanos = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Google.Protobuf.Timestamp.Builder {
        builderResult = Google.Protobuf.Timestamp()
        return self
      }
      override public func clone() throws -> Google.Protobuf.Timestamp.Builder {
        return try Google.Protobuf.Timestamp.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Google.Protobuf.Timestamp {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Google.Protobuf.Timestamp {
        let returnMe:Google.Protobuf.Timestamp = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:Google.Protobuf.Timestamp) throws -> Google.Protobuf.Timestamp.Builder {
        if other == Google.Protobuf.Timestamp() {
         return self
        }
        if other.hasSeconds {
             seconds = other.seconds
        }
        if other.hasNanos {
             nanos = other.nanos
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.Timestamp.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Timestamp.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            seconds = try input.readInt64()

          case 16:
            nanos = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.Timestamp.Builder {
        let resultDecodedBuilder = Google.Protobuf.Timestamp.Builder()
        if let jsonValueSeconds = jsonMap["seconds"] as? String {
          resultDecodedBuilder.seconds = Int64(jsonValueSeconds)!
        }
        if let jsonValueNanos = jsonMap["nanos"] as? NSNumber {
          resultDecodedBuilder.nanos = jsonValueNanos.int32Value
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(_ data:Data) throws -> Google.Protobuf.Timestamp.Builder {
        let jsonData = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Google.Protobuf.Timestamp.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
