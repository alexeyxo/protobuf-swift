// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "type.proto"
// Syntax "Proto3"

import Foundation

public extension Google.Protobuf{}

public func == (lhs: Google.Protobuf.Types, rhs: Google.Protobuf.Types) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.fields == rhs.fields)
  fieldCheck = fieldCheck && (lhs.oneofs == rhs.oneofs)
  fieldCheck = fieldCheck && (lhs.options == rhs.options)
  fieldCheck = fieldCheck && (lhs.hasSourceContext == rhs.hasSourceContext) && (!lhs.hasSourceContext || lhs.sourceContext == rhs.sourceContext)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Google.Protobuf.Field, rhs: Google.Protobuf.Field) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKind == rhs.hasKind) && (!lhs.hasKind || lhs.kind == rhs.kind)
  fieldCheck = fieldCheck && (lhs.hasCardinality == rhs.hasCardinality) && (!lhs.hasCardinality || lhs.cardinality == rhs.cardinality)
  fieldCheck = fieldCheck && (lhs.hasNumber == rhs.hasNumber) && (!lhs.hasNumber || lhs.number == rhs.number)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasTypeUrl == rhs.hasTypeUrl) && (!lhs.hasTypeUrl || lhs.typeUrl == rhs.typeUrl)
  fieldCheck = fieldCheck && (lhs.hasOneofIndex == rhs.hasOneofIndex) && (!lhs.hasOneofIndex || lhs.oneofIndex == rhs.oneofIndex)
  fieldCheck = fieldCheck && (lhs.hasPacked == rhs.hasPacked) && (!lhs.hasPacked || lhs.packed == rhs.packed)
  fieldCheck = fieldCheck && (lhs.options == rhs.options)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Google.Protobuf.Enum, rhs: Google.Protobuf.Enum) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.enumvalue == rhs.enumvalue)
  fieldCheck = fieldCheck && (lhs.options == rhs.options)
  fieldCheck = fieldCheck && (lhs.hasSourceContext == rhs.hasSourceContext) && (!lhs.hasSourceContext || lhs.sourceContext == rhs.sourceContext)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Google.Protobuf.EnumValue, rhs: Google.Protobuf.EnumValue) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasNumber == rhs.hasNumber) && (!lhs.hasNumber || lhs.number == rhs.number)
  fieldCheck = fieldCheck && (lhs.options == rhs.options)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Google.Protobuf.Option, rhs: Google.Protobuf.Option) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Google.Protobuf {
  public struct TypesRoot {
    public static var sharedInstance : TypesRoot {
     struct Static {
         static let instance : TypesRoot = TypesRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Google.Protobuf.SwiftDescriptorRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Google.Protobuf.AnyTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Google.Protobuf.SourceContextRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(_ registry:ExtensionRegistry) {
    }
  }

  // A light-weight descriptor for a proto message type.
  final public class Types : GeneratedMessage, GeneratedMessageProtocol {
    // The fully qualified message name.
    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var fields:Array<Google.Protobuf.Field>  = Array<Google.Protobuf.Field>()
    // The list of oneof definitions.
    // The list of oneofs declared in this Type
    public private(set) var oneofs:Array<String> = Array<String>()
    private var oneofsMemoizedSerializedSize:Int32 = -1
    public private(set) var options:Array<Google.Protobuf.Option>  = Array<Google.Protobuf.Option>()
    public private(set) var hasSourceContext:Bool = false
    public private(set) var sourceContext:Google.Protobuf.SourceContext!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasName {
        try output.writeString(1, value:name)
      }
      for oneElementFields in fields {
          try output.writeMessage(2, value:oneElementFields)
      }
      if !oneofs.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(oneofsMemoizedSerializedSize)
        for oneValueoneofs in oneofs {
          try output.writeStringNoTag(oneValueoneofs)
        }
      }
      for oneElementOptions in options {
          try output.writeMessage(4, value:oneElementOptions)
      }
      if hasSourceContext {
        try output.writeMessage(5, value:sourceContext)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasName {
        serialize_size += name.computeStringSize(1)
      }
      for oneElementFields in fields {
          serialize_size += oneElementFields.computeMessageSize(2)
      }
      var dataSizeOneofs:Int32 = 0
      for oneValueoneofs in oneofs {
          dataSizeOneofs += oneValueoneofs.computeStringSizeNoTag()
      }
      serialize_size += dataSizeOneofs
      if !oneofs.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeOneofs.computeInt32SizeNoTag()
      }
      oneofsMemoizedSerializedSize = dataSizeOneofs
      for oneElementOptions in options {
          serialize_size += oneElementOptions.computeMessageSize(4)
      }
      if hasSourceContext {
          if let varSizesourceContext = sourceContext?.computeMessageSize(5) {
              serialize_size += varSizesourceContext
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:InputStream) throws -> Array<Google.Protobuf.Types> {
      var mergedArray = Array<Google.Protobuf.Types>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:InputStream) throws -> Google.Protobuf.Types? {
      return try Google.Protobuf.Types.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:Data) throws -> Google.Protobuf.Types {
      return try Google.Protobuf.Types.Builder().mergeFromData(data, extensionRegistry:Google.Protobuf.TypesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:Data, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Types {
      return try Google.Protobuf.Types.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:InputStream) throws -> Google.Protobuf.Types {
      return try Google.Protobuf.Types.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:InputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Types {
      return try Google.Protobuf.Types.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.Types {
      return try Google.Protobuf.Types.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Types {
      return try Google.Protobuf.Types.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Google.Protobuf.Types.Builder {
      return Google.Protobuf.Types.classBuilder() as! Google.Protobuf.Types.Builder
    }
    public func getBuilder() -> Google.Protobuf.Types.Builder {
      return classBuilder() as! Google.Protobuf.Types.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Google.Protobuf.Types.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Google.Protobuf.Types.Builder()
    }
    public func toBuilder() throws -> Google.Protobuf.Types.Builder {
      return try Google.Protobuf.Types.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:Google.Protobuf.Types) throws -> Google.Protobuf.Types.Builder {
      return try Google.Protobuf.Types.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasName {
        jsonMap["name"] = name
      }
      if !fields.isEmpty {
        var jsonArrayFields:Array<Dictionary<String,AnyObject>> = []
          for oneValueFields in fields {
            let ecodedMessageFields = try oneValueFields.encode()
            jsonArrayFields += [ecodedMessageFields]
          }
        jsonMap["fields"] = jsonArrayFields
      }
      if !oneofs.isEmpty {
        jsonMap["oneofs"] = oneofs
      }
      if !options.isEmpty {
        var jsonArrayOptions:Array<Dictionary<String,AnyObject>> = []
          for oneValueOptions in options {
            let ecodedMessageOptions = try oneValueOptions.encode()
            jsonArrayOptions += [ecodedMessageOptions]
          }
        jsonMap["options"] = jsonArrayOptions
      }
      if hasSourceContext {
        jsonMap["sourceContext"] = try sourceContext.encode()
      }
      return jsonMap
    }
    override class public func decode(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.Types {
      return try Google.Protobuf.Types.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(_ data:Data) throws -> Google.Protobuf.Types {
      return try Google.Protobuf.Types.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output = ""
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      var fieldsElementIndex:Int = 0
      for oneElementFields in fields {
          output += "\(indent) fields[\(fieldsElementIndex)] {\n"
          output += try oneElementFields.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          fieldsElementIndex += 1
      }
      var oneofsElementIndex:Int = 0
      for oneValueOneofs in oneofs  {
          output += "\(indent) oneofs[\(oneofsElementIndex)]: \(oneValueOneofs)\n"
          oneofsElementIndex += 1
      }
      var optionsElementIndex:Int = 0
      for oneElementOptions in options {
          output += "\(indent) options[\(optionsElementIndex)] {\n"
          output += try oneElementOptions.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          optionsElementIndex += 1
      }
      if hasSourceContext {
        output += "\(indent) sourceContext {\n"
        if let outDescSourceContext = sourceContext {
          output += try outDescSourceContext.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            for oneElementFields in fields {
                hashCode = (hashCode &* 31) &+ oneElementFields.hashValue
            }
            for oneValueOneofs in oneofs {
                hashCode = (hashCode &* 31) &+ oneValueOneofs.hashValue
            }
            for oneElementOptions in options {
                hashCode = (hashCode &* 31) &+ oneElementOptions.hashValue
            }
            if hasSourceContext {
                if let hashValuesourceContext = sourceContext?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesourceContext
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Google.Protobuf.Types"
    }
    override public func className() -> String {
        return "Google.Protobuf.Types"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Google.Protobuf.Types.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Google.Protobuf.Types = Google.Protobuf.Types()
      public func getMessage() -> Google.Protobuf.Types {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(_ value:String) -> Google.Protobuf.Types.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Google.Protobuf.Types.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var fields:Array<Google.Protobuf.Field> {
           get {
               return builderResult.fields
           }
           set (value) {
               builderResult.fields = value
           }
      }
      public func setFields(_ value:Array<Google.Protobuf.Field>) -> Google.Protobuf.Types.Builder {
        self.fields = value
        return self
      }
      public func clearFields() -> Google.Protobuf.Types.Builder {
        builderResult.fields.removeAll(keepingCapacity: false)
        return self
      }
      public var oneofs:Array<String> {
           get {
               return builderResult.oneofs
           }
           set (array) {
               builderResult.oneofs = array
           }
      }
      public func setOneofs(_ value:Array<String>) -> Google.Protobuf.Types.Builder {
        self.oneofs = value
        return self
      }
      public func clearOneofs() -> Google.Protobuf.Types.Builder {
         builderResult.oneofs.removeAll(keepingCapacity: false)
         return self
      }
      public var options:Array<Google.Protobuf.Option> {
           get {
               return builderResult.options
           }
           set (value) {
               builderResult.options = value
           }
      }
      public func setOptions(_ value:Array<Google.Protobuf.Option>) -> Google.Protobuf.Types.Builder {
        self.options = value
        return self
      }
      public func clearOptions() -> Google.Protobuf.Types.Builder {
        builderResult.options.removeAll(keepingCapacity: false)
        return self
      }
      public var hasSourceContext:Bool {
           get {
               return builderResult.hasSourceContext
           }
      }
      public var sourceContext:Google.Protobuf.SourceContext! {
           get {
               if sourceContextBuilder_ != nil {
                  builderResult.sourceContext = sourceContextBuilder_.getMessage()
               }
               return builderResult.sourceContext
           }
           set (value) {
               builderResult.hasSourceContext = true
               builderResult.sourceContext = value
           }
      }
      private var sourceContextBuilder_:Google.Protobuf.SourceContext.Builder! {
           didSet {
              builderResult.hasSourceContext = true
           }
      }
      public func getSourceContextBuilder() -> Google.Protobuf.SourceContext.Builder {
        if sourceContextBuilder_ == nil {
           sourceContextBuilder_ = Google.Protobuf.SourceContext.Builder()
           builderResult.sourceContext = sourceContextBuilder_.getMessage()
           if sourceContext != nil {
              try! sourceContextBuilder_.mergeFrom(sourceContext)
           }
        }
        return sourceContextBuilder_
      }
      public func setSourceContext(_ value:Google.Protobuf.SourceContext!) -> Google.Protobuf.Types.Builder {
        self.sourceContext = value
        return self
      }
      public func mergeSourceContext(_ value:Google.Protobuf.SourceContext) throws -> Google.Protobuf.Types.Builder {
        if builderResult.hasSourceContext {
          builderResult.sourceContext = try Google.Protobuf.SourceContext.builderWithPrototype(builderResult.sourceContext).mergeFrom(value).buildPartial()
        } else {
          builderResult.sourceContext = value
        }
        builderResult.hasSourceContext = true
        return self
      }
      public func clearSourceContext() -> Google.Protobuf.Types.Builder {
        sourceContextBuilder_ = nil
        builderResult.hasSourceContext = false
        builderResult.sourceContext = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Google.Protobuf.Types.Builder {
        builderResult = Google.Protobuf.Types()
        return self
      }
      override public func clone() throws -> Google.Protobuf.Types.Builder {
        return try Google.Protobuf.Types.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Google.Protobuf.Types {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Google.Protobuf.Types {
        let returnMe:Google.Protobuf.Types = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:Google.Protobuf.Types) throws -> Google.Protobuf.Types.Builder {
        if other == Google.Protobuf.Types() {
         return self
        }
        if other.hasName {
             name = other.name
        }
        if !other.fields.isEmpty  {
           builderResult.fields += other.fields
        }
        if !other.oneofs.isEmpty {
            builderResult.oneofs += other.oneofs
        }
        if !other.options.isEmpty  {
           builderResult.options += other.options
        }
        if (other.hasSourceContext) {
            try mergeSourceContext(other.sourceContext)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.Types.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Types.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            name = try input.readString()

          case 18:
            let subBuilder = Google.Protobuf.Field.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            fields += [subBuilder.buildPartial()]

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.oneofs += [try input.readString()]
            }
            input.popLimit(limit)

          case 34:
            let subBuilder = Google.Protobuf.Option.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            options += [subBuilder.buildPartial()]

          case 42:
            let subBuilder:Google.Protobuf.SourceContext.Builder = Google.Protobuf.SourceContext.Builder()
            if hasSourceContext {
              try subBuilder.mergeFrom(sourceContext)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            sourceContext = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.Types.Builder {
        let resultDecodedBuilder = Google.Protobuf.Types.Builder()
        if let jsonValueName = jsonMap["name"] as? String {
          resultDecodedBuilder.name = jsonValueName
        }
        if let jsonValueFields = jsonMap["fields"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayFields:Array<Google.Protobuf.Field> = []
          for oneValueFields in jsonValueFields {
            let messageFromStringFields = try Google.Protobuf.Field.Builder.decodeToBuilder(oneValueFields).build()

            jsonArrayFields += [messageFromStringFields]
          }
          resultDecodedBuilder.fields = jsonArrayFields
        }
        if let jsonValueOneofs = jsonMap["oneofs"] as? Array<String> {
          resultDecodedBuilder.oneofs = jsonValueOneofs
        }
        if let jsonValueOptions = jsonMap["options"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayOptions:Array<Google.Protobuf.Option> = []
          for oneValueOptions in jsonValueOptions {
            let messageFromStringOptions = try Google.Protobuf.Option.Builder.decodeToBuilder(oneValueOptions).build()

            jsonArrayOptions += [messageFromStringOptions]
          }
          resultDecodedBuilder.options = jsonArrayOptions
        }
        if let jsonValueSourceContext = jsonMap["sourceContext"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.sourceContext = try Google.Protobuf.SourceContext.Builder.decodeToBuilder(jsonValueSourceContext).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(_ data:Data) throws -> Google.Protobuf.Types.Builder {
        let jsonData = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Google.Protobuf.Types.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  // Field represents a single field of a message type.
  final public class Field : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      // Kind represents a basic field type.
      public enum Kind:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        // Field type unknown.
        case typeUnknown = 0

        // Field type double.
        case typeDouble = 1

        // Field type float.
        case typeFloat = 2

        // Field type int64.
        case typeInt64 = 3

        // Field type uint64.
        case typeUint64 = 4

        // Field type int32.
        case typeInt32 = 5

        // Field type fixed64.
        case typeFixed64 = 6

        // Field type fixed32.
        case typeFixed32 = 7

        // Field type bool.
        case typeBool = 8

        // Field type string.
        case typeString = 9

        // Field type message.
        case typeMessage = 11

        // Field type bytes.
        case typeBytes = 12

        // Field type uint32.
        case typeUint32 = 13

        // Field type enum.
        case typeEnum = 14

        // Field type sfixed32.
        case typeSfixed32 = 15

        // Field type sfixed64.
        case typeSfixed64 = 16

        // Field type sint32.
        case typeSint32 = 17

        // Field type sint64.
        case typeSint64 = 18
        public func toString() -> String {
          switch self {
          case .typeUnknown: return "TYPE_UNKNOWN"
          case .typeDouble: return "TYPE_DOUBLE"
          case .typeFloat: return "TYPE_FLOAT"
          case .typeInt64: return "TYPE_INT64"
          case .typeUint64: return "TYPE_UINT64"
          case .typeInt32: return "TYPE_INT32"
          case .typeFixed64: return "TYPE_FIXED64"
          case .typeFixed32: return "TYPE_FIXED32"
          case .typeBool: return "TYPE_BOOL"
          case .typeString: return "TYPE_STRING"
          case .typeMessage: return "TYPE_MESSAGE"
          case .typeBytes: return "TYPE_BYTES"
          case .typeUint32: return "TYPE_UINT32"
          case .typeEnum: return "TYPE_ENUM"
          case .typeSfixed32: return "TYPE_SFIXED32"
          case .typeSfixed64: return "TYPE_SFIXED64"
          case .typeSint32: return "TYPE_SINT32"
          case .typeSint64: return "TYPE_SINT64"
          }
        }
        public static func fromString(_ str:String) throws -> Google.Protobuf.Field.Kind {
          switch str {
          case "TYPE_UNKNOWN":  return .typeUnknown
          case "TYPE_DOUBLE":  return .typeDouble
          case "TYPE_FLOAT":  return .typeFloat
          case "TYPE_INT64":  return .typeInt64
          case "TYPE_UINT64":  return .typeUint64
          case "TYPE_INT32":  return .typeInt32
          case "TYPE_FIXED64":  return .typeFixed64
          case "TYPE_FIXED32":  return .typeFixed32
          case "TYPE_BOOL":  return .typeBool
          case "TYPE_STRING":  return .typeString
          case "TYPE_MESSAGE":  return .typeMessage
          case "TYPE_BYTES":  return .typeBytes
          case "TYPE_UINT32":  return .typeUint32
          case "TYPE_ENUM":  return .typeEnum
          case "TYPE_SFIXED32":  return .typeSfixed32
          case "TYPE_SFIXED64":  return .typeSfixed64
          case "TYPE_SINT32":  return .typeSint32
          case "TYPE_SINT64":  return .typeSint64
          default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .typeUnknown: return ".TypeUnknown"
                case .typeDouble: return ".TypeDouble"
                case .typeFloat: return ".TypeFloat"
                case .typeInt64: return ".TypeInt64"
                case .typeUint64: return ".TypeUint64"
                case .typeInt32: return ".TypeInt32"
                case .typeFixed64: return ".TypeFixed64"
                case .typeFixed32: return ".TypeFixed32"
                case .typeBool: return ".TypeBool"
                case .typeString: return ".TypeString"
                case .typeMessage: return ".TypeMessage"
                case .typeBytes: return ".TypeBytes"
                case .typeUint32: return ".TypeUint32"
                case .typeEnum: return ".TypeEnum"
                case .typeSfixed32: return ".TypeSfixed32"
                case .typeSfixed64: return ".TypeSfixed64"
                case .typeSint32: return ".TypeSint32"
                case .typeSint64: return ".TypeSint64"
            }
        }
      }

      //Enum type declaration end 



      //Enum type declaration start 

      // Cardinality represents whether a field is optional, required, or
      // repeated.
      public enum Cardinality:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        // The field cardinality is unknown. Typically an error condition.
        case cardinalityUnknown = 0

        // For optional fields.
        case cardinalityOptional = 1

        // For required fields. Not used for proto3.
        case cardinalityRequired = 2

        // For repeated fields.
        case cardinalityRepeated = 3
        public func toString() -> String {
          switch self {
          case .cardinalityUnknown: return "CARDINALITY_UNKNOWN"
          case .cardinalityOptional: return "CARDINALITY_OPTIONAL"
          case .cardinalityRequired: return "CARDINALITY_REQUIRED"
          case .cardinalityRepeated: return "CARDINALITY_REPEATED"
          }
        }
        public static func fromString(_ str:String) throws -> Google.Protobuf.Field.Cardinality {
          switch str {
          case "CARDINALITY_UNKNOWN":  return .cardinalityUnknown
          case "CARDINALITY_OPTIONAL":  return .cardinalityOptional
          case "CARDINALITY_REQUIRED":  return .cardinalityRequired
          case "CARDINALITY_REPEATED":  return .cardinalityRepeated
          default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .cardinalityUnknown: return ".CardinalityUnknown"
                case .cardinalityOptional: return ".CardinalityOptional"
                case .cardinalityRequired: return ".CardinalityRequired"
                case .cardinalityRepeated: return ".CardinalityRepeated"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var kind:Kind = Google.Protobuf.Field.Kind.typeUnknown
    public private(set) var hasKind:Bool = false
    public private(set) var cardinality:Cardinality = Google.Protobuf.Field.Cardinality.cardinalityUnknown
    public private(set) var hasCardinality:Bool = false
    // The proto field number.
    public private(set) var hasNumber:Bool = false
    public private(set) var number:Int32 = Int32(0)

    // The field name.
    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    // The type URL (without the scheme) when the type is MESSAGE or ENUM,
    // such as `type.googleapis.com/google.protobuf.Empty`.
    public private(set) var hasTypeUrl:Bool = false
    public private(set) var typeUrl:String = ""

    // Index in Type.oneofs. Starts at 1. Zero means no oneof mapping.
    public private(set) var hasOneofIndex:Bool = false
    public private(set) var oneofIndex:Int32 = Int32(0)

    // Whether to use alternative packed wire representation.
    public private(set) var hasPacked:Bool = false
    public private(set) var packed:Bool = false

    public private(set) var options:Array<Google.Protobuf.Option>  = Array<Google.Protobuf.Option>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasKind {
        try output.writeEnum(1, value:kind.rawValue)
      }
      if hasCardinality {
        try output.writeEnum(2, value:cardinality.rawValue)
      }
      if hasNumber {
        try output.writeInt32(3, value:number)
      }
      if hasName {
        try output.writeString(4, value:name)
      }
      if hasTypeUrl {
        try output.writeString(6, value:typeUrl)
      }
      if hasOneofIndex {
        try output.writeInt32(7, value:oneofIndex)
      }
      if hasPacked {
        try output.writeBool(8, value:packed)
      }
      for oneElementOptions in options {
          try output.writeMessage(9, value:oneElementOptions)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasKind) {
        serialize_size += kind.rawValue.computeEnumSize(1)
      }
      if (hasCardinality) {
        serialize_size += cardinality.rawValue.computeEnumSize(2)
      }
      if hasNumber {
        serialize_size += number.computeInt32Size(3)
      }
      if hasName {
        serialize_size += name.computeStringSize(4)
      }
      if hasTypeUrl {
        serialize_size += typeUrl.computeStringSize(6)
      }
      if hasOneofIndex {
        serialize_size += oneofIndex.computeInt32Size(7)
      }
      if hasPacked {
        serialize_size += packed.computeBoolSize(8)
      }
      for oneElementOptions in options {
          serialize_size += oneElementOptions.computeMessageSize(9)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:InputStream) throws -> Array<Google.Protobuf.Field> {
      var mergedArray = Array<Google.Protobuf.Field>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:InputStream) throws -> Google.Protobuf.Field? {
      return try Google.Protobuf.Field.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:Data) throws -> Google.Protobuf.Field {
      return try Google.Protobuf.Field.Builder().mergeFromData(data, extensionRegistry:Google.Protobuf.TypesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:Data, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Field {
      return try Google.Protobuf.Field.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:InputStream) throws -> Google.Protobuf.Field {
      return try Google.Protobuf.Field.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:InputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Field {
      return try Google.Protobuf.Field.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.Field {
      return try Google.Protobuf.Field.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Field {
      return try Google.Protobuf.Field.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Google.Protobuf.Field.Builder {
      return Google.Protobuf.Field.classBuilder() as! Google.Protobuf.Field.Builder
    }
    public func getBuilder() -> Google.Protobuf.Field.Builder {
      return classBuilder() as! Google.Protobuf.Field.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Google.Protobuf.Field.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Google.Protobuf.Field.Builder()
    }
    public func toBuilder() throws -> Google.Protobuf.Field.Builder {
      return try Google.Protobuf.Field.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:Google.Protobuf.Field) throws -> Google.Protobuf.Field.Builder {
      return try Google.Protobuf.Field.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasKind {
        jsonMap["kind"] = kind.toString()
      }
      if hasCardinality {
        jsonMap["cardinality"] = cardinality.toString()
      }
      if hasNumber {
        jsonMap["number"] = NSNumber(value:number)
      }
      if hasName {
        jsonMap["name"] = name
      }
      if hasTypeUrl {
        jsonMap["typeUrl"] = typeUrl
      }
      if hasOneofIndex {
        jsonMap["oneofIndex"] = NSNumber(value:oneofIndex)
      }
      if hasPacked {
        jsonMap["packed"] = packed
      }
      if !options.isEmpty {
        var jsonArrayOptions:Array<Dictionary<String,AnyObject>> = []
          for oneValueOptions in options {
            let ecodedMessageOptions = try oneValueOptions.encode()
            jsonArrayOptions += [ecodedMessageOptions]
          }
        jsonMap["options"] = jsonArrayOptions
      }
      return jsonMap
    }
    override class public func decode(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.Field {
      return try Google.Protobuf.Field.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(_ data:Data) throws -> Google.Protobuf.Field {
      return try Google.Protobuf.Field.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output = ""
      if (hasKind) {
        output += "\(indent) kind: \(kind.description)\n"
      }
      if (hasCardinality) {
        output += "\(indent) cardinality: \(cardinality.description)\n"
      }
      if hasNumber {
        output += "\(indent) number: \(number) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasTypeUrl {
        output += "\(indent) typeUrl: \(typeUrl) \n"
      }
      if hasOneofIndex {
        output += "\(indent) oneofIndex: \(oneofIndex) \n"
      }
      if hasPacked {
        output += "\(indent) packed: \(packed) \n"
      }
      var optionsElementIndex:Int = 0
      for oneElementOptions in options {
          output += "\(indent) options[\(optionsElementIndex)] {\n"
          output += try oneElementOptions.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          optionsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasKind {
               hashCode = (hashCode &* 31) &+ Int(kind.rawValue)
            }
            if hasCardinality {
               hashCode = (hashCode &* 31) &+ Int(cardinality.rawValue)
            }
            if hasNumber {
               hashCode = (hashCode &* 31) &+ number.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasTypeUrl {
               hashCode = (hashCode &* 31) &+ typeUrl.hashValue
            }
            if hasOneofIndex {
               hashCode = (hashCode &* 31) &+ oneofIndex.hashValue
            }
            if hasPacked {
               hashCode = (hashCode &* 31) &+ packed.hashValue
            }
            for oneElementOptions in options {
                hashCode = (hashCode &* 31) &+ oneElementOptions.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Google.Protobuf.Field"
    }
    override public func className() -> String {
        return "Google.Protobuf.Field"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Google.Protobuf.Field.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Google.Protobuf.Field = Google.Protobuf.Field()
      public func getMessage() -> Google.Protobuf.Field {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasKind:Bool{
            get {
                return builderResult.hasKind
            }
        }
        public var kind:Google.Protobuf.Field.Kind {
            get {
                return builderResult.kind
            }
            set (value) {
                builderResult.hasKind = true
                builderResult.kind = value
            }
        }
        public func setKind(_ value:Google.Protobuf.Field.Kind) -> Google.Protobuf.Field.Builder {
          self.kind = value
          return self
        }
        public func clearKind() -> Google.Protobuf.Field.Builder {
           builderResult.hasKind = false
           builderResult.kind = .typeUnknown
           return self
        }
        public var hasCardinality:Bool{
            get {
                return builderResult.hasCardinality
            }
        }
        public var cardinality:Google.Protobuf.Field.Cardinality {
            get {
                return builderResult.cardinality
            }
            set (value) {
                builderResult.hasCardinality = true
                builderResult.cardinality = value
            }
        }
        public func setCardinality(_ value:Google.Protobuf.Field.Cardinality) -> Google.Protobuf.Field.Builder {
          self.cardinality = value
          return self
        }
        public func clearCardinality() -> Google.Protobuf.Field.Builder {
           builderResult.hasCardinality = false
           builderResult.cardinality = .cardinalityUnknown
           return self
        }
      public var hasNumber:Bool {
           get {
                return builderResult.hasNumber
           }
      }
      public var number:Int32 {
           get {
                return builderResult.number
           }
           set (value) {
               builderResult.hasNumber = true
               builderResult.number = value
           }
      }
      public func setNumber(_ value:Int32) -> Google.Protobuf.Field.Builder {
        self.number = value
        return self
      }
      public func clearNumber() -> Google.Protobuf.Field.Builder{
           builderResult.hasNumber = false
           builderResult.number = Int32(0)
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(_ value:String) -> Google.Protobuf.Field.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Google.Protobuf.Field.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasTypeUrl:Bool {
           get {
                return builderResult.hasTypeUrl
           }
      }
      public var typeUrl:String {
           get {
                return builderResult.typeUrl
           }
           set (value) {
               builderResult.hasTypeUrl = true
               builderResult.typeUrl = value
           }
      }
      public func setTypeUrl(_ value:String) -> Google.Protobuf.Field.Builder {
        self.typeUrl = value
        return self
      }
      public func clearTypeUrl() -> Google.Protobuf.Field.Builder{
           builderResult.hasTypeUrl = false
           builderResult.typeUrl = ""
           return self
      }
      public var hasOneofIndex:Bool {
           get {
                return builderResult.hasOneofIndex
           }
      }
      public var oneofIndex:Int32 {
           get {
                return builderResult.oneofIndex
           }
           set (value) {
               builderResult.hasOneofIndex = true
               builderResult.oneofIndex = value
           }
      }
      public func setOneofIndex(_ value:Int32) -> Google.Protobuf.Field.Builder {
        self.oneofIndex = value
        return self
      }
      public func clearOneofIndex() -> Google.Protobuf.Field.Builder{
           builderResult.hasOneofIndex = false
           builderResult.oneofIndex = Int32(0)
           return self
      }
      public var hasPacked:Bool {
           get {
                return builderResult.hasPacked
           }
      }
      public var packed:Bool {
           get {
                return builderResult.packed
           }
           set (value) {
               builderResult.hasPacked = true
               builderResult.packed = value
           }
      }
      public func setPacked(_ value:Bool) -> Google.Protobuf.Field.Builder {
        self.packed = value
        return self
      }
      public func clearPacked() -> Google.Protobuf.Field.Builder{
           builderResult.hasPacked = false
           builderResult.packed = false
           return self
      }
      public var options:Array<Google.Protobuf.Option> {
           get {
               return builderResult.options
           }
           set (value) {
               builderResult.options = value
           }
      }
      public func setOptions(_ value:Array<Google.Protobuf.Option>) -> Google.Protobuf.Field.Builder {
        self.options = value
        return self
      }
      public func clearOptions() -> Google.Protobuf.Field.Builder {
        builderResult.options.removeAll(keepingCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Google.Protobuf.Field.Builder {
        builderResult = Google.Protobuf.Field()
        return self
      }
      override public func clone() throws -> Google.Protobuf.Field.Builder {
        return try Google.Protobuf.Field.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Google.Protobuf.Field {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Google.Protobuf.Field {
        let returnMe:Google.Protobuf.Field = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:Google.Protobuf.Field) throws -> Google.Protobuf.Field.Builder {
        if other == Google.Protobuf.Field() {
         return self
        }
        if other.hasKind {
             kind = other.kind
        }
        if other.hasCardinality {
             cardinality = other.cardinality
        }
        if other.hasNumber {
             number = other.number
        }
        if other.hasName {
             name = other.name
        }
        if other.hasTypeUrl {
             typeUrl = other.typeUrl
        }
        if other.hasOneofIndex {
             oneofIndex = other.oneofIndex
        }
        if other.hasPacked {
             packed = other.packed
        }
        if !other.options.isEmpty  {
           builderResult.options += other.options
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.Field.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Field.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntkind = try input.readEnum()
            if let enumskind = Google.Protobuf.Field.Kind(rawValue:valueIntkind){
                 kind = enumskind
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntkind))
            }

          case 16:
            let valueIntcardinality = try input.readEnum()
            if let enumscardinality = Google.Protobuf.Field.Cardinality(rawValue:valueIntcardinality){
                 cardinality = enumscardinality
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntcardinality))
            }

          case 24:
            number = try input.readInt32()

          case 34:
            name = try input.readString()

          case 50:
            typeUrl = try input.readString()

          case 56:
            oneofIndex = try input.readInt32()

          case 64:
            packed = try input.readBool()

          case 74:
            let subBuilder = Google.Protobuf.Option.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            options += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.Field.Builder {
        let resultDecodedBuilder = Google.Protobuf.Field.Builder()
        if let jsonValueKind = jsonMap["kind"] as? String {
          resultDecodedBuilder.kind = try Google.Protobuf.Field.Kind.fromString(jsonValueKind)
        }
        if let jsonValueCardinality = jsonMap["cardinality"] as? String {
          resultDecodedBuilder.cardinality = try Google.Protobuf.Field.Cardinality.fromString(jsonValueCardinality)
        }
        if let jsonValueNumber = jsonMap["number"] as? NSNumber {
          resultDecodedBuilder.number = jsonValueNumber.int32Value
        }
        if let jsonValueName = jsonMap["name"] as? String {
          resultDecodedBuilder.name = jsonValueName
        }
        if let jsonValueTypeUrl = jsonMap["typeUrl"] as? String {
          resultDecodedBuilder.typeUrl = jsonValueTypeUrl
        }
        if let jsonValueOneofIndex = jsonMap["oneofIndex"] as? NSNumber {
          resultDecodedBuilder.oneofIndex = jsonValueOneofIndex.int32Value
        }
        if let jsonValuePacked = jsonMap["packed"] as? Bool {
          resultDecodedBuilder.packed = jsonValuePacked
        }
        if let jsonValueOptions = jsonMap["options"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayOptions:Array<Google.Protobuf.Option> = []
          for oneValueOptions in jsonValueOptions {
            let messageFromStringOptions = try Google.Protobuf.Option.Builder.decodeToBuilder(oneValueOptions).build()

            jsonArrayOptions += [messageFromStringOptions]
          }
          resultDecodedBuilder.options = jsonArrayOptions
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(_ data:Data) throws -> Google.Protobuf.Field.Builder {
        let jsonData = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Google.Protobuf.Field.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  // Enum type definition.
  final public class Enum : GeneratedMessage, GeneratedMessageProtocol {
    // Enum type name.
    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var enumvalue:Array<Google.Protobuf.EnumValue>  = Array<Google.Protobuf.EnumValue>()
    public private(set) var options:Array<Google.Protobuf.Option>  = Array<Google.Protobuf.Option>()
    public private(set) var hasSourceContext:Bool = false
    public private(set) var sourceContext:Google.Protobuf.SourceContext!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasName {
        try output.writeString(1, value:name)
      }
      for oneElementEnumvalue in enumvalue {
          try output.writeMessage(2, value:oneElementEnumvalue)
      }
      for oneElementOptions in options {
          try output.writeMessage(3, value:oneElementOptions)
      }
      if hasSourceContext {
        try output.writeMessage(4, value:sourceContext)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasName {
        serialize_size += name.computeStringSize(1)
      }
      for oneElementEnumvalue in enumvalue {
          serialize_size += oneElementEnumvalue.computeMessageSize(2)
      }
      for oneElementOptions in options {
          serialize_size += oneElementOptions.computeMessageSize(3)
      }
      if hasSourceContext {
          if let varSizesourceContext = sourceContext?.computeMessageSize(4) {
              serialize_size += varSizesourceContext
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:InputStream) throws -> Array<Google.Protobuf.Enum> {
      var mergedArray = Array<Google.Protobuf.Enum>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:InputStream) throws -> Google.Protobuf.Enum? {
      return try Google.Protobuf.Enum.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:Data) throws -> Google.Protobuf.Enum {
      return try Google.Protobuf.Enum.Builder().mergeFromData(data, extensionRegistry:Google.Protobuf.TypesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:Data, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Enum {
      return try Google.Protobuf.Enum.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:InputStream) throws -> Google.Protobuf.Enum {
      return try Google.Protobuf.Enum.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:InputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Enum {
      return try Google.Protobuf.Enum.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.Enum {
      return try Google.Protobuf.Enum.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Enum {
      return try Google.Protobuf.Enum.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Google.Protobuf.Enum.Builder {
      return Google.Protobuf.Enum.classBuilder() as! Google.Protobuf.Enum.Builder
    }
    public func getBuilder() -> Google.Protobuf.Enum.Builder {
      return classBuilder() as! Google.Protobuf.Enum.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Google.Protobuf.Enum.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Google.Protobuf.Enum.Builder()
    }
    public func toBuilder() throws -> Google.Protobuf.Enum.Builder {
      return try Google.Protobuf.Enum.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:Google.Protobuf.Enum) throws -> Google.Protobuf.Enum.Builder {
      return try Google.Protobuf.Enum.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasName {
        jsonMap["name"] = name
      }
      if !enumvalue.isEmpty {
        var jsonArrayEnumvalue:Array<Dictionary<String,AnyObject>> = []
          for oneValueEnumvalue in enumvalue {
            let ecodedMessageEnumvalue = try oneValueEnumvalue.encode()
            jsonArrayEnumvalue += [ecodedMessageEnumvalue]
          }
        jsonMap["enumvalue"] = jsonArrayEnumvalue
      }
      if !options.isEmpty {
        var jsonArrayOptions:Array<Dictionary<String,AnyObject>> = []
          for oneValueOptions in options {
            let ecodedMessageOptions = try oneValueOptions.encode()
            jsonArrayOptions += [ecodedMessageOptions]
          }
        jsonMap["options"] = jsonArrayOptions
      }
      if hasSourceContext {
        jsonMap["sourceContext"] = try sourceContext.encode()
      }
      return jsonMap
    }
    override class public func decode(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.Enum {
      return try Google.Protobuf.Enum.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(_ data:Data) throws -> Google.Protobuf.Enum {
      return try Google.Protobuf.Enum.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output = ""
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      var enumvalueElementIndex:Int = 0
      for oneElementEnumvalue in enumvalue {
          output += "\(indent) enumvalue[\(enumvalueElementIndex)] {\n"
          output += try oneElementEnumvalue.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          enumvalueElementIndex += 1
      }
      var optionsElementIndex:Int = 0
      for oneElementOptions in options {
          output += "\(indent) options[\(optionsElementIndex)] {\n"
          output += try oneElementOptions.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          optionsElementIndex += 1
      }
      if hasSourceContext {
        output += "\(indent) sourceContext {\n"
        if let outDescSourceContext = sourceContext {
          output += try outDescSourceContext.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            for oneElementEnumvalue in enumvalue {
                hashCode = (hashCode &* 31) &+ oneElementEnumvalue.hashValue
            }
            for oneElementOptions in options {
                hashCode = (hashCode &* 31) &+ oneElementOptions.hashValue
            }
            if hasSourceContext {
                if let hashValuesourceContext = sourceContext?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesourceContext
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Google.Protobuf.Enum"
    }
    override public func className() -> String {
        return "Google.Protobuf.Enum"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Google.Protobuf.Enum.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Google.Protobuf.Enum = Google.Protobuf.Enum()
      public func getMessage() -> Google.Protobuf.Enum {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(_ value:String) -> Google.Protobuf.Enum.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Google.Protobuf.Enum.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var enumvalue:Array<Google.Protobuf.EnumValue> {
           get {
               return builderResult.enumvalue
           }
           set (value) {
               builderResult.enumvalue = value
           }
      }
      public func setEnumvalue(_ value:Array<Google.Protobuf.EnumValue>) -> Google.Protobuf.Enum.Builder {
        self.enumvalue = value
        return self
      }
      public func clearEnumvalue() -> Google.Protobuf.Enum.Builder {
        builderResult.enumvalue.removeAll(keepingCapacity: false)
        return self
      }
      public var options:Array<Google.Protobuf.Option> {
           get {
               return builderResult.options
           }
           set (value) {
               builderResult.options = value
           }
      }
      public func setOptions(_ value:Array<Google.Protobuf.Option>) -> Google.Protobuf.Enum.Builder {
        self.options = value
        return self
      }
      public func clearOptions() -> Google.Protobuf.Enum.Builder {
        builderResult.options.removeAll(keepingCapacity: false)
        return self
      }
      public var hasSourceContext:Bool {
           get {
               return builderResult.hasSourceContext
           }
      }
      public var sourceContext:Google.Protobuf.SourceContext! {
           get {
               if sourceContextBuilder_ != nil {
                  builderResult.sourceContext = sourceContextBuilder_.getMessage()
               }
               return builderResult.sourceContext
           }
           set (value) {
               builderResult.hasSourceContext = true
               builderResult.sourceContext = value
           }
      }
      private var sourceContextBuilder_:Google.Protobuf.SourceContext.Builder! {
           didSet {
              builderResult.hasSourceContext = true
           }
      }
      public func getSourceContextBuilder() -> Google.Protobuf.SourceContext.Builder {
        if sourceContextBuilder_ == nil {
           sourceContextBuilder_ = Google.Protobuf.SourceContext.Builder()
           builderResult.sourceContext = sourceContextBuilder_.getMessage()
           if sourceContext != nil {
              try! sourceContextBuilder_.mergeFrom(sourceContext)
           }
        }
        return sourceContextBuilder_
      }
      public func setSourceContext(_ value:Google.Protobuf.SourceContext!) -> Google.Protobuf.Enum.Builder {
        self.sourceContext = value
        return self
      }
      public func mergeSourceContext(_ value:Google.Protobuf.SourceContext) throws -> Google.Protobuf.Enum.Builder {
        if builderResult.hasSourceContext {
          builderResult.sourceContext = try Google.Protobuf.SourceContext.builderWithPrototype(builderResult.sourceContext).mergeFrom(value).buildPartial()
        } else {
          builderResult.sourceContext = value
        }
        builderResult.hasSourceContext = true
        return self
      }
      public func clearSourceContext() -> Google.Protobuf.Enum.Builder {
        sourceContextBuilder_ = nil
        builderResult.hasSourceContext = false
        builderResult.sourceContext = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Google.Protobuf.Enum.Builder {
        builderResult = Google.Protobuf.Enum()
        return self
      }
      override public func clone() throws -> Google.Protobuf.Enum.Builder {
        return try Google.Protobuf.Enum.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Google.Protobuf.Enum {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Google.Protobuf.Enum {
        let returnMe:Google.Protobuf.Enum = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:Google.Protobuf.Enum) throws -> Google.Protobuf.Enum.Builder {
        if other == Google.Protobuf.Enum() {
         return self
        }
        if other.hasName {
             name = other.name
        }
        if !other.enumvalue.isEmpty  {
           builderResult.enumvalue += other.enumvalue
        }
        if !other.options.isEmpty  {
           builderResult.options += other.options
        }
        if (other.hasSourceContext) {
            try mergeSourceContext(other.sourceContext)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.Enum.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Enum.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            name = try input.readString()

          case 18:
            let subBuilder = Google.Protobuf.EnumValue.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            enumvalue += [subBuilder.buildPartial()]

          case 26:
            let subBuilder = Google.Protobuf.Option.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            options += [subBuilder.buildPartial()]

          case 34:
            let subBuilder:Google.Protobuf.SourceContext.Builder = Google.Protobuf.SourceContext.Builder()
            if hasSourceContext {
              try subBuilder.mergeFrom(sourceContext)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            sourceContext = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.Enum.Builder {
        let resultDecodedBuilder = Google.Protobuf.Enum.Builder()
        if let jsonValueName = jsonMap["name"] as? String {
          resultDecodedBuilder.name = jsonValueName
        }
        if let jsonValueEnumvalue = jsonMap["enumvalue"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayEnumvalue:Array<Google.Protobuf.EnumValue> = []
          for oneValueEnumvalue in jsonValueEnumvalue {
            let messageFromStringEnumvalue = try Google.Protobuf.EnumValue.Builder.decodeToBuilder(oneValueEnumvalue).build()

            jsonArrayEnumvalue += [messageFromStringEnumvalue]
          }
          resultDecodedBuilder.enumvalue = jsonArrayEnumvalue
        }
        if let jsonValueOptions = jsonMap["options"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayOptions:Array<Google.Protobuf.Option> = []
          for oneValueOptions in jsonValueOptions {
            let messageFromStringOptions = try Google.Protobuf.Option.Builder.decodeToBuilder(oneValueOptions).build()

            jsonArrayOptions += [messageFromStringOptions]
          }
          resultDecodedBuilder.options = jsonArrayOptions
        }
        if let jsonValueSourceContext = jsonMap["sourceContext"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.sourceContext = try Google.Protobuf.SourceContext.Builder.decodeToBuilder(jsonValueSourceContext).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(_ data:Data) throws -> Google.Protobuf.Enum.Builder {
        let jsonData = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Google.Protobuf.Enum.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  // Enum value definition.
  final public class EnumValue : GeneratedMessage, GeneratedMessageProtocol {
    // Enum value name.
    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    // Enum value number.
    public private(set) var hasNumber:Bool = false
    public private(set) var number:Int32 = Int32(0)

    public private(set) var options:Array<Google.Protobuf.Option>  = Array<Google.Protobuf.Option>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasName {
        try output.writeString(1, value:name)
      }
      if hasNumber {
        try output.writeInt32(2, value:number)
      }
      for oneElementOptions in options {
          try output.writeMessage(3, value:oneElementOptions)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasName {
        serialize_size += name.computeStringSize(1)
      }
      if hasNumber {
        serialize_size += number.computeInt32Size(2)
      }
      for oneElementOptions in options {
          serialize_size += oneElementOptions.computeMessageSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:InputStream) throws -> Array<Google.Protobuf.EnumValue> {
      var mergedArray = Array<Google.Protobuf.EnumValue>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:InputStream) throws -> Google.Protobuf.EnumValue? {
      return try Google.Protobuf.EnumValue.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:Data) throws -> Google.Protobuf.EnumValue {
      return try Google.Protobuf.EnumValue.Builder().mergeFromData(data, extensionRegistry:Google.Protobuf.TypesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:Data, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.EnumValue {
      return try Google.Protobuf.EnumValue.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:InputStream) throws -> Google.Protobuf.EnumValue {
      return try Google.Protobuf.EnumValue.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:InputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.EnumValue {
      return try Google.Protobuf.EnumValue.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.EnumValue {
      return try Google.Protobuf.EnumValue.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.EnumValue {
      return try Google.Protobuf.EnumValue.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Google.Protobuf.EnumValue.Builder {
      return Google.Protobuf.EnumValue.classBuilder() as! Google.Protobuf.EnumValue.Builder
    }
    public func getBuilder() -> Google.Protobuf.EnumValue.Builder {
      return classBuilder() as! Google.Protobuf.EnumValue.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Google.Protobuf.EnumValue.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Google.Protobuf.EnumValue.Builder()
    }
    public func toBuilder() throws -> Google.Protobuf.EnumValue.Builder {
      return try Google.Protobuf.EnumValue.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:Google.Protobuf.EnumValue) throws -> Google.Protobuf.EnumValue.Builder {
      return try Google.Protobuf.EnumValue.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasName {
        jsonMap["name"] = name
      }
      if hasNumber {
        jsonMap["number"] = NSNumber(value:number)
      }
      if !options.isEmpty {
        var jsonArrayOptions:Array<Dictionary<String,AnyObject>> = []
          for oneValueOptions in options {
            let ecodedMessageOptions = try oneValueOptions.encode()
            jsonArrayOptions += [ecodedMessageOptions]
          }
        jsonMap["options"] = jsonArrayOptions
      }
      return jsonMap
    }
    override class public func decode(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.EnumValue {
      return try Google.Protobuf.EnumValue.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(_ data:Data) throws -> Google.Protobuf.EnumValue {
      return try Google.Protobuf.EnumValue.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output = ""
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasNumber {
        output += "\(indent) number: \(number) \n"
      }
      var optionsElementIndex:Int = 0
      for oneElementOptions in options {
          output += "\(indent) options[\(optionsElementIndex)] {\n"
          output += try oneElementOptions.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          optionsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasNumber {
               hashCode = (hashCode &* 31) &+ number.hashValue
            }
            for oneElementOptions in options {
                hashCode = (hashCode &* 31) &+ oneElementOptions.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Google.Protobuf.EnumValue"
    }
    override public func className() -> String {
        return "Google.Protobuf.EnumValue"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Google.Protobuf.EnumValue.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Google.Protobuf.EnumValue = Google.Protobuf.EnumValue()
      public func getMessage() -> Google.Protobuf.EnumValue {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(_ value:String) -> Google.Protobuf.EnumValue.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Google.Protobuf.EnumValue.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasNumber:Bool {
           get {
                return builderResult.hasNumber
           }
      }
      public var number:Int32 {
           get {
                return builderResult.number
           }
           set (value) {
               builderResult.hasNumber = true
               builderResult.number = value
           }
      }
      public func setNumber(_ value:Int32) -> Google.Protobuf.EnumValue.Builder {
        self.number = value
        return self
      }
      public func clearNumber() -> Google.Protobuf.EnumValue.Builder{
           builderResult.hasNumber = false
           builderResult.number = Int32(0)
           return self
      }
      public var options:Array<Google.Protobuf.Option> {
           get {
               return builderResult.options
           }
           set (value) {
               builderResult.options = value
           }
      }
      public func setOptions(_ value:Array<Google.Protobuf.Option>) -> Google.Protobuf.EnumValue.Builder {
        self.options = value
        return self
      }
      public func clearOptions() -> Google.Protobuf.EnumValue.Builder {
        builderResult.options.removeAll(keepingCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Google.Protobuf.EnumValue.Builder {
        builderResult = Google.Protobuf.EnumValue()
        return self
      }
      override public func clone() throws -> Google.Protobuf.EnumValue.Builder {
        return try Google.Protobuf.EnumValue.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Google.Protobuf.EnumValue {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Google.Protobuf.EnumValue {
        let returnMe:Google.Protobuf.EnumValue = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:Google.Protobuf.EnumValue) throws -> Google.Protobuf.EnumValue.Builder {
        if other == Google.Protobuf.EnumValue() {
         return self
        }
        if other.hasName {
             name = other.name
        }
        if other.hasNumber {
             number = other.number
        }
        if !other.options.isEmpty  {
           builderResult.options += other.options
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.EnumValue.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.EnumValue.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            name = try input.readString()

          case 16:
            number = try input.readInt32()

          case 26:
            let subBuilder = Google.Protobuf.Option.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            options += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.EnumValue.Builder {
        let resultDecodedBuilder = Google.Protobuf.EnumValue.Builder()
        if let jsonValueName = jsonMap["name"] as? String {
          resultDecodedBuilder.name = jsonValueName
        }
        if let jsonValueNumber = jsonMap["number"] as? NSNumber {
          resultDecodedBuilder.number = jsonValueNumber.int32Value
        }
        if let jsonValueOptions = jsonMap["options"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayOptions:Array<Google.Protobuf.Option> = []
          for oneValueOptions in jsonValueOptions {
            let messageFromStringOptions = try Google.Protobuf.Option.Builder.decodeToBuilder(oneValueOptions).build()

            jsonArrayOptions += [messageFromStringOptions]
          }
          resultDecodedBuilder.options = jsonArrayOptions
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(_ data:Data) throws -> Google.Protobuf.EnumValue.Builder {
        let jsonData = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Google.Protobuf.EnumValue.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  // Proto option attached to messages/fields/enums etc.
  final public class Option : GeneratedMessage, GeneratedMessageProtocol {
    // Proto option name.
    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasValue:Bool = false
    public private(set) var value:Google.Protobuf.AnyType!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(_ output:CodedOutputStream) throws {
      if hasName {
        try output.writeString(1, value:name)
      }
      if hasValue {
        try output.writeMessage(2, value:value)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasName {
        serialize_size += name.computeStringSize(1)
      }
      if hasValue {
          if let varSizevalue = value?.computeMessageSize(2) {
              serialize_size += varSizevalue
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(_ input:InputStream) throws -> Array<Google.Protobuf.Option> {
      var mergedArray = Array<Google.Protobuf.Option>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(_ input:InputStream) throws -> Google.Protobuf.Option? {
      return try Google.Protobuf.Option.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(_ data:Data) throws -> Google.Protobuf.Option {
      return try Google.Protobuf.Option.Builder().mergeFromData(data, extensionRegistry:Google.Protobuf.TypesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(_ data:Data, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Option {
      return try Google.Protobuf.Option.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(_ input:InputStream) throws -> Google.Protobuf.Option {
      return try Google.Protobuf.Option.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(_ input:InputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Option {
      return try Google.Protobuf.Option.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.Option {
      return try Google.Protobuf.Option.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Option {
      return try Google.Protobuf.Option.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Google.Protobuf.Option.Builder {
      return Google.Protobuf.Option.classBuilder() as! Google.Protobuf.Option.Builder
    }
    public func getBuilder() -> Google.Protobuf.Option.Builder {
      return classBuilder() as! Google.Protobuf.Option.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Google.Protobuf.Option.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Google.Protobuf.Option.Builder()
    }
    public func toBuilder() throws -> Google.Protobuf.Option.Builder {
      return try Google.Protobuf.Option.builderWithPrototype(self)
    }
    public class func builderWithPrototype(_ prototype:Google.Protobuf.Option) throws -> Google.Protobuf.Option.Builder {
      return try Google.Protobuf.Option.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasName {
        jsonMap["name"] = name
      }
      if hasValue {
        jsonMap["value"] = try value.encode()
      }
      return jsonMap
    }
    override class public func decode(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.Option {
      return try Google.Protobuf.Option.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(_ data:Data) throws -> Google.Protobuf.Option {
      return try Google.Protobuf.Option.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(_ indent:String) throws -> String {
      var output = ""
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasValue {
        output += "\(indent) value {\n"
        if let outDescValue = value {
          output += try outDescValue.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasValue {
                if let hashValuevalue = value?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuevalue
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Google.Protobuf.Option"
    }
    override public func className() -> String {
        return "Google.Protobuf.Option"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Google.Protobuf.Option.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Google.Protobuf.Option = Google.Protobuf.Option()
      public func getMessage() -> Google.Protobuf.Option {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(_ value:String) -> Google.Protobuf.Option.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Google.Protobuf.Option.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasValue:Bool {
           get {
               return builderResult.hasValue
           }
      }
      public var value:Google.Protobuf.AnyType! {
           get {
               if valueBuilder_ != nil {
                  builderResult.value = valueBuilder_.getMessage()
               }
               return builderResult.value
           }
           set (value) {
               builderResult.hasValue = true
               builderResult.value = value
           }
      }
      private var valueBuilder_:Google.Protobuf.AnyType.Builder! {
           didSet {
              builderResult.hasValue = true
           }
      }
      public func getValueBuilder() -> Google.Protobuf.AnyType.Builder {
        if valueBuilder_ == nil {
           valueBuilder_ = Google.Protobuf.AnyType.Builder()
           builderResult.value = valueBuilder_.getMessage()
           if value != nil {
              try! valueBuilder_.mergeFrom(value)
           }
        }
        return valueBuilder_
      }
      public func setValue(_ value:Google.Protobuf.AnyType!) -> Google.Protobuf.Option.Builder {
        self.value = value
        return self
      }
      public func mergeValue(_ value:Google.Protobuf.AnyType) throws -> Google.Protobuf.Option.Builder {
        if builderResult.hasValue {
          builderResult.value = try Google.Protobuf.AnyType.builderWithPrototype(builderResult.value).mergeFrom(value).buildPartial()
        } else {
          builderResult.value = value
        }
        builderResult.hasValue = true
        return self
      }
      public func clearValue() -> Google.Protobuf.Option.Builder {
        valueBuilder_ = nil
        builderResult.hasValue = false
        builderResult.value = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Google.Protobuf.Option.Builder {
        builderResult = Google.Protobuf.Option()
        return self
      }
      override public func clone() throws -> Google.Protobuf.Option.Builder {
        return try Google.Protobuf.Option.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Google.Protobuf.Option {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Google.Protobuf.Option {
        let returnMe:Google.Protobuf.Option = builderResult
        return returnMe
      }
      public func mergeFrom(_ other:Google.Protobuf.Option) throws -> Google.Protobuf.Option.Builder {
        if other == Google.Protobuf.Option() {
         return self
        }
        if other.hasName {
             name = other.name
        }
        if (other.hasValue) {
            try mergeValue(other.value)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream) throws -> Google.Protobuf.Option.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(_ input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.Option.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            name = try input.readString()

          case 18:
            let subBuilder:Google.Protobuf.AnyType.Builder = Google.Protobuf.AnyType.Builder()
            if hasValue {
              try subBuilder.mergeFrom(value)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            value = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(_ jsonMap:Dictionary<String,AnyObject>) throws -> Google.Protobuf.Option.Builder {
        let resultDecodedBuilder = Google.Protobuf.Option.Builder()
        if let jsonValueName = jsonMap["name"] as? String {
          resultDecodedBuilder.name = jsonValueName
        }
        if let jsonValueValue = jsonMap["value"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.value = try Google.Protobuf.AnyType.Builder.decodeToBuilder(jsonValueValue).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(_ data:Data) throws -> Google.Protobuf.Option.Builder {
        let jsonData = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Google.Protobuf.Option.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
