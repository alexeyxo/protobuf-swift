/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "swift-descriptor.proto"
/// Syntax "Proto2"

import Foundation

public extension Google.Protobuf{}

public var SwiftDescriptorRootswiftFileOptions:ConcreateExtensionField {
    get {
        return Google.Protobuf.SwiftDescriptorRoot.default.SwiftDescriptorRootswiftFileOptionsStatic
    }
}
public var SwiftDescriptorRootswiftMessageOptions:ConcreateExtensionField {
    get {
        return Google.Protobuf.SwiftDescriptorRoot.default.SwiftDescriptorRootswiftMessageOptionsStatic
    }
}
public var SwiftDescriptorRootswiftEnumOptions:ConcreateExtensionField {
    get {
        return Google.Protobuf.SwiftDescriptorRoot.default.SwiftDescriptorRootswiftEnumOptionsStatic
    }
}
public extension Google.Protobuf {
    public struct SwiftDescriptorRoot {
        public static let `default` = SwiftDescriptorRoot()
        var SwiftDescriptorRootswiftFileOptionsStatic:ConcreateExtensionField
        var SwiftDescriptorRootswiftMessageOptionsStatic:ConcreateExtensionField
        var SwiftDescriptorRootswiftEnumOptionsStatic:ConcreateExtensionField
        public var extensionRegistry:ExtensionRegistry

        init() {
            SwiftDescriptorRootswiftFileOptionsStatic = ConcreateExtensionField(type:ExtensionType.extensionTypeMessage, extendedClass:Google.Protobuf.FileOptions.self, fieldNumber: 5092014, defaultValue:Google.Protobuf.SwiftFileOptions(), messageOrGroupClass:Google.Protobuf.SwiftFileOptions.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
            SwiftDescriptorRootswiftMessageOptionsStatic = ConcreateExtensionField(type:ExtensionType.extensionTypeMessage, extendedClass:Google.Protobuf.MessageOptions.self, fieldNumber: 5092016, defaultValue:Google.Protobuf.SwiftMessageOptions(), messageOrGroupClass:Google.Protobuf.SwiftMessageOptions.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
            SwiftDescriptorRootswiftEnumOptionsStatic = ConcreateExtensionField(type:ExtensionType.extensionTypeMessage, extendedClass:Google.Protobuf.EnumOptions.self, fieldNumber: 5092015, defaultValue:Google.Protobuf.SwiftEnumOptions(), messageOrGroupClass:Google.Protobuf.SwiftEnumOptions.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
            Google.Protobuf.DescriptorRoot.default.registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
            registry.addExtension(extensions: SwiftDescriptorRootswiftFileOptionsStatic)
            registry.addExtension(extensions: SwiftDescriptorRootswiftMessageOptionsStatic)
            registry.addExtension(extensions: SwiftDescriptorRootswiftEnumOptionsStatic)
        }
        public static func swiftFileOptions() -> ConcreateExtensionField {
               return SwiftDescriptorRoot.default.SwiftDescriptorRootswiftFileOptionsStatic
        }
        public static func swiftMessageOptions() -> ConcreateExtensionField {
               return SwiftDescriptorRoot.default.SwiftDescriptorRootswiftMessageOptionsStatic
        }
        public static func swiftEnumOptions() -> ConcreateExtensionField {
               return SwiftDescriptorRoot.default.SwiftDescriptorRootswiftEnumOptionsStatic
        }
    }



    //Enum type declaration start 

    public enum AccessControl:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
        case internalEntities = 0
        case publicEntities = 1
        public func toString() -> String {
            switch self {
            case .internalEntities: return "InternalEntities"
            case .publicEntities: return "PublicEntities"
            }
        }
        public static func fromString(str:String) throws -> Google.Protobuf.AccessControl {
            switch str {
            case "InternalEntities":    return .internalEntities
            case "PublicEntities":    return .publicEntities
            default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
            }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
            case .internalEntities: return ".internalEntities"
            case .publicEntities: return ".publicEntities"
            }
        }
        public var hashValue:Int {
            return self.rawValue.hashValue
        }
        public static func ==(lhs:AccessControl, rhs:AccessControl) -> Bool {
            return lhs.hashValue == rhs.hashValue
        }
    }

    //Enum type declaration end 

    final public class SwiftFileOptions : GeneratedMessage {

        public static func == (lhs: Google.Protobuf.SwiftFileOptions, rhs: Google.Protobuf.SwiftFileOptions) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasClassPrefix == rhs.hasClassPrefix) && (!lhs.hasClassPrefix || lhs.classPrefix == rhs.classPrefix)
            fieldCheck = fieldCheck && (lhs.hasEntitiesAccessControl == rhs.hasEntitiesAccessControl) && (!lhs.hasEntitiesAccessControl || lhs.entitiesAccessControl == rhs.entitiesAccessControl)
            fieldCheck = fieldCheck && (lhs.hasCompileForFramework == rhs.hasCompileForFramework) && (!lhs.hasCompileForFramework || lhs.compileForFramework == rhs.compileForFramework)
            fieldCheck = fieldCheck && (lhs.hasGenerateStruct == rhs.hasGenerateStruct) && (!lhs.hasGenerateStruct || lhs.generateStruct == rhs.generateStruct)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var classPrefix:String = ""
        public fileprivate(set) var hasClassPrefix:Bool = false

        public fileprivate(set) var entitiesAccessControl:Google.Protobuf.AccessControl = Google.Protobuf.AccessControl.publicEntities
        public fileprivate(set) var hasEntitiesAccessControl:Bool = false
        public fileprivate(set) var compileForFramework:Bool = true
        public fileprivate(set) var hasCompileForFramework:Bool = false

        public fileprivate(set) var generateStruct:Bool = false
        public fileprivate(set) var hasGenerateStruct:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasClassPrefix {
                try codedOutputStream.writeString(fieldNumber: 1, value:classPrefix)
            }
            if hasEntitiesAccessControl {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:entitiesAccessControl.rawValue)
            }
            if hasCompileForFramework {
                try codedOutputStream.writeBool(fieldNumber: 3, value:compileForFramework)
            }
            if hasGenerateStruct {
                try codedOutputStream.writeBool(fieldNumber: 4, value:generateStruct)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasClassPrefix {
                serialize_size += classPrefix.computeStringSize(fieldNumber: 1)
            }
            if (hasEntitiesAccessControl) {
                serialize_size += entitiesAccessControl.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if hasCompileForFramework {
                serialize_size += compileForFramework.computeBoolSize(fieldNumber: 3)
            }
            if hasGenerateStruct {
                serialize_size += generateStruct.computeBoolSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Google.Protobuf.SwiftFileOptions.Builder {
            return Google.Protobuf.SwiftFileOptions.classBuilder() as! Google.Protobuf.SwiftFileOptions.Builder
        }
        public func getBuilder() -> Google.Protobuf.SwiftFileOptions.Builder {
            return classBuilder() as! Google.Protobuf.SwiftFileOptions.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Google.Protobuf.SwiftFileOptions.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Google.Protobuf.SwiftFileOptions.Builder()
        }
        public func toBuilder() throws -> Google.Protobuf.SwiftFileOptions.Builder {
            return try Google.Protobuf.SwiftFileOptions.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Google.Protobuf.SwiftFileOptions) throws -> Google.Protobuf.SwiftFileOptions.Builder {
            return try Google.Protobuf.SwiftFileOptions.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasClassPrefix {
                jsonMap["classPrefix"] = classPrefix
            }
            if hasEntitiesAccessControl {
                jsonMap["entitiesAccessControl"] = entitiesAccessControl.toString()
            }
            if hasCompileForFramework {
                jsonMap["compileForFramework"] = compileForFramework
            }
            if hasGenerateStruct {
                jsonMap["generateStruct"] = generateStruct
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Google.Protobuf.SwiftFileOptions {
            return try Google.Protobuf.SwiftFileOptions.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Google.Protobuf.SwiftFileOptions {
            return try Google.Protobuf.SwiftFileOptions.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasClassPrefix {
                output += "\(indent) classPrefix: \(classPrefix) \n"
            }
            if (hasEntitiesAccessControl) {
                output += "\(indent) entitiesAccessControl: \(entitiesAccessControl.description)\n"
            }
            if hasCompileForFramework {
                output += "\(indent) compileForFramework: \(compileForFramework) \n"
            }
            if hasGenerateStruct {
                output += "\(indent) generateStruct: \(generateStruct) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasClassPrefix {
                    hashCode = (hashCode &* 31) &+ classPrefix.hashValue
                }
                if hasEntitiesAccessControl {
                     hashCode = (hashCode &* 31) &+ entitiesAccessControl.hashValue
                }
                if hasCompileForFramework {
                    hashCode = (hashCode &* 31) &+ compileForFramework.hashValue
                }
                if hasGenerateStruct {
                    hashCode = (hashCode &* 31) &+ generateStruct.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Google.Protobuf.SwiftFileOptions"
        }
        override public func className() -> String {
            return "Google.Protobuf.SwiftFileOptions"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Google.Protobuf.SwiftFileOptions = Google.Protobuf.SwiftFileOptions()
            public func getMessage() -> Google.Protobuf.SwiftFileOptions {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var classPrefix:String {
                get {
                    return builderResult.classPrefix
                }
                set (value) {
                    builderResult.hasClassPrefix = true
                    builderResult.classPrefix = value
                }
            }
            public var hasClassPrefix:Bool {
                get {
                    return builderResult.hasClassPrefix
                }
            }
            @discardableResult
            public func setClassPrefix(_ value:String) -> Google.Protobuf.SwiftFileOptions.Builder {
                self.classPrefix = value
                return self
            }
            @discardableResult
            public func clearClassPrefix() -> Google.Protobuf.SwiftFileOptions.Builder{
                builderResult.hasClassPrefix = false
                builderResult.classPrefix = ""
                return self
            }
                public var entitiesAccessControl:Google.Protobuf.AccessControl {
                    get {
                        return builderResult.entitiesAccessControl
                    }
                    set (value) {
                        builderResult.hasEntitiesAccessControl = true
                        builderResult.entitiesAccessControl = value
                    }
                }
                public var hasEntitiesAccessControl:Bool{
                    get {
                        return builderResult.hasEntitiesAccessControl
                    }
                }
            @discardableResult
                public func setEntitiesAccessControl(_ value:Google.Protobuf.AccessControl) -> Google.Protobuf.SwiftFileOptions.Builder {
                  self.entitiesAccessControl = value
                  return self
                }
            @discardableResult
                public func clearEntitiesAccessControl() -> Google.Protobuf.SwiftFileOptions.Builder {
                   builderResult.hasEntitiesAccessControl = false
                   builderResult.entitiesAccessControl = .publicEntities
                   return self
                }
            public var compileForFramework:Bool {
                get {
                    return builderResult.compileForFramework
                }
                set (value) {
                    builderResult.hasCompileForFramework = true
                    builderResult.compileForFramework = value
                }
            }
            public var hasCompileForFramework:Bool {
                get {
                    return builderResult.hasCompileForFramework
                }
            }
            @discardableResult
            public func setCompileForFramework(_ value:Bool) -> Google.Protobuf.SwiftFileOptions.Builder {
                self.compileForFramework = value
                return self
            }
            @discardableResult
            public func clearCompileForFramework() -> Google.Protobuf.SwiftFileOptions.Builder{
                builderResult.hasCompileForFramework = false
                builderResult.compileForFramework = true
                return self
            }
            public var generateStruct:Bool {
                get {
                    return builderResult.generateStruct
                }
                set (value) {
                    builderResult.hasGenerateStruct = true
                    builderResult.generateStruct = value
                }
            }
            public var hasGenerateStruct:Bool {
                get {
                    return builderResult.hasGenerateStruct
                }
            }
            @discardableResult
            public func setGenerateStruct(_ value:Bool) -> Google.Protobuf.SwiftFileOptions.Builder {
                self.generateStruct = value
                return self
            }
            @discardableResult
            public func clearGenerateStruct() -> Google.Protobuf.SwiftFileOptions.Builder{
                builderResult.hasGenerateStruct = false
                builderResult.generateStruct = false
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Google.Protobuf.SwiftFileOptions.Builder {
                builderResult = Google.Protobuf.SwiftFileOptions()
                return self
            }
            override public func clone() throws -> Google.Protobuf.SwiftFileOptions.Builder {
                return try Google.Protobuf.SwiftFileOptions.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Google.Protobuf.SwiftFileOptions {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Google.Protobuf.SwiftFileOptions {
                let returnMe:Google.Protobuf.SwiftFileOptions = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Google.Protobuf.SwiftFileOptions) throws -> Google.Protobuf.SwiftFileOptions.Builder {
                if other == Google.Protobuf.SwiftFileOptions() {
                    return self
                }
                if other.hasClassPrefix {
                    classPrefix = other.classPrefix
                }
                if other.hasEntitiesAccessControl {
                    entitiesAccessControl = other.entitiesAccessControl
                }
                if other.hasCompileForFramework {
                    compileForFramework = other.compileForFramework
                }
                if other.hasGenerateStruct {
                    generateStruct = other.generateStruct
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Google.Protobuf.SwiftFileOptions.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftFileOptions.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        classPrefix = try codedInputStream.readString()

                    case 16:
                        let valueIntentitiesAccessControl = try codedInputStream.readEnum()
                        if let enumsentitiesAccessControl = Google.Protobuf.AccessControl(rawValue:valueIntentitiesAccessControl){
                            entitiesAccessControl = enumsentitiesAccessControl
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntentitiesAccessControl))
                        }

                    case 24:
                        compileForFramework = try codedInputStream.readBool()

                    case 32:
                        generateStruct = try codedInputStream.readBool()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Google.Protobuf.SwiftFileOptions.Builder {
                let resultDecodedBuilder = Google.Protobuf.SwiftFileOptions.Builder()
                if let jsonValueClassPrefix = jsonMap["classPrefix"] as? String {
                    resultDecodedBuilder.classPrefix = jsonValueClassPrefix
                }
                if let jsonValueEntitiesAccessControl = jsonMap["entitiesAccessControl"] as? String {
                    resultDecodedBuilder.entitiesAccessControl = try Google.Protobuf.AccessControl.fromString(str: jsonValueEntitiesAccessControl)
                }
                if let jsonValueCompileForFramework = jsonMap["compileForFramework"] as? Bool {
                    resultDecodedBuilder.compileForFramework = jsonValueCompileForFramework
                }
                if let jsonValueGenerateStruct = jsonMap["generateStruct"] as? Bool {
                    resultDecodedBuilder.generateStruct = jsonValueGenerateStruct
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Google.Protobuf.SwiftFileOptions.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Google.Protobuf.SwiftFileOptions.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SwiftMessageOptions : GeneratedMessage {

        public static func == (lhs: Google.Protobuf.SwiftMessageOptions, rhs: Google.Protobuf.SwiftMessageOptions) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasGenerateErrorType == rhs.hasGenerateErrorType) && (!lhs.hasGenerateErrorType || lhs.generateErrorType == rhs.generateErrorType)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var generateErrorType:Bool = false
        public fileprivate(set) var hasGenerateErrorType:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasGenerateErrorType {
                try codedOutputStream.writeBool(fieldNumber: 1, value:generateErrorType)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasGenerateErrorType {
                serialize_size += generateErrorType.computeBoolSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Google.Protobuf.SwiftMessageOptions.Builder {
            return Google.Protobuf.SwiftMessageOptions.classBuilder() as! Google.Protobuf.SwiftMessageOptions.Builder
        }
        public func getBuilder() -> Google.Protobuf.SwiftMessageOptions.Builder {
            return classBuilder() as! Google.Protobuf.SwiftMessageOptions.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Google.Protobuf.SwiftMessageOptions.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Google.Protobuf.SwiftMessageOptions.Builder()
        }
        public func toBuilder() throws -> Google.Protobuf.SwiftMessageOptions.Builder {
            return try Google.Protobuf.SwiftMessageOptions.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Google.Protobuf.SwiftMessageOptions) throws -> Google.Protobuf.SwiftMessageOptions.Builder {
            return try Google.Protobuf.SwiftMessageOptions.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasGenerateErrorType {
                jsonMap["generateErrorType"] = generateErrorType
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Google.Protobuf.SwiftMessageOptions {
            return try Google.Protobuf.SwiftMessageOptions.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Google.Protobuf.SwiftMessageOptions {
            return try Google.Protobuf.SwiftMessageOptions.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasGenerateErrorType {
                output += "\(indent) generateErrorType: \(generateErrorType) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasGenerateErrorType {
                    hashCode = (hashCode &* 31) &+ generateErrorType.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Google.Protobuf.SwiftMessageOptions"
        }
        override public func className() -> String {
            return "Google.Protobuf.SwiftMessageOptions"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Google.Protobuf.SwiftMessageOptions = Google.Protobuf.SwiftMessageOptions()
            public func getMessage() -> Google.Protobuf.SwiftMessageOptions {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var generateErrorType:Bool {
                get {
                    return builderResult.generateErrorType
                }
                set (value) {
                    builderResult.hasGenerateErrorType = true
                    builderResult.generateErrorType = value
                }
            }
            public var hasGenerateErrorType:Bool {
                get {
                    return builderResult.hasGenerateErrorType
                }
            }
            @discardableResult
            public func setGenerateErrorType(_ value:Bool) -> Google.Protobuf.SwiftMessageOptions.Builder {
                self.generateErrorType = value
                return self
            }
            @discardableResult
            public func clearGenerateErrorType() -> Google.Protobuf.SwiftMessageOptions.Builder{
                builderResult.hasGenerateErrorType = false
                builderResult.generateErrorType = false
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Google.Protobuf.SwiftMessageOptions.Builder {
                builderResult = Google.Protobuf.SwiftMessageOptions()
                return self
            }
            override public func clone() throws -> Google.Protobuf.SwiftMessageOptions.Builder {
                return try Google.Protobuf.SwiftMessageOptions.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Google.Protobuf.SwiftMessageOptions {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Google.Protobuf.SwiftMessageOptions {
                let returnMe:Google.Protobuf.SwiftMessageOptions = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Google.Protobuf.SwiftMessageOptions) throws -> Google.Protobuf.SwiftMessageOptions.Builder {
                if other == Google.Protobuf.SwiftMessageOptions() {
                    return self
                }
                if other.hasGenerateErrorType {
                    generateErrorType = other.generateErrorType
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Google.Protobuf.SwiftMessageOptions.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftMessageOptions.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        generateErrorType = try codedInputStream.readBool()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Google.Protobuf.SwiftMessageOptions.Builder {
                let resultDecodedBuilder = Google.Protobuf.SwiftMessageOptions.Builder()
                if let jsonValueGenerateErrorType = jsonMap["generateErrorType"] as? Bool {
                    resultDecodedBuilder.generateErrorType = jsonValueGenerateErrorType
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Google.Protobuf.SwiftMessageOptions.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Google.Protobuf.SwiftMessageOptions.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class SwiftEnumOptions : GeneratedMessage {

        public static func == (lhs: Google.Protobuf.SwiftEnumOptions, rhs: Google.Protobuf.SwiftEnumOptions) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasGenerateErrorType == rhs.hasGenerateErrorType) && (!lhs.hasGenerateErrorType || lhs.generateErrorType == rhs.generateErrorType)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var generateErrorType:Bool = false
        public fileprivate(set) var hasGenerateErrorType:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasGenerateErrorType {
                try codedOutputStream.writeBool(fieldNumber: 1, value:generateErrorType)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasGenerateErrorType {
                serialize_size += generateErrorType.computeBoolSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Google.Protobuf.SwiftEnumOptions.Builder {
            return Google.Protobuf.SwiftEnumOptions.classBuilder() as! Google.Protobuf.SwiftEnumOptions.Builder
        }
        public func getBuilder() -> Google.Protobuf.SwiftEnumOptions.Builder {
            return classBuilder() as! Google.Protobuf.SwiftEnumOptions.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Google.Protobuf.SwiftEnumOptions.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Google.Protobuf.SwiftEnumOptions.Builder()
        }
        public func toBuilder() throws -> Google.Protobuf.SwiftEnumOptions.Builder {
            return try Google.Protobuf.SwiftEnumOptions.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Google.Protobuf.SwiftEnumOptions) throws -> Google.Protobuf.SwiftEnumOptions.Builder {
            return try Google.Protobuf.SwiftEnumOptions.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasGenerateErrorType {
                jsonMap["generateErrorType"] = generateErrorType
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Google.Protobuf.SwiftEnumOptions {
            return try Google.Protobuf.SwiftEnumOptions.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Google.Protobuf.SwiftEnumOptions {
            return try Google.Protobuf.SwiftEnumOptions.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasGenerateErrorType {
                output += "\(indent) generateErrorType: \(generateErrorType) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasGenerateErrorType {
                    hashCode = (hashCode &* 31) &+ generateErrorType.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Google.Protobuf.SwiftEnumOptions"
        }
        override public func className() -> String {
            return "Google.Protobuf.SwiftEnumOptions"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Google.Protobuf.SwiftEnumOptions = Google.Protobuf.SwiftEnumOptions()
            public func getMessage() -> Google.Protobuf.SwiftEnumOptions {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var generateErrorType:Bool {
                get {
                    return builderResult.generateErrorType
                }
                set (value) {
                    builderResult.hasGenerateErrorType = true
                    builderResult.generateErrorType = value
                }
            }
            public var hasGenerateErrorType:Bool {
                get {
                    return builderResult.hasGenerateErrorType
                }
            }
            @discardableResult
            public func setGenerateErrorType(_ value:Bool) -> Google.Protobuf.SwiftEnumOptions.Builder {
                self.generateErrorType = value
                return self
            }
            @discardableResult
            public func clearGenerateErrorType() -> Google.Protobuf.SwiftEnumOptions.Builder{
                builderResult.hasGenerateErrorType = false
                builderResult.generateErrorType = false
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Google.Protobuf.SwiftEnumOptions.Builder {
                builderResult = Google.Protobuf.SwiftEnumOptions()
                return self
            }
            override public func clone() throws -> Google.Protobuf.SwiftEnumOptions.Builder {
                return try Google.Protobuf.SwiftEnumOptions.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Google.Protobuf.SwiftEnumOptions {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Google.Protobuf.SwiftEnumOptions {
                let returnMe:Google.Protobuf.SwiftEnumOptions = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Google.Protobuf.SwiftEnumOptions) throws -> Google.Protobuf.SwiftEnumOptions.Builder {
                if other == Google.Protobuf.SwiftEnumOptions() {
                    return self
                }
                if other.hasGenerateErrorType {
                    generateErrorType = other.generateErrorType
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Google.Protobuf.SwiftEnumOptions.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftEnumOptions.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        generateErrorType = try codedInputStream.readBool()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Google.Protobuf.SwiftEnumOptions.Builder {
                let resultDecodedBuilder = Google.Protobuf.SwiftEnumOptions.Builder()
                if let jsonValueGenerateErrorType = jsonMap["generateErrorType"] as? Bool {
                    resultDecodedBuilder.generateErrorType = jsonValueGenerateErrorType
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Google.Protobuf.SwiftEnumOptions.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Google.Protobuf.SwiftEnumOptions.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Google.Protobuf.SwiftFileOptions: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Google.Protobuf.SwiftFileOptions> {
        var mergedArray = Array<Google.Protobuf.SwiftFileOptions>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Google.Protobuf.SwiftFileOptions? {
        return try Google.Protobuf.SwiftFileOptions.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Google.Protobuf.SwiftFileOptions {
        return try Google.Protobuf.SwiftFileOptions.Builder().mergeFrom(data: data, extensionRegistry:Google.Protobuf.SwiftDescriptorRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftFileOptions {
        return try Google.Protobuf.SwiftFileOptions.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Google.Protobuf.SwiftFileOptions {
        return try Google.Protobuf.SwiftFileOptions.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftFileOptions {
        return try Google.Protobuf.SwiftFileOptions.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Google.Protobuf.SwiftFileOptions {
        return try Google.Protobuf.SwiftFileOptions.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftFileOptions {
        return try Google.Protobuf.SwiftFileOptions.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "classPrefix": return self.classPrefix
        case "entitiesAccessControl": return self.entitiesAccessControl
        case "compileForFramework": return self.compileForFramework
        case "generateStruct": return self.generateStruct
        default: return nil
        }
    }
}
extension Google.Protobuf.SwiftFileOptions.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "classPrefix": return self.classPrefix
            case "entitiesAccessControl": return self.entitiesAccessControl
            case "compileForFramework": return self.compileForFramework
            case "generateStruct": return self.generateStruct
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "classPrefix":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.classPrefix = newSubscriptValue
            case "entitiesAccessControl":
                guard let newSubscriptValue = newSubscriptValue as? Google.Protobuf.AccessControl else {
                    return
                }
                self.entitiesAccessControl = newSubscriptValue
            case "compileForFramework":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.compileForFramework = newSubscriptValue
            case "generateStruct":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.generateStruct = newSubscriptValue
            default: return
            }
        }
    }
}
extension Google.Protobuf.SwiftMessageOptions: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Google.Protobuf.SwiftMessageOptions> {
        var mergedArray = Array<Google.Protobuf.SwiftMessageOptions>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Google.Protobuf.SwiftMessageOptions? {
        return try Google.Protobuf.SwiftMessageOptions.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Google.Protobuf.SwiftMessageOptions {
        return try Google.Protobuf.SwiftMessageOptions.Builder().mergeFrom(data: data, extensionRegistry:Google.Protobuf.SwiftDescriptorRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftMessageOptions {
        return try Google.Protobuf.SwiftMessageOptions.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Google.Protobuf.SwiftMessageOptions {
        return try Google.Protobuf.SwiftMessageOptions.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftMessageOptions {
        return try Google.Protobuf.SwiftMessageOptions.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Google.Protobuf.SwiftMessageOptions {
        return try Google.Protobuf.SwiftMessageOptions.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftMessageOptions {
        return try Google.Protobuf.SwiftMessageOptions.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "generateErrorType": return self.generateErrorType
        default: return nil
        }
    }
}
extension Google.Protobuf.SwiftMessageOptions.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "generateErrorType": return self.generateErrorType
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "generateErrorType":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.generateErrorType = newSubscriptValue
            default: return
            }
        }
    }
}
extension Google.Protobuf.SwiftEnumOptions: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Google.Protobuf.SwiftEnumOptions> {
        var mergedArray = Array<Google.Protobuf.SwiftEnumOptions>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Google.Protobuf.SwiftEnumOptions? {
        return try Google.Protobuf.SwiftEnumOptions.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Google.Protobuf.SwiftEnumOptions {
        return try Google.Protobuf.SwiftEnumOptions.Builder().mergeFrom(data: data, extensionRegistry:Google.Protobuf.SwiftDescriptorRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftEnumOptions {
        return try Google.Protobuf.SwiftEnumOptions.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Google.Protobuf.SwiftEnumOptions {
        return try Google.Protobuf.SwiftEnumOptions.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftEnumOptions {
        return try Google.Protobuf.SwiftEnumOptions.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Google.Protobuf.SwiftEnumOptions {
        return try Google.Protobuf.SwiftEnumOptions.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Google.Protobuf.SwiftEnumOptions {
        return try Google.Protobuf.SwiftEnumOptions.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "generateErrorType": return self.generateErrorType
        default: return nil
        }
    }
}
extension Google.Protobuf.SwiftEnumOptions.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "generateErrorType": return self.generateErrorType
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "generateErrorType":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.generateErrorType = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
