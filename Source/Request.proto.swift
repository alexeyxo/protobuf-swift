// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "Request.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct RequestRoot {
  public static let `default` = RequestRoot()
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(registry: extensionRegistry)
  }
  public func registerAllExtensions(registry: ExtensionRegistry) {
  }
}

final public class IGPRequest : GeneratedMessage {

  public static func == (lhs: IGPRequest, rhs: IGPRequest) -> Bool {
    if (lhs === rhs) {
      return true
    }
    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
    fieldCheck = fieldCheck && (lhs.hasIgpId == rhs.hasIgpId) && (!lhs.hasIgpId || lhs.igpId == rhs.igpId)
    fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    return fieldCheck
  }

  public fileprivate(set) var igpId:String = ""
  public fileprivate(set) var hasIgpId:Bool = false

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeTo(codedOutputStream: CodedOutputStream) throws {
    if hasIgpId {
      try codedOutputStream.writeString(fieldNumber: 1, value:igpId)
    }
    try unknownFields.writeTo(codedOutputStream: codedOutputStream)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasIgpId {
      serialize_size += igpId.computeStringSize(fieldNumber: 1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func getBuilder() -> IGPRequest.Builder {
    return IGPRequest.classBuilder() as! IGPRequest.Builder
  }
  public func getBuilder() -> IGPRequest.Builder {
    return classBuilder() as! IGPRequest.Builder
  }
  override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return IGPRequest.Builder()
  }
  override public func classBuilder() -> ProtocolBuffersMessageBuilder {
    return IGPRequest.Builder()
  }
  public func toBuilder() throws -> IGPRequest.Builder {
    return try IGPRequest.builderWithPrototype(prototype:self)
  }
  public class func builderWithPrototype(prototype:IGPRequest) throws -> IGPRequest.Builder {
    return try IGPRequest.Builder().mergeFrom(other:prototype)
  }
  override public func encode() throws -> Dictionary<String,Any> {
    guard isInitialized() else {
      throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
    }

    var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
    if hasIgpId {
      jsonMap["IGPId"] = igpId
    }
    return jsonMap
  }
  override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRequest {
    return try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
  }
  override class public func fromJSON(data:Data) throws -> IGPRequest {
    return try IGPRequest.Builder.fromJSONToBuilder(data:data).build()
  }
  override public func getDescription(indent:String) throws -> String {
    var output = ""
    if hasIgpId {
      output += "\(indent) igpId: \(igpId) \n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasIgpId {
             hashCode = (hashCode &* 31) &+ igpId.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "IGPRequest"
  }
  override public func className() -> String {
      return "IGPRequest"
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    fileprivate var builderResult:IGPRequest = IGPRequest()
    public func getMessage() -> IGPRequest {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasIgpId:Bool {
         get {
              return builderResult.hasIgpId
         }
    }
    public var igpId:String {
         get {
              return builderResult.igpId
         }
         set (value) {
             builderResult.hasIgpId = true
             builderResult.igpId = value
         }
    }
    @discardableResult
    public func setIgpId(_ value:String) -> IGPRequest.Builder {
      self.igpId = value
      return self
    }
    @discardableResult
    public func clearIgpId() -> IGPRequest.Builder{
         builderResult.hasIgpId = false
         builderResult.igpId = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    @discardableResult
    override public func clear() -> IGPRequest.Builder {
      builderResult = IGPRequest()
      return self
    }
    override public func clone() throws -> IGPRequest.Builder {
      return try IGPRequest.builderWithPrototype(prototype:builderResult)
    }
    override public func build() throws -> IGPRequest {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> IGPRequest {
      let returnMe:IGPRequest = builderResult
      return returnMe
    }
    @discardableResult
    public func mergeFrom(other:IGPRequest) throws -> IGPRequest.Builder {
      if other == IGPRequest() {
       return self
      }
      if other.hasIgpId {
           igpId = other.igpId
      }
      try merge(unknownField: other.unknownFields)
      return self
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRequest.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRequest.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10:
          igpId = try codedInputStream.readString()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
    class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRequest.Builder {
      let resultDecodedBuilder = IGPRequest.Builder()
      if let jsonValueIgpId = jsonMap["IGPId"] as? String {
        resultDecodedBuilder.igpId = jsonValueIgpId
      }
      return resultDecodedBuilder
    }
    override class public func fromJSONToBuilder(data:Data) throws -> IGPRequest.Builder {
      let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
      guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
      }
      return try IGPRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
    }
  }

}

extension IGPRequest: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRequest> {
    var mergedArray = Array<IGPRequest>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRequest? {
    return try IGPRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> IGPRequest {
    return try IGPRequest.Builder().mergeFrom(data: data, extensionRegistry:RequestRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRequest {
    return try IGPRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> IGPRequest {
    return try IGPRequest.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRequest {
    return try IGPRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRequest {
    return try IGPRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRequest {
    return try IGPRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
