// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers


internal struct ProtobufUnittest {}

internal func == (lhs: ProtobufUnittest.TestAllTypes.NestedMessage, rhs: ProtobufUnittest.TestAllTypes.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestAllTypes.OptionalGroup, rhs: ProtobufUnittest.TestAllTypes.OptionalGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestAllTypes.RepeatedGroup, rhs: ProtobufUnittest.TestAllTypes.RepeatedGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestAllTypes, rhs: ProtobufUnittest.TestAllTypes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalInt32 == rhs.hasOptionalInt32) && (!lhs.hasOptionalInt32 || lhs.optionalInt32 == rhs.optionalInt32)
  fieldCheck = fieldCheck && (lhs.hasOptionalInt64 == rhs.hasOptionalInt64) && (!lhs.hasOptionalInt64 || lhs.optionalInt64 == rhs.optionalInt64)
  fieldCheck = fieldCheck && (lhs.hasOptionalUint32 == rhs.hasOptionalUint32) && (!lhs.hasOptionalUint32 || lhs.optionalUint32 == rhs.optionalUint32)
  fieldCheck = fieldCheck && (lhs.hasOptionalUint64 == rhs.hasOptionalUint64) && (!lhs.hasOptionalUint64 || lhs.optionalUint64 == rhs.optionalUint64)
  fieldCheck = fieldCheck && (lhs.hasOptionalSint32 == rhs.hasOptionalSint32) && (!lhs.hasOptionalSint32 || lhs.optionalSint32 == rhs.optionalSint32)
  fieldCheck = fieldCheck && (lhs.hasOptionalSint64 == rhs.hasOptionalSint64) && (!lhs.hasOptionalSint64 || lhs.optionalSint64 == rhs.optionalSint64)
  fieldCheck = fieldCheck && (lhs.hasOptionalFixed32 == rhs.hasOptionalFixed32) && (!lhs.hasOptionalFixed32 || lhs.optionalFixed32 == rhs.optionalFixed32)
  fieldCheck = fieldCheck && (lhs.hasOptionalFixed64 == rhs.hasOptionalFixed64) && (!lhs.hasOptionalFixed64 || lhs.optionalFixed64 == rhs.optionalFixed64)
  fieldCheck = fieldCheck && (lhs.hasOptionalSfixed32 == rhs.hasOptionalSfixed32) && (!lhs.hasOptionalSfixed32 || lhs.optionalSfixed32 == rhs.optionalSfixed32)
  fieldCheck = fieldCheck && (lhs.hasOptionalSfixed64 == rhs.hasOptionalSfixed64) && (!lhs.hasOptionalSfixed64 || lhs.optionalSfixed64 == rhs.optionalSfixed64)
  fieldCheck = fieldCheck && (lhs.hasOptionalFloat == rhs.hasOptionalFloat) && (!lhs.hasOptionalFloat || lhs.optionalFloat == rhs.optionalFloat)
  fieldCheck = fieldCheck && (lhs.hasOptionalDouble == rhs.hasOptionalDouble) && (!lhs.hasOptionalDouble || lhs.optionalDouble == rhs.optionalDouble)
  fieldCheck = fieldCheck && (lhs.hasOptionalBool == rhs.hasOptionalBool) && (!lhs.hasOptionalBool || lhs.optionalBool == rhs.optionalBool)
  fieldCheck = fieldCheck && (lhs.hasOptionalString == rhs.hasOptionalString) && (!lhs.hasOptionalString || lhs.optionalString == rhs.optionalString)
  fieldCheck = fieldCheck && (lhs.hasOptionalBytes == rhs.hasOptionalBytes) && (!lhs.hasOptionalBytes || lhs.optionalBytes == rhs.optionalBytes)
  fieldCheck = fieldCheck && (lhs.hasOptionalGroup == rhs.hasOptionalGroup) && (!lhs.hasOptionalGroup || lhs.optionalGroup == rhs.optionalGroup)
  fieldCheck = fieldCheck && (lhs.hasOptionalNestedMessage == rhs.hasOptionalNestedMessage) && (!lhs.hasOptionalNestedMessage || lhs.optionalNestedMessage == rhs.optionalNestedMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalForeignMessage == rhs.hasOptionalForeignMessage) && (!lhs.hasOptionalForeignMessage || lhs.optionalForeignMessage == rhs.optionalForeignMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalImportMessage == rhs.hasOptionalImportMessage) && (!lhs.hasOptionalImportMessage || lhs.optionalImportMessage == rhs.optionalImportMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalNestedEnum == rhs.hasOptionalNestedEnum) && (!lhs.hasOptionalNestedEnum || lhs.optionalNestedEnum == rhs.optionalNestedEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalForeignEnum == rhs.hasOptionalForeignEnum) && (!lhs.hasOptionalForeignEnum || lhs.optionalForeignEnum == rhs.optionalForeignEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalImportEnum == rhs.hasOptionalImportEnum) && (!lhs.hasOptionalImportEnum || lhs.optionalImportEnum == rhs.optionalImportEnum)
  fieldCheck = fieldCheck && (lhs.hasOptionalStringPiece == rhs.hasOptionalStringPiece) && (!lhs.hasOptionalStringPiece || lhs.optionalStringPiece == rhs.optionalStringPiece)
  fieldCheck = fieldCheck && (lhs.hasOptionalCord == rhs.hasOptionalCord) && (!lhs.hasOptionalCord || lhs.optionalCord == rhs.optionalCord)
  fieldCheck = fieldCheck && (lhs.hasOptionalPublicImportMessage == rhs.hasOptionalPublicImportMessage) && (!lhs.hasOptionalPublicImportMessage || lhs.optionalPublicImportMessage == rhs.optionalPublicImportMessage)
  fieldCheck = fieldCheck && (lhs.hasOptionalLazyMessage == rhs.hasOptionalLazyMessage) && (!lhs.hasOptionalLazyMessage || lhs.optionalLazyMessage == rhs.optionalLazyMessage)
  fieldCheck = fieldCheck && (lhs.repeatedInt32 == rhs.repeatedInt32)
  fieldCheck = fieldCheck && (lhs.repeatedInt64 == rhs.repeatedInt64)
  fieldCheck = fieldCheck && (lhs.repeatedUint32 == rhs.repeatedUint32)
  fieldCheck = fieldCheck && (lhs.repeatedUint64 == rhs.repeatedUint64)
  fieldCheck = fieldCheck && (lhs.repeatedSint32 == rhs.repeatedSint32)
  fieldCheck = fieldCheck && (lhs.repeatedSint64 == rhs.repeatedSint64)
  fieldCheck = fieldCheck && (lhs.repeatedFixed32 == rhs.repeatedFixed32)
  fieldCheck = fieldCheck && (lhs.repeatedFixed64 == rhs.repeatedFixed64)
  fieldCheck = fieldCheck && (lhs.repeatedSfixed32 == rhs.repeatedSfixed32)
  fieldCheck = fieldCheck && (lhs.repeatedSfixed64 == rhs.repeatedSfixed64)
  fieldCheck = fieldCheck && (lhs.repeatedFloat == rhs.repeatedFloat)
  fieldCheck = fieldCheck && (lhs.repeatedDouble == rhs.repeatedDouble)
  fieldCheck = fieldCheck && (lhs.repeatedBool == rhs.repeatedBool)
  fieldCheck = fieldCheck && (lhs.repeatedString == rhs.repeatedString)
  fieldCheck = fieldCheck && (lhs.repeatedBytes == rhs.repeatedBytes)
  fieldCheck = fieldCheck && (lhs.repeatedGroup == rhs.repeatedGroup)
  fieldCheck = fieldCheck && (lhs.repeatedNestedMessage == rhs.repeatedNestedMessage)
  fieldCheck = fieldCheck && (lhs.repeatedForeignMessage == rhs.repeatedForeignMessage)
  fieldCheck = fieldCheck && (lhs.repeatedImportMessage == rhs.repeatedImportMessage)
  fieldCheck = fieldCheck && (lhs.repeatedNestedEnum == rhs.repeatedNestedEnum)
  fieldCheck = fieldCheck && (lhs.repeatedForeignEnum == rhs.repeatedForeignEnum)
  fieldCheck = fieldCheck && (lhs.repeatedImportEnum == rhs.repeatedImportEnum)
  fieldCheck = fieldCheck && (lhs.repeatedStringPiece == rhs.repeatedStringPiece)
  fieldCheck = fieldCheck && (lhs.repeatedCord == rhs.repeatedCord)
  fieldCheck = fieldCheck && (lhs.repeatedLazyMessage == rhs.repeatedLazyMessage)
  fieldCheck = fieldCheck && (lhs.hasDefaultInt32 == rhs.hasDefaultInt32) && (!lhs.hasDefaultInt32 || lhs.defaultInt32 == rhs.defaultInt32)
  fieldCheck = fieldCheck && (lhs.hasDefaultInt64 == rhs.hasDefaultInt64) && (!lhs.hasDefaultInt64 || lhs.defaultInt64 == rhs.defaultInt64)
  fieldCheck = fieldCheck && (lhs.hasDefaultUint32 == rhs.hasDefaultUint32) && (!lhs.hasDefaultUint32 || lhs.defaultUint32 == rhs.defaultUint32)
  fieldCheck = fieldCheck && (lhs.hasDefaultUint64 == rhs.hasDefaultUint64) && (!lhs.hasDefaultUint64 || lhs.defaultUint64 == rhs.defaultUint64)
  fieldCheck = fieldCheck && (lhs.hasDefaultSint32 == rhs.hasDefaultSint32) && (!lhs.hasDefaultSint32 || lhs.defaultSint32 == rhs.defaultSint32)
  fieldCheck = fieldCheck && (lhs.hasDefaultSint64 == rhs.hasDefaultSint64) && (!lhs.hasDefaultSint64 || lhs.defaultSint64 == rhs.defaultSint64)
  fieldCheck = fieldCheck && (lhs.hasDefaultFixed32 == rhs.hasDefaultFixed32) && (!lhs.hasDefaultFixed32 || lhs.defaultFixed32 == rhs.defaultFixed32)
  fieldCheck = fieldCheck && (lhs.hasDefaultFixed64 == rhs.hasDefaultFixed64) && (!lhs.hasDefaultFixed64 || lhs.defaultFixed64 == rhs.defaultFixed64)
  fieldCheck = fieldCheck && (lhs.hasDefaultSfixed32 == rhs.hasDefaultSfixed32) && (!lhs.hasDefaultSfixed32 || lhs.defaultSfixed32 == rhs.defaultSfixed32)
  fieldCheck = fieldCheck && (lhs.hasDefaultSfixed64 == rhs.hasDefaultSfixed64) && (!lhs.hasDefaultSfixed64 || lhs.defaultSfixed64 == rhs.defaultSfixed64)
  fieldCheck = fieldCheck && (lhs.hasDefaultFloat == rhs.hasDefaultFloat) && (!lhs.hasDefaultFloat || lhs.defaultFloat == rhs.defaultFloat)
  fieldCheck = fieldCheck && (lhs.hasDefaultDouble == rhs.hasDefaultDouble) && (!lhs.hasDefaultDouble || lhs.defaultDouble == rhs.defaultDouble)
  fieldCheck = fieldCheck && (lhs.hasDefaultBool == rhs.hasDefaultBool) && (!lhs.hasDefaultBool || lhs.defaultBool == rhs.defaultBool)
  fieldCheck = fieldCheck && (lhs.hasDefaultString == rhs.hasDefaultString) && (!lhs.hasDefaultString || lhs.defaultString == rhs.defaultString)
  fieldCheck = fieldCheck && (lhs.hasDefaultBytes == rhs.hasDefaultBytes) && (!lhs.hasDefaultBytes || lhs.defaultBytes == rhs.defaultBytes)
  fieldCheck = fieldCheck && (lhs.hasDefaultNestedEnum == rhs.hasDefaultNestedEnum) && (!lhs.hasDefaultNestedEnum || lhs.defaultNestedEnum == rhs.defaultNestedEnum)
  fieldCheck = fieldCheck && (lhs.hasDefaultForeignEnum == rhs.hasDefaultForeignEnum) && (!lhs.hasDefaultForeignEnum || lhs.defaultForeignEnum == rhs.defaultForeignEnum)
  fieldCheck = fieldCheck && (lhs.hasDefaultImportEnum == rhs.hasDefaultImportEnum) && (!lhs.hasDefaultImportEnum || lhs.defaultImportEnum == rhs.defaultImportEnum)
  fieldCheck = fieldCheck && (lhs.hasDefaultStringPiece == rhs.hasDefaultStringPiece) && (!lhs.hasDefaultStringPiece || lhs.defaultStringPiece == rhs.defaultStringPiece)
  fieldCheck = fieldCheck && (lhs.hasDefaultCord == rhs.hasDefaultCord) && (!lhs.hasDefaultCord || lhs.defaultCord == rhs.defaultCord)
  fieldCheck = fieldCheck && (lhs.hasOneofUint32 == rhs.hasOneofUint32) && (!lhs.hasOneofUint32 || lhs.oneofUint32 == rhs.oneofUint32)
  fieldCheck = fieldCheck && (lhs.hasOneofNestedMessage == rhs.hasOneofNestedMessage) && (!lhs.hasOneofNestedMessage || lhs.oneofNestedMessage == rhs.oneofNestedMessage)
  fieldCheck = fieldCheck && (lhs.hasOneofString == rhs.hasOneofString) && (!lhs.hasOneofString || lhs.oneofString == rhs.oneofString)
  fieldCheck = fieldCheck && (lhs.hasOneofBytes == rhs.hasOneofBytes) && (!lhs.hasOneofBytes || lhs.oneofBytes == rhs.oneofBytes)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.NestedTestAllTypes, rhs: ProtobufUnittest.NestedTestAllTypes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasChild == rhs.hasChild) && (!lhs.hasChild || lhs.child == rhs.child)
  fieldCheck = fieldCheck && (lhs.hasPayload == rhs.hasPayload) && (!lhs.hasPayload || lhs.payload == rhs.payload)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestDeprecatedFields, rhs: ProtobufUnittest.TestDeprecatedFields) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDeprecatedInt32 == rhs.hasDeprecatedInt32) && (!lhs.hasDeprecatedInt32 || lhs.deprecatedInt32 == rhs.deprecatedInt32)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.ForeignMessage, rhs: ProtobufUnittest.ForeignMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasC == rhs.hasC) && (!lhs.hasC || lhs.c == rhs.c)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestAllExtensions, rhs: ProtobufUnittest.TestAllExtensions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.OptionalGroup_extension, rhs: ProtobufUnittest.OptionalGroup_extension) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.RepeatedGroup_extension, rhs: ProtobufUnittest.RepeatedGroup_extension) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestNestedExtension, rhs: ProtobufUnittest.TestNestedExtension) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestRequired, rhs: ProtobufUnittest.TestRequired) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasDummy2 == rhs.hasDummy2) && (!lhs.hasDummy2 || lhs.dummy2 == rhs.dummy2)
  fieldCheck = fieldCheck && (lhs.hasB == rhs.hasB) && (!lhs.hasB || lhs.b == rhs.b)
  fieldCheck = fieldCheck && (lhs.hasDummy4 == rhs.hasDummy4) && (!lhs.hasDummy4 || lhs.dummy4 == rhs.dummy4)
  fieldCheck = fieldCheck && (lhs.hasDummy5 == rhs.hasDummy5) && (!lhs.hasDummy5 || lhs.dummy5 == rhs.dummy5)
  fieldCheck = fieldCheck && (lhs.hasDummy6 == rhs.hasDummy6) && (!lhs.hasDummy6 || lhs.dummy6 == rhs.dummy6)
  fieldCheck = fieldCheck && (lhs.hasDummy7 == rhs.hasDummy7) && (!lhs.hasDummy7 || lhs.dummy7 == rhs.dummy7)
  fieldCheck = fieldCheck && (lhs.hasDummy8 == rhs.hasDummy8) && (!lhs.hasDummy8 || lhs.dummy8 == rhs.dummy8)
  fieldCheck = fieldCheck && (lhs.hasDummy9 == rhs.hasDummy9) && (!lhs.hasDummy9 || lhs.dummy9 == rhs.dummy9)
  fieldCheck = fieldCheck && (lhs.hasDummy10 == rhs.hasDummy10) && (!lhs.hasDummy10 || lhs.dummy10 == rhs.dummy10)
  fieldCheck = fieldCheck && (lhs.hasDummy11 == rhs.hasDummy11) && (!lhs.hasDummy11 || lhs.dummy11 == rhs.dummy11)
  fieldCheck = fieldCheck && (lhs.hasDummy12 == rhs.hasDummy12) && (!lhs.hasDummy12 || lhs.dummy12 == rhs.dummy12)
  fieldCheck = fieldCheck && (lhs.hasDummy13 == rhs.hasDummy13) && (!lhs.hasDummy13 || lhs.dummy13 == rhs.dummy13)
  fieldCheck = fieldCheck && (lhs.hasDummy14 == rhs.hasDummy14) && (!lhs.hasDummy14 || lhs.dummy14 == rhs.dummy14)
  fieldCheck = fieldCheck && (lhs.hasDummy15 == rhs.hasDummy15) && (!lhs.hasDummy15 || lhs.dummy15 == rhs.dummy15)
  fieldCheck = fieldCheck && (lhs.hasDummy16 == rhs.hasDummy16) && (!lhs.hasDummy16 || lhs.dummy16 == rhs.dummy16)
  fieldCheck = fieldCheck && (lhs.hasDummy17 == rhs.hasDummy17) && (!lhs.hasDummy17 || lhs.dummy17 == rhs.dummy17)
  fieldCheck = fieldCheck && (lhs.hasDummy18 == rhs.hasDummy18) && (!lhs.hasDummy18 || lhs.dummy18 == rhs.dummy18)
  fieldCheck = fieldCheck && (lhs.hasDummy19 == rhs.hasDummy19) && (!lhs.hasDummy19 || lhs.dummy19 == rhs.dummy19)
  fieldCheck = fieldCheck && (lhs.hasDummy20 == rhs.hasDummy20) && (!lhs.hasDummy20 || lhs.dummy20 == rhs.dummy20)
  fieldCheck = fieldCheck && (lhs.hasDummy21 == rhs.hasDummy21) && (!lhs.hasDummy21 || lhs.dummy21 == rhs.dummy21)
  fieldCheck = fieldCheck && (lhs.hasDummy22 == rhs.hasDummy22) && (!lhs.hasDummy22 || lhs.dummy22 == rhs.dummy22)
  fieldCheck = fieldCheck && (lhs.hasDummy23 == rhs.hasDummy23) && (!lhs.hasDummy23 || lhs.dummy23 == rhs.dummy23)
  fieldCheck = fieldCheck && (lhs.hasDummy24 == rhs.hasDummy24) && (!lhs.hasDummy24 || lhs.dummy24 == rhs.dummy24)
  fieldCheck = fieldCheck && (lhs.hasDummy25 == rhs.hasDummy25) && (!lhs.hasDummy25 || lhs.dummy25 == rhs.dummy25)
  fieldCheck = fieldCheck && (lhs.hasDummy26 == rhs.hasDummy26) && (!lhs.hasDummy26 || lhs.dummy26 == rhs.dummy26)
  fieldCheck = fieldCheck && (lhs.hasDummy27 == rhs.hasDummy27) && (!lhs.hasDummy27 || lhs.dummy27 == rhs.dummy27)
  fieldCheck = fieldCheck && (lhs.hasDummy28 == rhs.hasDummy28) && (!lhs.hasDummy28 || lhs.dummy28 == rhs.dummy28)
  fieldCheck = fieldCheck && (lhs.hasDummy29 == rhs.hasDummy29) && (!lhs.hasDummy29 || lhs.dummy29 == rhs.dummy29)
  fieldCheck = fieldCheck && (lhs.hasDummy30 == rhs.hasDummy30) && (!lhs.hasDummy30 || lhs.dummy30 == rhs.dummy30)
  fieldCheck = fieldCheck && (lhs.hasDummy31 == rhs.hasDummy31) && (!lhs.hasDummy31 || lhs.dummy31 == rhs.dummy31)
  fieldCheck = fieldCheck && (lhs.hasDummy32 == rhs.hasDummy32) && (!lhs.hasDummy32 || lhs.dummy32 == rhs.dummy32)
  fieldCheck = fieldCheck && (lhs.hasC == rhs.hasC) && (!lhs.hasC || lhs.c == rhs.c)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestRequiredForeign, rhs: ProtobufUnittest.TestRequiredForeign) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalMessage == rhs.hasOptionalMessage) && (!lhs.hasOptionalMessage || lhs.optionalMessage == rhs.optionalMessage)
  fieldCheck = fieldCheck && (lhs.repeatedMessage == rhs.repeatedMessage)
  fieldCheck = fieldCheck && (lhs.hasDummy == rhs.hasDummy) && (!lhs.hasDummy || lhs.dummy == rhs.dummy)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestForeignNested, rhs: ProtobufUnittest.TestForeignNested) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasForeignNested == rhs.hasForeignNested) && (!lhs.hasForeignNested || lhs.foreignNested == rhs.foreignNested)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestEmptyMessage, rhs: ProtobufUnittest.TestEmptyMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestEmptyMessageWithExtensions, rhs: ProtobufUnittest.TestEmptyMessageWithExtensions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestMultipleExtensionRanges, rhs: ProtobufUnittest.TestMultipleExtensionRanges) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(42), endExclusive:Int32(43))
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(4143), endExclusive:Int32(4244))
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(65536), endExclusive:Int32(536870912))
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestReallyLargeTagNumber, rhs: ProtobufUnittest.TestReallyLargeTagNumber) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestRecursiveMessage, rhs: ProtobufUnittest.TestRecursiveMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasI == rhs.hasI) && (!lhs.hasI || lhs.i == rhs.i)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestMutualRecursionA, rhs: ProtobufUnittest.TestMutualRecursionA) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestMutualRecursionB, rhs: ProtobufUnittest.TestMutualRecursionB) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasOptionalInt32 == rhs.hasOptionalInt32) && (!lhs.hasOptionalInt32 || lhs.optionalInt32 == rhs.optionalInt32)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestDupFieldNumber.Foo, rhs: ProtobufUnittest.TestDupFieldNumber.Foo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestDupFieldNumber.Bar, rhs: ProtobufUnittest.TestDupFieldNumber.Bar) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestDupFieldNumber, rhs: ProtobufUnittest.TestDupFieldNumber) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasFoo == rhs.hasFoo) && (!lhs.hasFoo || lhs.foo == rhs.foo)
  fieldCheck = fieldCheck && (lhs.hasBar == rhs.hasBar) && (!lhs.hasBar || lhs.bar == rhs.bar)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestEagerMessage, rhs: ProtobufUnittest.TestEagerMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSubMessage == rhs.hasSubMessage) && (!lhs.hasSubMessage || lhs.subMessage == rhs.subMessage)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestLazyMessage, rhs: ProtobufUnittest.TestLazyMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSubMessage == rhs.hasSubMessage) && (!lhs.hasSubMessage || lhs.subMessage == rhs.subMessage)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestNestedMessageHasBits.NestedMessage, rhs: ProtobufUnittest.TestNestedMessageHasBits.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.nestedmessageRepeatedInt32 == rhs.nestedmessageRepeatedInt32)
  fieldCheck = fieldCheck && (lhs.nestedmessageRepeatedForeignmessage == rhs.nestedmessageRepeatedForeignmessage)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestNestedMessageHasBits, rhs: ProtobufUnittest.TestNestedMessageHasBits) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalNestedMessage == rhs.hasOptionalNestedMessage) && (!lhs.hasOptionalNestedMessage || lhs.optionalNestedMessage == rhs.optionalNestedMessage)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestCamelCaseFieldNames, rhs: ProtobufUnittest.TestCamelCaseFieldNames) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPrimitiveField == rhs.hasPrimitiveField) && (!lhs.hasPrimitiveField || lhs.primitiveField == rhs.primitiveField)
  fieldCheck = fieldCheck && (lhs.hasStringField == rhs.hasStringField) && (!lhs.hasStringField || lhs.stringField == rhs.stringField)
  fieldCheck = fieldCheck && (lhs.hasEnumField == rhs.hasEnumField) && (!lhs.hasEnumField || lhs.enumField == rhs.enumField)
  fieldCheck = fieldCheck && (lhs.hasMessageField == rhs.hasMessageField) && (!lhs.hasMessageField || lhs.messageField == rhs.messageField)
  fieldCheck = fieldCheck && (lhs.hasStringPieceField == rhs.hasStringPieceField) && (!lhs.hasStringPieceField || lhs.stringPieceField == rhs.stringPieceField)
  fieldCheck = fieldCheck && (lhs.hasCordField == rhs.hasCordField) && (!lhs.hasCordField || lhs.cordField == rhs.cordField)
  fieldCheck = fieldCheck && (lhs.repeatedPrimitiveField == rhs.repeatedPrimitiveField)
  fieldCheck = fieldCheck && (lhs.repeatedStringField == rhs.repeatedStringField)
  fieldCheck = fieldCheck && (lhs.repeatedEnumField == rhs.repeatedEnumField)
  fieldCheck = fieldCheck && (lhs.repeatedMessageField == rhs.repeatedMessageField)
  fieldCheck = fieldCheck && (lhs.repeatedStringPieceField == rhs.repeatedStringPieceField)
  fieldCheck = fieldCheck && (lhs.repeatedCordField == rhs.repeatedCordField)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestFieldOrderings, rhs: ProtobufUnittest.TestFieldOrderings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMyInt == rhs.hasMyInt) && (!lhs.hasMyInt || lhs.myInt == rhs.myInt)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(2), endExclusive:Int32(11))
  fieldCheck = fieldCheck && (lhs.hasMyString == rhs.hasMyString) && (!lhs.hasMyString || lhs.myString == rhs.myString)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(12), endExclusive:Int32(101))
  fieldCheck = fieldCheck && (lhs.hasMyFloat == rhs.hasMyFloat) && (!lhs.hasMyFloat || lhs.myFloat == rhs.myFloat)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestExtremeDefaultValues, rhs: ProtobufUnittest.TestExtremeDefaultValues) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEscapedBytes == rhs.hasEscapedBytes) && (!lhs.hasEscapedBytes || lhs.escapedBytes == rhs.escapedBytes)
  fieldCheck = fieldCheck && (lhs.hasLargeUint32 == rhs.hasLargeUint32) && (!lhs.hasLargeUint32 || lhs.largeUint32 == rhs.largeUint32)
  fieldCheck = fieldCheck && (lhs.hasLargeUint64 == rhs.hasLargeUint64) && (!lhs.hasLargeUint64 || lhs.largeUint64 == rhs.largeUint64)
  fieldCheck = fieldCheck && (lhs.hasSmallInt32 == rhs.hasSmallInt32) && (!lhs.hasSmallInt32 || lhs.smallInt32 == rhs.smallInt32)
  fieldCheck = fieldCheck && (lhs.hasSmallInt64 == rhs.hasSmallInt64) && (!lhs.hasSmallInt64 || lhs.smallInt64 == rhs.smallInt64)
  fieldCheck = fieldCheck && (lhs.hasUtf8String == rhs.hasUtf8String) && (!lhs.hasUtf8String || lhs.utf8String == rhs.utf8String)
  fieldCheck = fieldCheck && (lhs.hasZeroFloat == rhs.hasZeroFloat) && (!lhs.hasZeroFloat || lhs.zeroFloat == rhs.zeroFloat)
  fieldCheck = fieldCheck && (lhs.hasOneFloat == rhs.hasOneFloat) && (!lhs.hasOneFloat || lhs.oneFloat == rhs.oneFloat)
  fieldCheck = fieldCheck && (lhs.hasSmallFloat == rhs.hasSmallFloat) && (!lhs.hasSmallFloat || lhs.smallFloat == rhs.smallFloat)
  fieldCheck = fieldCheck && (lhs.hasNegativeOneFloat == rhs.hasNegativeOneFloat) && (!lhs.hasNegativeOneFloat || lhs.negativeOneFloat == rhs.negativeOneFloat)
  fieldCheck = fieldCheck && (lhs.hasNegativeFloat == rhs.hasNegativeFloat) && (!lhs.hasNegativeFloat || lhs.negativeFloat == rhs.negativeFloat)
  fieldCheck = fieldCheck && (lhs.hasLargeFloat == rhs.hasLargeFloat) && (!lhs.hasLargeFloat || lhs.largeFloat == rhs.largeFloat)
  fieldCheck = fieldCheck && (lhs.hasSmallNegativeFloat == rhs.hasSmallNegativeFloat) && (!lhs.hasSmallNegativeFloat || lhs.smallNegativeFloat == rhs.smallNegativeFloat)
  fieldCheck = fieldCheck && (lhs.hasInfDouble == rhs.hasInfDouble) && (!lhs.hasInfDouble || lhs.infDouble == rhs.infDouble)
  fieldCheck = fieldCheck && (lhs.hasNegInfDouble == rhs.hasNegInfDouble) && (!lhs.hasNegInfDouble || lhs.negInfDouble == rhs.negInfDouble)
  fieldCheck = fieldCheck && (lhs.hasNanDouble == rhs.hasNanDouble) && (!lhs.hasNanDouble || lhs.nanDouble == rhs.nanDouble)
  fieldCheck = fieldCheck && (lhs.hasInfFloat == rhs.hasInfFloat) && (!lhs.hasInfFloat || lhs.infFloat == rhs.infFloat)
  fieldCheck = fieldCheck && (lhs.hasNegInfFloat == rhs.hasNegInfFloat) && (!lhs.hasNegInfFloat || lhs.negInfFloat == rhs.negInfFloat)
  fieldCheck = fieldCheck && (lhs.hasNanFloat == rhs.hasNanFloat) && (!lhs.hasNanFloat || lhs.nanFloat == rhs.nanFloat)
  fieldCheck = fieldCheck && (lhs.hasCppTrigraph == rhs.hasCppTrigraph) && (!lhs.hasCppTrigraph || lhs.cppTrigraph == rhs.cppTrigraph)
  fieldCheck = fieldCheck && (lhs.hasReallySmallInt32 == rhs.hasReallySmallInt32) && (!lhs.hasReallySmallInt32 || lhs.reallySmallInt32 == rhs.reallySmallInt32)
  fieldCheck = fieldCheck && (lhs.hasReallySmallInt64 == rhs.hasReallySmallInt64) && (!lhs.hasReallySmallInt64 || lhs.reallySmallInt64 == rhs.reallySmallInt64)
  fieldCheck = fieldCheck && (lhs.hasStringWithZero == rhs.hasStringWithZero) && (!lhs.hasStringWithZero || lhs.stringWithZero == rhs.stringWithZero)
  fieldCheck = fieldCheck && (lhs.hasBytesWithZero == rhs.hasBytesWithZero) && (!lhs.hasBytesWithZero || lhs.bytesWithZero == rhs.bytesWithZero)
  fieldCheck = fieldCheck && (lhs.hasStringPieceWithZero == rhs.hasStringPieceWithZero) && (!lhs.hasStringPieceWithZero || lhs.stringPieceWithZero == rhs.stringPieceWithZero)
  fieldCheck = fieldCheck && (lhs.hasCordWithZero == rhs.hasCordWithZero) && (!lhs.hasCordWithZero || lhs.cordWithZero == rhs.cordWithZero)
  fieldCheck = fieldCheck && (lhs.hasReplacementString == rhs.hasReplacementString) && (!lhs.hasReplacementString || lhs.replacementString == rhs.replacementString)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.SparseEnumMessage, rhs: ProtobufUnittest.SparseEnumMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSparseEnum == rhs.hasSparseEnum) && (!lhs.hasSparseEnum || lhs.sparseEnum == rhs.sparseEnum)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.OneString, rhs: ProtobufUnittest.OneString) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.MoreString, rhs: ProtobufUnittest.MoreString) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.data == rhs.data)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.OneBytes, rhs: ProtobufUnittest.OneBytes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.MoreBytes, rhs: ProtobufUnittest.MoreBytes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.data == rhs.data)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.Int32Message, rhs: ProtobufUnittest.Int32Message) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.Uint32Message, rhs: ProtobufUnittest.Uint32Message) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.Int64Message, rhs: ProtobufUnittest.Int64Message) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.Uint64Message, rhs: ProtobufUnittest.Uint64Message) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.BoolMessage, rhs: ProtobufUnittest.BoolMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestOneof.FooGroup, rhs: ProtobufUnittest.TestOneof.FooGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasB == rhs.hasB) && (!lhs.hasB || lhs.b == rhs.b)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestOneof, rhs: ProtobufUnittest.TestOneof) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFooInt == rhs.hasFooInt) && (!lhs.hasFooInt || lhs.fooInt == rhs.fooInt)
  fieldCheck = fieldCheck && (lhs.hasFooString == rhs.hasFooString) && (!lhs.hasFooString || lhs.fooString == rhs.fooString)
  fieldCheck = fieldCheck && (lhs.hasFooMessage == rhs.hasFooMessage) && (!lhs.hasFooMessage || lhs.fooMessage == rhs.fooMessage)
  fieldCheck = fieldCheck && (lhs.hasFooGroup == rhs.hasFooGroup) && (!lhs.hasFooGroup || lhs.fooGroup == rhs.fooGroup)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup, rhs: ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasB == rhs.hasB) && (!lhs.hasB || lhs.b == rhs.b)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestOneofBackwardsCompatible, rhs: ProtobufUnittest.TestOneofBackwardsCompatible) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFooInt == rhs.hasFooInt) && (!lhs.hasFooInt || lhs.fooInt == rhs.fooInt)
  fieldCheck = fieldCheck && (lhs.hasFooString == rhs.hasFooString) && (!lhs.hasFooString || lhs.fooString == rhs.fooString)
  fieldCheck = fieldCheck && (lhs.hasFooMessage == rhs.hasFooMessage) && (!lhs.hasFooMessage || lhs.fooMessage == rhs.fooMessage)
  fieldCheck = fieldCheck && (lhs.hasFooGroup == rhs.hasFooGroup) && (!lhs.hasFooGroup || lhs.fooGroup == rhs.fooGroup)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestOneof2.FooGroup, rhs: ProtobufUnittest.TestOneof2.FooGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  fieldCheck = fieldCheck && (lhs.hasB == rhs.hasB) && (!lhs.hasB || lhs.b == rhs.b)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestOneof2.NestedMessage, rhs: ProtobufUnittest.TestOneof2.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasQuxInt == rhs.hasQuxInt) && (!lhs.hasQuxInt || lhs.quxInt == rhs.quxInt)
  fieldCheck = fieldCheck && (lhs.corgeInt == rhs.corgeInt)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestOneof2, rhs: ProtobufUnittest.TestOneof2) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFooInt == rhs.hasFooInt) && (!lhs.hasFooInt || lhs.fooInt == rhs.fooInt)
  fieldCheck = fieldCheck && (lhs.hasFooString == rhs.hasFooString) && (!lhs.hasFooString || lhs.fooString == rhs.fooString)
  fieldCheck = fieldCheck && (lhs.hasFooCord == rhs.hasFooCord) && (!lhs.hasFooCord || lhs.fooCord == rhs.fooCord)
  fieldCheck = fieldCheck && (lhs.hasFooStringPiece == rhs.hasFooStringPiece) && (!lhs.hasFooStringPiece || lhs.fooStringPiece == rhs.fooStringPiece)
  fieldCheck = fieldCheck && (lhs.hasFooBytes == rhs.hasFooBytes) && (!lhs.hasFooBytes || lhs.fooBytes == rhs.fooBytes)
  fieldCheck = fieldCheck && (lhs.hasFooEnum == rhs.hasFooEnum) && (!lhs.hasFooEnum || lhs.fooEnum == rhs.fooEnum)
  fieldCheck = fieldCheck && (lhs.hasFooMessage == rhs.hasFooMessage) && (!lhs.hasFooMessage || lhs.fooMessage == rhs.fooMessage)
  fieldCheck = fieldCheck && (lhs.hasFooGroup == rhs.hasFooGroup) && (!lhs.hasFooGroup || lhs.fooGroup == rhs.fooGroup)
  fieldCheck = fieldCheck && (lhs.hasFooLazyMessage == rhs.hasFooLazyMessage) && (!lhs.hasFooLazyMessage || lhs.fooLazyMessage == rhs.fooLazyMessage)
  fieldCheck = fieldCheck && (lhs.hasBarInt == rhs.hasBarInt) && (!lhs.hasBarInt || lhs.barInt == rhs.barInt)
  fieldCheck = fieldCheck && (lhs.hasBarString == rhs.hasBarString) && (!lhs.hasBarString || lhs.barString == rhs.barString)
  fieldCheck = fieldCheck && (lhs.hasBarCord == rhs.hasBarCord) && (!lhs.hasBarCord || lhs.barCord == rhs.barCord)
  fieldCheck = fieldCheck && (lhs.hasBarStringPiece == rhs.hasBarStringPiece) && (!lhs.hasBarStringPiece || lhs.barStringPiece == rhs.barStringPiece)
  fieldCheck = fieldCheck && (lhs.hasBarBytes == rhs.hasBarBytes) && (!lhs.hasBarBytes || lhs.barBytes == rhs.barBytes)
  fieldCheck = fieldCheck && (lhs.hasBarEnum == rhs.hasBarEnum) && (!lhs.hasBarEnum || lhs.barEnum == rhs.barEnum)
  fieldCheck = fieldCheck && (lhs.hasBazInt == rhs.hasBazInt) && (!lhs.hasBazInt || lhs.bazInt == rhs.bazInt)
  fieldCheck = fieldCheck && (lhs.hasBazString == rhs.hasBazString) && (!lhs.hasBazString || lhs.bazString == rhs.bazString)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestRequiredOneof.NestedMessage, rhs: ProtobufUnittest.TestRequiredOneof.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRequiredDouble == rhs.hasRequiredDouble) && (!lhs.hasRequiredDouble || lhs.requiredDouble == rhs.requiredDouble)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestRequiredOneof, rhs: ProtobufUnittest.TestRequiredOneof) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFooInt == rhs.hasFooInt) && (!lhs.hasFooInt || lhs.fooInt == rhs.fooInt)
  fieldCheck = fieldCheck && (lhs.hasFooString == rhs.hasFooString) && (!lhs.hasFooString || lhs.fooString == rhs.fooString)
  fieldCheck = fieldCheck && (lhs.hasFooMessage == rhs.hasFooMessage) && (!lhs.hasFooMessage || lhs.fooMessage == rhs.fooMessage)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestPackedTypes, rhs: ProtobufUnittest.TestPackedTypes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.packedInt32 == rhs.packedInt32)
  fieldCheck = fieldCheck && (lhs.packedInt64 == rhs.packedInt64)
  fieldCheck = fieldCheck && (lhs.packedUint32 == rhs.packedUint32)
  fieldCheck = fieldCheck && (lhs.packedUint64 == rhs.packedUint64)
  fieldCheck = fieldCheck && (lhs.packedSint32 == rhs.packedSint32)
  fieldCheck = fieldCheck && (lhs.packedSint64 == rhs.packedSint64)
  fieldCheck = fieldCheck && (lhs.packedFixed32 == rhs.packedFixed32)
  fieldCheck = fieldCheck && (lhs.packedFixed64 == rhs.packedFixed64)
  fieldCheck = fieldCheck && (lhs.packedSfixed32 == rhs.packedSfixed32)
  fieldCheck = fieldCheck && (lhs.packedSfixed64 == rhs.packedSfixed64)
  fieldCheck = fieldCheck && (lhs.packedFloat == rhs.packedFloat)
  fieldCheck = fieldCheck && (lhs.packedDouble == rhs.packedDouble)
  fieldCheck = fieldCheck && (lhs.packedBool == rhs.packedBool)
  fieldCheck = fieldCheck && (lhs.packedEnum == rhs.packedEnum)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestUnpackedTypes, rhs: ProtobufUnittest.TestUnpackedTypes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.unpackedInt32 == rhs.unpackedInt32)
  fieldCheck = fieldCheck && (lhs.unpackedInt64 == rhs.unpackedInt64)
  fieldCheck = fieldCheck && (lhs.unpackedUint32 == rhs.unpackedUint32)
  fieldCheck = fieldCheck && (lhs.unpackedUint64 == rhs.unpackedUint64)
  fieldCheck = fieldCheck && (lhs.unpackedSint32 == rhs.unpackedSint32)
  fieldCheck = fieldCheck && (lhs.unpackedSint64 == rhs.unpackedSint64)
  fieldCheck = fieldCheck && (lhs.unpackedFixed32 == rhs.unpackedFixed32)
  fieldCheck = fieldCheck && (lhs.unpackedFixed64 == rhs.unpackedFixed64)
  fieldCheck = fieldCheck && (lhs.unpackedSfixed32 == rhs.unpackedSfixed32)
  fieldCheck = fieldCheck && (lhs.unpackedSfixed64 == rhs.unpackedSfixed64)
  fieldCheck = fieldCheck && (lhs.unpackedFloat == rhs.unpackedFloat)
  fieldCheck = fieldCheck && (lhs.unpackedDouble == rhs.unpackedDouble)
  fieldCheck = fieldCheck && (lhs.unpackedBool == rhs.unpackedBool)
  fieldCheck = fieldCheck && (lhs.unpackedEnum == rhs.unpackedEnum)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestPackedExtensions, rhs: ProtobufUnittest.TestPackedExtensions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestUnpackedExtensions, rhs: ProtobufUnittest.TestUnpackedExtensions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestDynamicExtensions.DynamicMessageType, rhs: ProtobufUnittest.TestDynamicExtensions.DynamicMessageType) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDynamicField == rhs.hasDynamicField) && (!lhs.hasDynamicField || lhs.dynamicField == rhs.dynamicField)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestDynamicExtensions, rhs: ProtobufUnittest.TestDynamicExtensions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasScalarExtension == rhs.hasScalarExtension) && (!lhs.hasScalarExtension || lhs.scalarExtension == rhs.scalarExtension)
  fieldCheck = fieldCheck && (lhs.hasEnumExtension == rhs.hasEnumExtension) && (!lhs.hasEnumExtension || lhs.enumExtension == rhs.enumExtension)
  fieldCheck = fieldCheck && (lhs.hasDynamicEnumExtension == rhs.hasDynamicEnumExtension) && (!lhs.hasDynamicEnumExtension || lhs.dynamicEnumExtension == rhs.dynamicEnumExtension)
  fieldCheck = fieldCheck && (lhs.hasMessageExtension == rhs.hasMessageExtension) && (!lhs.hasMessageExtension || lhs.messageExtension == rhs.messageExtension)
  fieldCheck = fieldCheck && (lhs.hasDynamicMessageExtension == rhs.hasDynamicMessageExtension) && (!lhs.hasDynamicMessageExtension || lhs.dynamicMessageExtension == rhs.dynamicMessageExtension)
  fieldCheck = fieldCheck && (lhs.repeatedExtension == rhs.repeatedExtension)
  fieldCheck = fieldCheck && (lhs.packedExtension == rhs.packedExtension)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestRepeatedScalarDifferentTagSizes, rhs: ProtobufUnittest.TestRepeatedScalarDifferentTagSizes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.repeatedFixed32 == rhs.repeatedFixed32)
  fieldCheck = fieldCheck && (lhs.repeatedInt32 == rhs.repeatedInt32)
  fieldCheck = fieldCheck && (lhs.repeatedFixed64 == rhs.repeatedFixed64)
  fieldCheck = fieldCheck && (lhs.repeatedInt64 == rhs.repeatedInt64)
  fieldCheck = fieldCheck && (lhs.repeatedFloat == rhs.repeatedFloat)
  fieldCheck = fieldCheck && (lhs.repeatedUint64 == rhs.repeatedUint64)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator, rhs: ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.field1 == rhs.field1)
  fieldCheck = fieldCheck && (lhs.field2 == rhs.field2)
  fieldCheck = fieldCheck && (lhs.field3 == rhs.field3)
  fieldCheck = fieldCheck && (lhs.group1 == rhs.group1)
  fieldCheck = fieldCheck && (lhs.group2 == rhs.group2)
  fieldCheck = fieldCheck && (lhs.ext1 == rhs.ext1)
  fieldCheck = fieldCheck && (lhs.ext2 == rhs.ext2)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestParsingMerge.OptionalGroup, rhs: ProtobufUnittest.TestParsingMerge.OptionalGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalGroupAllTypes == rhs.hasOptionalGroupAllTypes) && (!lhs.hasOptionalGroupAllTypes || lhs.optionalGroupAllTypes == rhs.optionalGroupAllTypes)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestParsingMerge.RepeatedGroup, rhs: ProtobufUnittest.TestParsingMerge.RepeatedGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRepeatedGroupAllTypes == rhs.hasRepeatedGroupAllTypes) && (!lhs.hasRepeatedGroupAllTypes || lhs.repeatedGroupAllTypes == rhs.repeatedGroupAllTypes)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestParsingMerge, rhs: ProtobufUnittest.TestParsingMerge) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRequiredAllTypes == rhs.hasRequiredAllTypes) && (!lhs.hasRequiredAllTypes || lhs.requiredAllTypes == rhs.requiredAllTypes)
  fieldCheck = fieldCheck && (lhs.hasOptionalAllTypes == rhs.hasOptionalAllTypes) && (!lhs.hasOptionalAllTypes || lhs.optionalAllTypes == rhs.optionalAllTypes)
  fieldCheck = fieldCheck && (lhs.repeatedAllTypes == rhs.repeatedAllTypes)
  fieldCheck = fieldCheck && (lhs.hasOptionalGroup == rhs.hasOptionalGroup) && (!lhs.hasOptionalGroup || lhs.optionalGroup == rhs.optionalGroup)
  fieldCheck = fieldCheck && (lhs.repeatedGroup == rhs.repeatedGroup)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.TestCommentInjectionMessage, rhs: ProtobufUnittest.TestCommentInjectionMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.FooRequest, rhs: ProtobufUnittest.FooRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.FooResponse, rhs: ProtobufUnittest.FooResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.FooClientMessage, rhs: ProtobufUnittest.FooClientMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.FooServerMessage, rhs: ProtobufUnittest.FooServerMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.BarRequest, rhs: ProtobufUnittest.BarRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ProtobufUnittest.BarResponse, rhs: ProtobufUnittest.BarResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal var UnittestRootoptionalInt32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalInt32ExtensionStatic
   }
}
internal var UnittestRootoptionalInt64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalInt64ExtensionStatic
   }
}
internal var UnittestRootoptionalUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalUint32ExtensionStatic
   }
}
internal var UnittestRootoptionalUint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalUint64ExtensionStatic
   }
}
internal var UnittestRootoptionalSint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalSint32ExtensionStatic
   }
}
internal var UnittestRootoptionalSint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalSint64ExtensionStatic
   }
}
internal var UnittestRootoptionalFixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalFixed32ExtensionStatic
   }
}
internal var UnittestRootoptionalFixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalFixed64ExtensionStatic
   }
}
internal var UnittestRootoptionalSfixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalSfixed32ExtensionStatic
   }
}
internal var UnittestRootoptionalSfixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalSfixed64ExtensionStatic
   }
}
internal var UnittestRootoptionalFloatExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalFloatExtensionStatic
   }
}
internal var UnittestRootoptionalDoubleExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalDoubleExtensionStatic
   }
}
internal var UnittestRootoptionalBoolExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalBoolExtensionStatic
   }
}
internal var UnittestRootoptionalStringExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalStringExtensionStatic
   }
}
internal var UnittestRootoptionalBytesExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalBytesExtensionStatic
   }
}
internal var UnittestRootoptionalGroupExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalGroupExtensionStatic
   }
}
internal var UnittestRootoptionalNestedMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalNestedMessageExtensionStatic
   }
}
internal var UnittestRootoptionalForeignMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalForeignMessageExtensionStatic
   }
}
internal var UnittestRootoptionalImportMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalImportMessageExtensionStatic
   }
}
internal var UnittestRootoptionalNestedEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalNestedEnumExtensionStatic
   }
}
internal var UnittestRootoptionalForeignEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalForeignEnumExtensionStatic
   }
}
internal var UnittestRootoptionalImportEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalImportEnumExtensionStatic
   }
}
internal var UnittestRootoptionalStringPieceExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalStringPieceExtensionStatic
   }
}
internal var UnittestRootoptionalCordExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalCordExtensionStatic
   }
}
internal var UnittestRootoptionalPublicImportMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalPublicImportMessageExtensionStatic
   }
}
internal var UnittestRootoptionalLazyMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoptionalLazyMessageExtensionStatic
   }
}
internal var UnittestRootrepeatedInt32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedInt32ExtensionStatic
   }
}
internal var UnittestRootrepeatedInt64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedInt64ExtensionStatic
   }
}
internal var UnittestRootrepeatedUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedUint32ExtensionStatic
   }
}
internal var UnittestRootrepeatedUint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedUint64ExtensionStatic
   }
}
internal var UnittestRootrepeatedSint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedSint32ExtensionStatic
   }
}
internal var UnittestRootrepeatedSint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedSint64ExtensionStatic
   }
}
internal var UnittestRootrepeatedFixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedFixed32ExtensionStatic
   }
}
internal var UnittestRootrepeatedFixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedFixed64ExtensionStatic
   }
}
internal var UnittestRootrepeatedSfixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedSfixed32ExtensionStatic
   }
}
internal var UnittestRootrepeatedSfixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedSfixed64ExtensionStatic
   }
}
internal var UnittestRootrepeatedFloatExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedFloatExtensionStatic
   }
}
internal var UnittestRootrepeatedDoubleExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedDoubleExtensionStatic
   }
}
internal var UnittestRootrepeatedBoolExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedBoolExtensionStatic
   }
}
internal var UnittestRootrepeatedStringExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedStringExtensionStatic
   }
}
internal var UnittestRootrepeatedBytesExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedBytesExtensionStatic
   }
}
internal var UnittestRootrepeatedGroupExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedGroupExtensionStatic
   }
}
internal var UnittestRootrepeatedNestedMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedNestedMessageExtensionStatic
   }
}
internal var UnittestRootrepeatedForeignMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedForeignMessageExtensionStatic
   }
}
internal var UnittestRootrepeatedImportMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedImportMessageExtensionStatic
   }
}
internal var UnittestRootrepeatedNestedEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedNestedEnumExtensionStatic
   }
}
internal var UnittestRootrepeatedForeignEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedForeignEnumExtensionStatic
   }
}
internal var UnittestRootrepeatedImportEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedImportEnumExtensionStatic
   }
}
internal var UnittestRootrepeatedStringPieceExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedStringPieceExtensionStatic
   }
}
internal var UnittestRootrepeatedCordExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedCordExtensionStatic
   }
}
internal var UnittestRootrepeatedLazyMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootrepeatedLazyMessageExtensionStatic
   }
}
internal var UnittestRootdefaultInt32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultInt32ExtensionStatic
   }
}
internal var UnittestRootdefaultInt64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultInt64ExtensionStatic
   }
}
internal var UnittestRootdefaultUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultUint32ExtensionStatic
   }
}
internal var UnittestRootdefaultUint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultUint64ExtensionStatic
   }
}
internal var UnittestRootdefaultSint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultSint32ExtensionStatic
   }
}
internal var UnittestRootdefaultSint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultSint64ExtensionStatic
   }
}
internal var UnittestRootdefaultFixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultFixed32ExtensionStatic
   }
}
internal var UnittestRootdefaultFixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultFixed64ExtensionStatic
   }
}
internal var UnittestRootdefaultSfixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultSfixed32ExtensionStatic
   }
}
internal var UnittestRootdefaultSfixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultSfixed64ExtensionStatic
   }
}
internal var UnittestRootdefaultFloatExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultFloatExtensionStatic
   }
}
internal var UnittestRootdefaultDoubleExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultDoubleExtensionStatic
   }
}
internal var UnittestRootdefaultBoolExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultBoolExtensionStatic
   }
}
internal var UnittestRootdefaultStringExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultStringExtensionStatic
   }
}
internal var UnittestRootdefaultBytesExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultBytesExtensionStatic
   }
}
internal var UnittestRootdefaultNestedEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultNestedEnumExtensionStatic
   }
}
internal var UnittestRootdefaultForeignEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultForeignEnumExtensionStatic
   }
}
internal var UnittestRootdefaultImportEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultImportEnumExtensionStatic
   }
}
internal var UnittestRootdefaultStringPieceExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultStringPieceExtensionStatic
   }
}
internal var UnittestRootdefaultCordExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootdefaultCordExtensionStatic
   }
}
internal var UnittestRootoneofUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoneofUint32ExtensionStatic
   }
}
internal var UnittestRootoneofNestedMessageExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoneofNestedMessageExtensionStatic
   }
}
internal var UnittestRootoneofStringExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoneofStringExtensionStatic
   }
}
internal var UnittestRootoneofBytesExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootoneofBytesExtensionStatic
   }
}
internal var UnittestRootmyExtensionString:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootmyExtensionStringStatic
   }
}
internal var UnittestRootmyExtensionInt:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootmyExtensionIntStatic
   }
}
internal var UnittestRootpackedInt32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedInt32ExtensionStatic
   }
}
internal var UnittestRootpackedInt64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedInt64ExtensionStatic
   }
}
internal var UnittestRootpackedUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedUint32ExtensionStatic
   }
}
internal var UnittestRootpackedUint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedUint64ExtensionStatic
   }
}
internal var UnittestRootpackedSint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedSint32ExtensionStatic
   }
}
internal var UnittestRootpackedSint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedSint64ExtensionStatic
   }
}
internal var UnittestRootpackedFixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedFixed32ExtensionStatic
   }
}
internal var UnittestRootpackedFixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedFixed64ExtensionStatic
   }
}
internal var UnittestRootpackedSfixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedSfixed32ExtensionStatic
   }
}
internal var UnittestRootpackedSfixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedSfixed64ExtensionStatic
   }
}
internal var UnittestRootpackedFloatExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedFloatExtensionStatic
   }
}
internal var UnittestRootpackedDoubleExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedDoubleExtensionStatic
   }
}
internal var UnittestRootpackedBoolExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedBoolExtensionStatic
   }
}
internal var UnittestRootpackedEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootpackedEnumExtensionStatic
   }
}
internal var UnittestRootunpackedInt32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedInt32ExtensionStatic
   }
}
internal var UnittestRootunpackedInt64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedInt64ExtensionStatic
   }
}
internal var UnittestRootunpackedUint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedUint32ExtensionStatic
   }
}
internal var UnittestRootunpackedUint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedUint64ExtensionStatic
   }
}
internal var UnittestRootunpackedSint32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedSint32ExtensionStatic
   }
}
internal var UnittestRootunpackedSint64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedSint64ExtensionStatic
   }
}
internal var UnittestRootunpackedFixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedFixed32ExtensionStatic
   }
}
internal var UnittestRootunpackedFixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedFixed64ExtensionStatic
   }
}
internal var UnittestRootunpackedSfixed32Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedSfixed32ExtensionStatic
   }
}
internal var UnittestRootunpackedSfixed64Extension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedSfixed64ExtensionStatic
   }
}
internal var UnittestRootunpackedFloatExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedFloatExtensionStatic
   }
}
internal var UnittestRootunpackedDoubleExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedDoubleExtensionStatic
   }
}
internal var UnittestRootunpackedBoolExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedBoolExtensionStatic
   }
}
internal var UnittestRootunpackedEnumExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.UnittestRootunpackedEnumExtensionStatic
   }
}
internal var TestNestedExtensiontest:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestNestedExtensiontestStatic
   }
}
internal var TestNestedExtensionnestedStringExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestNestedExtensionnestedStringExtensionStatic
   }
}
internal var TestRequiredsingle:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestRequiredsingleStatic
   }
}
internal var TestRequiredmulti:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestRequiredmultiStatic
   }
}
internal var TestParsingMergeoptionalExt:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestParsingMergeoptionalExtStatic
   }
}
internal var TestParsingMergerepeatedExt:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestRoot.sharedInstance.TestParsingMergerepeatedExtStatic
   }
}
internal extension ProtobufUnittest {
  internal struct UnittestRoot {
    internal static var sharedInstance : UnittestRoot {
     struct Static {
         static let instance : UnittestRoot = UnittestRoot()
     }
     return Static.instance
    }
    var UnittestRootoptionalInt32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalInt64ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalUint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalSint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalSint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalFixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalFixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalSfixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalSfixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalFloatExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalDoubleExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalBoolExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalStringExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalBytesExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalGroupExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalNestedMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalForeignMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalImportMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalNestedEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalForeignEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalImportEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalStringPieceExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalCordExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalPublicImportMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootoptionalLazyMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedInt32ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedInt64ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedUint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedSint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedSint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedFixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedFixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedSfixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedSfixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedFloatExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedDoubleExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedBoolExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedStringExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedBytesExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedGroupExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedNestedMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedForeignMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedImportMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedNestedEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedForeignEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedImportEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedStringPieceExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedCordExtensionStatic:ConcreateExtensionField
    var UnittestRootrepeatedLazyMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultInt32ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultInt64ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultUint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultSint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultSint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultFixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultFixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultSfixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultSfixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultFloatExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultDoubleExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultBoolExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultStringExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultBytesExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultNestedEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultForeignEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultImportEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultStringPieceExtensionStatic:ConcreateExtensionField
    var UnittestRootdefaultCordExtensionStatic:ConcreateExtensionField
    var UnittestRootoneofUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootoneofNestedMessageExtensionStatic:ConcreateExtensionField
    var UnittestRootoneofStringExtensionStatic:ConcreateExtensionField
    var UnittestRootoneofBytesExtensionStatic:ConcreateExtensionField
    var UnittestRootmyExtensionStringStatic:ConcreateExtensionField
    var UnittestRootmyExtensionIntStatic:ConcreateExtensionField
    var UnittestRootpackedInt32ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedInt64ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedUint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedSint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedSint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedFixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedFixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedSfixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedSfixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedFloatExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedDoubleExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedBoolExtensionStatic:ConcreateExtensionField
    var UnittestRootpackedEnumExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedInt32ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedInt64ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedUint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedUint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedSint32ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedSint64ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedFixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedFixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedSfixed32ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedSfixed64ExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedFloatExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedDoubleExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedBoolExtensionStatic:ConcreateExtensionField
    var UnittestRootunpackedEnumExtensionStatic:ConcreateExtensionField
    var TestNestedExtensiontestStatic:ConcreateExtensionField
    var TestNestedExtensionnestedStringExtensionStatic:ConcreateExtensionField
    var TestRequiredsingleStatic:ConcreateExtensionField
    var TestRequiredmultiStatic:ConcreateExtensionField
    var TestParsingMergeoptionalExtStatic:ConcreateExtensionField
    var TestParsingMergerepeatedExtStatic:ConcreateExtensionField
    internal var extensionRegistry:ExtensionRegistry

    init() {
      UnittestRootoptionalInt32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 1, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalInt64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 2, defaultValue:Int64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 3, defaultValue:UInt32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalUint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 4, defaultValue:UInt64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalSint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 5, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalSint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 6, defaultValue:Int64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalFixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 7, defaultValue:UInt32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalFixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 8, defaultValue:UInt64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalSfixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 9, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalSfixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 10, defaultValue:Int64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalFloatExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 11, defaultValue:Float(0), messageOrGroupClass:Float.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalDoubleExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 12, defaultValue:Double(0), messageOrGroupClass:Double.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalBoolExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 13, defaultValue:false, messageOrGroupClass:Bool.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalStringExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 14, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalBytesExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBytes, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 15, defaultValue:NSData(), messageOrGroupClass:NSData.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalGroupExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeGroup, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 16, defaultValue:ProtobufUnittest.OptionalGroup_extension(), messageOrGroupClass:ProtobufUnittest.OptionalGroup_extension.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalNestedMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 18, defaultValue:ProtobufUnittest.TestAllTypes.NestedMessage(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.NestedMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalForeignMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 19, defaultValue:ProtobufUnittest.ForeignMessage(), messageOrGroupClass:ProtobufUnittest.ForeignMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalImportMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 20, defaultValue:ProtobufUnittestImport.ImportMessage(), messageOrGroupClass:ProtobufUnittestImport.ImportMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalNestedEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 21, defaultValue:ProtobufUnittest.TestAllTypes.NestedEnum.Foo.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalForeignEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 22, defaultValue:ProtobufUnittest.ForeignEnum.ForeignFoo.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalImportEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 23, defaultValue:ProtobufUnittestImport.ImportEnum.ImportFoo.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalStringPieceExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 24, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalCordExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 25, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalPublicImportMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 26, defaultValue:ProtobufUnittestImport.PublicImportMessage(), messageOrGroupClass:ProtobufUnittestImport.PublicImportMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoptionalLazyMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 27, defaultValue:ProtobufUnittest.TestAllTypes.NestedMessage(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.NestedMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedInt32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 31, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedInt64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 32, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 33, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedUint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 34, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedSint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 35, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedSint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 36, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedFixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 37, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedFixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 38, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedSfixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 39, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedSfixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 40, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedFloatExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 41, defaultValue:Array<Float>(), messageOrGroupClass:Float.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedDoubleExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 42, defaultValue:Array<Double>(), messageOrGroupClass:Double.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedBoolExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 43, defaultValue:Array<Bool>(), messageOrGroupClass:Bool.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedStringExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 44, defaultValue:Array<String>(), messageOrGroupClass:String.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedBytesExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBytes, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 45, defaultValue:Array<NSData>(), messageOrGroupClass:NSData.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedGroupExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeGroup, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 46, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.RepeatedGroup_extension.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedNestedMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 48, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.NestedMessage.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedForeignMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 49, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.ForeignMessage.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedImportMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 50, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittestImport.ImportMessage.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedNestedEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 51, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedForeignEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 52, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedImportEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 53, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedStringPieceExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 54, defaultValue:Array<String>(), messageOrGroupClass:String.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedCordExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 55, defaultValue:Array<String>(), messageOrGroupClass:String.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootrepeatedLazyMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 57, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.NestedMessage.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultInt32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 61, defaultValue:Int32(41), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultInt64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 62, defaultValue:Int64(42), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 63, defaultValue:UInt32(43), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultUint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 64, defaultValue:UInt64(44), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultSint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 65, defaultValue:Int32(-45), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultSint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 66, defaultValue:Int64(46), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultFixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 67, defaultValue:UInt32(47), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultFixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 68, defaultValue:UInt64(48), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultSfixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 69, defaultValue:Int32(49), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultSfixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 70, defaultValue:Int64(-50), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultFloatExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 71, defaultValue:Float(51.5), messageOrGroupClass:Float.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultDoubleExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 72, defaultValue:Double(52000), messageOrGroupClass:Double.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultBoolExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 73, defaultValue:true, messageOrGroupClass:Bool.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultStringExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 74, defaultValue:"hello", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultBytesExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBytes, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 75, defaultValue:NSData(bytes:([Byte]() + "world".utf8), length:5), messageOrGroupClass:NSData.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultNestedEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 81, defaultValue:ProtobufUnittest.TestAllTypes.NestedEnum.Bar.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultForeignEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 82, defaultValue:ProtobufUnittest.ForeignEnum.ForeignBar.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultImportEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 83, defaultValue:ProtobufUnittestImport.ImportEnum.ImportBar.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultStringPieceExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 84, defaultValue:"abc", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootdefaultCordExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 85, defaultValue:"123", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoneofUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 111, defaultValue:UInt32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoneofNestedMessageExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 112, defaultValue:ProtobufUnittest.TestAllTypes.NestedMessage(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.NestedMessage.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoneofStringExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 113, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootoneofBytesExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBytes, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 114, defaultValue:NSData(), messageOrGroupClass:NSData.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootmyExtensionStringStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestFieldOrderings.self, fieldNumber: 50, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootmyExtensionIntStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestFieldOrderings.self, fieldNumber: 5, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootpackedInt32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 90, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedInt64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 91, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 92, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedUint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 93, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedSint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 94, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedSint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 95, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedFixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 96, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedFixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 97, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedSfixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 98, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedSfixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 99, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedFloatExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 100, defaultValue:Array<Float>(), messageOrGroupClass:Float.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedDoubleExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 101, defaultValue:Array<Double>(), messageOrGroupClass:Double.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedBoolExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 102, defaultValue:Array<Bool>(), messageOrGroupClass:Bool.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootpackedEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestPackedExtensions.self, fieldNumber: 103, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
      UnittestRootunpackedInt32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 90, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedInt64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 91, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedUint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 92, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedUint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 93, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedSint32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 94, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedSint64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 95, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedFixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 96, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedFixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 97, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedSfixed32ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 98, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedSfixed64ExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 99, defaultValue:Array<Int64>(), messageOrGroupClass:Int64.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedFloatExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 100, defaultValue:Array<Float>(), messageOrGroupClass:Float.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedDoubleExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 101, defaultValue:Array<Double>(), messageOrGroupClass:Double.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedBoolExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 102, defaultValue:Array<Bool>(), messageOrGroupClass:Bool.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      UnittestRootunpackedEnumExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:ProtobufUnittest.TestUnpackedExtensions.self, fieldNumber: 103, defaultValue:Array<Int32>(), messageOrGroupClass:Int32.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      TestNestedExtensiontestStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 1002, defaultValue:"test", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      TestNestedExtensionnestedStringExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 1003, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      TestRequiredsingleStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 1000, defaultValue:ProtobufUnittest.TestRequired(), messageOrGroupClass:ProtobufUnittest.TestRequired.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      TestRequiredmultiStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestAllExtensions.self, fieldNumber: 1001, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.TestRequired.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      TestParsingMergeoptionalExtStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestParsingMerge.self, fieldNumber: 1000, defaultValue:ProtobufUnittest.TestAllTypes(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
      TestParsingMergerepeatedExtStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestParsingMerge.self, fieldNumber: 1001, defaultValue:Array<GeneratedMessage>(), messageOrGroupClass:ProtobufUnittest.TestAllTypes.self, isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      ProtobufUnittestImport.UnittestImportRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
      registry.addExtension(UnittestRootoptionalInt32ExtensionStatic)
      registry.addExtension(UnittestRootoptionalInt64ExtensionStatic)
      registry.addExtension(UnittestRootoptionalUint32ExtensionStatic)
      registry.addExtension(UnittestRootoptionalUint64ExtensionStatic)
      registry.addExtension(UnittestRootoptionalSint32ExtensionStatic)
      registry.addExtension(UnittestRootoptionalSint64ExtensionStatic)
      registry.addExtension(UnittestRootoptionalFixed32ExtensionStatic)
      registry.addExtension(UnittestRootoptionalFixed64ExtensionStatic)
      registry.addExtension(UnittestRootoptionalSfixed32ExtensionStatic)
      registry.addExtension(UnittestRootoptionalSfixed64ExtensionStatic)
      registry.addExtension(UnittestRootoptionalFloatExtensionStatic)
      registry.addExtension(UnittestRootoptionalDoubleExtensionStatic)
      registry.addExtension(UnittestRootoptionalBoolExtensionStatic)
      registry.addExtension(UnittestRootoptionalStringExtensionStatic)
      registry.addExtension(UnittestRootoptionalBytesExtensionStatic)
      registry.addExtension(UnittestRootoptionalGroupExtensionStatic)
      registry.addExtension(UnittestRootoptionalNestedMessageExtensionStatic)
      registry.addExtension(UnittestRootoptionalForeignMessageExtensionStatic)
      registry.addExtension(UnittestRootoptionalImportMessageExtensionStatic)
      registry.addExtension(UnittestRootoptionalNestedEnumExtensionStatic)
      registry.addExtension(UnittestRootoptionalForeignEnumExtensionStatic)
      registry.addExtension(UnittestRootoptionalImportEnumExtensionStatic)
      registry.addExtension(UnittestRootoptionalStringPieceExtensionStatic)
      registry.addExtension(UnittestRootoptionalCordExtensionStatic)
      registry.addExtension(UnittestRootoptionalPublicImportMessageExtensionStatic)
      registry.addExtension(UnittestRootoptionalLazyMessageExtensionStatic)
      registry.addExtension(UnittestRootrepeatedInt32ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedInt64ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedUint32ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedUint64ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedSint32ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedSint64ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedFixed32ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedFixed64ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedSfixed32ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedSfixed64ExtensionStatic)
      registry.addExtension(UnittestRootrepeatedFloatExtensionStatic)
      registry.addExtension(UnittestRootrepeatedDoubleExtensionStatic)
      registry.addExtension(UnittestRootrepeatedBoolExtensionStatic)
      registry.addExtension(UnittestRootrepeatedStringExtensionStatic)
      registry.addExtension(UnittestRootrepeatedBytesExtensionStatic)
      registry.addExtension(UnittestRootrepeatedGroupExtensionStatic)
      registry.addExtension(UnittestRootrepeatedNestedMessageExtensionStatic)
      registry.addExtension(UnittestRootrepeatedForeignMessageExtensionStatic)
      registry.addExtension(UnittestRootrepeatedImportMessageExtensionStatic)
      registry.addExtension(UnittestRootrepeatedNestedEnumExtensionStatic)
      registry.addExtension(UnittestRootrepeatedForeignEnumExtensionStatic)
      registry.addExtension(UnittestRootrepeatedImportEnumExtensionStatic)
      registry.addExtension(UnittestRootrepeatedStringPieceExtensionStatic)
      registry.addExtension(UnittestRootrepeatedCordExtensionStatic)
      registry.addExtension(UnittestRootrepeatedLazyMessageExtensionStatic)
      registry.addExtension(UnittestRootdefaultInt32ExtensionStatic)
      registry.addExtension(UnittestRootdefaultInt64ExtensionStatic)
      registry.addExtension(UnittestRootdefaultUint32ExtensionStatic)
      registry.addExtension(UnittestRootdefaultUint64ExtensionStatic)
      registry.addExtension(UnittestRootdefaultSint32ExtensionStatic)
      registry.addExtension(UnittestRootdefaultSint64ExtensionStatic)
      registry.addExtension(UnittestRootdefaultFixed32ExtensionStatic)
      registry.addExtension(UnittestRootdefaultFixed64ExtensionStatic)
      registry.addExtension(UnittestRootdefaultSfixed32ExtensionStatic)
      registry.addExtension(UnittestRootdefaultSfixed64ExtensionStatic)
      registry.addExtension(UnittestRootdefaultFloatExtensionStatic)
      registry.addExtension(UnittestRootdefaultDoubleExtensionStatic)
      registry.addExtension(UnittestRootdefaultBoolExtensionStatic)
      registry.addExtension(UnittestRootdefaultStringExtensionStatic)
      registry.addExtension(UnittestRootdefaultBytesExtensionStatic)
      registry.addExtension(UnittestRootdefaultNestedEnumExtensionStatic)
      registry.addExtension(UnittestRootdefaultForeignEnumExtensionStatic)
      registry.addExtension(UnittestRootdefaultImportEnumExtensionStatic)
      registry.addExtension(UnittestRootdefaultStringPieceExtensionStatic)
      registry.addExtension(UnittestRootdefaultCordExtensionStatic)
      registry.addExtension(UnittestRootoneofUint32ExtensionStatic)
      registry.addExtension(UnittestRootoneofNestedMessageExtensionStatic)
      registry.addExtension(UnittestRootoneofStringExtensionStatic)
      registry.addExtension(UnittestRootoneofBytesExtensionStatic)
      registry.addExtension(UnittestRootmyExtensionStringStatic)
      registry.addExtension(UnittestRootmyExtensionIntStatic)
      registry.addExtension(UnittestRootpackedInt32ExtensionStatic)
      registry.addExtension(UnittestRootpackedInt64ExtensionStatic)
      registry.addExtension(UnittestRootpackedUint32ExtensionStatic)
      registry.addExtension(UnittestRootpackedUint64ExtensionStatic)
      registry.addExtension(UnittestRootpackedSint32ExtensionStatic)
      registry.addExtension(UnittestRootpackedSint64ExtensionStatic)
      registry.addExtension(UnittestRootpackedFixed32ExtensionStatic)
      registry.addExtension(UnittestRootpackedFixed64ExtensionStatic)
      registry.addExtension(UnittestRootpackedSfixed32ExtensionStatic)
      registry.addExtension(UnittestRootpackedSfixed64ExtensionStatic)
      registry.addExtension(UnittestRootpackedFloatExtensionStatic)
      registry.addExtension(UnittestRootpackedDoubleExtensionStatic)
      registry.addExtension(UnittestRootpackedBoolExtensionStatic)
      registry.addExtension(UnittestRootpackedEnumExtensionStatic)
      registry.addExtension(UnittestRootunpackedInt32ExtensionStatic)
      registry.addExtension(UnittestRootunpackedInt64ExtensionStatic)
      registry.addExtension(UnittestRootunpackedUint32ExtensionStatic)
      registry.addExtension(UnittestRootunpackedUint64ExtensionStatic)
      registry.addExtension(UnittestRootunpackedSint32ExtensionStatic)
      registry.addExtension(UnittestRootunpackedSint64ExtensionStatic)
      registry.addExtension(UnittestRootunpackedFixed32ExtensionStatic)
      registry.addExtension(UnittestRootunpackedFixed64ExtensionStatic)
      registry.addExtension(UnittestRootunpackedSfixed32ExtensionStatic)
      registry.addExtension(UnittestRootunpackedSfixed64ExtensionStatic)
      registry.addExtension(UnittestRootunpackedFloatExtensionStatic)
      registry.addExtension(UnittestRootunpackedDoubleExtensionStatic)
      registry.addExtension(UnittestRootunpackedBoolExtensionStatic)
      registry.addExtension(UnittestRootunpackedEnumExtensionStatic)
      registry.addExtension(TestNestedExtensiontestStatic)
      registry.addExtension(TestNestedExtensionnestedStringExtensionStatic)
      registry.addExtension(TestRequiredsingleStatic)
      registry.addExtension(TestRequiredmultiStatic)
      registry.addExtension(TestParsingMergeoptionalExtStatic)
      registry.addExtension(TestParsingMergerepeatedExtStatic)
    }
    internal static func optionalInt32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalInt32ExtensionStatic
    }
    internal static func optionalInt64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalInt64ExtensionStatic
    }
    internal static func optionalUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalUint32ExtensionStatic
    }
    internal static func optionalUint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalUint64ExtensionStatic
    }
    internal static func optionalSint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalSint32ExtensionStatic
    }
    internal static func optionalSint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalSint64ExtensionStatic
    }
    internal static func optionalFixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalFixed32ExtensionStatic
    }
    internal static func optionalFixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalFixed64ExtensionStatic
    }
    internal static func optionalSfixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalSfixed32ExtensionStatic
    }
    internal static func optionalSfixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalSfixed64ExtensionStatic
    }
    internal static func optionalFloatExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalFloatExtensionStatic
    }
    internal static func optionalDoubleExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalDoubleExtensionStatic
    }
    internal static func optionalBoolExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalBoolExtensionStatic
    }
    internal static func optionalStringExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalStringExtensionStatic
    }
    internal static func optionalBytesExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalBytesExtensionStatic
    }
    internal static func optionalGroupExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalGroupExtensionStatic
    }
    internal static func optionalNestedMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalNestedMessageExtensionStatic
    }
    internal static func optionalForeignMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalForeignMessageExtensionStatic
    }
    internal static func optionalImportMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalImportMessageExtensionStatic
    }
    internal static func optionalNestedEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalNestedEnumExtensionStatic
    }
    internal static func optionalForeignEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalForeignEnumExtensionStatic
    }
    internal static func optionalImportEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalImportEnumExtensionStatic
    }
    internal static func optionalStringPieceExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalStringPieceExtensionStatic
    }
    internal static func optionalCordExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalCordExtensionStatic
    }
    internal static func optionalPublicImportMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalPublicImportMessageExtensionStatic
    }
    internal static func optionalLazyMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoptionalLazyMessageExtensionStatic
    }
    internal static func repeatedInt32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedInt32ExtensionStatic
    }
    internal static func repeatedInt64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedInt64ExtensionStatic
    }
    internal static func repeatedUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedUint32ExtensionStatic
    }
    internal static func repeatedUint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedUint64ExtensionStatic
    }
    internal static func repeatedSint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedSint32ExtensionStatic
    }
    internal static func repeatedSint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedSint64ExtensionStatic
    }
    internal static func repeatedFixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedFixed32ExtensionStatic
    }
    internal static func repeatedFixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedFixed64ExtensionStatic
    }
    internal static func repeatedSfixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedSfixed32ExtensionStatic
    }
    internal static func repeatedSfixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedSfixed64ExtensionStatic
    }
    internal static func repeatedFloatExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedFloatExtensionStatic
    }
    internal static func repeatedDoubleExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedDoubleExtensionStatic
    }
    internal static func repeatedBoolExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedBoolExtensionStatic
    }
    internal static func repeatedStringExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedStringExtensionStatic
    }
    internal static func repeatedBytesExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedBytesExtensionStatic
    }
    internal static func repeatedGroupExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedGroupExtensionStatic
    }
    internal static func repeatedNestedMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedNestedMessageExtensionStatic
    }
    internal static func repeatedForeignMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedForeignMessageExtensionStatic
    }
    internal static func repeatedImportMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedImportMessageExtensionStatic
    }
    internal static func repeatedNestedEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedNestedEnumExtensionStatic
    }
    internal static func repeatedForeignEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedForeignEnumExtensionStatic
    }
    internal static func repeatedImportEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedImportEnumExtensionStatic
    }
    internal static func repeatedStringPieceExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedStringPieceExtensionStatic
    }
    internal static func repeatedCordExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedCordExtensionStatic
    }
    internal static func repeatedLazyMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootrepeatedLazyMessageExtensionStatic
    }
    internal static func defaultInt32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultInt32ExtensionStatic
    }
    internal static func defaultInt64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultInt64ExtensionStatic
    }
    internal static func defaultUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultUint32ExtensionStatic
    }
    internal static func defaultUint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultUint64ExtensionStatic
    }
    internal static func defaultSint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultSint32ExtensionStatic
    }
    internal static func defaultSint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultSint64ExtensionStatic
    }
    internal static func defaultFixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultFixed32ExtensionStatic
    }
    internal static func defaultFixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultFixed64ExtensionStatic
    }
    internal static func defaultSfixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultSfixed32ExtensionStatic
    }
    internal static func defaultSfixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultSfixed64ExtensionStatic
    }
    internal static func defaultFloatExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultFloatExtensionStatic
    }
    internal static func defaultDoubleExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultDoubleExtensionStatic
    }
    internal static func defaultBoolExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultBoolExtensionStatic
    }
    internal static func defaultStringExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultStringExtensionStatic
    }
    internal static func defaultBytesExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultBytesExtensionStatic
    }
    internal static func defaultNestedEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultNestedEnumExtensionStatic
    }
    internal static func defaultForeignEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultForeignEnumExtensionStatic
    }
    internal static func defaultImportEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultImportEnumExtensionStatic
    }
    internal static func defaultStringPieceExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultStringPieceExtensionStatic
    }
    internal static func defaultCordExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootdefaultCordExtensionStatic
    }
    internal static func oneofUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoneofUint32ExtensionStatic
    }
    internal static func oneofNestedMessageExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoneofNestedMessageExtensionStatic
    }
    internal static func oneofStringExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoneofStringExtensionStatic
    }
    internal static func oneofBytesExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootoneofBytesExtensionStatic
    }
    internal static func myExtensionString() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootmyExtensionStringStatic
    }
    internal static func myExtensionInt() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootmyExtensionIntStatic
    }
    internal static func packedInt32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedInt32ExtensionStatic
    }
    internal static func packedInt64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedInt64ExtensionStatic
    }
    internal static func packedUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedUint32ExtensionStatic
    }
    internal static func packedUint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedUint64ExtensionStatic
    }
    internal static func packedSint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedSint32ExtensionStatic
    }
    internal static func packedSint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedSint64ExtensionStatic
    }
    internal static func packedFixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedFixed32ExtensionStatic
    }
    internal static func packedFixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedFixed64ExtensionStatic
    }
    internal static func packedSfixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedSfixed32ExtensionStatic
    }
    internal static func packedSfixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedSfixed64ExtensionStatic
    }
    internal static func packedFloatExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedFloatExtensionStatic
    }
    internal static func packedDoubleExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedDoubleExtensionStatic
    }
    internal static func packedBoolExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedBoolExtensionStatic
    }
    internal static func packedEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootpackedEnumExtensionStatic
    }
    internal static func unpackedInt32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedInt32ExtensionStatic
    }
    internal static func unpackedInt64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedInt64ExtensionStatic
    }
    internal static func unpackedUint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedUint32ExtensionStatic
    }
    internal static func unpackedUint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedUint64ExtensionStatic
    }
    internal static func unpackedSint32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedSint32ExtensionStatic
    }
    internal static func unpackedSint64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedSint64ExtensionStatic
    }
    internal static func unpackedFixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedFixed32ExtensionStatic
    }
    internal static func unpackedFixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedFixed64ExtensionStatic
    }
    internal static func unpackedSfixed32Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedSfixed32ExtensionStatic
    }
    internal static func unpackedSfixed64Extension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedSfixed64ExtensionStatic
    }
    internal static func unpackedFloatExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedFloatExtensionStatic
    }
    internal static func unpackedDoubleExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedDoubleExtensionStatic
    }
    internal static func unpackedBoolExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedBoolExtensionStatic
    }
    internal static func unpackedEnumExtension() -> ConcreateExtensionField {
         return UnittestRoot.sharedInstance.UnittestRootunpackedEnumExtensionStatic
    }
  }



  //Enum type declaration start 

  internal enum ForeignEnum:Int32 {
    case ForeignFoo = 4
    case ForeignBar = 5
    case ForeignBaz = 6

  }

  //Enum type declaration end 



  //Enum type declaration start 

  internal enum TestEnumWithDupValue:Int32 {
    case Foo1 = 1
    case Bar1 = 2
    case Baz = 3

  }

  //Enum type declaration end 



  //Enum type declaration start 

  internal enum TestSparseEnum:Int32 {
    case SparseA = 123
    case SparseB = 62374
    case SparseC = 12589234
    case SparseD = -15
    case SparseE = -53452
    case SparseF = 0
    case SparseG = 2

  }

  //Enum type declaration end 

  final internal class TestAllTypes : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasBb:Bool = false
        private(set) var bb:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasBb {
            output.writeInt32(1, value:bb)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasBb {
            serialize_size += bb.computeInt32Size(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return ProtobufUnittest.TestAllTypes.NestedMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return ProtobufUnittest.TestAllTypes.NestedMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return ProtobufUnittest.TestAllTypes.NestedMessage.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestAllTypes.NestedMessage {
          return ProtobufUnittest.TestAllTypes.NestedMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return ProtobufUnittest.TestAllTypes.NestedMessage.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes.NestedMessage {
          return ProtobufUnittest.TestAllTypes.NestedMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestAllTypes.NestedMessageBuilder {
          return ProtobufUnittest.TestAllTypes.NestedMessage.classBuilder() as ProtobufUnittest.TestAllTypes.NestedMessageBuilder
        }
        internal func builder() -> ProtobufUnittest.TestAllTypes.NestedMessageBuilder {
          return classBuilder() as ProtobufUnittest.TestAllTypes.NestedMessageBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.NestedMessageBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.NestedMessage.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestAllTypes.NestedMessageBuilder {
          return ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestAllTypes.NestedMessage) -> ProtobufUnittest.TestAllTypes.NestedMessageBuilder {
          return ProtobufUnittest.TestAllTypes.NestedMessage.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasBb {
            output += "\(indent) bb: \(bb) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasBb {
                   hashCode = (hashCode &* 31) &+ bb.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestAllTypes.NestedMessage"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestAllTypes.NestedMessage"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestAllTypes.NestedMessage.self
        }
        //Meta information declaration end

      }

      final internal class NestedMessageBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestAllTypes.NestedMessage

        required override internal init () {
           builderResult = ProtobufUnittest.TestAllTypes.NestedMessage()
           super.init()
        }
        var hasBb:Bool {
             get {
                  return builderResult.hasBb
             }
        }
        var bb:Int32 {
             get {
                  return builderResult.bb
             }
             set (value) {
                 builderResult.hasBb = true
                 builderResult.bb = value
             }
        }
        func setBb(value:Int32)-> ProtobufUnittest.TestAllTypes.NestedMessageBuilder {
          self.bb = value
          return self
        }
        internal func clearBb() -> ProtobufUnittest.TestAllTypes.NestedMessageBuilder{
             builderResult.hasBb = false
             builderResult.bb = Int32(0)
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestAllTypes.NestedMessageBuilder {
          builderResult = ProtobufUnittest.TestAllTypes.NestedMessage()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestAllTypes.NestedMessageBuilder {
          return ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestAllTypes.NestedMessage {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestAllTypes.NestedMessage {
          var returnMe:ProtobufUnittest.TestAllTypes.NestedMessage = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestAllTypes.NestedMessage) -> ProtobufUnittest.TestAllTypes.NestedMessageBuilder {
          if (other == ProtobufUnittest.TestAllTypes.NestedMessage()) {
           return self
          }
          if other.hasBb {
               bb = other.bb
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestAllTypes.NestedMessageBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes.NestedMessageBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 8 :
              bb = input.readInt32()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class OptionalGroup : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(17, value:a)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(17)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestAllTypes.OptionalGroup {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestAllTypes.OptionalGroupBuilder {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.classBuilder() as ProtobufUnittest.TestAllTypes.OptionalGroupBuilder
        }
        internal func builder() -> ProtobufUnittest.TestAllTypes.OptionalGroupBuilder {
          return classBuilder() as ProtobufUnittest.TestAllTypes.OptionalGroupBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.OptionalGroupBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestAllTypes.OptionalGroupBuilder {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestAllTypes.OptionalGroup) -> ProtobufUnittest.TestAllTypes.OptionalGroupBuilder {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestAllTypes.OptionalGroup"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestAllTypes.OptionalGroup"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestAllTypes.OptionalGroup.self
        }
        //Meta information declaration end

      }

      final internal class OptionalGroupBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestAllTypes.OptionalGroup

        required override internal init () {
           builderResult = ProtobufUnittest.TestAllTypes.OptionalGroup()
           super.init()
        }
        var hasA:Bool {
             get {
                  return builderResult.hasA
             }
        }
        var a:Int32 {
             get {
                  return builderResult.a
             }
             set (value) {
                 builderResult.hasA = true
                 builderResult.a = value
             }
        }
        func setA(value:Int32)-> ProtobufUnittest.TestAllTypes.OptionalGroupBuilder {
          self.a = value
          return self
        }
        internal func clearA() -> ProtobufUnittest.TestAllTypes.OptionalGroupBuilder{
             builderResult.hasA = false
             builderResult.a = Int32(0)
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestAllTypes.OptionalGroupBuilder {
          builderResult = ProtobufUnittest.TestAllTypes.OptionalGroup()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestAllTypes.OptionalGroupBuilder {
          return ProtobufUnittest.TestAllTypes.OptionalGroup.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestAllTypes.OptionalGroup {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestAllTypes.OptionalGroup {
          var returnMe:ProtobufUnittest.TestAllTypes.OptionalGroup = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestAllTypes.OptionalGroup) -> ProtobufUnittest.TestAllTypes.OptionalGroupBuilder {
          if (other == ProtobufUnittest.TestAllTypes.OptionalGroup()) {
           return self
          }
          if other.hasA {
               a = other.a
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestAllTypes.OptionalGroupBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes.OptionalGroupBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 136 :
              a = input.readInt32()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class RepeatedGroup : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(47, value:a)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(47)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.classBuilder() as ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder
        }
        internal func builder() -> ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder {
          return classBuilder() as ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestAllTypes.RepeatedGroup) -> ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestAllTypes.RepeatedGroup"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestAllTypes.RepeatedGroup"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestAllTypes.RepeatedGroup.self
        }
        //Meta information declaration end

      }

      final internal class RepeatedGroupBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestAllTypes.RepeatedGroup

        required override internal init () {
           builderResult = ProtobufUnittest.TestAllTypes.RepeatedGroup()
           super.init()
        }
        var hasA:Bool {
             get {
                  return builderResult.hasA
             }
        }
        var a:Int32 {
             get {
                  return builderResult.a
             }
             set (value) {
                 builderResult.hasA = true
                 builderResult.a = value
             }
        }
        func setA(value:Int32)-> ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder {
          self.a = value
          return self
        }
        internal func clearA() -> ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder{
             builderResult.hasA = false
             builderResult.a = Int32(0)
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder {
          builderResult = ProtobufUnittest.TestAllTypes.RepeatedGroup()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder {
          return ProtobufUnittest.TestAllTypes.RepeatedGroup.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestAllTypes.RepeatedGroup {
          var returnMe:ProtobufUnittest.TestAllTypes.RepeatedGroup = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestAllTypes.RepeatedGroup) -> ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder {
          if (other == ProtobufUnittest.TestAllTypes.RepeatedGroup()) {
           return self
          }
          if other.hasA {
               a = other.a
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes.RepeatedGroupBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 376 :
              a = input.readInt32()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



    //OneOf declaration start

    internal enum OneofField {
      case OneofFieldOneOfNotSet

      internal func checkOneOfIsSet() -> Bool {
           switch self {
           case .OneofFieldOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case OneofUint32(UInt32)

      internal static func getOneofUint32(value:OneofField) ->UInt32? {
           switch value {
           case .OneofUint32(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofNestedMessage(ProtobufUnittest.TestAllTypes.NestedMessage)

      internal static func getOneofNestedMessage(value:OneofField) ->ProtobufUnittest.TestAllTypes.NestedMessage? {
           switch value {
           case .OneofNestedMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofString(String)

      internal static func getOneofString(value:OneofField) ->String? {
           switch value {
           case .OneofString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofBytes(NSData)

      internal static func getOneofBytes(value:OneofField) ->NSData? {
           switch value {
           case .OneofBytes(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageOneofField:ProtobufUnittest.TestAllTypes.OneofField =  ProtobufUnittest.TestAllTypes.OneofField.OneofFieldOneOfNotSet


      //Enum type declaration start 

      internal enum NestedEnum:Int32 {
        case Foo = 1
        case Bar = 2
        case Baz = 3
        case Neg = -1

      }

      //Enum type declaration end 

    private(set) var hasOptionalInt32:Bool = false
    private(set) var optionalInt32:Int32 = Int32(0)

    private(set) var hasOptionalInt64:Bool = false
    private(set) var optionalInt64:Int64 = Int64(0)

    private(set) var hasOptionalUint32:Bool = false
    private(set) var optionalUint32:UInt32 = UInt32(0)

    private(set) var hasOptionalUint64:Bool = false
    private(set) var optionalUint64:UInt64 = UInt64(0)

    private(set) var hasOptionalSint32:Bool = false
    private(set) var optionalSint32:Int32 = Int32(0)

    private(set) var hasOptionalSint64:Bool = false
    private(set) var optionalSint64:Int64 = Int64(0)

    private(set) var hasOptionalFixed32:Bool = false
    private(set) var optionalFixed32:UInt32 = UInt32(0)

    private(set) var hasOptionalFixed64:Bool = false
    private(set) var optionalFixed64:UInt64 = UInt64(0)

    private(set) var hasOptionalSfixed32:Bool = false
    private(set) var optionalSfixed32:Int32 = Int32(0)

    private(set) var hasOptionalSfixed64:Bool = false
    private(set) var optionalSfixed64:Int64 = Int64(0)

    private(set) var hasOptionalFloat:Bool = false
    private(set) var optionalFloat:Float = Float(0)

    private(set) var hasOptionalDouble:Bool = false
    private(set) var optionalDouble:Double = Double(0)

    private(set) var hasOptionalBool:Bool = false
    private(set) var optionalBool:Bool = false

    private(set) var hasOptionalString:Bool = false
    private(set) var optionalString:String = ""

    private(set) var hasOptionalBytes:Bool = false
    private(set) var optionalBytes:NSData = NSData()

    private(set) var hasOptionalGroup:Bool = false
    private(set) var optionalGroup:ProtobufUnittest.TestAllTypes.OptionalGroup = ProtobufUnittest.TestAllTypes.OptionalGroup()
    private(set) var hasOptionalNestedMessage:Bool = false
    private(set) var optionalNestedMessage:ProtobufUnittest.TestAllTypes.NestedMessage = ProtobufUnittest.TestAllTypes.NestedMessage()
    private(set) var hasOptionalForeignMessage:Bool = false
    private(set) var optionalForeignMessage:ProtobufUnittest.ForeignMessage = ProtobufUnittest.ForeignMessage()
    private(set) var hasOptionalImportMessage:Bool = false
    private(set) var optionalImportMessage:ProtobufUnittestImport.ImportMessage = ProtobufUnittestImport.ImportMessage()
    private(set) var optionalNestedEnum:ProtobufUnittest.TestAllTypes.NestedEnum = ProtobufUnittest.TestAllTypes.NestedEnum.Foo
    private(set) var hasOptionalNestedEnum:Bool = false
    private(set) var optionalForeignEnum:ProtobufUnittest.ForeignEnum = ProtobufUnittest.ForeignEnum.ForeignFoo
    private(set) var hasOptionalForeignEnum:Bool = false
    private(set) var optionalImportEnum:ProtobufUnittestImport.ImportEnum = ProtobufUnittestImport.ImportEnum.ImportFoo
    private(set) var hasOptionalImportEnum:Bool = false
    private(set) var hasOptionalStringPiece:Bool = false
    private(set) var optionalStringPiece:String = ""

    private(set) var hasOptionalCord:Bool = false
    private(set) var optionalCord:String = ""

    private(set) var hasOptionalPublicImportMessage:Bool = false
    private(set) var optionalPublicImportMessage:ProtobufUnittestImport.PublicImportMessage = ProtobufUnittestImport.PublicImportMessage()
    private(set) var hasOptionalLazyMessage:Bool = false
    private(set) var optionalLazyMessage:ProtobufUnittest.TestAllTypes.NestedMessage = ProtobufUnittest.TestAllTypes.NestedMessage()
    private(set) var hasDefaultInt32:Bool = false
    private(set) var defaultInt32:Int32 = Int32(41)

    private(set) var hasDefaultInt64:Bool = false
    private(set) var defaultInt64:Int64 = Int64(42)

    private(set) var hasDefaultUint32:Bool = false
    private(set) var defaultUint32:UInt32 = UInt32(43)

    private(set) var hasDefaultUint64:Bool = false
    private(set) var defaultUint64:UInt64 = UInt64(44)

    private(set) var hasDefaultSint32:Bool = false
    private(set) var defaultSint32:Int32 = Int32(-45)

    private(set) var hasDefaultSint64:Bool = false
    private(set) var defaultSint64:Int64 = Int64(46)

    private(set) var hasDefaultFixed32:Bool = false
    private(set) var defaultFixed32:UInt32 = UInt32(47)

    private(set) var hasDefaultFixed64:Bool = false
    private(set) var defaultFixed64:UInt64 = UInt64(48)

    private(set) var hasDefaultSfixed32:Bool = false
    private(set) var defaultSfixed32:Int32 = Int32(49)

    private(set) var hasDefaultSfixed64:Bool = false
    private(set) var defaultSfixed64:Int64 = Int64(-50)

    private(set) var hasDefaultFloat:Bool = false
    private(set) var defaultFloat:Float = Float(51.5)

    private(set) var hasDefaultDouble:Bool = false
    private(set) var defaultDouble:Double = Double(52000)

    private(set) var hasDefaultBool:Bool = false
    private(set) var defaultBool:Bool = true

    private(set) var hasDefaultString:Bool = false
    private(set) var defaultString:String = "hello"

    private(set) var hasDefaultBytes:Bool = false
    private(set) var defaultBytes:NSData = NSData(bytes:([Byte]() + "world".utf8), length:5)

    private(set) var defaultNestedEnum:ProtobufUnittest.TestAllTypes.NestedEnum = ProtobufUnittest.TestAllTypes.NestedEnum.Bar
    private(set) var hasDefaultNestedEnum:Bool = false
    private(set) var defaultForeignEnum:ProtobufUnittest.ForeignEnum = ProtobufUnittest.ForeignEnum.ForeignBar
    private(set) var hasDefaultForeignEnum:Bool = false
    private(set) var defaultImportEnum:ProtobufUnittestImport.ImportEnum = ProtobufUnittestImport.ImportEnum.ImportBar
    private(set) var hasDefaultImportEnum:Bool = false
    private(set) var hasDefaultStringPiece:Bool = false
    private(set) var defaultStringPiece:String = "abc"

    private(set) var hasDefaultCord:Bool = false
    private(set) var defaultCord:String = "123"

    private(set) var hasOneofUint32:Bool {
          get {
               if ProtobufUnittest.TestAllTypes.OneofField.getOneofUint32(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofUint32:UInt32!{
         get {
              return ProtobufUnittest.TestAllTypes.OneofField.getOneofUint32(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = ProtobufUnittest.TestAllTypes.OneofField.OneofUint32(newvalue)
         }
    }
    private(set) var hasOneofNestedMessage:Bool {
          get {
               if ProtobufUnittest.TestAllTypes.OneofField.getOneofNestedMessage(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofNestedMessage:ProtobufUnittest.TestAllTypes.NestedMessage!{
         get {
              return ProtobufUnittest.TestAllTypes.OneofField.getOneofNestedMessage(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = ProtobufUnittest.TestAllTypes.OneofField.OneofNestedMessage(newvalue)
         }
    }
    private(set) var hasOneofString:Bool {
          get {
               if ProtobufUnittest.TestAllTypes.OneofField.getOneofString(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofString:String!{
         get {
              return ProtobufUnittest.TestAllTypes.OneofField.getOneofString(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = ProtobufUnittest.TestAllTypes.OneofField.OneofString(newvalue)
         }
    }
    private(set) var hasOneofBytes:Bool {
          get {
               if ProtobufUnittest.TestAllTypes.OneofField.getOneofBytes(storageOneofField) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofBytes:NSData!{
         get {
              return ProtobufUnittest.TestAllTypes.OneofField.getOneofBytes(storageOneofField)
         }
         set (newvalue) {
              storageOneofField = ProtobufUnittest.TestAllTypes.OneofField.OneofBytes(newvalue)
         }
    }
    private(set) var repeatedInt32:Array<Int32> = Array<Int32>()
    private(set) var repeatedInt64:Array<Int64> = Array<Int64>()
    private(set) var repeatedUint32:Array<UInt32> = Array<UInt32>()
    private(set) var repeatedUint64:Array<UInt64> = Array<UInt64>()
    private(set) var repeatedSint32:Array<Int32> = Array<Int32>()
    private(set) var repeatedSint64:Array<Int64> = Array<Int64>()
    private(set) var repeatedFixed32:Array<UInt32> = Array<UInt32>()
    private(set) var repeatedFixed64:Array<UInt64> = Array<UInt64>()
    private(set) var repeatedSfixed32:Array<Int32> = Array<Int32>()
    private(set) var repeatedSfixed64:Array<Int64> = Array<Int64>()
    private(set) var repeatedFloat:Array<Float> = Array<Float>()
    private(set) var repeatedDouble:Array<Double> = Array<Double>()
    private(set) var repeatedBool:Array<Bool> = Array<Bool>()
    private(set) var repeatedString:Array<String> = Array<String>()
    private(set) var repeatedBytes:Array<NSData> = Array<NSData>()
    private(set) var repeatedGroup:Array<ProtobufUnittest.TestAllTypes.RepeatedGroup>  = Array<ProtobufUnittest.TestAllTypes.RepeatedGroup>()
    private(set) var repeatedNestedMessage:Array<ProtobufUnittest.TestAllTypes.NestedMessage>  = Array<ProtobufUnittest.TestAllTypes.NestedMessage>()
    private(set) var repeatedForeignMessage:Array<ProtobufUnittest.ForeignMessage>  = Array<ProtobufUnittest.ForeignMessage>()
    private(set) var repeatedImportMessage:Array<ProtobufUnittestImport.ImportMessage>  = Array<ProtobufUnittestImport.ImportMessage>()
    private var repeatedNestedEnumMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedNestedEnum:Array<ProtobufUnittest.TestAllTypes.NestedEnum> = Array<ProtobufUnittest.TestAllTypes.NestedEnum>()
    private var repeatedForeignEnumMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedForeignEnum:Array<ProtobufUnittest.ForeignEnum> = Array<ProtobufUnittest.ForeignEnum>()
    private var repeatedImportEnumMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedImportEnum:Array<ProtobufUnittestImport.ImportEnum> = Array<ProtobufUnittestImport.ImportEnum>()
    private(set) var repeatedStringPiece:Array<String> = Array<String>()
    private(set) var repeatedCord:Array<String> = Array<String>()
    private(set) var repeatedLazyMessage:Array<ProtobufUnittest.TestAllTypes.NestedMessage>  = Array<ProtobufUnittest.TestAllTypes.NestedMessage>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasOptionalInt32 {
        output.writeInt32(1, value:optionalInt32)
      }
      if hasOptionalInt64 {
        output.writeInt64(2, value:optionalInt64)
      }
      if hasOptionalUint32 {
        output.writeUInt32(3, value:optionalUint32)
      }
      if hasOptionalUint64 {
        output.writeUInt64(4, value:optionalUint64)
      }
      if hasOptionalSint32 {
        output.writeSInt32(5, value:optionalSint32)
      }
      if hasOptionalSint64 {
        output.writeSInt64(6, value:optionalSint64)
      }
      if hasOptionalFixed32 {
        output.writeFixed32(7, value:optionalFixed32)
      }
      if hasOptionalFixed64 {
        output.writeFixed64(8, value:optionalFixed64)
      }
      if hasOptionalSfixed32 {
        output.writeSFixed32(9, value:optionalSfixed32)
      }
      if hasOptionalSfixed64 {
        output.writeSFixed64(10, value:optionalSfixed64)
      }
      if hasOptionalFloat {
        output.writeFloat(11, value:optionalFloat)
      }
      if hasOptionalDouble {
        output.writeDouble(12, value:optionalDouble)
      }
      if hasOptionalBool {
        output.writeBool(13, value:optionalBool)
      }
      if hasOptionalString {
        output.writeString(14, value:optionalString)
      }
      if hasOptionalBytes {
        output.writeData(15, value:optionalBytes)
      }
      if hasOptionalGroup {
        output.writeGroup(16, value:optionalGroup)
      }
      if hasOptionalNestedMessage {
        output.writeMessage(18, value:optionalNestedMessage)
      }
      if hasOptionalForeignMessage {
        output.writeMessage(19, value:optionalForeignMessage)
      }
      if hasOptionalImportMessage {
        output.writeMessage(20, value:optionalImportMessage)
      }
      if hasOptionalNestedEnum {
        output.writeEnum(21, value:optionalNestedEnum.rawValue)
      }
      if hasOptionalForeignEnum {
        output.writeEnum(22, value:optionalForeignEnum.rawValue)
      }
      if hasOptionalImportEnum {
        output.writeEnum(23, value:optionalImportEnum.rawValue)
      }
      if hasOptionalStringPiece {
        output.writeString(24, value:optionalStringPiece)
      }
      if hasOptionalCord {
        output.writeString(25, value:optionalCord)
      }
      if hasOptionalPublicImportMessage {
        output.writeMessage(26, value:optionalPublicImportMessage)
      }
      if hasOptionalLazyMessage {
        output.writeMessage(27, value:optionalLazyMessage)
      }
      if !repeatedInt32.isEmpty {
        for oneValuerepeatedInt32 in repeatedInt32 {
          output.writeInt32(31, value:oneValuerepeatedInt32)
        }
      }
      if !repeatedInt64.isEmpty {
        for oneValuerepeatedInt64 in repeatedInt64 {
          output.writeInt64(32, value:oneValuerepeatedInt64)
        }
      }
      if !repeatedUint32.isEmpty {
        for oneValuerepeatedUint32 in repeatedUint32 {
          output.writeUInt32(33, value:oneValuerepeatedUint32)
        }
      }
      if !repeatedUint64.isEmpty {
        for oneValuerepeatedUint64 in repeatedUint64 {
          output.writeUInt64(34, value:oneValuerepeatedUint64)
        }
      }
      if !repeatedSint32.isEmpty {
        for oneValuerepeatedSint32 in repeatedSint32 {
          output.writeSInt32(35, value:oneValuerepeatedSint32)
        }
      }
      if !repeatedSint64.isEmpty {
        for oneValuerepeatedSint64 in repeatedSint64 {
          output.writeSInt64(36, value:oneValuerepeatedSint64)
        }
      }
      if !repeatedFixed32.isEmpty {
        for oneValuerepeatedFixed32 in repeatedFixed32 {
          output.writeFixed32(37, value:oneValuerepeatedFixed32)
        }
      }
      if !repeatedFixed64.isEmpty {
        for oneValuerepeatedFixed64 in repeatedFixed64 {
          output.writeFixed64(38, value:oneValuerepeatedFixed64)
        }
      }
      if !repeatedSfixed32.isEmpty {
        for oneValuerepeatedSfixed32 in repeatedSfixed32 {
          output.writeSFixed32(39, value:oneValuerepeatedSfixed32)
        }
      }
      if !repeatedSfixed64.isEmpty {
        for oneValuerepeatedSfixed64 in repeatedSfixed64 {
          output.writeSFixed64(40, value:oneValuerepeatedSfixed64)
        }
      }
      if !repeatedFloat.isEmpty {
        for oneValuerepeatedFloat in repeatedFloat {
          output.writeFloat(41, value:oneValuerepeatedFloat)
        }
      }
      if !repeatedDouble.isEmpty {
        for oneValuerepeatedDouble in repeatedDouble {
          output.writeDouble(42, value:oneValuerepeatedDouble)
        }
      }
      if !repeatedBool.isEmpty {
        for oneValuerepeatedBool in repeatedBool {
          output.writeBool(43, value:oneValuerepeatedBool)
        }
      }
      if !repeatedString.isEmpty {
        for oneValuerepeatedString in repeatedString {
          output.writeString(44, value:oneValuerepeatedString)
        }
      }
      if !repeatedBytes.isEmpty {
        for oneValuerepeatedBytes in repeatedBytes {
          output.writeData(45, value:oneValuerepeatedBytes)
        }
      }
      for oneElementrepeatedGroup in repeatedGroup {
          output.writeGroup(46, value:oneElementrepeatedGroup)
      }
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          output.writeMessage(48, value:oneElementrepeatedNestedMessage)
      }
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          output.writeMessage(49, value:oneElementrepeatedForeignMessage)
      }
      for oneElementrepeatedImportMessage in repeatedImportMessage {
          output.writeMessage(50, value:oneElementrepeatedImportMessage)
      }
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          output.writeEnum(51, value:oneValueOfrepeatedNestedEnum.rawValue)
      }
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          output.writeEnum(52, value:oneValueOfrepeatedForeignEnum.rawValue)
      }
      for oneValueOfrepeatedImportEnum in repeatedImportEnum {
          output.writeEnum(53, value:oneValueOfrepeatedImportEnum.rawValue)
      }
      if !repeatedStringPiece.isEmpty {
        for oneValuerepeatedStringPiece in repeatedStringPiece {
          output.writeString(54, value:oneValuerepeatedStringPiece)
        }
      }
      if !repeatedCord.isEmpty {
        for oneValuerepeatedCord in repeatedCord {
          output.writeString(55, value:oneValuerepeatedCord)
        }
      }
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          output.writeMessage(57, value:oneElementrepeatedLazyMessage)
      }
      if hasDefaultInt32 {
        output.writeInt32(61, value:defaultInt32)
      }
      if hasDefaultInt64 {
        output.writeInt64(62, value:defaultInt64)
      }
      if hasDefaultUint32 {
        output.writeUInt32(63, value:defaultUint32)
      }
      if hasDefaultUint64 {
        output.writeUInt64(64, value:defaultUint64)
      }
      if hasDefaultSint32 {
        output.writeSInt32(65, value:defaultSint32)
      }
      if hasDefaultSint64 {
        output.writeSInt64(66, value:defaultSint64)
      }
      if hasDefaultFixed32 {
        output.writeFixed32(67, value:defaultFixed32)
      }
      if hasDefaultFixed64 {
        output.writeFixed64(68, value:defaultFixed64)
      }
      if hasDefaultSfixed32 {
        output.writeSFixed32(69, value:defaultSfixed32)
      }
      if hasDefaultSfixed64 {
        output.writeSFixed64(70, value:defaultSfixed64)
      }
      if hasDefaultFloat {
        output.writeFloat(71, value:defaultFloat)
      }
      if hasDefaultDouble {
        output.writeDouble(72, value:defaultDouble)
      }
      if hasDefaultBool {
        output.writeBool(73, value:defaultBool)
      }
      if hasDefaultString {
        output.writeString(74, value:defaultString)
      }
      if hasDefaultBytes {
        output.writeData(75, value:defaultBytes)
      }
      if hasDefaultNestedEnum {
        output.writeEnum(81, value:defaultNestedEnum.rawValue)
      }
      if hasDefaultForeignEnum {
        output.writeEnum(82, value:defaultForeignEnum.rawValue)
      }
      if hasDefaultImportEnum {
        output.writeEnum(83, value:defaultImportEnum.rawValue)
      }
      if hasDefaultStringPiece {
        output.writeString(84, value:defaultStringPiece)
      }
      if hasDefaultCord {
        output.writeString(85, value:defaultCord)
      }
      if hasOneofUint32 {
        output.writeUInt32(111, value:oneofUint32)
      }
      if hasOneofNestedMessage {
        output.writeMessage(112, value:oneofNestedMessage)
      }
      if hasOneofString {
        output.writeString(113, value:oneofString)
      }
      if hasOneofBytes {
        output.writeData(114, value:oneofBytes)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOptionalInt32 {
        serialize_size += optionalInt32.computeInt32Size(1)
      }
      if hasOptionalInt64 {
        serialize_size += optionalInt64.computeInt64Size(2)
      }
      if hasOptionalUint32 {
        serialize_size += optionalUint32.computeUInt32Size(3)
      }
      if hasOptionalUint64 {
        serialize_size += optionalUint64.computeUInt64Size(4)
      }
      if hasOptionalSint32 {
        serialize_size += optionalSint32.computeSInt32Size(5)
      }
      if hasOptionalSint64 {
        serialize_size += optionalSint64.computeSInt64Size(6)
      }
      if hasOptionalFixed32 {
        serialize_size += optionalFixed32.computeFixed32Size(7)
      }
      if hasOptionalFixed64 {
        serialize_size += optionalFixed64.computeFixed64Size(8)
      }
      if hasOptionalSfixed32 {
        serialize_size += optionalSfixed32.computeSFixed32Size(9)
      }
      if hasOptionalSfixed64 {
        serialize_size += optionalSfixed64.computeSFixed64Size(10)
      }
      if hasOptionalFloat {
        serialize_size += optionalFloat.computeFloatSize(11)
      }
      if hasOptionalDouble {
        serialize_size += optionalDouble.computeDoubleSize(12)
      }
      if hasOptionalBool {
        serialize_size += optionalBool.computeBoolSize(13)
      }
      if hasOptionalString {
        serialize_size += optionalString.computeStringSize(14)
      }
      if hasOptionalBytes {
        serialize_size += optionalBytes.computeDataSize(15)
      }
      if hasOptionalGroup {
        serialize_size += optionalGroup.computeGroupSize(16)
      }
      if hasOptionalNestedMessage {
        serialize_size += optionalNestedMessage.computeMessageSize(18)
      }
      if hasOptionalForeignMessage {
        serialize_size += optionalForeignMessage.computeMessageSize(19)
      }
      if hasOptionalImportMessage {
        serialize_size += optionalImportMessage.computeMessageSize(20)
      }
      if (hasOptionalNestedEnum) {
        serialize_size += optionalNestedEnum.rawValue.computeEnumSize(21)
      }
      if (hasOptionalForeignEnum) {
        serialize_size += optionalForeignEnum.rawValue.computeEnumSize(22)
      }
      if (hasOptionalImportEnum) {
        serialize_size += optionalImportEnum.rawValue.computeEnumSize(23)
      }
      if hasOptionalStringPiece {
        serialize_size += optionalStringPiece.computeStringSize(24)
      }
      if hasOptionalCord {
        serialize_size += optionalCord.computeStringSize(25)
      }
      if hasOptionalPublicImportMessage {
        serialize_size += optionalPublicImportMessage.computeMessageSize(26)
      }
      if hasOptionalLazyMessage {
        serialize_size += optionalLazyMessage.computeMessageSize(27)
      }
      var dataSizeRepeatedInt32:Int32 = 0
      for oneValuerepeatedInt32 in repeatedInt32 {
          dataSizeRepeatedInt32 += oneValuerepeatedInt32.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt32
      serialize_size += 2 * Int32(repeatedInt32.count)
      var dataSizeRepeatedInt64:Int32 = 0
      for oneValuerepeatedInt64 in repeatedInt64 {
          dataSizeRepeatedInt64 += oneValuerepeatedInt64.computeInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt64
      serialize_size += 2 * Int32(repeatedInt64.count)
      var dataSizeRepeatedUint32:Int32 = 0
      for oneValuerepeatedUint32 in repeatedUint32 {
          dataSizeRepeatedUint32 += oneValuerepeatedUint32.computeUInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedUint32
      serialize_size += 2 * Int32(repeatedUint32.count)
      var dataSizeRepeatedUint64:Int32 = 0
      for oneValuerepeatedUint64 in repeatedUint64 {
          dataSizeRepeatedUint64 += oneValuerepeatedUint64.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedUint64
      serialize_size += 2 * Int32(repeatedUint64.count)
      var dataSizeRepeatedSint32:Int32 = 0
      for oneValuerepeatedSint32 in repeatedSint32 {
          dataSizeRepeatedSint32 += oneValuerepeatedSint32.computeSInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedSint32
      serialize_size += 2 * Int32(repeatedSint32.count)
      var dataSizeRepeatedSint64:Int32 = 0
      for oneValuerepeatedSint64 in repeatedSint64 {
          dataSizeRepeatedSint64 += oneValuerepeatedSint64.computeSInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedSint64
      serialize_size += 2 * Int32(repeatedSint64.count)
      var dataSizeRepeatedFixed32:Int32 = 0
      dataSizeRepeatedFixed32 = 4 * Int32(repeatedFixed32.count)
      serialize_size += dataSizeRepeatedFixed32
      serialize_size += 2 * Int32(repeatedFixed32.count)
      var dataSizeRepeatedFixed64:Int32 = 0
      dataSizeRepeatedFixed64 = 8 * Int32(repeatedFixed64.count)
      serialize_size += dataSizeRepeatedFixed64
      serialize_size += 2 * Int32(repeatedFixed64.count)
      var dataSizeRepeatedSfixed32:Int32 = 0
      dataSizeRepeatedSfixed32 = 4 * Int32(repeatedSfixed32.count)
      serialize_size += dataSizeRepeatedSfixed32
      serialize_size += 2 * Int32(repeatedSfixed32.count)
      var dataSizeRepeatedSfixed64:Int32 = 0
      dataSizeRepeatedSfixed64 = 8 * Int32(repeatedSfixed64.count)
      serialize_size += dataSizeRepeatedSfixed64
      serialize_size += 2 * Int32(repeatedSfixed64.count)
      var dataSizeRepeatedFloat:Int32 = 0
      dataSizeRepeatedFloat = 4 * Int32(repeatedFloat.count)
      serialize_size += dataSizeRepeatedFloat
      serialize_size += 2 * Int32(repeatedFloat.count)
      var dataSizeRepeatedDouble:Int32 = 0
      dataSizeRepeatedDouble = 8 * Int32(repeatedDouble.count)
      serialize_size += dataSizeRepeatedDouble
      serialize_size += 2 * Int32(repeatedDouble.count)
      var dataSizeRepeatedBool:Int32 = 0
      dataSizeRepeatedBool = 1 * Int32(repeatedBool.count)
      serialize_size += dataSizeRepeatedBool
      serialize_size += 2 * Int32(repeatedBool.count)
      var dataSizeRepeatedString:Int32 = 0
      for oneValuerepeatedString in repeatedString {
          dataSizeRepeatedString += oneValuerepeatedString.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedString
      serialize_size += 2 * Int32(repeatedString.count)
      var dataSizeRepeatedBytes:Int32 = 0
      for oneValuerepeatedBytes in repeatedBytes {
          dataSizeRepeatedBytes += oneValuerepeatedBytes.computeDataSizeNoTag()
      }
      serialize_size += dataSizeRepeatedBytes
      serialize_size += 2 * Int32(repeatedBytes.count)
      for oneElementrepeatedGroup in repeatedGroup {
          serialize_size += oneElementrepeatedGroup.computeGroupSize(46)
      }
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          serialize_size += oneElementrepeatedNestedMessage.computeMessageSize(48)
      }
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          serialize_size += oneElementrepeatedForeignMessage.computeMessageSize(49)
      }
      for oneElementrepeatedImportMessage in repeatedImportMessage {
          serialize_size += oneElementrepeatedImportMessage.computeMessageSize(50)
      }
      var dataSizerepeatedNestedEnum:Int32 = 0
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          dataSizerepeatedNestedEnum += oneValueOfrepeatedNestedEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedNestedEnum
      serialize_size += (2 * Int32(repeatedNestedEnum.count))
      var dataSizerepeatedForeignEnum:Int32 = 0
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          dataSizerepeatedForeignEnum += oneValueOfrepeatedForeignEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedForeignEnum
      serialize_size += (2 * Int32(repeatedForeignEnum.count))
      var dataSizerepeatedImportEnum:Int32 = 0
      for oneValueOfrepeatedImportEnum in repeatedImportEnum {
          dataSizerepeatedImportEnum += oneValueOfrepeatedImportEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedImportEnum
      serialize_size += (2 * Int32(repeatedImportEnum.count))
      var dataSizeRepeatedStringPiece:Int32 = 0
      for oneValuerepeatedStringPiece in repeatedStringPiece {
          dataSizeRepeatedStringPiece += oneValuerepeatedStringPiece.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedStringPiece
      serialize_size += 2 * Int32(repeatedStringPiece.count)
      var dataSizeRepeatedCord:Int32 = 0
      for oneValuerepeatedCord in repeatedCord {
          dataSizeRepeatedCord += oneValuerepeatedCord.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedCord
      serialize_size += 2 * Int32(repeatedCord.count)
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          serialize_size += oneElementrepeatedLazyMessage.computeMessageSize(57)
      }
      if hasDefaultInt32 {
        serialize_size += defaultInt32.computeInt32Size(61)
      }
      if hasDefaultInt64 {
        serialize_size += defaultInt64.computeInt64Size(62)
      }
      if hasDefaultUint32 {
        serialize_size += defaultUint32.computeUInt32Size(63)
      }
      if hasDefaultUint64 {
        serialize_size += defaultUint64.computeUInt64Size(64)
      }
      if hasDefaultSint32 {
        serialize_size += defaultSint32.computeSInt32Size(65)
      }
      if hasDefaultSint64 {
        serialize_size += defaultSint64.computeSInt64Size(66)
      }
      if hasDefaultFixed32 {
        serialize_size += defaultFixed32.computeFixed32Size(67)
      }
      if hasDefaultFixed64 {
        serialize_size += defaultFixed64.computeFixed64Size(68)
      }
      if hasDefaultSfixed32 {
        serialize_size += defaultSfixed32.computeSFixed32Size(69)
      }
      if hasDefaultSfixed64 {
        serialize_size += defaultSfixed64.computeSFixed64Size(70)
      }
      if hasDefaultFloat {
        serialize_size += defaultFloat.computeFloatSize(71)
      }
      if hasDefaultDouble {
        serialize_size += defaultDouble.computeDoubleSize(72)
      }
      if hasDefaultBool {
        serialize_size += defaultBool.computeBoolSize(73)
      }
      if hasDefaultString {
        serialize_size += defaultString.computeStringSize(74)
      }
      if hasDefaultBytes {
        serialize_size += defaultBytes.computeDataSize(75)
      }
      if (hasDefaultNestedEnum) {
        serialize_size += defaultNestedEnum.rawValue.computeEnumSize(81)
      }
      if (hasDefaultForeignEnum) {
        serialize_size += defaultForeignEnum.rawValue.computeEnumSize(82)
      }
      if (hasDefaultImportEnum) {
        serialize_size += defaultImportEnum.rawValue.computeEnumSize(83)
      }
      if hasDefaultStringPiece {
        serialize_size += defaultStringPiece.computeStringSize(84)
      }
      if hasDefaultCord {
        serialize_size += defaultCord.computeStringSize(85)
      }
      if hasOneofUint32 {
        serialize_size += oneofUint32.computeUInt32Size(111)
      }
      if hasOneofNestedMessage {
        serialize_size += oneofNestedMessage.computeMessageSize(112)
      }
      if hasOneofString {
        serialize_size += oneofString.computeStringSize(113)
      }
      if hasOneofBytes {
        serialize_size += oneofBytes.computeDataSize(114)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestAllTypes {
      return ProtobufUnittest.TestAllTypes.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes {
      return ProtobufUnittest.TestAllTypes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestAllTypes {
      return ProtobufUnittest.TestAllTypes.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestAllTypes {
      return ProtobufUnittest.TestAllTypes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestAllTypes {
      return ProtobufUnittest.TestAllTypes.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypes {
      return ProtobufUnittest.TestAllTypes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestAllTypesBuilder {
      return ProtobufUnittest.TestAllTypes.classBuilder() as ProtobufUnittest.TestAllTypesBuilder
    }
    internal func builder() -> ProtobufUnittest.TestAllTypesBuilder {
      return classBuilder() as ProtobufUnittest.TestAllTypesBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestAllTypesBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestAllTypes.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestAllTypesBuilder {
      return ProtobufUnittest.TestAllTypes.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestAllTypesBuilder {
      return ProtobufUnittest.TestAllTypes.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasOptionalInt32 {
        output += "\(indent) optionalInt32: \(optionalInt32) \n"
      }
      if hasOptionalInt64 {
        output += "\(indent) optionalInt64: \(optionalInt64) \n"
      }
      if hasOptionalUint32 {
        output += "\(indent) optionalUint32: \(optionalUint32) \n"
      }
      if hasOptionalUint64 {
        output += "\(indent) optionalUint64: \(optionalUint64) \n"
      }
      if hasOptionalSint32 {
        output += "\(indent) optionalSint32: \(optionalSint32) \n"
      }
      if hasOptionalSint64 {
        output += "\(indent) optionalSint64: \(optionalSint64) \n"
      }
      if hasOptionalFixed32 {
        output += "\(indent) optionalFixed32: \(optionalFixed32) \n"
      }
      if hasOptionalFixed64 {
        output += "\(indent) optionalFixed64: \(optionalFixed64) \n"
      }
      if hasOptionalSfixed32 {
        output += "\(indent) optionalSfixed32: \(optionalSfixed32) \n"
      }
      if hasOptionalSfixed64 {
        output += "\(indent) optionalSfixed64: \(optionalSfixed64) \n"
      }
      if hasOptionalFloat {
        output += "\(indent) optionalFloat: \(optionalFloat) \n"
      }
      if hasOptionalDouble {
        output += "\(indent) optionalDouble: \(optionalDouble) \n"
      }
      if hasOptionalBool {
        output += "\(indent) optionalBool: \(optionalBool) \n"
      }
      if hasOptionalString {
        output += "\(indent) optionalString: \(optionalString) \n"
      }
      if hasOptionalBytes {
        output += "\(indent) optionalBytes: \(optionalBytes) \n"
      }
      if hasOptionalGroup {
        output += "\(indent) optionalGroup {\n"
        optionalGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalNestedMessage {
        output += "\(indent) optionalNestedMessage {\n"
        optionalNestedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalForeignMessage {
        output += "\(indent) optionalForeignMessage {\n"
        optionalForeignMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalImportMessage {
        output += "\(indent) optionalImportMessage {\n"
        optionalImportMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if (hasOptionalNestedEnum) {
        output += "\(indent) optionalNestedEnum: \(optionalNestedEnum.rawValue)\n"
      }
      if (hasOptionalForeignEnum) {
        output += "\(indent) optionalForeignEnum: \(optionalForeignEnum.rawValue)\n"
      }
      if (hasOptionalImportEnum) {
        output += "\(indent) optionalImportEnum: \(optionalImportEnum.rawValue)\n"
      }
      if hasOptionalStringPiece {
        output += "\(indent) optionalStringPiece: \(optionalStringPiece) \n"
      }
      if hasOptionalCord {
        output += "\(indent) optionalCord: \(optionalCord) \n"
      }
      if hasOptionalPublicImportMessage {
        output += "\(indent) optionalPublicImportMessage {\n"
        optionalPublicImportMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalLazyMessage {
        output += "\(indent) optionalLazyMessage {\n"
        optionalLazyMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var repeatedInt32ElementIndex:Int = 0
      for oneValuerepeatedInt32 in repeatedInt32  {
          output += "\(indent) repeatedInt32[\(repeatedInt32ElementIndex)]: \(oneValuerepeatedInt32)\n"
          repeatedInt32ElementIndex++
      }
      var repeatedInt64ElementIndex:Int = 0
      for oneValuerepeatedInt64 in repeatedInt64  {
          output += "\(indent) repeatedInt64[\(repeatedInt64ElementIndex)]: \(oneValuerepeatedInt64)\n"
          repeatedInt64ElementIndex++
      }
      var repeatedUint32ElementIndex:Int = 0
      for oneValuerepeatedUint32 in repeatedUint32  {
          output += "\(indent) repeatedUint32[\(repeatedUint32ElementIndex)]: \(oneValuerepeatedUint32)\n"
          repeatedUint32ElementIndex++
      }
      var repeatedUint64ElementIndex:Int = 0
      for oneValuerepeatedUint64 in repeatedUint64  {
          output += "\(indent) repeatedUint64[\(repeatedUint64ElementIndex)]: \(oneValuerepeatedUint64)\n"
          repeatedUint64ElementIndex++
      }
      var repeatedSint32ElementIndex:Int = 0
      for oneValuerepeatedSint32 in repeatedSint32  {
          output += "\(indent) repeatedSint32[\(repeatedSint32ElementIndex)]: \(oneValuerepeatedSint32)\n"
          repeatedSint32ElementIndex++
      }
      var repeatedSint64ElementIndex:Int = 0
      for oneValuerepeatedSint64 in repeatedSint64  {
          output += "\(indent) repeatedSint64[\(repeatedSint64ElementIndex)]: \(oneValuerepeatedSint64)\n"
          repeatedSint64ElementIndex++
      }
      var repeatedFixed32ElementIndex:Int = 0
      for oneValuerepeatedFixed32 in repeatedFixed32  {
          output += "\(indent) repeatedFixed32[\(repeatedFixed32ElementIndex)]: \(oneValuerepeatedFixed32)\n"
          repeatedFixed32ElementIndex++
      }
      var repeatedFixed64ElementIndex:Int = 0
      for oneValuerepeatedFixed64 in repeatedFixed64  {
          output += "\(indent) repeatedFixed64[\(repeatedFixed64ElementIndex)]: \(oneValuerepeatedFixed64)\n"
          repeatedFixed64ElementIndex++
      }
      var repeatedSfixed32ElementIndex:Int = 0
      for oneValuerepeatedSfixed32 in repeatedSfixed32  {
          output += "\(indent) repeatedSfixed32[\(repeatedSfixed32ElementIndex)]: \(oneValuerepeatedSfixed32)\n"
          repeatedSfixed32ElementIndex++
      }
      var repeatedSfixed64ElementIndex:Int = 0
      for oneValuerepeatedSfixed64 in repeatedSfixed64  {
          output += "\(indent) repeatedSfixed64[\(repeatedSfixed64ElementIndex)]: \(oneValuerepeatedSfixed64)\n"
          repeatedSfixed64ElementIndex++
      }
      var repeatedFloatElementIndex:Int = 0
      for oneValuerepeatedFloat in repeatedFloat  {
          output += "\(indent) repeatedFloat[\(repeatedFloatElementIndex)]: \(oneValuerepeatedFloat)\n"
          repeatedFloatElementIndex++
      }
      var repeatedDoubleElementIndex:Int = 0
      for oneValuerepeatedDouble in repeatedDouble  {
          output += "\(indent) repeatedDouble[\(repeatedDoubleElementIndex)]: \(oneValuerepeatedDouble)\n"
          repeatedDoubleElementIndex++
      }
      var repeatedBoolElementIndex:Int = 0
      for oneValuerepeatedBool in repeatedBool  {
          output += "\(indent) repeatedBool[\(repeatedBoolElementIndex)]: \(oneValuerepeatedBool)\n"
          repeatedBoolElementIndex++
      }
      var repeatedStringElementIndex:Int = 0
      for oneValuerepeatedString in repeatedString  {
          output += "\(indent) repeatedString[\(repeatedStringElementIndex)]: \(oneValuerepeatedString)\n"
          repeatedStringElementIndex++
      }
      var repeatedBytesElementIndex:Int = 0
      for oneValuerepeatedBytes in repeatedBytes  {
          output += "\(indent) repeatedBytes[\(repeatedBytesElementIndex)]: \(oneValuerepeatedBytes)\n"
          repeatedBytesElementIndex++
      }
      var repeatedGroupElementIndex:Int = 0
      for oneElementrepeatedGroup in repeatedGroup {
          output += "\(indent) repeatedGroup[\(repeatedGroupElementIndex)] {\n"
          oneElementrepeatedGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedGroupElementIndex++
      }
      var repeatedNestedMessageElementIndex:Int = 0
      for oneElementrepeatedNestedMessage in repeatedNestedMessage {
          output += "\(indent) repeatedNestedMessage[\(repeatedNestedMessageElementIndex)] {\n"
          oneElementrepeatedNestedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedNestedMessageElementIndex++
      }
      var repeatedForeignMessageElementIndex:Int = 0
      for oneElementrepeatedForeignMessage in repeatedForeignMessage {
          output += "\(indent) repeatedForeignMessage[\(repeatedForeignMessageElementIndex)] {\n"
          oneElementrepeatedForeignMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedForeignMessageElementIndex++
      }
      var repeatedImportMessageElementIndex:Int = 0
      for oneElementrepeatedImportMessage in repeatedImportMessage {
          output += "\(indent) repeatedImportMessage[\(repeatedImportMessageElementIndex)] {\n"
          oneElementrepeatedImportMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedImportMessageElementIndex++
      }
      var repeatedNestedEnumElementIndex:Int = 0
      for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
          output += "\(indent) repeatedNestedEnum[\(repeatedNestedEnumElementIndex)]: \(oneValueOfrepeatedNestedEnum.rawValue)\n"
          repeatedNestedEnumElementIndex++
      }
      var repeatedForeignEnumElementIndex:Int = 0
      for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
          output += "\(indent) repeatedForeignEnum[\(repeatedForeignEnumElementIndex)]: \(oneValueOfrepeatedForeignEnum.rawValue)\n"
          repeatedForeignEnumElementIndex++
      }
      var repeatedImportEnumElementIndex:Int = 0
      for oneValueOfrepeatedImportEnum in repeatedImportEnum {
          output += "\(indent) repeatedImportEnum[\(repeatedImportEnumElementIndex)]: \(oneValueOfrepeatedImportEnum.rawValue)\n"
          repeatedImportEnumElementIndex++
      }
      var repeatedStringPieceElementIndex:Int = 0
      for oneValuerepeatedStringPiece in repeatedStringPiece  {
          output += "\(indent) repeatedStringPiece[\(repeatedStringPieceElementIndex)]: \(oneValuerepeatedStringPiece)\n"
          repeatedStringPieceElementIndex++
      }
      var repeatedCordElementIndex:Int = 0
      for oneValuerepeatedCord in repeatedCord  {
          output += "\(indent) repeatedCord[\(repeatedCordElementIndex)]: \(oneValuerepeatedCord)\n"
          repeatedCordElementIndex++
      }
      var repeatedLazyMessageElementIndex:Int = 0
      for oneElementrepeatedLazyMessage in repeatedLazyMessage {
          output += "\(indent) repeatedLazyMessage[\(repeatedLazyMessageElementIndex)] {\n"
          oneElementrepeatedLazyMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedLazyMessageElementIndex++
      }
      if hasDefaultInt32 {
        output += "\(indent) defaultInt32: \(defaultInt32) \n"
      }
      if hasDefaultInt64 {
        output += "\(indent) defaultInt64: \(defaultInt64) \n"
      }
      if hasDefaultUint32 {
        output += "\(indent) defaultUint32: \(defaultUint32) \n"
      }
      if hasDefaultUint64 {
        output += "\(indent) defaultUint64: \(defaultUint64) \n"
      }
      if hasDefaultSint32 {
        output += "\(indent) defaultSint32: \(defaultSint32) \n"
      }
      if hasDefaultSint64 {
        output += "\(indent) defaultSint64: \(defaultSint64) \n"
      }
      if hasDefaultFixed32 {
        output += "\(indent) defaultFixed32: \(defaultFixed32) \n"
      }
      if hasDefaultFixed64 {
        output += "\(indent) defaultFixed64: \(defaultFixed64) \n"
      }
      if hasDefaultSfixed32 {
        output += "\(indent) defaultSfixed32: \(defaultSfixed32) \n"
      }
      if hasDefaultSfixed64 {
        output += "\(indent) defaultSfixed64: \(defaultSfixed64) \n"
      }
      if hasDefaultFloat {
        output += "\(indent) defaultFloat: \(defaultFloat) \n"
      }
      if hasDefaultDouble {
        output += "\(indent) defaultDouble: \(defaultDouble) \n"
      }
      if hasDefaultBool {
        output += "\(indent) defaultBool: \(defaultBool) \n"
      }
      if hasDefaultString {
        output += "\(indent) defaultString: \(defaultString) \n"
      }
      if hasDefaultBytes {
        output += "\(indent) defaultBytes: \(defaultBytes) \n"
      }
      if (hasDefaultNestedEnum) {
        output += "\(indent) defaultNestedEnum: \(defaultNestedEnum.rawValue)\n"
      }
      if (hasDefaultForeignEnum) {
        output += "\(indent) defaultForeignEnum: \(defaultForeignEnum.rawValue)\n"
      }
      if (hasDefaultImportEnum) {
        output += "\(indent) defaultImportEnum: \(defaultImportEnum.rawValue)\n"
      }
      if hasDefaultStringPiece {
        output += "\(indent) defaultStringPiece: \(defaultStringPiece) \n"
      }
      if hasDefaultCord {
        output += "\(indent) defaultCord: \(defaultCord) \n"
      }
      if hasOneofUint32 {
        output += "\(indent) oneofUint32: \(oneofUint32) \n"
      }
      if hasOneofNestedMessage {
        output += "\(indent) oneofNestedMessage {\n"
        oneofNestedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOneofString {
        output += "\(indent) oneofString: \(oneofString) \n"
      }
      if hasOneofBytes {
        output += "\(indent) oneofBytes: \(oneofBytes) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOptionalInt32 {
               hashCode = (hashCode &* 31) &+ optionalInt32.hashValue
            }
            if hasOptionalInt64 {
               hashCode = (hashCode &* 31) &+ optionalInt64.hashValue
            }
            if hasOptionalUint32 {
               hashCode = (hashCode &* 31) &+ optionalUint32.hashValue
            }
            if hasOptionalUint64 {
               hashCode = (hashCode &* 31) &+ optionalUint64.hashValue
            }
            if hasOptionalSint32 {
               hashCode = (hashCode &* 31) &+ optionalSint32.hashValue
            }
            if hasOptionalSint64 {
               hashCode = (hashCode &* 31) &+ optionalSint64.hashValue
            }
            if hasOptionalFixed32 {
               hashCode = (hashCode &* 31) &+ optionalFixed32.hashValue
            }
            if hasOptionalFixed64 {
               hashCode = (hashCode &* 31) &+ optionalFixed64.hashValue
            }
            if hasOptionalSfixed32 {
               hashCode = (hashCode &* 31) &+ optionalSfixed32.hashValue
            }
            if hasOptionalSfixed64 {
               hashCode = (hashCode &* 31) &+ optionalSfixed64.hashValue
            }
            if hasOptionalFloat {
               hashCode = (hashCode &* 31) &+ optionalFloat.hashValue
            }
            if hasOptionalDouble {
               hashCode = (hashCode &* 31) &+ optionalDouble.hashValue
            }
            if hasOptionalBool {
               hashCode = (hashCode &* 31) &+ optionalBool.hashValue
            }
            if hasOptionalString {
               hashCode = (hashCode &* 31) &+ optionalString.hashValue
            }
            if hasOptionalBytes {
               hashCode = (hashCode &* 31) &+ optionalBytes.hashValue
            }
            if hasOptionalGroup {
              hashCode = (hashCode &* 31) &+ optionalGroup.hashValue
            }
            if hasOptionalNestedMessage {
              hashCode = (hashCode &* 31) &+ optionalNestedMessage.hashValue
            }
            if hasOptionalForeignMessage {
              hashCode = (hashCode &* 31) &+ optionalForeignMessage.hashValue
            }
            if hasOptionalImportMessage {
              hashCode = (hashCode &* 31) &+ optionalImportMessage.hashValue
            }
            if hasOptionalNestedEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalNestedEnum.rawValue)
            }
            if hasOptionalForeignEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalForeignEnum.rawValue)
            }
            if hasOptionalImportEnum {
               hashCode = (hashCode &* 31) &+ Int(optionalImportEnum.rawValue)
            }
            if hasOptionalStringPiece {
               hashCode = (hashCode &* 31) &+ optionalStringPiece.hashValue
            }
            if hasOptionalCord {
               hashCode = (hashCode &* 31) &+ optionalCord.hashValue
            }
            if hasOptionalPublicImportMessage {
              hashCode = (hashCode &* 31) &+ optionalPublicImportMessage.hashValue
            }
            if hasOptionalLazyMessage {
              hashCode = (hashCode &* 31) &+ optionalLazyMessage.hashValue
            }
            for oneValuerepeatedInt32 in repeatedInt32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt32.hashValue
            }
            for oneValuerepeatedInt64 in repeatedInt64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt64.hashValue
            }
            for oneValuerepeatedUint32 in repeatedUint32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedUint32.hashValue
            }
            for oneValuerepeatedUint64 in repeatedUint64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedUint64.hashValue
            }
            for oneValuerepeatedSint32 in repeatedSint32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSint32.hashValue
            }
            for oneValuerepeatedSint64 in repeatedSint64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSint64.hashValue
            }
            for oneValuerepeatedFixed32 in repeatedFixed32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed32.hashValue
            }
            for oneValuerepeatedFixed64 in repeatedFixed64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed64.hashValue
            }
            for oneValuerepeatedSfixed32 in repeatedSfixed32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSfixed32.hashValue
            }
            for oneValuerepeatedSfixed64 in repeatedSfixed64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedSfixed64.hashValue
            }
            for oneValuerepeatedFloat in repeatedFloat {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFloat.hashValue
            }
            for oneValuerepeatedDouble in repeatedDouble {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedDouble.hashValue
            }
            for oneValuerepeatedBool in repeatedBool {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedBool.hashValue
            }
            for oneValuerepeatedString in repeatedString {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedString.hashValue
            }
            for oneValuerepeatedBytes in repeatedBytes {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedBytes.hashValue
            }
            for oneElementrepeatedGroup in repeatedGroup {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedGroup.hashValue
            }
            for oneElementrepeatedNestedMessage in repeatedNestedMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedNestedMessage.hashValue
            }
            for oneElementrepeatedForeignMessage in repeatedForeignMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedForeignMessage.hashValue
            }
            for oneElementrepeatedImportMessage in repeatedImportMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedImportMessage.hashValue
            }
            for oneValueOfrepeatedNestedEnum in repeatedNestedEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedNestedEnum.rawValue)
            }
            for oneValueOfrepeatedForeignEnum in repeatedForeignEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedForeignEnum.rawValue)
            }
            for oneValueOfrepeatedImportEnum in repeatedImportEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedImportEnum.rawValue)
            }
            for oneValuerepeatedStringPiece in repeatedStringPiece {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedStringPiece.hashValue
            }
            for oneValuerepeatedCord in repeatedCord {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedCord.hashValue
            }
            for oneElementrepeatedLazyMessage in repeatedLazyMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedLazyMessage.hashValue
            }
            if hasDefaultInt32 {
               hashCode = (hashCode &* 31) &+ defaultInt32.hashValue
            }
            if hasDefaultInt64 {
               hashCode = (hashCode &* 31) &+ defaultInt64.hashValue
            }
            if hasDefaultUint32 {
               hashCode = (hashCode &* 31) &+ defaultUint32.hashValue
            }
            if hasDefaultUint64 {
               hashCode = (hashCode &* 31) &+ defaultUint64.hashValue
            }
            if hasDefaultSint32 {
               hashCode = (hashCode &* 31) &+ defaultSint32.hashValue
            }
            if hasDefaultSint64 {
               hashCode = (hashCode &* 31) &+ defaultSint64.hashValue
            }
            if hasDefaultFixed32 {
               hashCode = (hashCode &* 31) &+ defaultFixed32.hashValue
            }
            if hasDefaultFixed64 {
               hashCode = (hashCode &* 31) &+ defaultFixed64.hashValue
            }
            if hasDefaultSfixed32 {
               hashCode = (hashCode &* 31) &+ defaultSfixed32.hashValue
            }
            if hasDefaultSfixed64 {
               hashCode = (hashCode &* 31) &+ defaultSfixed64.hashValue
            }
            if hasDefaultFloat {
               hashCode = (hashCode &* 31) &+ defaultFloat.hashValue
            }
            if hasDefaultDouble {
               hashCode = (hashCode &* 31) &+ defaultDouble.hashValue
            }
            if hasDefaultBool {
               hashCode = (hashCode &* 31) &+ defaultBool.hashValue
            }
            if hasDefaultString {
               hashCode = (hashCode &* 31) &+ defaultString.hashValue
            }
            if hasDefaultBytes {
               hashCode = (hashCode &* 31) &+ defaultBytes.hashValue
            }
            if hasDefaultNestedEnum {
               hashCode = (hashCode &* 31) &+ Int(defaultNestedEnum.rawValue)
            }
            if hasDefaultForeignEnum {
               hashCode = (hashCode &* 31) &+ Int(defaultForeignEnum.rawValue)
            }
            if hasDefaultImportEnum {
               hashCode = (hashCode &* 31) &+ Int(defaultImportEnum.rawValue)
            }
            if hasDefaultStringPiece {
               hashCode = (hashCode &* 31) &+ defaultStringPiece.hashValue
            }
            if hasDefaultCord {
               hashCode = (hashCode &* 31) &+ defaultCord.hashValue
            }
            if hasOneofUint32 {
               hashCode = (hashCode &* 31) &+ oneofUint32.hashValue
            }
            if hasOneofNestedMessage {
              hashCode = (hashCode &* 31) &+ oneofNestedMessage.hashValue
            }
            if hasOneofString {
               hashCode = (hashCode &* 31) &+ oneofString.hashValue
            }
            if hasOneofBytes {
               hashCode = (hashCode &* 31) &+ oneofBytes.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestAllTypes"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestAllTypes"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestAllTypes.self
    }
    //Meta information declaration end

  }

  final internal class TestAllTypesBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestAllTypes

    required override internal init () {
       builderResult = ProtobufUnittest.TestAllTypes()
       super.init()
    }
    var hasOptionalInt32:Bool {
         get {
              return builderResult.hasOptionalInt32
         }
    }
    var optionalInt32:Int32 {
         get {
              return builderResult.optionalInt32
         }
         set (value) {
             builderResult.hasOptionalInt32 = true
             builderResult.optionalInt32 = value
         }
    }
    func setOptionalInt32(value:Int32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalInt32 = value
      return self
    }
    internal func clearOptionalInt32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalInt32 = false
         builderResult.optionalInt32 = Int32(0)
         return self
    }
    var hasOptionalInt64:Bool {
         get {
              return builderResult.hasOptionalInt64
         }
    }
    var optionalInt64:Int64 {
         get {
              return builderResult.optionalInt64
         }
         set (value) {
             builderResult.hasOptionalInt64 = true
             builderResult.optionalInt64 = value
         }
    }
    func setOptionalInt64(value:Int64)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalInt64 = value
      return self
    }
    internal func clearOptionalInt64() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalInt64 = false
         builderResult.optionalInt64 = Int64(0)
         return self
    }
    var hasOptionalUint32:Bool {
         get {
              return builderResult.hasOptionalUint32
         }
    }
    var optionalUint32:UInt32 {
         get {
              return builderResult.optionalUint32
         }
         set (value) {
             builderResult.hasOptionalUint32 = true
             builderResult.optionalUint32 = value
         }
    }
    func setOptionalUint32(value:UInt32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalUint32 = value
      return self
    }
    internal func clearOptionalUint32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalUint32 = false
         builderResult.optionalUint32 = UInt32(0)
         return self
    }
    var hasOptionalUint64:Bool {
         get {
              return builderResult.hasOptionalUint64
         }
    }
    var optionalUint64:UInt64 {
         get {
              return builderResult.optionalUint64
         }
         set (value) {
             builderResult.hasOptionalUint64 = true
             builderResult.optionalUint64 = value
         }
    }
    func setOptionalUint64(value:UInt64)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalUint64 = value
      return self
    }
    internal func clearOptionalUint64() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalUint64 = false
         builderResult.optionalUint64 = UInt64(0)
         return self
    }
    var hasOptionalSint32:Bool {
         get {
              return builderResult.hasOptionalSint32
         }
    }
    var optionalSint32:Int32 {
         get {
              return builderResult.optionalSint32
         }
         set (value) {
             builderResult.hasOptionalSint32 = true
             builderResult.optionalSint32 = value
         }
    }
    func setOptionalSint32(value:Int32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalSint32 = value
      return self
    }
    internal func clearOptionalSint32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalSint32 = false
         builderResult.optionalSint32 = Int32(0)
         return self
    }
    var hasOptionalSint64:Bool {
         get {
              return builderResult.hasOptionalSint64
         }
    }
    var optionalSint64:Int64 {
         get {
              return builderResult.optionalSint64
         }
         set (value) {
             builderResult.hasOptionalSint64 = true
             builderResult.optionalSint64 = value
         }
    }
    func setOptionalSint64(value:Int64)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalSint64 = value
      return self
    }
    internal func clearOptionalSint64() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalSint64 = false
         builderResult.optionalSint64 = Int64(0)
         return self
    }
    var hasOptionalFixed32:Bool {
         get {
              return builderResult.hasOptionalFixed32
         }
    }
    var optionalFixed32:UInt32 {
         get {
              return builderResult.optionalFixed32
         }
         set (value) {
             builderResult.hasOptionalFixed32 = true
             builderResult.optionalFixed32 = value
         }
    }
    func setOptionalFixed32(value:UInt32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalFixed32 = value
      return self
    }
    internal func clearOptionalFixed32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalFixed32 = false
         builderResult.optionalFixed32 = UInt32(0)
         return self
    }
    var hasOptionalFixed64:Bool {
         get {
              return builderResult.hasOptionalFixed64
         }
    }
    var optionalFixed64:UInt64 {
         get {
              return builderResult.optionalFixed64
         }
         set (value) {
             builderResult.hasOptionalFixed64 = true
             builderResult.optionalFixed64 = value
         }
    }
    func setOptionalFixed64(value:UInt64)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalFixed64 = value
      return self
    }
    internal func clearOptionalFixed64() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalFixed64 = false
         builderResult.optionalFixed64 = UInt64(0)
         return self
    }
    var hasOptionalSfixed32:Bool {
         get {
              return builderResult.hasOptionalSfixed32
         }
    }
    var optionalSfixed32:Int32 {
         get {
              return builderResult.optionalSfixed32
         }
         set (value) {
             builderResult.hasOptionalSfixed32 = true
             builderResult.optionalSfixed32 = value
         }
    }
    func setOptionalSfixed32(value:Int32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalSfixed32 = value
      return self
    }
    internal func clearOptionalSfixed32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalSfixed32 = false
         builderResult.optionalSfixed32 = Int32(0)
         return self
    }
    var hasOptionalSfixed64:Bool {
         get {
              return builderResult.hasOptionalSfixed64
         }
    }
    var optionalSfixed64:Int64 {
         get {
              return builderResult.optionalSfixed64
         }
         set (value) {
             builderResult.hasOptionalSfixed64 = true
             builderResult.optionalSfixed64 = value
         }
    }
    func setOptionalSfixed64(value:Int64)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalSfixed64 = value
      return self
    }
    internal func clearOptionalSfixed64() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalSfixed64 = false
         builderResult.optionalSfixed64 = Int64(0)
         return self
    }
    var hasOptionalFloat:Bool {
         get {
              return builderResult.hasOptionalFloat
         }
    }
    var optionalFloat:Float {
         get {
              return builderResult.optionalFloat
         }
         set (value) {
             builderResult.hasOptionalFloat = true
             builderResult.optionalFloat = value
         }
    }
    func setOptionalFloat(value:Float)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalFloat = value
      return self
    }
    internal func clearOptionalFloat() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalFloat = false
         builderResult.optionalFloat = Float(0)
         return self
    }
    var hasOptionalDouble:Bool {
         get {
              return builderResult.hasOptionalDouble
         }
    }
    var optionalDouble:Double {
         get {
              return builderResult.optionalDouble
         }
         set (value) {
             builderResult.hasOptionalDouble = true
             builderResult.optionalDouble = value
         }
    }
    func setOptionalDouble(value:Double)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalDouble = value
      return self
    }
    internal func clearOptionalDouble() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalDouble = false
         builderResult.optionalDouble = Double(0)
         return self
    }
    var hasOptionalBool:Bool {
         get {
              return builderResult.hasOptionalBool
         }
    }
    var optionalBool:Bool {
         get {
              return builderResult.optionalBool
         }
         set (value) {
             builderResult.hasOptionalBool = true
             builderResult.optionalBool = value
         }
    }
    func setOptionalBool(value:Bool)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalBool = value
      return self
    }
    internal func clearOptionalBool() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalBool = false
         builderResult.optionalBool = false
         return self
    }
    var hasOptionalString:Bool {
         get {
              return builderResult.hasOptionalString
         }
    }
    var optionalString:String {
         get {
              return builderResult.optionalString
         }
         set (value) {
             builderResult.hasOptionalString = true
             builderResult.optionalString = value
         }
    }
    func setOptionalString(value:String)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalString = value
      return self
    }
    internal func clearOptionalString() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalString = false
         builderResult.optionalString = ""
         return self
    }
    var hasOptionalBytes:Bool {
         get {
              return builderResult.hasOptionalBytes
         }
    }
    var optionalBytes:NSData {
         get {
              return builderResult.optionalBytes
         }
         set (value) {
             builderResult.hasOptionalBytes = true
             builderResult.optionalBytes = value
         }
    }
    func setOptionalBytes(value:NSData)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalBytes = value
      return self
    }
    internal func clearOptionalBytes() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalBytes = false
         builderResult.optionalBytes = NSData()
         return self
    }
    var hasOptionalGroup:Bool {
         get {
             return builderResult.hasOptionalGroup
         }
    }
    var optionalGroup:ProtobufUnittest.TestAllTypes.OptionalGroup {
         get {
             return builderResult.optionalGroup
         }
         set (value) {
             builderResult.hasOptionalGroup = true
             builderResult.optionalGroup = value
         }
    }
    func setOptionalGroup(value:ProtobufUnittest.TestAllTypes.OptionalGroup)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalGroup = value
      return self
    }
    internal func mergeOptionalGroup(value:ProtobufUnittest.TestAllTypes.OptionalGroup) -> ProtobufUnittest.TestAllTypesBuilder {
      if (builderResult.hasOptionalGroup) {
        builderResult.optionalGroup = ProtobufUnittest.TestAllTypes.OptionalGroup.builderWithPrototype(builderResult.optionalGroup).mergeFrom(value).buildPartial()
      } else {
        builderResult.optionalGroup = value
      }
      builderResult.hasOptionalGroup = true
      return self
    }
    internal func clearOptionalGroup() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.hasOptionalGroup = false
      builderResult.optionalGroup = ProtobufUnittest.TestAllTypes.OptionalGroup()
      return self
    }
    var hasOptionalNestedMessage:Bool {
         get {
             return builderResult.hasOptionalNestedMessage
         }
    }
    var optionalNestedMessage:ProtobufUnittest.TestAllTypes.NestedMessage {
         get {
             return builderResult.optionalNestedMessage
         }
         set (value) {
             builderResult.hasOptionalNestedMessage = true
             builderResult.optionalNestedMessage = value
         }
    }
    func setOptionalNestedMessage(value:ProtobufUnittest.TestAllTypes.NestedMessage)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalNestedMessage = value
      return self
    }
    internal func mergeOptionalNestedMessage(value:ProtobufUnittest.TestAllTypes.NestedMessage) -> ProtobufUnittest.TestAllTypesBuilder {
      if (builderResult.hasOptionalNestedMessage) {
        builderResult.optionalNestedMessage = ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.optionalNestedMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.optionalNestedMessage = value
      }
      builderResult.hasOptionalNestedMessage = true
      return self
    }
    internal func clearOptionalNestedMessage() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.hasOptionalNestedMessage = false
      builderResult.optionalNestedMessage = ProtobufUnittest.TestAllTypes.NestedMessage()
      return self
    }
    var hasOptionalForeignMessage:Bool {
         get {
             return builderResult.hasOptionalForeignMessage
         }
    }
    var optionalForeignMessage:ProtobufUnittest.ForeignMessage {
         get {
             return builderResult.optionalForeignMessage
         }
         set (value) {
             builderResult.hasOptionalForeignMessage = true
             builderResult.optionalForeignMessage = value
         }
    }
    func setOptionalForeignMessage(value:ProtobufUnittest.ForeignMessage)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalForeignMessage = value
      return self
    }
    internal func mergeOptionalForeignMessage(value:ProtobufUnittest.ForeignMessage) -> ProtobufUnittest.TestAllTypesBuilder {
      if (builderResult.hasOptionalForeignMessage) {
        builderResult.optionalForeignMessage = ProtobufUnittest.ForeignMessage.builderWithPrototype(builderResult.optionalForeignMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.optionalForeignMessage = value
      }
      builderResult.hasOptionalForeignMessage = true
      return self
    }
    internal func clearOptionalForeignMessage() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.hasOptionalForeignMessage = false
      builderResult.optionalForeignMessage = ProtobufUnittest.ForeignMessage()
      return self
    }
    var hasOptionalImportMessage:Bool {
         get {
             return builderResult.hasOptionalImportMessage
         }
    }
    var optionalImportMessage:ProtobufUnittestImport.ImportMessage {
         get {
             return builderResult.optionalImportMessage
         }
         set (value) {
             builderResult.hasOptionalImportMessage = true
             builderResult.optionalImportMessage = value
         }
    }
    func setOptionalImportMessage(value:ProtobufUnittestImport.ImportMessage)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalImportMessage = value
      return self
    }
    internal func mergeOptionalImportMessage(value:ProtobufUnittestImport.ImportMessage) -> ProtobufUnittest.TestAllTypesBuilder {
      if (builderResult.hasOptionalImportMessage) {
        builderResult.optionalImportMessage = ProtobufUnittestImport.ImportMessage.builderWithPrototype(builderResult.optionalImportMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.optionalImportMessage = value
      }
      builderResult.hasOptionalImportMessage = true
      return self
    }
    internal func clearOptionalImportMessage() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.hasOptionalImportMessage = false
      builderResult.optionalImportMessage = ProtobufUnittestImport.ImportMessage()
      return self
    }
      var hasOptionalNestedEnum:Bool{
          get {
              return builderResult.hasOptionalNestedEnum
          }
      }
      var optionalNestedEnum:ProtobufUnittest.TestAllTypes.NestedEnum {
          get {
              return builderResult.optionalNestedEnum
          }
          set (value) {
              builderResult.hasOptionalNestedEnum = true
              builderResult.optionalNestedEnum = value
          }
      }
      internal func setOptionalNestedEnum(value:ProtobufUnittest.TestAllTypes.NestedEnum)-> ProtobufUnittest.TestAllTypesBuilder {
        self.optionalNestedEnum = value
        return self
      }
      internal func clearOptionalNestedEnum() -> ProtobufUnittest.TestAllTypesBuilder {
         builderResult.hasOptionalNestedEnum = false
         builderResult.optionalNestedEnum = .Foo
         return self
      }
      var hasOptionalForeignEnum:Bool{
          get {
              return builderResult.hasOptionalForeignEnum
          }
      }
      var optionalForeignEnum:ProtobufUnittest.ForeignEnum {
          get {
              return builderResult.optionalForeignEnum
          }
          set (value) {
              builderResult.hasOptionalForeignEnum = true
              builderResult.optionalForeignEnum = value
          }
      }
      internal func setOptionalForeignEnum(value:ProtobufUnittest.ForeignEnum)-> ProtobufUnittest.TestAllTypesBuilder {
        self.optionalForeignEnum = value
        return self
      }
      internal func clearOptionalForeignEnum() -> ProtobufUnittest.TestAllTypesBuilder {
         builderResult.hasOptionalForeignEnum = false
         builderResult.optionalForeignEnum = .ForeignFoo
         return self
      }
      var hasOptionalImportEnum:Bool{
          get {
              return builderResult.hasOptionalImportEnum
          }
      }
      var optionalImportEnum:ProtobufUnittestImport.ImportEnum {
          get {
              return builderResult.optionalImportEnum
          }
          set (value) {
              builderResult.hasOptionalImportEnum = true
              builderResult.optionalImportEnum = value
          }
      }
      internal func setOptionalImportEnum(value:ProtobufUnittestImport.ImportEnum)-> ProtobufUnittest.TestAllTypesBuilder {
        self.optionalImportEnum = value
        return self
      }
      internal func clearOptionalImportEnum() -> ProtobufUnittest.TestAllTypesBuilder {
         builderResult.hasOptionalImportEnum = false
         builderResult.optionalImportEnum = .ImportFoo
         return self
      }
    var hasOptionalStringPiece:Bool {
         get {
              return builderResult.hasOptionalStringPiece
         }
    }
    var optionalStringPiece:String {
         get {
              return builderResult.optionalStringPiece
         }
         set (value) {
             builderResult.hasOptionalStringPiece = true
             builderResult.optionalStringPiece = value
         }
    }
    func setOptionalStringPiece(value:String)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalStringPiece = value
      return self
    }
    internal func clearOptionalStringPiece() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalStringPiece = false
         builderResult.optionalStringPiece = ""
         return self
    }
    var hasOptionalCord:Bool {
         get {
              return builderResult.hasOptionalCord
         }
    }
    var optionalCord:String {
         get {
              return builderResult.optionalCord
         }
         set (value) {
             builderResult.hasOptionalCord = true
             builderResult.optionalCord = value
         }
    }
    func setOptionalCord(value:String)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalCord = value
      return self
    }
    internal func clearOptionalCord() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOptionalCord = false
         builderResult.optionalCord = ""
         return self
    }
    var hasOptionalPublicImportMessage:Bool {
         get {
             return builderResult.hasOptionalPublicImportMessage
         }
    }
    var optionalPublicImportMessage:ProtobufUnittestImport.PublicImportMessage {
         get {
             return builderResult.optionalPublicImportMessage
         }
         set (value) {
             builderResult.hasOptionalPublicImportMessage = true
             builderResult.optionalPublicImportMessage = value
         }
    }
    func setOptionalPublicImportMessage(value:ProtobufUnittestImport.PublicImportMessage)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalPublicImportMessage = value
      return self
    }
    internal func mergeOptionalPublicImportMessage(value:ProtobufUnittestImport.PublicImportMessage) -> ProtobufUnittest.TestAllTypesBuilder {
      if (builderResult.hasOptionalPublicImportMessage) {
        builderResult.optionalPublicImportMessage = ProtobufUnittestImport.PublicImportMessage.builderWithPrototype(builderResult.optionalPublicImportMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.optionalPublicImportMessage = value
      }
      builderResult.hasOptionalPublicImportMessage = true
      return self
    }
    internal func clearOptionalPublicImportMessage() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.hasOptionalPublicImportMessage = false
      builderResult.optionalPublicImportMessage = ProtobufUnittestImport.PublicImportMessage()
      return self
    }
    var hasOptionalLazyMessage:Bool {
         get {
             return builderResult.hasOptionalLazyMessage
         }
    }
    var optionalLazyMessage:ProtobufUnittest.TestAllTypes.NestedMessage {
         get {
             return builderResult.optionalLazyMessage
         }
         set (value) {
             builderResult.hasOptionalLazyMessage = true
             builderResult.optionalLazyMessage = value
         }
    }
    func setOptionalLazyMessage(value:ProtobufUnittest.TestAllTypes.NestedMessage)-> ProtobufUnittest.TestAllTypesBuilder {
      self.optionalLazyMessage = value
      return self
    }
    internal func mergeOptionalLazyMessage(value:ProtobufUnittest.TestAllTypes.NestedMessage) -> ProtobufUnittest.TestAllTypesBuilder {
      if (builderResult.hasOptionalLazyMessage) {
        builderResult.optionalLazyMessage = ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.optionalLazyMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.optionalLazyMessage = value
      }
      builderResult.hasOptionalLazyMessage = true
      return self
    }
    internal func clearOptionalLazyMessage() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.hasOptionalLazyMessage = false
      builderResult.optionalLazyMessage = ProtobufUnittest.TestAllTypes.NestedMessage()
      return self
    }
    var repeatedInt32:Array<Int32> {
         get {
             return builderResult.repeatedInt32
         }
         set (array) {
             builderResult.repeatedInt32 = array
         }
    }
    func setRepeatedInt32(value:Array<Int32>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedInt32 = value
      return self
    }
    internal func clearRepeatedInt32() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedInt32.removeAll(keepCapacity: false)
       return self
    }
    var repeatedInt64:Array<Int64> {
         get {
             return builderResult.repeatedInt64
         }
         set (array) {
             builderResult.repeatedInt64 = array
         }
    }
    func setRepeatedInt64(value:Array<Int64>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedInt64 = value
      return self
    }
    internal func clearRepeatedInt64() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedInt64.removeAll(keepCapacity: false)
       return self
    }
    var repeatedUint32:Array<UInt32> {
         get {
             return builderResult.repeatedUint32
         }
         set (array) {
             builderResult.repeatedUint32 = array
         }
    }
    func setRepeatedUint32(value:Array<UInt32>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedUint32 = value
      return self
    }
    internal func clearRepeatedUint32() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedUint32.removeAll(keepCapacity: false)
       return self
    }
    var repeatedUint64:Array<UInt64> {
         get {
             return builderResult.repeatedUint64
         }
         set (array) {
             builderResult.repeatedUint64 = array
         }
    }
    func setRepeatedUint64(value:Array<UInt64>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedUint64 = value
      return self
    }
    internal func clearRepeatedUint64() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedUint64.removeAll(keepCapacity: false)
       return self
    }
    var repeatedSint32:Array<Int32> {
         get {
             return builderResult.repeatedSint32
         }
         set (array) {
             builderResult.repeatedSint32 = array
         }
    }
    func setRepeatedSint32(value:Array<Int32>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedSint32 = value
      return self
    }
    internal func clearRepeatedSint32() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedSint32.removeAll(keepCapacity: false)
       return self
    }
    var repeatedSint64:Array<Int64> {
         get {
             return builderResult.repeatedSint64
         }
         set (array) {
             builderResult.repeatedSint64 = array
         }
    }
    func setRepeatedSint64(value:Array<Int64>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedSint64 = value
      return self
    }
    internal func clearRepeatedSint64() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedSint64.removeAll(keepCapacity: false)
       return self
    }
    var repeatedFixed32:Array<UInt32> {
         get {
             return builderResult.repeatedFixed32
         }
         set (array) {
             builderResult.repeatedFixed32 = array
         }
    }
    func setRepeatedFixed32(value:Array<UInt32>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedFixed32 = value
      return self
    }
    internal func clearRepeatedFixed32() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedFixed32.removeAll(keepCapacity: false)
       return self
    }
    var repeatedFixed64:Array<UInt64> {
         get {
             return builderResult.repeatedFixed64
         }
         set (array) {
             builderResult.repeatedFixed64 = array
         }
    }
    func setRepeatedFixed64(value:Array<UInt64>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedFixed64 = value
      return self
    }
    internal func clearRepeatedFixed64() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedFixed64.removeAll(keepCapacity: false)
       return self
    }
    var repeatedSfixed32:Array<Int32> {
         get {
             return builderResult.repeatedSfixed32
         }
         set (array) {
             builderResult.repeatedSfixed32 = array
         }
    }
    func setRepeatedSfixed32(value:Array<Int32>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedSfixed32 = value
      return self
    }
    internal func clearRepeatedSfixed32() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedSfixed32.removeAll(keepCapacity: false)
       return self
    }
    var repeatedSfixed64:Array<Int64> {
         get {
             return builderResult.repeatedSfixed64
         }
         set (array) {
             builderResult.repeatedSfixed64 = array
         }
    }
    func setRepeatedSfixed64(value:Array<Int64>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedSfixed64 = value
      return self
    }
    internal func clearRepeatedSfixed64() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedSfixed64.removeAll(keepCapacity: false)
       return self
    }
    var repeatedFloat:Array<Float> {
         get {
             return builderResult.repeatedFloat
         }
         set (array) {
             builderResult.repeatedFloat = array
         }
    }
    func setRepeatedFloat(value:Array<Float>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedFloat = value
      return self
    }
    internal func clearRepeatedFloat() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedFloat.removeAll(keepCapacity: false)
       return self
    }
    var repeatedDouble:Array<Double> {
         get {
             return builderResult.repeatedDouble
         }
         set (array) {
             builderResult.repeatedDouble = array
         }
    }
    func setRepeatedDouble(value:Array<Double>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedDouble = value
      return self
    }
    internal func clearRepeatedDouble() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedDouble.removeAll(keepCapacity: false)
       return self
    }
    var repeatedBool:Array<Bool> {
         get {
             return builderResult.repeatedBool
         }
         set (array) {
             builderResult.repeatedBool = array
         }
    }
    func setRepeatedBool(value:Array<Bool>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedBool = value
      return self
    }
    internal func clearRepeatedBool() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedBool.removeAll(keepCapacity: false)
       return self
    }
    var repeatedString:Array<String> {
         get {
             return builderResult.repeatedString
         }
         set (array) {
             builderResult.repeatedString = array
         }
    }
    func setRepeatedString(value:Array<String>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedString = value
      return self
    }
    internal func clearRepeatedString() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedString.removeAll(keepCapacity: false)
       return self
    }
    var repeatedBytes:Array<NSData> {
         get {
             return builderResult.repeatedBytes
         }
         set (array) {
             builderResult.repeatedBytes = array
         }
    }
    func setRepeatedBytes(value:Array<NSData>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedBytes = value
      return self
    }
    internal func clearRepeatedBytes() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedBytes.removeAll(keepCapacity: false)
       return self
    }
    var repeatedGroup:Array<ProtobufUnittest.TestAllTypes.RepeatedGroup> {
         get {
             return builderResult.repeatedGroup
         }
         set (value) {
             builderResult.repeatedGroup = value
         }
    }
    func setRepeatedGroup(value:Array<ProtobufUnittest.TestAllTypes.RepeatedGroup>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedGroup = value
      return self
    }
    internal func clearRepeatedGroup() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.repeatedGroup.removeAll(keepCapacity: false)
      return self
    }
    var repeatedNestedMessage:Array<ProtobufUnittest.TestAllTypes.NestedMessage> {
         get {
             return builderResult.repeatedNestedMessage
         }
         set (value) {
             builderResult.repeatedNestedMessage = value
         }
    }
    func setRepeatedNestedMessage(value:Array<ProtobufUnittest.TestAllTypes.NestedMessage>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedNestedMessage = value
      return self
    }
    internal func clearRepeatedNestedMessage() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.repeatedNestedMessage.removeAll(keepCapacity: false)
      return self
    }
    var repeatedForeignMessage:Array<ProtobufUnittest.ForeignMessage> {
         get {
             return builderResult.repeatedForeignMessage
         }
         set (value) {
             builderResult.repeatedForeignMessage = value
         }
    }
    func setRepeatedForeignMessage(value:Array<ProtobufUnittest.ForeignMessage>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedForeignMessage = value
      return self
    }
    internal func clearRepeatedForeignMessage() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.repeatedForeignMessage.removeAll(keepCapacity: false)
      return self
    }
    var repeatedImportMessage:Array<ProtobufUnittestImport.ImportMessage> {
         get {
             return builderResult.repeatedImportMessage
         }
         set (value) {
             builderResult.repeatedImportMessage = value
         }
    }
    func setRepeatedImportMessage(value:Array<ProtobufUnittestImport.ImportMessage>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedImportMessage = value
      return self
    }
    internal func clearRepeatedImportMessage() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.repeatedImportMessage.removeAll(keepCapacity: false)
      return self
    }
    var repeatedNestedEnum:Array<ProtobufUnittest.TestAllTypes.NestedEnum> {
        get {
            return builderResult.repeatedNestedEnum
        }
        set (value) {
            builderResult.repeatedNestedEnum = value
        }
    }
    func setRepeatedNestedEnum(value:Array<ProtobufUnittest.TestAllTypes.NestedEnum>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedNestedEnum = value
      return self
    }
    internal func clearRepeatedNestedEnum() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.repeatedNestedEnum.removeAll(keepCapacity: false)
      return self
    }
    var repeatedForeignEnum:Array<ProtobufUnittest.ForeignEnum> {
        get {
            return builderResult.repeatedForeignEnum
        }
        set (value) {
            builderResult.repeatedForeignEnum = value
        }
    }
    func setRepeatedForeignEnum(value:Array<ProtobufUnittest.ForeignEnum>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedForeignEnum = value
      return self
    }
    internal func clearRepeatedForeignEnum() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.repeatedForeignEnum.removeAll(keepCapacity: false)
      return self
    }
    var repeatedImportEnum:Array<ProtobufUnittestImport.ImportEnum> {
        get {
            return builderResult.repeatedImportEnum
        }
        set (value) {
            builderResult.repeatedImportEnum = value
        }
    }
    func setRepeatedImportEnum(value:Array<ProtobufUnittestImport.ImportEnum>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedImportEnum = value
      return self
    }
    internal func clearRepeatedImportEnum() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.repeatedImportEnum.removeAll(keepCapacity: false)
      return self
    }
    var repeatedStringPiece:Array<String> {
         get {
             return builderResult.repeatedStringPiece
         }
         set (array) {
             builderResult.repeatedStringPiece = array
         }
    }
    func setRepeatedStringPiece(value:Array<String>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedStringPiece = value
      return self
    }
    internal func clearRepeatedStringPiece() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedStringPiece.removeAll(keepCapacity: false)
       return self
    }
    var repeatedCord:Array<String> {
         get {
             return builderResult.repeatedCord
         }
         set (array) {
             builderResult.repeatedCord = array
         }
    }
    func setRepeatedCord(value:Array<String>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedCord = value
      return self
    }
    internal func clearRepeatedCord() -> ProtobufUnittest.TestAllTypesBuilder {
       builderResult.repeatedCord.removeAll(keepCapacity: false)
       return self
    }
    var repeatedLazyMessage:Array<ProtobufUnittest.TestAllTypes.NestedMessage> {
         get {
             return builderResult.repeatedLazyMessage
         }
         set (value) {
             builderResult.repeatedLazyMessage = value
         }
    }
    func setRepeatedLazyMessage(value:Array<ProtobufUnittest.TestAllTypes.NestedMessage>)-> ProtobufUnittest.TestAllTypesBuilder {
      self.repeatedLazyMessage = value
      return self
    }
    internal func clearRepeatedLazyMessage() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.repeatedLazyMessage.removeAll(keepCapacity: false)
      return self
    }
    var hasDefaultInt32:Bool {
         get {
              return builderResult.hasDefaultInt32
         }
    }
    var defaultInt32:Int32 {
         get {
              return builderResult.defaultInt32
         }
         set (value) {
             builderResult.hasDefaultInt32 = true
             builderResult.defaultInt32 = value
         }
    }
    func setDefaultInt32(value:Int32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultInt32 = value
      return self
    }
    internal func clearDefaultInt32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultInt32 = false
         builderResult.defaultInt32 = Int32(41)
         return self
    }
    var hasDefaultInt64:Bool {
         get {
              return builderResult.hasDefaultInt64
         }
    }
    var defaultInt64:Int64 {
         get {
              return builderResult.defaultInt64
         }
         set (value) {
             builderResult.hasDefaultInt64 = true
             builderResult.defaultInt64 = value
         }
    }
    func setDefaultInt64(value:Int64)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultInt64 = value
      return self
    }
    internal func clearDefaultInt64() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultInt64 = false
         builderResult.defaultInt64 = Int64(42)
         return self
    }
    var hasDefaultUint32:Bool {
         get {
              return builderResult.hasDefaultUint32
         }
    }
    var defaultUint32:UInt32 {
         get {
              return builderResult.defaultUint32
         }
         set (value) {
             builderResult.hasDefaultUint32 = true
             builderResult.defaultUint32 = value
         }
    }
    func setDefaultUint32(value:UInt32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultUint32 = value
      return self
    }
    internal func clearDefaultUint32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultUint32 = false
         builderResult.defaultUint32 = UInt32(43)
         return self
    }
    var hasDefaultUint64:Bool {
         get {
              return builderResult.hasDefaultUint64
         }
    }
    var defaultUint64:UInt64 {
         get {
              return builderResult.defaultUint64
         }
         set (value) {
             builderResult.hasDefaultUint64 = true
             builderResult.defaultUint64 = value
         }
    }
    func setDefaultUint64(value:UInt64)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultUint64 = value
      return self
    }
    internal func clearDefaultUint64() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultUint64 = false
         builderResult.defaultUint64 = UInt64(44)
         return self
    }
    var hasDefaultSint32:Bool {
         get {
              return builderResult.hasDefaultSint32
         }
    }
    var defaultSint32:Int32 {
         get {
              return builderResult.defaultSint32
         }
         set (value) {
             builderResult.hasDefaultSint32 = true
             builderResult.defaultSint32 = value
         }
    }
    func setDefaultSint32(value:Int32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultSint32 = value
      return self
    }
    internal func clearDefaultSint32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultSint32 = false
         builderResult.defaultSint32 = Int32(-45)
         return self
    }
    var hasDefaultSint64:Bool {
         get {
              return builderResult.hasDefaultSint64
         }
    }
    var defaultSint64:Int64 {
         get {
              return builderResult.defaultSint64
         }
         set (value) {
             builderResult.hasDefaultSint64 = true
             builderResult.defaultSint64 = value
         }
    }
    func setDefaultSint64(value:Int64)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultSint64 = value
      return self
    }
    internal func clearDefaultSint64() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultSint64 = false
         builderResult.defaultSint64 = Int64(46)
         return self
    }
    var hasDefaultFixed32:Bool {
         get {
              return builderResult.hasDefaultFixed32
         }
    }
    var defaultFixed32:UInt32 {
         get {
              return builderResult.defaultFixed32
         }
         set (value) {
             builderResult.hasDefaultFixed32 = true
             builderResult.defaultFixed32 = value
         }
    }
    func setDefaultFixed32(value:UInt32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultFixed32 = value
      return self
    }
    internal func clearDefaultFixed32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultFixed32 = false
         builderResult.defaultFixed32 = UInt32(47)
         return self
    }
    var hasDefaultFixed64:Bool {
         get {
              return builderResult.hasDefaultFixed64
         }
    }
    var defaultFixed64:UInt64 {
         get {
              return builderResult.defaultFixed64
         }
         set (value) {
             builderResult.hasDefaultFixed64 = true
             builderResult.defaultFixed64 = value
         }
    }
    func setDefaultFixed64(value:UInt64)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultFixed64 = value
      return self
    }
    internal func clearDefaultFixed64() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultFixed64 = false
         builderResult.defaultFixed64 = UInt64(48)
         return self
    }
    var hasDefaultSfixed32:Bool {
         get {
              return builderResult.hasDefaultSfixed32
         }
    }
    var defaultSfixed32:Int32 {
         get {
              return builderResult.defaultSfixed32
         }
         set (value) {
             builderResult.hasDefaultSfixed32 = true
             builderResult.defaultSfixed32 = value
         }
    }
    func setDefaultSfixed32(value:Int32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultSfixed32 = value
      return self
    }
    internal func clearDefaultSfixed32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultSfixed32 = false
         builderResult.defaultSfixed32 = Int32(49)
         return self
    }
    var hasDefaultSfixed64:Bool {
         get {
              return builderResult.hasDefaultSfixed64
         }
    }
    var defaultSfixed64:Int64 {
         get {
              return builderResult.defaultSfixed64
         }
         set (value) {
             builderResult.hasDefaultSfixed64 = true
             builderResult.defaultSfixed64 = value
         }
    }
    func setDefaultSfixed64(value:Int64)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultSfixed64 = value
      return self
    }
    internal func clearDefaultSfixed64() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultSfixed64 = false
         builderResult.defaultSfixed64 = Int64(-50)
         return self
    }
    var hasDefaultFloat:Bool {
         get {
              return builderResult.hasDefaultFloat
         }
    }
    var defaultFloat:Float {
         get {
              return builderResult.defaultFloat
         }
         set (value) {
             builderResult.hasDefaultFloat = true
             builderResult.defaultFloat = value
         }
    }
    func setDefaultFloat(value:Float)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultFloat = value
      return self
    }
    internal func clearDefaultFloat() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultFloat = false
         builderResult.defaultFloat = Float(51.5)
         return self
    }
    var hasDefaultDouble:Bool {
         get {
              return builderResult.hasDefaultDouble
         }
    }
    var defaultDouble:Double {
         get {
              return builderResult.defaultDouble
         }
         set (value) {
             builderResult.hasDefaultDouble = true
             builderResult.defaultDouble = value
         }
    }
    func setDefaultDouble(value:Double)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultDouble = value
      return self
    }
    internal func clearDefaultDouble() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultDouble = false
         builderResult.defaultDouble = Double(52000)
         return self
    }
    var hasDefaultBool:Bool {
         get {
              return builderResult.hasDefaultBool
         }
    }
    var defaultBool:Bool {
         get {
              return builderResult.defaultBool
         }
         set (value) {
             builderResult.hasDefaultBool = true
             builderResult.defaultBool = value
         }
    }
    func setDefaultBool(value:Bool)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultBool = value
      return self
    }
    internal func clearDefaultBool() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultBool = false
         builderResult.defaultBool = true
         return self
    }
    var hasDefaultString:Bool {
         get {
              return builderResult.hasDefaultString
         }
    }
    var defaultString:String {
         get {
              return builderResult.defaultString
         }
         set (value) {
             builderResult.hasDefaultString = true
             builderResult.defaultString = value
         }
    }
    func setDefaultString(value:String)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultString = value
      return self
    }
    internal func clearDefaultString() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultString = false
         builderResult.defaultString = "hello"
         return self
    }
    var hasDefaultBytes:Bool {
         get {
              return builderResult.hasDefaultBytes
         }
    }
    var defaultBytes:NSData {
         get {
              return builderResult.defaultBytes
         }
         set (value) {
             builderResult.hasDefaultBytes = true
             builderResult.defaultBytes = value
         }
    }
    func setDefaultBytes(value:NSData)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultBytes = value
      return self
    }
    internal func clearDefaultBytes() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultBytes = false
         builderResult.defaultBytes = NSData(bytes:([Byte]() + "world".utf8), length:5)
         return self
    }
      var hasDefaultNestedEnum:Bool{
          get {
              return builderResult.hasDefaultNestedEnum
          }
      }
      var defaultNestedEnum:ProtobufUnittest.TestAllTypes.NestedEnum {
          get {
              return builderResult.defaultNestedEnum
          }
          set (value) {
              builderResult.hasDefaultNestedEnum = true
              builderResult.defaultNestedEnum = value
          }
      }
      internal func setDefaultNestedEnum(value:ProtobufUnittest.TestAllTypes.NestedEnum)-> ProtobufUnittest.TestAllTypesBuilder {
        self.defaultNestedEnum = value
        return self
      }
      internal func clearDefaultNestedEnum() -> ProtobufUnittest.TestAllTypesBuilder {
         builderResult.hasDefaultNestedEnum = false
         builderResult.defaultNestedEnum = .Bar
         return self
      }
      var hasDefaultForeignEnum:Bool{
          get {
              return builderResult.hasDefaultForeignEnum
          }
      }
      var defaultForeignEnum:ProtobufUnittest.ForeignEnum {
          get {
              return builderResult.defaultForeignEnum
          }
          set (value) {
              builderResult.hasDefaultForeignEnum = true
              builderResult.defaultForeignEnum = value
          }
      }
      internal func setDefaultForeignEnum(value:ProtobufUnittest.ForeignEnum)-> ProtobufUnittest.TestAllTypesBuilder {
        self.defaultForeignEnum = value
        return self
      }
      internal func clearDefaultForeignEnum() -> ProtobufUnittest.TestAllTypesBuilder {
         builderResult.hasDefaultForeignEnum = false
         builderResult.defaultForeignEnum = .ForeignBar
         return self
      }
      var hasDefaultImportEnum:Bool{
          get {
              return builderResult.hasDefaultImportEnum
          }
      }
      var defaultImportEnum:ProtobufUnittestImport.ImportEnum {
          get {
              return builderResult.defaultImportEnum
          }
          set (value) {
              builderResult.hasDefaultImportEnum = true
              builderResult.defaultImportEnum = value
          }
      }
      internal func setDefaultImportEnum(value:ProtobufUnittestImport.ImportEnum)-> ProtobufUnittest.TestAllTypesBuilder {
        self.defaultImportEnum = value
        return self
      }
      internal func clearDefaultImportEnum() -> ProtobufUnittest.TestAllTypesBuilder {
         builderResult.hasDefaultImportEnum = false
         builderResult.defaultImportEnum = .ImportBar
         return self
      }
    var hasDefaultStringPiece:Bool {
         get {
              return builderResult.hasDefaultStringPiece
         }
    }
    var defaultStringPiece:String {
         get {
              return builderResult.defaultStringPiece
         }
         set (value) {
             builderResult.hasDefaultStringPiece = true
             builderResult.defaultStringPiece = value
         }
    }
    func setDefaultStringPiece(value:String)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultStringPiece = value
      return self
    }
    internal func clearDefaultStringPiece() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultStringPiece = false
         builderResult.defaultStringPiece = "abc"
         return self
    }
    var hasDefaultCord:Bool {
         get {
              return builderResult.hasDefaultCord
         }
    }
    var defaultCord:String {
         get {
              return builderResult.defaultCord
         }
         set (value) {
             builderResult.hasDefaultCord = true
             builderResult.defaultCord = value
         }
    }
    func setDefaultCord(value:String)-> ProtobufUnittest.TestAllTypesBuilder {
      self.defaultCord = value
      return self
    }
    internal func clearDefaultCord() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasDefaultCord = false
         builderResult.defaultCord = "123"
         return self
    }
    var hasOneofUint32:Bool {
         get {
              return builderResult.hasOneofUint32
         }
    }
    var oneofUint32:UInt32 {
         get {
              return builderResult.oneofUint32
         }
         set (value) {
             builderResult.hasOneofUint32 = true
             builderResult.oneofUint32 = value
         }
    }
    func setOneofUint32(value:UInt32)-> ProtobufUnittest.TestAllTypesBuilder {
      self.oneofUint32 = value
      return self
    }
    internal func clearOneofUint32() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOneofUint32 = false
         builderResult.oneofUint32 = UInt32(0)
         return self
    }
    var hasOneofNestedMessage:Bool {
         get {
             return builderResult.hasOneofNestedMessage
         }
    }
    var oneofNestedMessage:ProtobufUnittest.TestAllTypes.NestedMessage {
         get {
             return builderResult.oneofNestedMessage
         }
         set (value) {
             builderResult.hasOneofNestedMessage = true
             builderResult.oneofNestedMessage = value
         }
    }
    func setOneofNestedMessage(value:ProtobufUnittest.TestAllTypes.NestedMessage)-> ProtobufUnittest.TestAllTypesBuilder {
      self.oneofNestedMessage = value
      return self
    }
    internal func mergeOneofNestedMessage(value:ProtobufUnittest.TestAllTypes.NestedMessage) -> ProtobufUnittest.TestAllTypesBuilder {
      if (builderResult.hasOneofNestedMessage) {
        builderResult.oneofNestedMessage = ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.oneofNestedMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.oneofNestedMessage = value
      }
      builderResult.hasOneofNestedMessage = true
      return self
    }
    internal func clearOneofNestedMessage() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult.hasOneofNestedMessage = false
      builderResult.oneofNestedMessage = ProtobufUnittest.TestAllTypes.NestedMessage()
      return self
    }
    var hasOneofString:Bool {
         get {
              return builderResult.hasOneofString
         }
    }
    var oneofString:String {
         get {
              return builderResult.oneofString
         }
         set (value) {
             builderResult.hasOneofString = true
             builderResult.oneofString = value
         }
    }
    func setOneofString(value:String)-> ProtobufUnittest.TestAllTypesBuilder {
      self.oneofString = value
      return self
    }
    internal func clearOneofString() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOneofString = false
         builderResult.oneofString = ""
         return self
    }
    var hasOneofBytes:Bool {
         get {
              return builderResult.hasOneofBytes
         }
    }
    var oneofBytes:NSData {
         get {
              return builderResult.oneofBytes
         }
         set (value) {
             builderResult.hasOneofBytes = true
             builderResult.oneofBytes = value
         }
    }
    func setOneofBytes(value:NSData)-> ProtobufUnittest.TestAllTypesBuilder {
      self.oneofBytes = value
      return self
    }
    internal func clearOneofBytes() -> ProtobufUnittest.TestAllTypesBuilder{
         builderResult.hasOneofBytes = false
         builderResult.oneofBytes = NSData()
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestAllTypesBuilder {
      builderResult = ProtobufUnittest.TestAllTypes()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestAllTypesBuilder {
      return ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestAllTypes {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestAllTypes {
      var returnMe:ProtobufUnittest.TestAllTypes = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestAllTypesBuilder {
      if (other == ProtobufUnittest.TestAllTypes()) {
       return self
      }
      if other.hasOptionalInt32 {
           optionalInt32 = other.optionalInt32
      }
      if other.hasOptionalInt64 {
           optionalInt64 = other.optionalInt64
      }
      if other.hasOptionalUint32 {
           optionalUint32 = other.optionalUint32
      }
      if other.hasOptionalUint64 {
           optionalUint64 = other.optionalUint64
      }
      if other.hasOptionalSint32 {
           optionalSint32 = other.optionalSint32
      }
      if other.hasOptionalSint64 {
           optionalSint64 = other.optionalSint64
      }
      if other.hasOptionalFixed32 {
           optionalFixed32 = other.optionalFixed32
      }
      if other.hasOptionalFixed64 {
           optionalFixed64 = other.optionalFixed64
      }
      if other.hasOptionalSfixed32 {
           optionalSfixed32 = other.optionalSfixed32
      }
      if other.hasOptionalSfixed64 {
           optionalSfixed64 = other.optionalSfixed64
      }
      if other.hasOptionalFloat {
           optionalFloat = other.optionalFloat
      }
      if other.hasOptionalDouble {
           optionalDouble = other.optionalDouble
      }
      if other.hasOptionalBool {
           optionalBool = other.optionalBool
      }
      if other.hasOptionalString {
           optionalString = other.optionalString
      }
      if other.hasOptionalBytes {
           optionalBytes = other.optionalBytes
      }
      if (other.hasOptionalGroup) {
          mergeOptionalGroup(other.optionalGroup)
      }
      if (other.hasOptionalNestedMessage) {
          mergeOptionalNestedMessage(other.optionalNestedMessage)
      }
      if (other.hasOptionalForeignMessage) {
          mergeOptionalForeignMessage(other.optionalForeignMessage)
      }
      if (other.hasOptionalImportMessage) {
          mergeOptionalImportMessage(other.optionalImportMessage)
      }
      if other.hasOptionalNestedEnum {
           optionalNestedEnum = other.optionalNestedEnum
      }
      if other.hasOptionalForeignEnum {
           optionalForeignEnum = other.optionalForeignEnum
      }
      if other.hasOptionalImportEnum {
           optionalImportEnum = other.optionalImportEnum
      }
      if other.hasOptionalStringPiece {
           optionalStringPiece = other.optionalStringPiece
      }
      if other.hasOptionalCord {
           optionalCord = other.optionalCord
      }
      if (other.hasOptionalPublicImportMessage) {
          mergeOptionalPublicImportMessage(other.optionalPublicImportMessage)
      }
      if (other.hasOptionalLazyMessage) {
          mergeOptionalLazyMessage(other.optionalLazyMessage)
      }
      if !other.repeatedInt32.isEmpty {
          builderResult.repeatedInt32 += other.repeatedInt32
      }
      if !other.repeatedInt64.isEmpty {
          builderResult.repeatedInt64 += other.repeatedInt64
      }
      if !other.repeatedUint32.isEmpty {
          builderResult.repeatedUint32 += other.repeatedUint32
      }
      if !other.repeatedUint64.isEmpty {
          builderResult.repeatedUint64 += other.repeatedUint64
      }
      if !other.repeatedSint32.isEmpty {
          builderResult.repeatedSint32 += other.repeatedSint32
      }
      if !other.repeatedSint64.isEmpty {
          builderResult.repeatedSint64 += other.repeatedSint64
      }
      if !other.repeatedFixed32.isEmpty {
          builderResult.repeatedFixed32 += other.repeatedFixed32
      }
      if !other.repeatedFixed64.isEmpty {
          builderResult.repeatedFixed64 += other.repeatedFixed64
      }
      if !other.repeatedSfixed32.isEmpty {
          builderResult.repeatedSfixed32 += other.repeatedSfixed32
      }
      if !other.repeatedSfixed64.isEmpty {
          builderResult.repeatedSfixed64 += other.repeatedSfixed64
      }
      if !other.repeatedFloat.isEmpty {
          builderResult.repeatedFloat += other.repeatedFloat
      }
      if !other.repeatedDouble.isEmpty {
          builderResult.repeatedDouble += other.repeatedDouble
      }
      if !other.repeatedBool.isEmpty {
          builderResult.repeatedBool += other.repeatedBool
      }
      if !other.repeatedString.isEmpty {
          builderResult.repeatedString += other.repeatedString
      }
      if !other.repeatedBytes.isEmpty {
          builderResult.repeatedBytes += other.repeatedBytes
      }
      if !other.repeatedGroup.isEmpty  {
         builderResult.repeatedGroup += other.repeatedGroup
      }
      if !other.repeatedNestedMessage.isEmpty  {
         builderResult.repeatedNestedMessage += other.repeatedNestedMessage
      }
      if !other.repeatedForeignMessage.isEmpty  {
         builderResult.repeatedForeignMessage += other.repeatedForeignMessage
      }
      if !other.repeatedImportMessage.isEmpty  {
         builderResult.repeatedImportMessage += other.repeatedImportMessage
      }
      if !other.repeatedNestedEnum.isEmpty {
         builderResult.repeatedNestedEnum += other.repeatedNestedEnum
      }
      if !other.repeatedForeignEnum.isEmpty {
         builderResult.repeatedForeignEnum += other.repeatedForeignEnum
      }
      if !other.repeatedImportEnum.isEmpty {
         builderResult.repeatedImportEnum += other.repeatedImportEnum
      }
      if !other.repeatedStringPiece.isEmpty {
          builderResult.repeatedStringPiece += other.repeatedStringPiece
      }
      if !other.repeatedCord.isEmpty {
          builderResult.repeatedCord += other.repeatedCord
      }
      if !other.repeatedLazyMessage.isEmpty  {
         builderResult.repeatedLazyMessage += other.repeatedLazyMessage
      }
      if other.hasDefaultInt32 {
           defaultInt32 = other.defaultInt32
      }
      if other.hasDefaultInt64 {
           defaultInt64 = other.defaultInt64
      }
      if other.hasDefaultUint32 {
           defaultUint32 = other.defaultUint32
      }
      if other.hasDefaultUint64 {
           defaultUint64 = other.defaultUint64
      }
      if other.hasDefaultSint32 {
           defaultSint32 = other.defaultSint32
      }
      if other.hasDefaultSint64 {
           defaultSint64 = other.defaultSint64
      }
      if other.hasDefaultFixed32 {
           defaultFixed32 = other.defaultFixed32
      }
      if other.hasDefaultFixed64 {
           defaultFixed64 = other.defaultFixed64
      }
      if other.hasDefaultSfixed32 {
           defaultSfixed32 = other.defaultSfixed32
      }
      if other.hasDefaultSfixed64 {
           defaultSfixed64 = other.defaultSfixed64
      }
      if other.hasDefaultFloat {
           defaultFloat = other.defaultFloat
      }
      if other.hasDefaultDouble {
           defaultDouble = other.defaultDouble
      }
      if other.hasDefaultBool {
           defaultBool = other.defaultBool
      }
      if other.hasDefaultString {
           defaultString = other.defaultString
      }
      if other.hasDefaultBytes {
           defaultBytes = other.defaultBytes
      }
      if other.hasDefaultNestedEnum {
           defaultNestedEnum = other.defaultNestedEnum
      }
      if other.hasDefaultForeignEnum {
           defaultForeignEnum = other.defaultForeignEnum
      }
      if other.hasDefaultImportEnum {
           defaultImportEnum = other.defaultImportEnum
      }
      if other.hasDefaultStringPiece {
           defaultStringPiece = other.defaultStringPiece
      }
      if other.hasDefaultCord {
           defaultCord = other.defaultCord
      }
      if other.hasOneofUint32 {
           oneofUint32 = other.oneofUint32
      }
      if (other.hasOneofNestedMessage) {
          mergeOneofNestedMessage(other.oneofNestedMessage)
      }
      if other.hasOneofString {
           oneofString = other.oneofString
      }
      if other.hasOneofBytes {
           oneofBytes = other.oneofBytes
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestAllTypesBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllTypesBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          optionalInt32 = input.readInt32()

        case 16 :
          optionalInt64 = input.readInt64()

        case 24 :
          optionalUint32 = input.readUInt32()

        case 32 :
          optionalUint64 = input.readUInt64()

        case 40 :
          optionalSint32 = input.readSInt32()

        case 48 :
          optionalSint64 = input.readSInt64()

        case 61 :
          optionalFixed32 = input.readFixed32()

        case 65 :
          optionalFixed64 = input.readFixed64()

        case 77 :
          optionalSfixed32 = input.readSFixed32()

        case 81 :
          optionalSfixed64 = input.readSFixed64()

        case 93 :
          optionalFloat = input.readFloat()

        case 97 :
          optionalDouble = input.readDouble()

        case 104 :
          optionalBool = input.readBool()

        case 114 :
          optionalString = input.readString()

        case 122 :
          optionalBytes = input.readData()

        case 131 :
          var subBuilder:ProtobufUnittest.TestAllTypes.OptionalGroupBuilder = ProtobufUnittest.TestAllTypes.OptionalGroup.builder()
          if hasOptionalGroup {
            subBuilder.mergeFrom(optionalGroup)
          }
          input.readGroup(16, builder:subBuilder, extensionRegistry:extensionRegistry)
          optionalGroup = subBuilder.buildPartial()

        case 146 :
          var subBuilder:ProtobufUnittest.TestAllTypes.NestedMessageBuilder = ProtobufUnittest.TestAllTypes.NestedMessage.builder()
          if hasOptionalNestedMessage {
            subBuilder.mergeFrom(optionalNestedMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          optionalNestedMessage = subBuilder.buildPartial()

        case 154 :
          var subBuilder:ProtobufUnittest.ForeignMessageBuilder = ProtobufUnittest.ForeignMessage.builder()
          if hasOptionalForeignMessage {
            subBuilder.mergeFrom(optionalForeignMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          optionalForeignMessage = subBuilder.buildPartial()

        case 162 :
          var subBuilder:ProtobufUnittestImport.ImportMessageBuilder = ProtobufUnittestImport.ImportMessage.builder()
          if hasOptionalImportMessage {
            subBuilder.mergeFrom(optionalImportMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          optionalImportMessage = subBuilder.buildPartial()

        case 168 :
          let valueIntoptionalNestedEnum = input.readEnum()
          if let enumsoptionalNestedEnum = ProtobufUnittest.TestAllTypes.NestedEnum(rawValue:valueIntoptionalNestedEnum){
               optionalNestedEnum = enumsoptionalNestedEnum
          } else {
               unknownFieldsBuilder.mergeVarintField(21, value:Int64(valueIntoptionalNestedEnum))
          }

        case 176 :
          let valueIntoptionalForeignEnum = input.readEnum()
          if let enumsoptionalForeignEnum = ProtobufUnittest.ForeignEnum(rawValue:valueIntoptionalForeignEnum){
               optionalForeignEnum = enumsoptionalForeignEnum
          } else {
               unknownFieldsBuilder.mergeVarintField(22, value:Int64(valueIntoptionalForeignEnum))
          }

        case 184 :
          let valueIntoptionalImportEnum = input.readEnum()
          if let enumsoptionalImportEnum = ProtobufUnittestImport.ImportEnum(rawValue:valueIntoptionalImportEnum){
               optionalImportEnum = enumsoptionalImportEnum
          } else {
               unknownFieldsBuilder.mergeVarintField(23, value:Int64(valueIntoptionalImportEnum))
          }

        case 194 :
          optionalStringPiece = input.readString()

        case 202 :
          optionalCord = input.readString()

        case 210 :
          var subBuilder:ProtobufUnittestImport.PublicImportMessageBuilder = ProtobufUnittestImport.PublicImportMessage.builder()
          if hasOptionalPublicImportMessage {
            subBuilder.mergeFrom(optionalPublicImportMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          optionalPublicImportMessage = subBuilder.buildPartial()

        case 218 :
          var subBuilder:ProtobufUnittest.TestAllTypes.NestedMessageBuilder = ProtobufUnittest.TestAllTypes.NestedMessage.builder()
          if hasOptionalLazyMessage {
            subBuilder.mergeFrom(optionalLazyMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          optionalLazyMessage = subBuilder.buildPartial()

        case 248 :
          repeatedInt32 += [input.readInt32()]

        case 256 :
          repeatedInt64 += [input.readInt64()]

        case 264 :
          repeatedUint32 += [input.readUInt32()]

        case 272 :
          repeatedUint64 += [input.readUInt64()]

        case 280 :
          repeatedSint32 += [input.readSInt32()]

        case 288 :
          repeatedSint64 += [input.readSInt64()]

        case 301 :
          repeatedFixed32 += [input.readFixed32()]

        case 305 :
          repeatedFixed64 += [input.readFixed64()]

        case 317 :
          repeatedSfixed32 += [input.readSFixed32()]

        case 321 :
          repeatedSfixed64 += [input.readSFixed64()]

        case 333 :
          repeatedFloat += [input.readFloat()]

        case 337 :
          repeatedDouble += [input.readDouble()]

        case 344 :
          repeatedBool += [input.readBool()]

        case 354 :
          repeatedString += [input.readString()]

        case 362 :
          repeatedBytes += [input.readData()]

        case 371 :
          var subBuilder = ProtobufUnittest.TestAllTypes.RepeatedGroup.builder()
          input.readGroup(46,builder:subBuilder,extensionRegistry:extensionRegistry)
          repeatedGroup += [subBuilder.buildPartial()]

        case 386 :
          var subBuilder = ProtobufUnittest.TestAllTypes.NestedMessage.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          repeatedNestedMessage += [subBuilder.buildPartial()]

        case 394 :
          var subBuilder = ProtobufUnittest.ForeignMessage.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          repeatedForeignMessage += [subBuilder.buildPartial()]

        case 402 :
          var subBuilder = ProtobufUnittestImport.ImportMessage.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          repeatedImportMessage += [subBuilder.buildPartial()]

        case 408 :
          let valueIntrepeatedNestedEnum = input.readEnum()
          if let enumsrepeatedNestedEnum = ProtobufUnittest.TestAllTypes.NestedEnum(rawValue:valueIntrepeatedNestedEnum) {
               builderResult.repeatedNestedEnum += [enumsrepeatedNestedEnum]
          } else {
               unknownFieldsBuilder.mergeVarintField(51, value:Int64(valueIntrepeatedNestedEnum))
          }

        case 416 :
          let valueIntrepeatedForeignEnum = input.readEnum()
          if let enumsrepeatedForeignEnum = ProtobufUnittest.ForeignEnum(rawValue:valueIntrepeatedForeignEnum) {
               builderResult.repeatedForeignEnum += [enumsrepeatedForeignEnum]
          } else {
               unknownFieldsBuilder.mergeVarintField(52, value:Int64(valueIntrepeatedForeignEnum))
          }

        case 424 :
          let valueIntrepeatedImportEnum = input.readEnum()
          if let enumsrepeatedImportEnum = ProtobufUnittestImport.ImportEnum(rawValue:valueIntrepeatedImportEnum) {
               builderResult.repeatedImportEnum += [enumsrepeatedImportEnum]
          } else {
               unknownFieldsBuilder.mergeVarintField(53, value:Int64(valueIntrepeatedImportEnum))
          }

        case 434 :
          repeatedStringPiece += [input.readString()]

        case 442 :
          repeatedCord += [input.readString()]

        case 458 :
          var subBuilder = ProtobufUnittest.TestAllTypes.NestedMessage.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          repeatedLazyMessage += [subBuilder.buildPartial()]

        case 488 :
          defaultInt32 = input.readInt32()

        case 496 :
          defaultInt64 = input.readInt64()

        case 504 :
          defaultUint32 = input.readUInt32()

        case 512 :
          defaultUint64 = input.readUInt64()

        case 520 :
          defaultSint32 = input.readSInt32()

        case 528 :
          defaultSint64 = input.readSInt64()

        case 541 :
          defaultFixed32 = input.readFixed32()

        case 545 :
          defaultFixed64 = input.readFixed64()

        case 557 :
          defaultSfixed32 = input.readSFixed32()

        case 561 :
          defaultSfixed64 = input.readSFixed64()

        case 573 :
          defaultFloat = input.readFloat()

        case 577 :
          defaultDouble = input.readDouble()

        case 584 :
          defaultBool = input.readBool()

        case 594 :
          defaultString = input.readString()

        case 602 :
          defaultBytes = input.readData()

        case 648 :
          let valueIntdefaultNestedEnum = input.readEnum()
          if let enumsdefaultNestedEnum = ProtobufUnittest.TestAllTypes.NestedEnum(rawValue:valueIntdefaultNestedEnum){
               defaultNestedEnum = enumsdefaultNestedEnum
          } else {
               unknownFieldsBuilder.mergeVarintField(81, value:Int64(valueIntdefaultNestedEnum))
          }

        case 656 :
          let valueIntdefaultForeignEnum = input.readEnum()
          if let enumsdefaultForeignEnum = ProtobufUnittest.ForeignEnum(rawValue:valueIntdefaultForeignEnum){
               defaultForeignEnum = enumsdefaultForeignEnum
          } else {
               unknownFieldsBuilder.mergeVarintField(82, value:Int64(valueIntdefaultForeignEnum))
          }

        case 664 :
          let valueIntdefaultImportEnum = input.readEnum()
          if let enumsdefaultImportEnum = ProtobufUnittestImport.ImportEnum(rawValue:valueIntdefaultImportEnum){
               defaultImportEnum = enumsdefaultImportEnum
          } else {
               unknownFieldsBuilder.mergeVarintField(83, value:Int64(valueIntdefaultImportEnum))
          }

        case 674 :
          defaultStringPiece = input.readString()

        case 682 :
          defaultCord = input.readString()

        case 888 :
          oneofUint32 = input.readUInt32()

        case 898 :
          var subBuilder:ProtobufUnittest.TestAllTypes.NestedMessageBuilder = ProtobufUnittest.TestAllTypes.NestedMessage.builder()
          if hasOneofNestedMessage {
            subBuilder.mergeFrom(oneofNestedMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          oneofNestedMessage = subBuilder.buildPartial()

        case 906 :
          oneofString = input.readString()

        case 914 :
          oneofBytes = input.readData()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class NestedTestAllTypes : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasChild:Bool = false
    private(set) var child:ProtobufUnittest.NestedTestAllTypes = ProtobufUnittest.NestedTestAllTypes()
    private(set) var hasPayload:Bool = false
    private(set) var payload:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasChild {
        output.writeMessage(1, value:child)
      }
      if hasPayload {
        output.writeMessage(2, value:payload)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasChild {
        serialize_size += child.computeMessageSize(1)
      }
      if hasPayload {
        serialize_size += payload.computeMessageSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.NestedTestAllTypes {
      return ProtobufUnittest.NestedTestAllTypes.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.NestedTestAllTypes {
      return ProtobufUnittest.NestedTestAllTypes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.NestedTestAllTypes {
      return ProtobufUnittest.NestedTestAllTypes.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.NestedTestAllTypes {
      return ProtobufUnittest.NestedTestAllTypes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.NestedTestAllTypes {
      return ProtobufUnittest.NestedTestAllTypes.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.NestedTestAllTypes {
      return ProtobufUnittest.NestedTestAllTypes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.NestedTestAllTypesBuilder {
      return ProtobufUnittest.NestedTestAllTypes.classBuilder() as ProtobufUnittest.NestedTestAllTypesBuilder
    }
    internal func builder() -> ProtobufUnittest.NestedTestAllTypesBuilder {
      return classBuilder() as ProtobufUnittest.NestedTestAllTypesBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.NestedTestAllTypesBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.NestedTestAllTypes.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.NestedTestAllTypesBuilder {
      return ProtobufUnittest.NestedTestAllTypes.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.NestedTestAllTypes) -> ProtobufUnittest.NestedTestAllTypesBuilder {
      return ProtobufUnittest.NestedTestAllTypes.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasChild {
        output += "\(indent) child {\n"
        child.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasPayload {
        output += "\(indent) payload {\n"
        payload.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasChild {
              hashCode = (hashCode &* 31) &+ child.hashValue
            }
            if hasPayload {
              hashCode = (hashCode &* 31) &+ payload.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.NestedTestAllTypes"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.NestedTestAllTypes"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.NestedTestAllTypes.self
    }
    //Meta information declaration end

  }

  final internal class NestedTestAllTypesBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.NestedTestAllTypes

    required override internal init () {
       builderResult = ProtobufUnittest.NestedTestAllTypes()
       super.init()
    }
    var hasChild:Bool {
         get {
             return builderResult.hasChild
         }
    }
    var child:ProtobufUnittest.NestedTestAllTypes {
         get {
             return builderResult.child
         }
         set (value) {
             builderResult.hasChild = true
             builderResult.child = value
         }
    }
    func setChild(value:ProtobufUnittest.NestedTestAllTypes)-> ProtobufUnittest.NestedTestAllTypesBuilder {
      self.child = value
      return self
    }
    internal func mergeChild(value:ProtobufUnittest.NestedTestAllTypes) -> ProtobufUnittest.NestedTestAllTypesBuilder {
      if (builderResult.hasChild) {
        builderResult.child = ProtobufUnittest.NestedTestAllTypes.builderWithPrototype(builderResult.child).mergeFrom(value).buildPartial()
      } else {
        builderResult.child = value
      }
      builderResult.hasChild = true
      return self
    }
    internal func clearChild() -> ProtobufUnittest.NestedTestAllTypesBuilder {
      builderResult.hasChild = false
      builderResult.child = ProtobufUnittest.NestedTestAllTypes()
      return self
    }
    var hasPayload:Bool {
         get {
             return builderResult.hasPayload
         }
    }
    var payload:ProtobufUnittest.TestAllTypes {
         get {
             return builderResult.payload
         }
         set (value) {
             builderResult.hasPayload = true
             builderResult.payload = value
         }
    }
    func setPayload(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.NestedTestAllTypesBuilder {
      self.payload = value
      return self
    }
    internal func mergePayload(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.NestedTestAllTypesBuilder {
      if (builderResult.hasPayload) {
        builderResult.payload = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.payload).mergeFrom(value).buildPartial()
      } else {
        builderResult.payload = value
      }
      builderResult.hasPayload = true
      return self
    }
    internal func clearPayload() -> ProtobufUnittest.NestedTestAllTypesBuilder {
      builderResult.hasPayload = false
      builderResult.payload = ProtobufUnittest.TestAllTypes()
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.NestedTestAllTypesBuilder {
      builderResult = ProtobufUnittest.NestedTestAllTypes()
      return self
    }
    internal override func clone() -> ProtobufUnittest.NestedTestAllTypesBuilder {
      return ProtobufUnittest.NestedTestAllTypes.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.NestedTestAllTypes {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.NestedTestAllTypes {
      var returnMe:ProtobufUnittest.NestedTestAllTypes = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.NestedTestAllTypes) -> ProtobufUnittest.NestedTestAllTypesBuilder {
      if (other == ProtobufUnittest.NestedTestAllTypes()) {
       return self
      }
      if (other.hasChild) {
          mergeChild(other.child)
      }
      if (other.hasPayload) {
          mergePayload(other.payload)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.NestedTestAllTypesBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.NestedTestAllTypesBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:ProtobufUnittest.NestedTestAllTypesBuilder = ProtobufUnittest.NestedTestAllTypes.builder()
          if hasChild {
            subBuilder.mergeFrom(child)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          child = subBuilder.buildPartial()

        case 18 :
          var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
          if hasPayload {
            subBuilder.mergeFrom(payload)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          payload = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestDeprecatedFields : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasDeprecatedInt32:Bool = false
    private(set) var deprecatedInt32:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasDeprecatedInt32 {
        output.writeInt32(1, value:deprecatedInt32)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasDeprecatedInt32 {
        serialize_size += deprecatedInt32.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestDeprecatedFields {
      return ProtobufUnittest.TestDeprecatedFields.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDeprecatedFields {
      return ProtobufUnittest.TestDeprecatedFields.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestDeprecatedFields {
      return ProtobufUnittest.TestDeprecatedFields.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestDeprecatedFields {
      return ProtobufUnittest.TestDeprecatedFields.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestDeprecatedFields {
      return ProtobufUnittest.TestDeprecatedFields.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDeprecatedFields {
      return ProtobufUnittest.TestDeprecatedFields.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestDeprecatedFieldsBuilder {
      return ProtobufUnittest.TestDeprecatedFields.classBuilder() as ProtobufUnittest.TestDeprecatedFieldsBuilder
    }
    internal func builder() -> ProtobufUnittest.TestDeprecatedFieldsBuilder {
      return classBuilder() as ProtobufUnittest.TestDeprecatedFieldsBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDeprecatedFieldsBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDeprecatedFields.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestDeprecatedFieldsBuilder {
      return ProtobufUnittest.TestDeprecatedFields.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestDeprecatedFields) -> ProtobufUnittest.TestDeprecatedFieldsBuilder {
      return ProtobufUnittest.TestDeprecatedFields.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasDeprecatedInt32 {
        output += "\(indent) deprecatedInt32: \(deprecatedInt32) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasDeprecatedInt32 {
               hashCode = (hashCode &* 31) &+ deprecatedInt32.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestDeprecatedFields"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestDeprecatedFields"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestDeprecatedFields.self
    }
    //Meta information declaration end

  }

  final internal class TestDeprecatedFieldsBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestDeprecatedFields

    required override internal init () {
       builderResult = ProtobufUnittest.TestDeprecatedFields()
       super.init()
    }
    var hasDeprecatedInt32:Bool {
         get {
              return builderResult.hasDeprecatedInt32
         }
    }
    var deprecatedInt32:Int32 {
         get {
              return builderResult.deprecatedInt32
         }
         set (value) {
             builderResult.hasDeprecatedInt32 = true
             builderResult.deprecatedInt32 = value
         }
    }
    func setDeprecatedInt32(value:Int32)-> ProtobufUnittest.TestDeprecatedFieldsBuilder {
      self.deprecatedInt32 = value
      return self
    }
    internal func clearDeprecatedInt32() -> ProtobufUnittest.TestDeprecatedFieldsBuilder{
         builderResult.hasDeprecatedInt32 = false
         builderResult.deprecatedInt32 = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestDeprecatedFieldsBuilder {
      builderResult = ProtobufUnittest.TestDeprecatedFields()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestDeprecatedFieldsBuilder {
      return ProtobufUnittest.TestDeprecatedFields.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestDeprecatedFields {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestDeprecatedFields {
      var returnMe:ProtobufUnittest.TestDeprecatedFields = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestDeprecatedFields) -> ProtobufUnittest.TestDeprecatedFieldsBuilder {
      if (other == ProtobufUnittest.TestDeprecatedFields()) {
       return self
      }
      if other.hasDeprecatedInt32 {
           deprecatedInt32 = other.deprecatedInt32
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestDeprecatedFieldsBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDeprecatedFieldsBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          deprecatedInt32 = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class ForeignMessage : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasC:Bool = false
    private(set) var c:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasC {
        output.writeInt32(1, value:c)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasC {
        serialize_size += c.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.ForeignMessage {
      return ProtobufUnittest.ForeignMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.ForeignMessage {
      return ProtobufUnittest.ForeignMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.ForeignMessage {
      return ProtobufUnittest.ForeignMessage.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.ForeignMessage {
      return ProtobufUnittest.ForeignMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.ForeignMessage {
      return ProtobufUnittest.ForeignMessage.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.ForeignMessage {
      return ProtobufUnittest.ForeignMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.ForeignMessageBuilder {
      return ProtobufUnittest.ForeignMessage.classBuilder() as ProtobufUnittest.ForeignMessageBuilder
    }
    internal func builder() -> ProtobufUnittest.ForeignMessageBuilder {
      return classBuilder() as ProtobufUnittest.ForeignMessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.ForeignMessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.ForeignMessage.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.ForeignMessageBuilder {
      return ProtobufUnittest.ForeignMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.ForeignMessage) -> ProtobufUnittest.ForeignMessageBuilder {
      return ProtobufUnittest.ForeignMessage.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasC {
        output += "\(indent) c: \(c) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasC {
               hashCode = (hashCode &* 31) &+ c.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.ForeignMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.ForeignMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.ForeignMessage.self
    }
    //Meta information declaration end

  }

  final internal class ForeignMessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.ForeignMessage

    required override internal init () {
       builderResult = ProtobufUnittest.ForeignMessage()
       super.init()
    }
    var hasC:Bool {
         get {
              return builderResult.hasC
         }
    }
    var c:Int32 {
         get {
              return builderResult.c
         }
         set (value) {
             builderResult.hasC = true
             builderResult.c = value
         }
    }
    func setC(value:Int32)-> ProtobufUnittest.ForeignMessageBuilder {
      self.c = value
      return self
    }
    internal func clearC() -> ProtobufUnittest.ForeignMessageBuilder{
         builderResult.hasC = false
         builderResult.c = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.ForeignMessageBuilder {
      builderResult = ProtobufUnittest.ForeignMessage()
      return self
    }
    internal override func clone() -> ProtobufUnittest.ForeignMessageBuilder {
      return ProtobufUnittest.ForeignMessage.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.ForeignMessage {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.ForeignMessage {
      var returnMe:ProtobufUnittest.ForeignMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.ForeignMessage) -> ProtobufUnittest.ForeignMessageBuilder {
      if (other == ProtobufUnittest.ForeignMessage()) {
       return self
      }
      if other.hasC {
           c = other.c
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.ForeignMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.ForeignMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          c = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestAllExtensions : ExtendableMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestAllExtensions {
      return ProtobufUnittest.TestAllExtensions.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllExtensions {
      return ProtobufUnittest.TestAllExtensions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestAllExtensions {
      return ProtobufUnittest.TestAllExtensions.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestAllExtensions {
      return ProtobufUnittest.TestAllExtensions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestAllExtensions {
      return ProtobufUnittest.TestAllExtensions.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllExtensions {
      return ProtobufUnittest.TestAllExtensions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestAllExtensionsBuilder {
      return ProtobufUnittest.TestAllExtensions.classBuilder() as ProtobufUnittest.TestAllExtensionsBuilder
    }
    internal func builder() -> ProtobufUnittest.TestAllExtensionsBuilder {
      return classBuilder() as ProtobufUnittest.TestAllExtensionsBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestAllExtensionsBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestAllExtensions.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestAllExtensionsBuilder {
      return ProtobufUnittest.TestAllExtensions.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestAllExtensions) -> ProtobufUnittest.TestAllExtensionsBuilder {
      return ProtobufUnittest.TestAllExtensions.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      writeExtensionDescription(&output, startInclusive:Int32(1), endExclusive:Int32(536870912), indent:indent)
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestAllExtensions"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestAllExtensions"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestAllExtensions.self
    }
    //Meta information declaration end

  }

  final internal class TestAllExtensionsBuilder : ExtendableMessageBuilder {
    private var builderResult:ProtobufUnittest.TestAllExtensions

    required override internal init () {
       builderResult = ProtobufUnittest.TestAllExtensions()
       super.init()
    }
    override internal var internalGetResult:ExtendableMessage {
         get {
             return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestAllExtensionsBuilder {
      builderResult = ProtobufUnittest.TestAllExtensions()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestAllExtensionsBuilder {
      return ProtobufUnittest.TestAllExtensions.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestAllExtensions {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestAllExtensions {
      var returnMe:ProtobufUnittest.TestAllExtensions = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestAllExtensions) -> ProtobufUnittest.TestAllExtensionsBuilder {
      if (other == ProtobufUnittest.TestAllExtensions()) {
       return self
      }
      mergeExtensionFields(other)
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestAllExtensionsBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestAllExtensionsBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class OptionalGroup_extension : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasA:Bool = false
    private(set) var a:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasA {
        output.writeInt32(17, value:a)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeInt32Size(17)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.OptionalGroup_extension {
      return ProtobufUnittest.OptionalGroup_extension.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.OptionalGroup_extension {
      return ProtobufUnittest.OptionalGroup_extension.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.OptionalGroup_extension {
      return ProtobufUnittest.OptionalGroup_extension.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.OptionalGroup_extension {
      return ProtobufUnittest.OptionalGroup_extension.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.OptionalGroup_extension {
      return ProtobufUnittest.OptionalGroup_extension.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.OptionalGroup_extension {
      return ProtobufUnittest.OptionalGroup_extension.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.OptionalGroup_extensionBuilder {
      return ProtobufUnittest.OptionalGroup_extension.classBuilder() as ProtobufUnittest.OptionalGroup_extensionBuilder
    }
    internal func builder() -> ProtobufUnittest.OptionalGroup_extensionBuilder {
      return classBuilder() as ProtobufUnittest.OptionalGroup_extensionBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OptionalGroup_extensionBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OptionalGroup_extension.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.OptionalGroup_extensionBuilder {
      return ProtobufUnittest.OptionalGroup_extension.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.OptionalGroup_extension) -> ProtobufUnittest.OptionalGroup_extensionBuilder {
      return ProtobufUnittest.OptionalGroup_extension.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.OptionalGroup_extension"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.OptionalGroup_extension"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.OptionalGroup_extension.self
    }
    //Meta information declaration end

  }

  final internal class OptionalGroup_extensionBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.OptionalGroup_extension

    required override internal init () {
       builderResult = ProtobufUnittest.OptionalGroup_extension()
       super.init()
    }
    var hasA:Bool {
         get {
              return builderResult.hasA
         }
    }
    var a:Int32 {
         get {
              return builderResult.a
         }
         set (value) {
             builderResult.hasA = true
             builderResult.a = value
         }
    }
    func setA(value:Int32)-> ProtobufUnittest.OptionalGroup_extensionBuilder {
      self.a = value
      return self
    }
    internal func clearA() -> ProtobufUnittest.OptionalGroup_extensionBuilder{
         builderResult.hasA = false
         builderResult.a = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.OptionalGroup_extensionBuilder {
      builderResult = ProtobufUnittest.OptionalGroup_extension()
      return self
    }
    internal override func clone() -> ProtobufUnittest.OptionalGroup_extensionBuilder {
      return ProtobufUnittest.OptionalGroup_extension.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.OptionalGroup_extension {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.OptionalGroup_extension {
      var returnMe:ProtobufUnittest.OptionalGroup_extension = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.OptionalGroup_extension) -> ProtobufUnittest.OptionalGroup_extensionBuilder {
      if (other == ProtobufUnittest.OptionalGroup_extension()) {
       return self
      }
      if other.hasA {
           a = other.a
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.OptionalGroup_extensionBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.OptionalGroup_extensionBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 136 :
          a = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class RepeatedGroup_extension : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasA:Bool = false
    private(set) var a:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasA {
        output.writeInt32(47, value:a)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeInt32Size(47)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.RepeatedGroup_extension {
      return ProtobufUnittest.RepeatedGroup_extension.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.RepeatedGroup_extension {
      return ProtobufUnittest.RepeatedGroup_extension.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.RepeatedGroup_extension {
      return ProtobufUnittest.RepeatedGroup_extension.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.RepeatedGroup_extension {
      return ProtobufUnittest.RepeatedGroup_extension.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.RepeatedGroup_extension {
      return ProtobufUnittest.RepeatedGroup_extension.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.RepeatedGroup_extension {
      return ProtobufUnittest.RepeatedGroup_extension.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.RepeatedGroup_extensionBuilder {
      return ProtobufUnittest.RepeatedGroup_extension.classBuilder() as ProtobufUnittest.RepeatedGroup_extensionBuilder
    }
    internal func builder() -> ProtobufUnittest.RepeatedGroup_extensionBuilder {
      return classBuilder() as ProtobufUnittest.RepeatedGroup_extensionBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.RepeatedGroup_extensionBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.RepeatedGroup_extension.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.RepeatedGroup_extensionBuilder {
      return ProtobufUnittest.RepeatedGroup_extension.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.RepeatedGroup_extension) -> ProtobufUnittest.RepeatedGroup_extensionBuilder {
      return ProtobufUnittest.RepeatedGroup_extension.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.RepeatedGroup_extension"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.RepeatedGroup_extension"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.RepeatedGroup_extension.self
    }
    //Meta information declaration end

  }

  final internal class RepeatedGroup_extensionBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.RepeatedGroup_extension

    required override internal init () {
       builderResult = ProtobufUnittest.RepeatedGroup_extension()
       super.init()
    }
    var hasA:Bool {
         get {
              return builderResult.hasA
         }
    }
    var a:Int32 {
         get {
              return builderResult.a
         }
         set (value) {
             builderResult.hasA = true
             builderResult.a = value
         }
    }
    func setA(value:Int32)-> ProtobufUnittest.RepeatedGroup_extensionBuilder {
      self.a = value
      return self
    }
    internal func clearA() -> ProtobufUnittest.RepeatedGroup_extensionBuilder{
         builderResult.hasA = false
         builderResult.a = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.RepeatedGroup_extensionBuilder {
      builderResult = ProtobufUnittest.RepeatedGroup_extension()
      return self
    }
    internal override func clone() -> ProtobufUnittest.RepeatedGroup_extensionBuilder {
      return ProtobufUnittest.RepeatedGroup_extension.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.RepeatedGroup_extension {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.RepeatedGroup_extension {
      var returnMe:ProtobufUnittest.RepeatedGroup_extension = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.RepeatedGroup_extension) -> ProtobufUnittest.RepeatedGroup_extensionBuilder {
      if (other == ProtobufUnittest.RepeatedGroup_extension()) {
       return self
      }
      if other.hasA {
           a = other.a
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.RepeatedGroup_extensionBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.RepeatedGroup_extensionBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 376 :
          a = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestNestedExtension : GeneratedMessage, GeneratedMessageProtocol {
    internal class func test() -> ConcreateExtensionField {
         return TestNestedExtensiontest
    }
    internal class func nestedStringExtension() -> ConcreateExtensionField {
         return TestNestedExtensionnestedStringExtension
    }
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestNestedExtension {
      return ProtobufUnittest.TestNestedExtension.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestNestedExtension {
      return ProtobufUnittest.TestNestedExtension.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestNestedExtension {
      return ProtobufUnittest.TestNestedExtension.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestNestedExtension {
      return ProtobufUnittest.TestNestedExtension.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestNestedExtension {
      return ProtobufUnittest.TestNestedExtension.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestNestedExtension {
      return ProtobufUnittest.TestNestedExtension.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestNestedExtensionBuilder {
      return ProtobufUnittest.TestNestedExtension.classBuilder() as ProtobufUnittest.TestNestedExtensionBuilder
    }
    internal func builder() -> ProtobufUnittest.TestNestedExtensionBuilder {
      return classBuilder() as ProtobufUnittest.TestNestedExtensionBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestNestedExtensionBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestNestedExtension.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestNestedExtensionBuilder {
      return ProtobufUnittest.TestNestedExtension.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestNestedExtension) -> ProtobufUnittest.TestNestedExtensionBuilder {
      return ProtobufUnittest.TestNestedExtension.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestNestedExtension"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestNestedExtension"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestNestedExtension.self
    }
    //Meta information declaration end

  }

  final internal class TestNestedExtensionBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestNestedExtension

    required override internal init () {
       builderResult = ProtobufUnittest.TestNestedExtension()
       super.init()
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestNestedExtensionBuilder {
      builderResult = ProtobufUnittest.TestNestedExtension()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestNestedExtensionBuilder {
      return ProtobufUnittest.TestNestedExtension.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestNestedExtension {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestNestedExtension {
      var returnMe:ProtobufUnittest.TestNestedExtension = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestNestedExtension) -> ProtobufUnittest.TestNestedExtensionBuilder {
      if (other == ProtobufUnittest.TestNestedExtension()) {
       return self
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestNestedExtensionBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestNestedExtensionBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestRequired : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasA:Bool = false
    private(set) var a:Int32 = Int32(0)

    private(set) var hasDummy2:Bool = false
    private(set) var dummy2:Int32 = Int32(0)

    private(set) var hasB:Bool = false
    private(set) var b:Int32 = Int32(0)

    private(set) var hasDummy4:Bool = false
    private(set) var dummy4:Int32 = Int32(0)

    private(set) var hasDummy5:Bool = false
    private(set) var dummy5:Int32 = Int32(0)

    private(set) var hasDummy6:Bool = false
    private(set) var dummy6:Int32 = Int32(0)

    private(set) var hasDummy7:Bool = false
    private(set) var dummy7:Int32 = Int32(0)

    private(set) var hasDummy8:Bool = false
    private(set) var dummy8:Int32 = Int32(0)

    private(set) var hasDummy9:Bool = false
    private(set) var dummy9:Int32 = Int32(0)

    private(set) var hasDummy10:Bool = false
    private(set) var dummy10:Int32 = Int32(0)

    private(set) var hasDummy11:Bool = false
    private(set) var dummy11:Int32 = Int32(0)

    private(set) var hasDummy12:Bool = false
    private(set) var dummy12:Int32 = Int32(0)

    private(set) var hasDummy13:Bool = false
    private(set) var dummy13:Int32 = Int32(0)

    private(set) var hasDummy14:Bool = false
    private(set) var dummy14:Int32 = Int32(0)

    private(set) var hasDummy15:Bool = false
    private(set) var dummy15:Int32 = Int32(0)

    private(set) var hasDummy16:Bool = false
    private(set) var dummy16:Int32 = Int32(0)

    private(set) var hasDummy17:Bool = false
    private(set) var dummy17:Int32 = Int32(0)

    private(set) var hasDummy18:Bool = false
    private(set) var dummy18:Int32 = Int32(0)

    private(set) var hasDummy19:Bool = false
    private(set) var dummy19:Int32 = Int32(0)

    private(set) var hasDummy20:Bool = false
    private(set) var dummy20:Int32 = Int32(0)

    private(set) var hasDummy21:Bool = false
    private(set) var dummy21:Int32 = Int32(0)

    private(set) var hasDummy22:Bool = false
    private(set) var dummy22:Int32 = Int32(0)

    private(set) var hasDummy23:Bool = false
    private(set) var dummy23:Int32 = Int32(0)

    private(set) var hasDummy24:Bool = false
    private(set) var dummy24:Int32 = Int32(0)

    private(set) var hasDummy25:Bool = false
    private(set) var dummy25:Int32 = Int32(0)

    private(set) var hasDummy26:Bool = false
    private(set) var dummy26:Int32 = Int32(0)

    private(set) var hasDummy27:Bool = false
    private(set) var dummy27:Int32 = Int32(0)

    private(set) var hasDummy28:Bool = false
    private(set) var dummy28:Int32 = Int32(0)

    private(set) var hasDummy29:Bool = false
    private(set) var dummy29:Int32 = Int32(0)

    private(set) var hasDummy30:Bool = false
    private(set) var dummy30:Int32 = Int32(0)

    private(set) var hasDummy31:Bool = false
    private(set) var dummy31:Int32 = Int32(0)

    private(set) var hasDummy32:Bool = false
    private(set) var dummy32:Int32 = Int32(0)

    private(set) var hasC:Bool = false
    private(set) var c:Int32 = Int32(0)

    internal class func single() -> ConcreateExtensionField {
         return TestRequiredsingle
    }
    internal class func multi() -> ConcreateExtensionField {
         return TestRequiredmulti
    }
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasA {
        return false
      }
      if !hasB {
        return false
      }
      if !hasC {
        return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasA {
        output.writeInt32(1, value:a)
      }
      if hasDummy2 {
        output.writeInt32(2, value:dummy2)
      }
      if hasB {
        output.writeInt32(3, value:b)
      }
      if hasDummy4 {
        output.writeInt32(4, value:dummy4)
      }
      if hasDummy5 {
        output.writeInt32(5, value:dummy5)
      }
      if hasDummy6 {
        output.writeInt32(6, value:dummy6)
      }
      if hasDummy7 {
        output.writeInt32(7, value:dummy7)
      }
      if hasDummy8 {
        output.writeInt32(8, value:dummy8)
      }
      if hasDummy9 {
        output.writeInt32(9, value:dummy9)
      }
      if hasDummy10 {
        output.writeInt32(10, value:dummy10)
      }
      if hasDummy11 {
        output.writeInt32(11, value:dummy11)
      }
      if hasDummy12 {
        output.writeInt32(12, value:dummy12)
      }
      if hasDummy13 {
        output.writeInt32(13, value:dummy13)
      }
      if hasDummy14 {
        output.writeInt32(14, value:dummy14)
      }
      if hasDummy15 {
        output.writeInt32(15, value:dummy15)
      }
      if hasDummy16 {
        output.writeInt32(16, value:dummy16)
      }
      if hasDummy17 {
        output.writeInt32(17, value:dummy17)
      }
      if hasDummy18 {
        output.writeInt32(18, value:dummy18)
      }
      if hasDummy19 {
        output.writeInt32(19, value:dummy19)
      }
      if hasDummy20 {
        output.writeInt32(20, value:dummy20)
      }
      if hasDummy21 {
        output.writeInt32(21, value:dummy21)
      }
      if hasDummy22 {
        output.writeInt32(22, value:dummy22)
      }
      if hasDummy23 {
        output.writeInt32(23, value:dummy23)
      }
      if hasDummy24 {
        output.writeInt32(24, value:dummy24)
      }
      if hasDummy25 {
        output.writeInt32(25, value:dummy25)
      }
      if hasDummy26 {
        output.writeInt32(26, value:dummy26)
      }
      if hasDummy27 {
        output.writeInt32(27, value:dummy27)
      }
      if hasDummy28 {
        output.writeInt32(28, value:dummy28)
      }
      if hasDummy29 {
        output.writeInt32(29, value:dummy29)
      }
      if hasDummy30 {
        output.writeInt32(30, value:dummy30)
      }
      if hasDummy31 {
        output.writeInt32(31, value:dummy31)
      }
      if hasDummy32 {
        output.writeInt32(32, value:dummy32)
      }
      if hasC {
        output.writeInt32(33, value:c)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeInt32Size(1)
      }
      if hasDummy2 {
        serialize_size += dummy2.computeInt32Size(2)
      }
      if hasB {
        serialize_size += b.computeInt32Size(3)
      }
      if hasDummy4 {
        serialize_size += dummy4.computeInt32Size(4)
      }
      if hasDummy5 {
        serialize_size += dummy5.computeInt32Size(5)
      }
      if hasDummy6 {
        serialize_size += dummy6.computeInt32Size(6)
      }
      if hasDummy7 {
        serialize_size += dummy7.computeInt32Size(7)
      }
      if hasDummy8 {
        serialize_size += dummy8.computeInt32Size(8)
      }
      if hasDummy9 {
        serialize_size += dummy9.computeInt32Size(9)
      }
      if hasDummy10 {
        serialize_size += dummy10.computeInt32Size(10)
      }
      if hasDummy11 {
        serialize_size += dummy11.computeInt32Size(11)
      }
      if hasDummy12 {
        serialize_size += dummy12.computeInt32Size(12)
      }
      if hasDummy13 {
        serialize_size += dummy13.computeInt32Size(13)
      }
      if hasDummy14 {
        serialize_size += dummy14.computeInt32Size(14)
      }
      if hasDummy15 {
        serialize_size += dummy15.computeInt32Size(15)
      }
      if hasDummy16 {
        serialize_size += dummy16.computeInt32Size(16)
      }
      if hasDummy17 {
        serialize_size += dummy17.computeInt32Size(17)
      }
      if hasDummy18 {
        serialize_size += dummy18.computeInt32Size(18)
      }
      if hasDummy19 {
        serialize_size += dummy19.computeInt32Size(19)
      }
      if hasDummy20 {
        serialize_size += dummy20.computeInt32Size(20)
      }
      if hasDummy21 {
        serialize_size += dummy21.computeInt32Size(21)
      }
      if hasDummy22 {
        serialize_size += dummy22.computeInt32Size(22)
      }
      if hasDummy23 {
        serialize_size += dummy23.computeInt32Size(23)
      }
      if hasDummy24 {
        serialize_size += dummy24.computeInt32Size(24)
      }
      if hasDummy25 {
        serialize_size += dummy25.computeInt32Size(25)
      }
      if hasDummy26 {
        serialize_size += dummy26.computeInt32Size(26)
      }
      if hasDummy27 {
        serialize_size += dummy27.computeInt32Size(27)
      }
      if hasDummy28 {
        serialize_size += dummy28.computeInt32Size(28)
      }
      if hasDummy29 {
        serialize_size += dummy29.computeInt32Size(29)
      }
      if hasDummy30 {
        serialize_size += dummy30.computeInt32Size(30)
      }
      if hasDummy31 {
        serialize_size += dummy31.computeInt32Size(31)
      }
      if hasDummy32 {
        serialize_size += dummy32.computeInt32Size(32)
      }
      if hasC {
        serialize_size += c.computeInt32Size(33)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestRequired {
      return ProtobufUnittest.TestRequired.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequired {
      return ProtobufUnittest.TestRequired.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestRequired {
      return ProtobufUnittest.TestRequired.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestRequired {
      return ProtobufUnittest.TestRequired.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestRequired {
      return ProtobufUnittest.TestRequired.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequired {
      return ProtobufUnittest.TestRequired.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestRequiredBuilder {
      return ProtobufUnittest.TestRequired.classBuilder() as ProtobufUnittest.TestRequiredBuilder
    }
    internal func builder() -> ProtobufUnittest.TestRequiredBuilder {
      return classBuilder() as ProtobufUnittest.TestRequiredBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequiredBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequired.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestRequiredBuilder {
      return ProtobufUnittest.TestRequired.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestRequired) -> ProtobufUnittest.TestRequiredBuilder {
      return ProtobufUnittest.TestRequired.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      if hasDummy2 {
        output += "\(indent) dummy2: \(dummy2) \n"
      }
      if hasB {
        output += "\(indent) b: \(b) \n"
      }
      if hasDummy4 {
        output += "\(indent) dummy4: \(dummy4) \n"
      }
      if hasDummy5 {
        output += "\(indent) dummy5: \(dummy5) \n"
      }
      if hasDummy6 {
        output += "\(indent) dummy6: \(dummy6) \n"
      }
      if hasDummy7 {
        output += "\(indent) dummy7: \(dummy7) \n"
      }
      if hasDummy8 {
        output += "\(indent) dummy8: \(dummy8) \n"
      }
      if hasDummy9 {
        output += "\(indent) dummy9: \(dummy9) \n"
      }
      if hasDummy10 {
        output += "\(indent) dummy10: \(dummy10) \n"
      }
      if hasDummy11 {
        output += "\(indent) dummy11: \(dummy11) \n"
      }
      if hasDummy12 {
        output += "\(indent) dummy12: \(dummy12) \n"
      }
      if hasDummy13 {
        output += "\(indent) dummy13: \(dummy13) \n"
      }
      if hasDummy14 {
        output += "\(indent) dummy14: \(dummy14) \n"
      }
      if hasDummy15 {
        output += "\(indent) dummy15: \(dummy15) \n"
      }
      if hasDummy16 {
        output += "\(indent) dummy16: \(dummy16) \n"
      }
      if hasDummy17 {
        output += "\(indent) dummy17: \(dummy17) \n"
      }
      if hasDummy18 {
        output += "\(indent) dummy18: \(dummy18) \n"
      }
      if hasDummy19 {
        output += "\(indent) dummy19: \(dummy19) \n"
      }
      if hasDummy20 {
        output += "\(indent) dummy20: \(dummy20) \n"
      }
      if hasDummy21 {
        output += "\(indent) dummy21: \(dummy21) \n"
      }
      if hasDummy22 {
        output += "\(indent) dummy22: \(dummy22) \n"
      }
      if hasDummy23 {
        output += "\(indent) dummy23: \(dummy23) \n"
      }
      if hasDummy24 {
        output += "\(indent) dummy24: \(dummy24) \n"
      }
      if hasDummy25 {
        output += "\(indent) dummy25: \(dummy25) \n"
      }
      if hasDummy26 {
        output += "\(indent) dummy26: \(dummy26) \n"
      }
      if hasDummy27 {
        output += "\(indent) dummy27: \(dummy27) \n"
      }
      if hasDummy28 {
        output += "\(indent) dummy28: \(dummy28) \n"
      }
      if hasDummy29 {
        output += "\(indent) dummy29: \(dummy29) \n"
      }
      if hasDummy30 {
        output += "\(indent) dummy30: \(dummy30) \n"
      }
      if hasDummy31 {
        output += "\(indent) dummy31: \(dummy31) \n"
      }
      if hasDummy32 {
        output += "\(indent) dummy32: \(dummy32) \n"
      }
      if hasC {
        output += "\(indent) c: \(c) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            if hasDummy2 {
               hashCode = (hashCode &* 31) &+ dummy2.hashValue
            }
            if hasB {
               hashCode = (hashCode &* 31) &+ b.hashValue
            }
            if hasDummy4 {
               hashCode = (hashCode &* 31) &+ dummy4.hashValue
            }
            if hasDummy5 {
               hashCode = (hashCode &* 31) &+ dummy5.hashValue
            }
            if hasDummy6 {
               hashCode = (hashCode &* 31) &+ dummy6.hashValue
            }
            if hasDummy7 {
               hashCode = (hashCode &* 31) &+ dummy7.hashValue
            }
            if hasDummy8 {
               hashCode = (hashCode &* 31) &+ dummy8.hashValue
            }
            if hasDummy9 {
               hashCode = (hashCode &* 31) &+ dummy9.hashValue
            }
            if hasDummy10 {
               hashCode = (hashCode &* 31) &+ dummy10.hashValue
            }
            if hasDummy11 {
               hashCode = (hashCode &* 31) &+ dummy11.hashValue
            }
            if hasDummy12 {
               hashCode = (hashCode &* 31) &+ dummy12.hashValue
            }
            if hasDummy13 {
               hashCode = (hashCode &* 31) &+ dummy13.hashValue
            }
            if hasDummy14 {
               hashCode = (hashCode &* 31) &+ dummy14.hashValue
            }
            if hasDummy15 {
               hashCode = (hashCode &* 31) &+ dummy15.hashValue
            }
            if hasDummy16 {
               hashCode = (hashCode &* 31) &+ dummy16.hashValue
            }
            if hasDummy17 {
               hashCode = (hashCode &* 31) &+ dummy17.hashValue
            }
            if hasDummy18 {
               hashCode = (hashCode &* 31) &+ dummy18.hashValue
            }
            if hasDummy19 {
               hashCode = (hashCode &* 31) &+ dummy19.hashValue
            }
            if hasDummy20 {
               hashCode = (hashCode &* 31) &+ dummy20.hashValue
            }
            if hasDummy21 {
               hashCode = (hashCode &* 31) &+ dummy21.hashValue
            }
            if hasDummy22 {
               hashCode = (hashCode &* 31) &+ dummy22.hashValue
            }
            if hasDummy23 {
               hashCode = (hashCode &* 31) &+ dummy23.hashValue
            }
            if hasDummy24 {
               hashCode = (hashCode &* 31) &+ dummy24.hashValue
            }
            if hasDummy25 {
               hashCode = (hashCode &* 31) &+ dummy25.hashValue
            }
            if hasDummy26 {
               hashCode = (hashCode &* 31) &+ dummy26.hashValue
            }
            if hasDummy27 {
               hashCode = (hashCode &* 31) &+ dummy27.hashValue
            }
            if hasDummy28 {
               hashCode = (hashCode &* 31) &+ dummy28.hashValue
            }
            if hasDummy29 {
               hashCode = (hashCode &* 31) &+ dummy29.hashValue
            }
            if hasDummy30 {
               hashCode = (hashCode &* 31) &+ dummy30.hashValue
            }
            if hasDummy31 {
               hashCode = (hashCode &* 31) &+ dummy31.hashValue
            }
            if hasDummy32 {
               hashCode = (hashCode &* 31) &+ dummy32.hashValue
            }
            if hasC {
               hashCode = (hashCode &* 31) &+ c.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestRequired"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestRequired"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestRequired.self
    }
    //Meta information declaration end

  }

  final internal class TestRequiredBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestRequired

    required override internal init () {
       builderResult = ProtobufUnittest.TestRequired()
       super.init()
    }
    var hasA:Bool {
         get {
              return builderResult.hasA
         }
    }
    var a:Int32 {
         get {
              return builderResult.a
         }
         set (value) {
             builderResult.hasA = true
             builderResult.a = value
         }
    }
    func setA(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.a = value
      return self
    }
    internal func clearA() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasA = false
         builderResult.a = Int32(0)
         return self
    }
    var hasDummy2:Bool {
         get {
              return builderResult.hasDummy2
         }
    }
    var dummy2:Int32 {
         get {
              return builderResult.dummy2
         }
         set (value) {
             builderResult.hasDummy2 = true
             builderResult.dummy2 = value
         }
    }
    func setDummy2(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy2 = value
      return self
    }
    internal func clearDummy2() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy2 = false
         builderResult.dummy2 = Int32(0)
         return self
    }
    var hasB:Bool {
         get {
              return builderResult.hasB
         }
    }
    var b:Int32 {
         get {
              return builderResult.b
         }
         set (value) {
             builderResult.hasB = true
             builderResult.b = value
         }
    }
    func setB(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.b = value
      return self
    }
    internal func clearB() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasB = false
         builderResult.b = Int32(0)
         return self
    }
    var hasDummy4:Bool {
         get {
              return builderResult.hasDummy4
         }
    }
    var dummy4:Int32 {
         get {
              return builderResult.dummy4
         }
         set (value) {
             builderResult.hasDummy4 = true
             builderResult.dummy4 = value
         }
    }
    func setDummy4(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy4 = value
      return self
    }
    internal func clearDummy4() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy4 = false
         builderResult.dummy4 = Int32(0)
         return self
    }
    var hasDummy5:Bool {
         get {
              return builderResult.hasDummy5
         }
    }
    var dummy5:Int32 {
         get {
              return builderResult.dummy5
         }
         set (value) {
             builderResult.hasDummy5 = true
             builderResult.dummy5 = value
         }
    }
    func setDummy5(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy5 = value
      return self
    }
    internal func clearDummy5() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy5 = false
         builderResult.dummy5 = Int32(0)
         return self
    }
    var hasDummy6:Bool {
         get {
              return builderResult.hasDummy6
         }
    }
    var dummy6:Int32 {
         get {
              return builderResult.dummy6
         }
         set (value) {
             builderResult.hasDummy6 = true
             builderResult.dummy6 = value
         }
    }
    func setDummy6(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy6 = value
      return self
    }
    internal func clearDummy6() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy6 = false
         builderResult.dummy6 = Int32(0)
         return self
    }
    var hasDummy7:Bool {
         get {
              return builderResult.hasDummy7
         }
    }
    var dummy7:Int32 {
         get {
              return builderResult.dummy7
         }
         set (value) {
             builderResult.hasDummy7 = true
             builderResult.dummy7 = value
         }
    }
    func setDummy7(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy7 = value
      return self
    }
    internal func clearDummy7() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy7 = false
         builderResult.dummy7 = Int32(0)
         return self
    }
    var hasDummy8:Bool {
         get {
              return builderResult.hasDummy8
         }
    }
    var dummy8:Int32 {
         get {
              return builderResult.dummy8
         }
         set (value) {
             builderResult.hasDummy8 = true
             builderResult.dummy8 = value
         }
    }
    func setDummy8(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy8 = value
      return self
    }
    internal func clearDummy8() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy8 = false
         builderResult.dummy8 = Int32(0)
         return self
    }
    var hasDummy9:Bool {
         get {
              return builderResult.hasDummy9
         }
    }
    var dummy9:Int32 {
         get {
              return builderResult.dummy9
         }
         set (value) {
             builderResult.hasDummy9 = true
             builderResult.dummy9 = value
         }
    }
    func setDummy9(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy9 = value
      return self
    }
    internal func clearDummy9() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy9 = false
         builderResult.dummy9 = Int32(0)
         return self
    }
    var hasDummy10:Bool {
         get {
              return builderResult.hasDummy10
         }
    }
    var dummy10:Int32 {
         get {
              return builderResult.dummy10
         }
         set (value) {
             builderResult.hasDummy10 = true
             builderResult.dummy10 = value
         }
    }
    func setDummy10(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy10 = value
      return self
    }
    internal func clearDummy10() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy10 = false
         builderResult.dummy10 = Int32(0)
         return self
    }
    var hasDummy11:Bool {
         get {
              return builderResult.hasDummy11
         }
    }
    var dummy11:Int32 {
         get {
              return builderResult.dummy11
         }
         set (value) {
             builderResult.hasDummy11 = true
             builderResult.dummy11 = value
         }
    }
    func setDummy11(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy11 = value
      return self
    }
    internal func clearDummy11() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy11 = false
         builderResult.dummy11 = Int32(0)
         return self
    }
    var hasDummy12:Bool {
         get {
              return builderResult.hasDummy12
         }
    }
    var dummy12:Int32 {
         get {
              return builderResult.dummy12
         }
         set (value) {
             builderResult.hasDummy12 = true
             builderResult.dummy12 = value
         }
    }
    func setDummy12(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy12 = value
      return self
    }
    internal func clearDummy12() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy12 = false
         builderResult.dummy12 = Int32(0)
         return self
    }
    var hasDummy13:Bool {
         get {
              return builderResult.hasDummy13
         }
    }
    var dummy13:Int32 {
         get {
              return builderResult.dummy13
         }
         set (value) {
             builderResult.hasDummy13 = true
             builderResult.dummy13 = value
         }
    }
    func setDummy13(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy13 = value
      return self
    }
    internal func clearDummy13() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy13 = false
         builderResult.dummy13 = Int32(0)
         return self
    }
    var hasDummy14:Bool {
         get {
              return builderResult.hasDummy14
         }
    }
    var dummy14:Int32 {
         get {
              return builderResult.dummy14
         }
         set (value) {
             builderResult.hasDummy14 = true
             builderResult.dummy14 = value
         }
    }
    func setDummy14(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy14 = value
      return self
    }
    internal func clearDummy14() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy14 = false
         builderResult.dummy14 = Int32(0)
         return self
    }
    var hasDummy15:Bool {
         get {
              return builderResult.hasDummy15
         }
    }
    var dummy15:Int32 {
         get {
              return builderResult.dummy15
         }
         set (value) {
             builderResult.hasDummy15 = true
             builderResult.dummy15 = value
         }
    }
    func setDummy15(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy15 = value
      return self
    }
    internal func clearDummy15() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy15 = false
         builderResult.dummy15 = Int32(0)
         return self
    }
    var hasDummy16:Bool {
         get {
              return builderResult.hasDummy16
         }
    }
    var dummy16:Int32 {
         get {
              return builderResult.dummy16
         }
         set (value) {
             builderResult.hasDummy16 = true
             builderResult.dummy16 = value
         }
    }
    func setDummy16(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy16 = value
      return self
    }
    internal func clearDummy16() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy16 = false
         builderResult.dummy16 = Int32(0)
         return self
    }
    var hasDummy17:Bool {
         get {
              return builderResult.hasDummy17
         }
    }
    var dummy17:Int32 {
         get {
              return builderResult.dummy17
         }
         set (value) {
             builderResult.hasDummy17 = true
             builderResult.dummy17 = value
         }
    }
    func setDummy17(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy17 = value
      return self
    }
    internal func clearDummy17() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy17 = false
         builderResult.dummy17 = Int32(0)
         return self
    }
    var hasDummy18:Bool {
         get {
              return builderResult.hasDummy18
         }
    }
    var dummy18:Int32 {
         get {
              return builderResult.dummy18
         }
         set (value) {
             builderResult.hasDummy18 = true
             builderResult.dummy18 = value
         }
    }
    func setDummy18(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy18 = value
      return self
    }
    internal func clearDummy18() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy18 = false
         builderResult.dummy18 = Int32(0)
         return self
    }
    var hasDummy19:Bool {
         get {
              return builderResult.hasDummy19
         }
    }
    var dummy19:Int32 {
         get {
              return builderResult.dummy19
         }
         set (value) {
             builderResult.hasDummy19 = true
             builderResult.dummy19 = value
         }
    }
    func setDummy19(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy19 = value
      return self
    }
    internal func clearDummy19() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy19 = false
         builderResult.dummy19 = Int32(0)
         return self
    }
    var hasDummy20:Bool {
         get {
              return builderResult.hasDummy20
         }
    }
    var dummy20:Int32 {
         get {
              return builderResult.dummy20
         }
         set (value) {
             builderResult.hasDummy20 = true
             builderResult.dummy20 = value
         }
    }
    func setDummy20(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy20 = value
      return self
    }
    internal func clearDummy20() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy20 = false
         builderResult.dummy20 = Int32(0)
         return self
    }
    var hasDummy21:Bool {
         get {
              return builderResult.hasDummy21
         }
    }
    var dummy21:Int32 {
         get {
              return builderResult.dummy21
         }
         set (value) {
             builderResult.hasDummy21 = true
             builderResult.dummy21 = value
         }
    }
    func setDummy21(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy21 = value
      return self
    }
    internal func clearDummy21() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy21 = false
         builderResult.dummy21 = Int32(0)
         return self
    }
    var hasDummy22:Bool {
         get {
              return builderResult.hasDummy22
         }
    }
    var dummy22:Int32 {
         get {
              return builderResult.dummy22
         }
         set (value) {
             builderResult.hasDummy22 = true
             builderResult.dummy22 = value
         }
    }
    func setDummy22(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy22 = value
      return self
    }
    internal func clearDummy22() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy22 = false
         builderResult.dummy22 = Int32(0)
         return self
    }
    var hasDummy23:Bool {
         get {
              return builderResult.hasDummy23
         }
    }
    var dummy23:Int32 {
         get {
              return builderResult.dummy23
         }
         set (value) {
             builderResult.hasDummy23 = true
             builderResult.dummy23 = value
         }
    }
    func setDummy23(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy23 = value
      return self
    }
    internal func clearDummy23() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy23 = false
         builderResult.dummy23 = Int32(0)
         return self
    }
    var hasDummy24:Bool {
         get {
              return builderResult.hasDummy24
         }
    }
    var dummy24:Int32 {
         get {
              return builderResult.dummy24
         }
         set (value) {
             builderResult.hasDummy24 = true
             builderResult.dummy24 = value
         }
    }
    func setDummy24(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy24 = value
      return self
    }
    internal func clearDummy24() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy24 = false
         builderResult.dummy24 = Int32(0)
         return self
    }
    var hasDummy25:Bool {
         get {
              return builderResult.hasDummy25
         }
    }
    var dummy25:Int32 {
         get {
              return builderResult.dummy25
         }
         set (value) {
             builderResult.hasDummy25 = true
             builderResult.dummy25 = value
         }
    }
    func setDummy25(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy25 = value
      return self
    }
    internal func clearDummy25() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy25 = false
         builderResult.dummy25 = Int32(0)
         return self
    }
    var hasDummy26:Bool {
         get {
              return builderResult.hasDummy26
         }
    }
    var dummy26:Int32 {
         get {
              return builderResult.dummy26
         }
         set (value) {
             builderResult.hasDummy26 = true
             builderResult.dummy26 = value
         }
    }
    func setDummy26(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy26 = value
      return self
    }
    internal func clearDummy26() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy26 = false
         builderResult.dummy26 = Int32(0)
         return self
    }
    var hasDummy27:Bool {
         get {
              return builderResult.hasDummy27
         }
    }
    var dummy27:Int32 {
         get {
              return builderResult.dummy27
         }
         set (value) {
             builderResult.hasDummy27 = true
             builderResult.dummy27 = value
         }
    }
    func setDummy27(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy27 = value
      return self
    }
    internal func clearDummy27() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy27 = false
         builderResult.dummy27 = Int32(0)
         return self
    }
    var hasDummy28:Bool {
         get {
              return builderResult.hasDummy28
         }
    }
    var dummy28:Int32 {
         get {
              return builderResult.dummy28
         }
         set (value) {
             builderResult.hasDummy28 = true
             builderResult.dummy28 = value
         }
    }
    func setDummy28(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy28 = value
      return self
    }
    internal func clearDummy28() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy28 = false
         builderResult.dummy28 = Int32(0)
         return self
    }
    var hasDummy29:Bool {
         get {
              return builderResult.hasDummy29
         }
    }
    var dummy29:Int32 {
         get {
              return builderResult.dummy29
         }
         set (value) {
             builderResult.hasDummy29 = true
             builderResult.dummy29 = value
         }
    }
    func setDummy29(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy29 = value
      return self
    }
    internal func clearDummy29() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy29 = false
         builderResult.dummy29 = Int32(0)
         return self
    }
    var hasDummy30:Bool {
         get {
              return builderResult.hasDummy30
         }
    }
    var dummy30:Int32 {
         get {
              return builderResult.dummy30
         }
         set (value) {
             builderResult.hasDummy30 = true
             builderResult.dummy30 = value
         }
    }
    func setDummy30(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy30 = value
      return self
    }
    internal func clearDummy30() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy30 = false
         builderResult.dummy30 = Int32(0)
         return self
    }
    var hasDummy31:Bool {
         get {
              return builderResult.hasDummy31
         }
    }
    var dummy31:Int32 {
         get {
              return builderResult.dummy31
         }
         set (value) {
             builderResult.hasDummy31 = true
             builderResult.dummy31 = value
         }
    }
    func setDummy31(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy31 = value
      return self
    }
    internal func clearDummy31() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy31 = false
         builderResult.dummy31 = Int32(0)
         return self
    }
    var hasDummy32:Bool {
         get {
              return builderResult.hasDummy32
         }
    }
    var dummy32:Int32 {
         get {
              return builderResult.dummy32
         }
         set (value) {
             builderResult.hasDummy32 = true
             builderResult.dummy32 = value
         }
    }
    func setDummy32(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.dummy32 = value
      return self
    }
    internal func clearDummy32() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasDummy32 = false
         builderResult.dummy32 = Int32(0)
         return self
    }
    var hasC:Bool {
         get {
              return builderResult.hasC
         }
    }
    var c:Int32 {
         get {
              return builderResult.c
         }
         set (value) {
             builderResult.hasC = true
             builderResult.c = value
         }
    }
    func setC(value:Int32)-> ProtobufUnittest.TestRequiredBuilder {
      self.c = value
      return self
    }
    internal func clearC() -> ProtobufUnittest.TestRequiredBuilder{
         builderResult.hasC = false
         builderResult.c = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestRequiredBuilder {
      builderResult = ProtobufUnittest.TestRequired()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestRequiredBuilder {
      return ProtobufUnittest.TestRequired.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestRequired {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestRequired {
      var returnMe:ProtobufUnittest.TestRequired = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestRequired) -> ProtobufUnittest.TestRequiredBuilder {
      if (other == ProtobufUnittest.TestRequired()) {
       return self
      }
      if other.hasA {
           a = other.a
      }
      if other.hasDummy2 {
           dummy2 = other.dummy2
      }
      if other.hasB {
           b = other.b
      }
      if other.hasDummy4 {
           dummy4 = other.dummy4
      }
      if other.hasDummy5 {
           dummy5 = other.dummy5
      }
      if other.hasDummy6 {
           dummy6 = other.dummy6
      }
      if other.hasDummy7 {
           dummy7 = other.dummy7
      }
      if other.hasDummy8 {
           dummy8 = other.dummy8
      }
      if other.hasDummy9 {
           dummy9 = other.dummy9
      }
      if other.hasDummy10 {
           dummy10 = other.dummy10
      }
      if other.hasDummy11 {
           dummy11 = other.dummy11
      }
      if other.hasDummy12 {
           dummy12 = other.dummy12
      }
      if other.hasDummy13 {
           dummy13 = other.dummy13
      }
      if other.hasDummy14 {
           dummy14 = other.dummy14
      }
      if other.hasDummy15 {
           dummy15 = other.dummy15
      }
      if other.hasDummy16 {
           dummy16 = other.dummy16
      }
      if other.hasDummy17 {
           dummy17 = other.dummy17
      }
      if other.hasDummy18 {
           dummy18 = other.dummy18
      }
      if other.hasDummy19 {
           dummy19 = other.dummy19
      }
      if other.hasDummy20 {
           dummy20 = other.dummy20
      }
      if other.hasDummy21 {
           dummy21 = other.dummy21
      }
      if other.hasDummy22 {
           dummy22 = other.dummy22
      }
      if other.hasDummy23 {
           dummy23 = other.dummy23
      }
      if other.hasDummy24 {
           dummy24 = other.dummy24
      }
      if other.hasDummy25 {
           dummy25 = other.dummy25
      }
      if other.hasDummy26 {
           dummy26 = other.dummy26
      }
      if other.hasDummy27 {
           dummy27 = other.dummy27
      }
      if other.hasDummy28 {
           dummy28 = other.dummy28
      }
      if other.hasDummy29 {
           dummy29 = other.dummy29
      }
      if other.hasDummy30 {
           dummy30 = other.dummy30
      }
      if other.hasDummy31 {
           dummy31 = other.dummy31
      }
      if other.hasDummy32 {
           dummy32 = other.dummy32
      }
      if other.hasC {
           c = other.c
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestRequiredBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequiredBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          a = input.readInt32()

        case 16 :
          dummy2 = input.readInt32()

        case 24 :
          b = input.readInt32()

        case 32 :
          dummy4 = input.readInt32()

        case 40 :
          dummy5 = input.readInt32()

        case 48 :
          dummy6 = input.readInt32()

        case 56 :
          dummy7 = input.readInt32()

        case 64 :
          dummy8 = input.readInt32()

        case 72 :
          dummy9 = input.readInt32()

        case 80 :
          dummy10 = input.readInt32()

        case 88 :
          dummy11 = input.readInt32()

        case 96 :
          dummy12 = input.readInt32()

        case 104 :
          dummy13 = input.readInt32()

        case 112 :
          dummy14 = input.readInt32()

        case 120 :
          dummy15 = input.readInt32()

        case 128 :
          dummy16 = input.readInt32()

        case 136 :
          dummy17 = input.readInt32()

        case 144 :
          dummy18 = input.readInt32()

        case 152 :
          dummy19 = input.readInt32()

        case 160 :
          dummy20 = input.readInt32()

        case 168 :
          dummy21 = input.readInt32()

        case 176 :
          dummy22 = input.readInt32()

        case 184 :
          dummy23 = input.readInt32()

        case 192 :
          dummy24 = input.readInt32()

        case 200 :
          dummy25 = input.readInt32()

        case 208 :
          dummy26 = input.readInt32()

        case 216 :
          dummy27 = input.readInt32()

        case 224 :
          dummy28 = input.readInt32()

        case 232 :
          dummy29 = input.readInt32()

        case 240 :
          dummy30 = input.readInt32()

        case 248 :
          dummy31 = input.readInt32()

        case 256 :
          dummy32 = input.readInt32()

        case 264 :
          c = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestRequiredForeign : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasOptionalMessage:Bool = false
    private(set) var optionalMessage:ProtobufUnittest.TestRequired = ProtobufUnittest.TestRequired()
    private(set) var hasDummy:Bool = false
    private(set) var dummy:Int32 = Int32(0)

    private(set) var repeatedMessage:Array<ProtobufUnittest.TestRequired>  = Array<ProtobufUnittest.TestRequired>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if hasOptionalMessage {
       if !optionalMessage.isInitialized() {
         return false
       }
      }
      var isInitrepeatedMessage:Bool = true
      for oneElementrepeatedMessage in repeatedMessage {
          if (!oneElementrepeatedMessage.isInitialized()) {
              isInitrepeatedMessage = false
              break 
          }
      }
      if !isInitrepeatedMessage {
       return isInitrepeatedMessage
       }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasOptionalMessage {
        output.writeMessage(1, value:optionalMessage)
      }
      for oneElementrepeatedMessage in repeatedMessage {
          output.writeMessage(2, value:oneElementrepeatedMessage)
      }
      if hasDummy {
        output.writeInt32(3, value:dummy)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOptionalMessage {
        serialize_size += optionalMessage.computeMessageSize(1)
      }
      for oneElementrepeatedMessage in repeatedMessage {
          serialize_size += oneElementrepeatedMessage.computeMessageSize(2)
      }
      if hasDummy {
        serialize_size += dummy.computeInt32Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestRequiredForeign {
      return ProtobufUnittest.TestRequiredForeign.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequiredForeign {
      return ProtobufUnittest.TestRequiredForeign.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestRequiredForeign {
      return ProtobufUnittest.TestRequiredForeign.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestRequiredForeign {
      return ProtobufUnittest.TestRequiredForeign.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestRequiredForeign {
      return ProtobufUnittest.TestRequiredForeign.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequiredForeign {
      return ProtobufUnittest.TestRequiredForeign.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestRequiredForeignBuilder {
      return ProtobufUnittest.TestRequiredForeign.classBuilder() as ProtobufUnittest.TestRequiredForeignBuilder
    }
    internal func builder() -> ProtobufUnittest.TestRequiredForeignBuilder {
      return classBuilder() as ProtobufUnittest.TestRequiredForeignBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequiredForeignBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequiredForeign.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestRequiredForeignBuilder {
      return ProtobufUnittest.TestRequiredForeign.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestRequiredForeign) -> ProtobufUnittest.TestRequiredForeignBuilder {
      return ProtobufUnittest.TestRequiredForeign.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasOptionalMessage {
        output += "\(indent) optionalMessage {\n"
        optionalMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var repeatedMessageElementIndex:Int = 0
      for oneElementrepeatedMessage in repeatedMessage {
          output += "\(indent) repeatedMessage[\(repeatedMessageElementIndex)] {\n"
          oneElementrepeatedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedMessageElementIndex++
      }
      if hasDummy {
        output += "\(indent) dummy: \(dummy) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOptionalMessage {
              hashCode = (hashCode &* 31) &+ optionalMessage.hashValue
            }
            for oneElementrepeatedMessage in repeatedMessage {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedMessage.hashValue
            }
            if hasDummy {
               hashCode = (hashCode &* 31) &+ dummy.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestRequiredForeign"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestRequiredForeign"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestRequiredForeign.self
    }
    //Meta information declaration end

  }

  final internal class TestRequiredForeignBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestRequiredForeign

    required override internal init () {
       builderResult = ProtobufUnittest.TestRequiredForeign()
       super.init()
    }
    var hasOptionalMessage:Bool {
         get {
             return builderResult.hasOptionalMessage
         }
    }
    var optionalMessage:ProtobufUnittest.TestRequired {
         get {
             return builderResult.optionalMessage
         }
         set (value) {
             builderResult.hasOptionalMessage = true
             builderResult.optionalMessage = value
         }
    }
    func setOptionalMessage(value:ProtobufUnittest.TestRequired)-> ProtobufUnittest.TestRequiredForeignBuilder {
      self.optionalMessage = value
      return self
    }
    internal func mergeOptionalMessage(value:ProtobufUnittest.TestRequired) -> ProtobufUnittest.TestRequiredForeignBuilder {
      if (builderResult.hasOptionalMessage) {
        builderResult.optionalMessage = ProtobufUnittest.TestRequired.builderWithPrototype(builderResult.optionalMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.optionalMessage = value
      }
      builderResult.hasOptionalMessage = true
      return self
    }
    internal func clearOptionalMessage() -> ProtobufUnittest.TestRequiredForeignBuilder {
      builderResult.hasOptionalMessage = false
      builderResult.optionalMessage = ProtobufUnittest.TestRequired()
      return self
    }
    var repeatedMessage:Array<ProtobufUnittest.TestRequired> {
         get {
             return builderResult.repeatedMessage
         }
         set (value) {
             builderResult.repeatedMessage = value
         }
    }
    func setRepeatedMessage(value:Array<ProtobufUnittest.TestRequired>)-> ProtobufUnittest.TestRequiredForeignBuilder {
      self.repeatedMessage = value
      return self
    }
    internal func clearRepeatedMessage() -> ProtobufUnittest.TestRequiredForeignBuilder {
      builderResult.repeatedMessage.removeAll(keepCapacity: false)
      return self
    }
    var hasDummy:Bool {
         get {
              return builderResult.hasDummy
         }
    }
    var dummy:Int32 {
         get {
              return builderResult.dummy
         }
         set (value) {
             builderResult.hasDummy = true
             builderResult.dummy = value
         }
    }
    func setDummy(value:Int32)-> ProtobufUnittest.TestRequiredForeignBuilder {
      self.dummy = value
      return self
    }
    internal func clearDummy() -> ProtobufUnittest.TestRequiredForeignBuilder{
         builderResult.hasDummy = false
         builderResult.dummy = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestRequiredForeignBuilder {
      builderResult = ProtobufUnittest.TestRequiredForeign()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestRequiredForeignBuilder {
      return ProtobufUnittest.TestRequiredForeign.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestRequiredForeign {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestRequiredForeign {
      var returnMe:ProtobufUnittest.TestRequiredForeign = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestRequiredForeign) -> ProtobufUnittest.TestRequiredForeignBuilder {
      if (other == ProtobufUnittest.TestRequiredForeign()) {
       return self
      }
      if (other.hasOptionalMessage) {
          mergeOptionalMessage(other.optionalMessage)
      }
      if !other.repeatedMessage.isEmpty  {
         builderResult.repeatedMessage += other.repeatedMessage
      }
      if other.hasDummy {
           dummy = other.dummy
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestRequiredForeignBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequiredForeignBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:ProtobufUnittest.TestRequiredBuilder = ProtobufUnittest.TestRequired.builder()
          if hasOptionalMessage {
            subBuilder.mergeFrom(optionalMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          optionalMessage = subBuilder.buildPartial()

        case 18 :
          var subBuilder = ProtobufUnittest.TestRequired.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          repeatedMessage += [subBuilder.buildPartial()]

        case 24 :
          dummy = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestForeignNested : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasForeignNested:Bool = false
    private(set) var foreignNested:ProtobufUnittest.TestAllTypes.NestedMessage = ProtobufUnittest.TestAllTypes.NestedMessage()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasForeignNested {
        output.writeMessage(1, value:foreignNested)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasForeignNested {
        serialize_size += foreignNested.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestForeignNested {
      return ProtobufUnittest.TestForeignNested.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestForeignNested {
      return ProtobufUnittest.TestForeignNested.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestForeignNested {
      return ProtobufUnittest.TestForeignNested.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestForeignNested {
      return ProtobufUnittest.TestForeignNested.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestForeignNested {
      return ProtobufUnittest.TestForeignNested.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestForeignNested {
      return ProtobufUnittest.TestForeignNested.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestForeignNestedBuilder {
      return ProtobufUnittest.TestForeignNested.classBuilder() as ProtobufUnittest.TestForeignNestedBuilder
    }
    internal func builder() -> ProtobufUnittest.TestForeignNestedBuilder {
      return classBuilder() as ProtobufUnittest.TestForeignNestedBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestForeignNestedBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestForeignNested.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestForeignNestedBuilder {
      return ProtobufUnittest.TestForeignNested.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestForeignNested) -> ProtobufUnittest.TestForeignNestedBuilder {
      return ProtobufUnittest.TestForeignNested.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasForeignNested {
        output += "\(indent) foreignNested {\n"
        foreignNested.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasForeignNested {
              hashCode = (hashCode &* 31) &+ foreignNested.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestForeignNested"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestForeignNested"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestForeignNested.self
    }
    //Meta information declaration end

  }

  final internal class TestForeignNestedBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestForeignNested

    required override internal init () {
       builderResult = ProtobufUnittest.TestForeignNested()
       super.init()
    }
    var hasForeignNested:Bool {
         get {
             return builderResult.hasForeignNested
         }
    }
    var foreignNested:ProtobufUnittest.TestAllTypes.NestedMessage {
         get {
             return builderResult.foreignNested
         }
         set (value) {
             builderResult.hasForeignNested = true
             builderResult.foreignNested = value
         }
    }
    func setForeignNested(value:ProtobufUnittest.TestAllTypes.NestedMessage)-> ProtobufUnittest.TestForeignNestedBuilder {
      self.foreignNested = value
      return self
    }
    internal func mergeForeignNested(value:ProtobufUnittest.TestAllTypes.NestedMessage) -> ProtobufUnittest.TestForeignNestedBuilder {
      if (builderResult.hasForeignNested) {
        builderResult.foreignNested = ProtobufUnittest.TestAllTypes.NestedMessage.builderWithPrototype(builderResult.foreignNested).mergeFrom(value).buildPartial()
      } else {
        builderResult.foreignNested = value
      }
      builderResult.hasForeignNested = true
      return self
    }
    internal func clearForeignNested() -> ProtobufUnittest.TestForeignNestedBuilder {
      builderResult.hasForeignNested = false
      builderResult.foreignNested = ProtobufUnittest.TestAllTypes.NestedMessage()
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestForeignNestedBuilder {
      builderResult = ProtobufUnittest.TestForeignNested()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestForeignNestedBuilder {
      return ProtobufUnittest.TestForeignNested.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestForeignNested {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestForeignNested {
      var returnMe:ProtobufUnittest.TestForeignNested = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestForeignNested) -> ProtobufUnittest.TestForeignNestedBuilder {
      if (other == ProtobufUnittest.TestForeignNested()) {
       return self
      }
      if (other.hasForeignNested) {
          mergeForeignNested(other.foreignNested)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestForeignNestedBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestForeignNestedBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:ProtobufUnittest.TestAllTypes.NestedMessageBuilder = ProtobufUnittest.TestAllTypes.NestedMessage.builder()
          if hasForeignNested {
            subBuilder.mergeFrom(foreignNested)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          foreignNested = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestEmptyMessage : GeneratedMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestEmptyMessage {
      return ProtobufUnittest.TestEmptyMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestEmptyMessage {
      return ProtobufUnittest.TestEmptyMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestEmptyMessage {
      return ProtobufUnittest.TestEmptyMessage.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestEmptyMessage {
      return ProtobufUnittest.TestEmptyMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestEmptyMessage {
      return ProtobufUnittest.TestEmptyMessage.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestEmptyMessage {
      return ProtobufUnittest.TestEmptyMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestEmptyMessageBuilder {
      return ProtobufUnittest.TestEmptyMessage.classBuilder() as ProtobufUnittest.TestEmptyMessageBuilder
    }
    internal func builder() -> ProtobufUnittest.TestEmptyMessageBuilder {
      return classBuilder() as ProtobufUnittest.TestEmptyMessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEmptyMessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEmptyMessage.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestEmptyMessageBuilder {
      return ProtobufUnittest.TestEmptyMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestEmptyMessage) -> ProtobufUnittest.TestEmptyMessageBuilder {
      return ProtobufUnittest.TestEmptyMessage.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestEmptyMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestEmptyMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestEmptyMessage.self
    }
    //Meta information declaration end

  }

  final internal class TestEmptyMessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestEmptyMessage

    required override internal init () {
       builderResult = ProtobufUnittest.TestEmptyMessage()
       super.init()
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestEmptyMessageBuilder {
      builderResult = ProtobufUnittest.TestEmptyMessage()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestEmptyMessageBuilder {
      return ProtobufUnittest.TestEmptyMessage.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestEmptyMessage {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestEmptyMessage {
      var returnMe:ProtobufUnittest.TestEmptyMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestEmptyMessage) -> ProtobufUnittest.TestEmptyMessageBuilder {
      if (other == ProtobufUnittest.TestEmptyMessage()) {
       return self
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestEmptyMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestEmptyMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestEmptyMessageWithExtensions : ExtendableMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestEmptyMessageWithExtensions {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.classBuilder() as ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder
    }
    internal func builder() -> ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder {
      return classBuilder() as ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestEmptyMessageWithExtensions) -> ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      writeExtensionDescription(&output, startInclusive:Int32(1), endExclusive:Int32(536870912), indent:indent)
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestEmptyMessageWithExtensions"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestEmptyMessageWithExtensions"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestEmptyMessageWithExtensions.self
    }
    //Meta information declaration end

  }

  final internal class TestEmptyMessageWithExtensionsBuilder : ExtendableMessageBuilder {
    private var builderResult:ProtobufUnittest.TestEmptyMessageWithExtensions

    required override internal init () {
       builderResult = ProtobufUnittest.TestEmptyMessageWithExtensions()
       super.init()
    }
    override internal var internalGetResult:ExtendableMessage {
         get {
             return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder {
      builderResult = ProtobufUnittest.TestEmptyMessageWithExtensions()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder {
      return ProtobufUnittest.TestEmptyMessageWithExtensions.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestEmptyMessageWithExtensions {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestEmptyMessageWithExtensions {
      var returnMe:ProtobufUnittest.TestEmptyMessageWithExtensions = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestEmptyMessageWithExtensions) -> ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder {
      if (other == ProtobufUnittest.TestEmptyMessageWithExtensions()) {
       return self
      }
      mergeExtensionFields(other)
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestEmptyMessageWithExtensionsBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestMultipleExtensionRanges : ExtendableMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(42), endExclusive:Int32(43))
      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(4143), endExclusive:Int32(4244))
      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(65536), endExclusive:Int32(536870912))
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestMultipleExtensionRanges {
      return ProtobufUnittest.TestMultipleExtensionRanges.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestMultipleExtensionRanges {
      return ProtobufUnittest.TestMultipleExtensionRanges.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestMultipleExtensionRanges {
      return ProtobufUnittest.TestMultipleExtensionRanges.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestMultipleExtensionRanges {
      return ProtobufUnittest.TestMultipleExtensionRanges.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestMultipleExtensionRanges {
      return ProtobufUnittest.TestMultipleExtensionRanges.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestMultipleExtensionRanges {
      return ProtobufUnittest.TestMultipleExtensionRanges.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestMultipleExtensionRangesBuilder {
      return ProtobufUnittest.TestMultipleExtensionRanges.classBuilder() as ProtobufUnittest.TestMultipleExtensionRangesBuilder
    }
    internal func builder() -> ProtobufUnittest.TestMultipleExtensionRangesBuilder {
      return classBuilder() as ProtobufUnittest.TestMultipleExtensionRangesBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMultipleExtensionRangesBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMultipleExtensionRanges.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestMultipleExtensionRangesBuilder {
      return ProtobufUnittest.TestMultipleExtensionRanges.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestMultipleExtensionRanges) -> ProtobufUnittest.TestMultipleExtensionRangesBuilder {
      return ProtobufUnittest.TestMultipleExtensionRanges.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      writeExtensionDescription(&output, startInclusive:Int32(42), endExclusive:Int32(43), indent:indent)
      writeExtensionDescription(&output, startInclusive:Int32(4143), endExclusive:Int32(4244), indent:indent)
      writeExtensionDescription(&output, startInclusive:Int32(65536), endExclusive:Int32(536870912), indent:indent)
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(42), endExclusive:Int32(43)))
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(4143), endExclusive:Int32(4244)))
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(65536), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestMultipleExtensionRanges"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestMultipleExtensionRanges"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestMultipleExtensionRanges.self
    }
    //Meta information declaration end

  }

  final internal class TestMultipleExtensionRangesBuilder : ExtendableMessageBuilder {
    private var builderResult:ProtobufUnittest.TestMultipleExtensionRanges

    required override internal init () {
       builderResult = ProtobufUnittest.TestMultipleExtensionRanges()
       super.init()
    }
    override internal var internalGetResult:ExtendableMessage {
         get {
             return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestMultipleExtensionRangesBuilder {
      builderResult = ProtobufUnittest.TestMultipleExtensionRanges()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestMultipleExtensionRangesBuilder {
      return ProtobufUnittest.TestMultipleExtensionRanges.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestMultipleExtensionRanges {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestMultipleExtensionRanges {
      var returnMe:ProtobufUnittest.TestMultipleExtensionRanges = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestMultipleExtensionRanges) -> ProtobufUnittest.TestMultipleExtensionRangesBuilder {
      if (other == ProtobufUnittest.TestMultipleExtensionRanges()) {
       return self
      }
      mergeExtensionFields(other)
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestMultipleExtensionRangesBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestMultipleExtensionRangesBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestReallyLargeTagNumber : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasA:Bool = false
    private(set) var a:Int32 = Int32(0)

    private(set) var hasBb:Bool = false
    private(set) var bb:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasA {
        output.writeInt32(1, value:a)
      }
      if hasBb {
        output.writeInt32(268435455, value:bb)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeInt32Size(1)
      }
      if hasBb {
        serialize_size += bb.computeInt32Size(268435455)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestReallyLargeTagNumber {
      return ProtobufUnittest.TestReallyLargeTagNumber.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestReallyLargeTagNumber {
      return ProtobufUnittest.TestReallyLargeTagNumber.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestReallyLargeTagNumber {
      return ProtobufUnittest.TestReallyLargeTagNumber.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestReallyLargeTagNumber {
      return ProtobufUnittest.TestReallyLargeTagNumber.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestReallyLargeTagNumber {
      return ProtobufUnittest.TestReallyLargeTagNumber.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestReallyLargeTagNumber {
      return ProtobufUnittest.TestReallyLargeTagNumber.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestReallyLargeTagNumberBuilder {
      return ProtobufUnittest.TestReallyLargeTagNumber.classBuilder() as ProtobufUnittest.TestReallyLargeTagNumberBuilder
    }
    internal func builder() -> ProtobufUnittest.TestReallyLargeTagNumberBuilder {
      return classBuilder() as ProtobufUnittest.TestReallyLargeTagNumberBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestReallyLargeTagNumberBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestReallyLargeTagNumber.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestReallyLargeTagNumberBuilder {
      return ProtobufUnittest.TestReallyLargeTagNumber.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestReallyLargeTagNumber) -> ProtobufUnittest.TestReallyLargeTagNumberBuilder {
      return ProtobufUnittest.TestReallyLargeTagNumber.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      if hasBb {
        output += "\(indent) bb: \(bb) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            if hasBb {
               hashCode = (hashCode &* 31) &+ bb.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestReallyLargeTagNumber"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestReallyLargeTagNumber"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestReallyLargeTagNumber.self
    }
    //Meta information declaration end

  }

  final internal class TestReallyLargeTagNumberBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestReallyLargeTagNumber

    required override internal init () {
       builderResult = ProtobufUnittest.TestReallyLargeTagNumber()
       super.init()
    }
    var hasA:Bool {
         get {
              return builderResult.hasA
         }
    }
    var a:Int32 {
         get {
              return builderResult.a
         }
         set (value) {
             builderResult.hasA = true
             builderResult.a = value
         }
    }
    func setA(value:Int32)-> ProtobufUnittest.TestReallyLargeTagNumberBuilder {
      self.a = value
      return self
    }
    internal func clearA() -> ProtobufUnittest.TestReallyLargeTagNumberBuilder{
         builderResult.hasA = false
         builderResult.a = Int32(0)
         return self
    }
    var hasBb:Bool {
         get {
              return builderResult.hasBb
         }
    }
    var bb:Int32 {
         get {
              return builderResult.bb
         }
         set (value) {
             builderResult.hasBb = true
             builderResult.bb = value
         }
    }
    func setBb(value:Int32)-> ProtobufUnittest.TestReallyLargeTagNumberBuilder {
      self.bb = value
      return self
    }
    internal func clearBb() -> ProtobufUnittest.TestReallyLargeTagNumberBuilder{
         builderResult.hasBb = false
         builderResult.bb = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestReallyLargeTagNumberBuilder {
      builderResult = ProtobufUnittest.TestReallyLargeTagNumber()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestReallyLargeTagNumberBuilder {
      return ProtobufUnittest.TestReallyLargeTagNumber.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestReallyLargeTagNumber {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestReallyLargeTagNumber {
      var returnMe:ProtobufUnittest.TestReallyLargeTagNumber = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestReallyLargeTagNumber) -> ProtobufUnittest.TestReallyLargeTagNumberBuilder {
      if (other == ProtobufUnittest.TestReallyLargeTagNumber()) {
       return self
      }
      if other.hasA {
           a = other.a
      }
      if other.hasBb {
           bb = other.bb
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestReallyLargeTagNumberBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestReallyLargeTagNumberBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          a = input.readInt32()

        case 2147483640 :
          bb = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestRecursiveMessage : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasA:Bool = false
    private(set) var a:ProtobufUnittest.TestRecursiveMessage = ProtobufUnittest.TestRecursiveMessage()
    private(set) var hasI:Bool = false
    private(set) var i:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasA {
        output.writeMessage(1, value:a)
      }
      if hasI {
        output.writeInt32(2, value:i)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeMessageSize(1)
      }
      if hasI {
        serialize_size += i.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestRecursiveMessage {
      return ProtobufUnittest.TestRecursiveMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRecursiveMessage {
      return ProtobufUnittest.TestRecursiveMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestRecursiveMessage {
      return ProtobufUnittest.TestRecursiveMessage.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestRecursiveMessage {
      return ProtobufUnittest.TestRecursiveMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestRecursiveMessage {
      return ProtobufUnittest.TestRecursiveMessage.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRecursiveMessage {
      return ProtobufUnittest.TestRecursiveMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestRecursiveMessageBuilder {
      return ProtobufUnittest.TestRecursiveMessage.classBuilder() as ProtobufUnittest.TestRecursiveMessageBuilder
    }
    internal func builder() -> ProtobufUnittest.TestRecursiveMessageBuilder {
      return classBuilder() as ProtobufUnittest.TestRecursiveMessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRecursiveMessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRecursiveMessage.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestRecursiveMessageBuilder {
      return ProtobufUnittest.TestRecursiveMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestRecursiveMessage) -> ProtobufUnittest.TestRecursiveMessageBuilder {
      return ProtobufUnittest.TestRecursiveMessage.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasA {
        output += "\(indent) a {\n"
        a.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasI {
        output += "\(indent) i: \(i) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
              hashCode = (hashCode &* 31) &+ a.hashValue
            }
            if hasI {
               hashCode = (hashCode &* 31) &+ i.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestRecursiveMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestRecursiveMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestRecursiveMessage.self
    }
    //Meta information declaration end

  }

  final internal class TestRecursiveMessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestRecursiveMessage

    required override internal init () {
       builderResult = ProtobufUnittest.TestRecursiveMessage()
       super.init()
    }
    var hasA:Bool {
         get {
             return builderResult.hasA
         }
    }
    var a:ProtobufUnittest.TestRecursiveMessage {
         get {
             return builderResult.a
         }
         set (value) {
             builderResult.hasA = true
             builderResult.a = value
         }
    }
    func setA(value:ProtobufUnittest.TestRecursiveMessage)-> ProtobufUnittest.TestRecursiveMessageBuilder {
      self.a = value
      return self
    }
    internal func mergeA(value:ProtobufUnittest.TestRecursiveMessage) -> ProtobufUnittest.TestRecursiveMessageBuilder {
      if (builderResult.hasA) {
        builderResult.a = ProtobufUnittest.TestRecursiveMessage.builderWithPrototype(builderResult.a).mergeFrom(value).buildPartial()
      } else {
        builderResult.a = value
      }
      builderResult.hasA = true
      return self
    }
    internal func clearA() -> ProtobufUnittest.TestRecursiveMessageBuilder {
      builderResult.hasA = false
      builderResult.a = ProtobufUnittest.TestRecursiveMessage()
      return self
    }
    var hasI:Bool {
         get {
              return builderResult.hasI
         }
    }
    var i:Int32 {
         get {
              return builderResult.i
         }
         set (value) {
             builderResult.hasI = true
             builderResult.i = value
         }
    }
    func setI(value:Int32)-> ProtobufUnittest.TestRecursiveMessageBuilder {
      self.i = value
      return self
    }
    internal func clearI() -> ProtobufUnittest.TestRecursiveMessageBuilder{
         builderResult.hasI = false
         builderResult.i = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestRecursiveMessageBuilder {
      builderResult = ProtobufUnittest.TestRecursiveMessage()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestRecursiveMessageBuilder {
      return ProtobufUnittest.TestRecursiveMessage.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestRecursiveMessage {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestRecursiveMessage {
      var returnMe:ProtobufUnittest.TestRecursiveMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestRecursiveMessage) -> ProtobufUnittest.TestRecursiveMessageBuilder {
      if (other == ProtobufUnittest.TestRecursiveMessage()) {
       return self
      }
      if (other.hasA) {
          mergeA(other.a)
      }
      if other.hasI {
           i = other.i
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestRecursiveMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRecursiveMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:ProtobufUnittest.TestRecursiveMessageBuilder = ProtobufUnittest.TestRecursiveMessage.builder()
          if hasA {
            subBuilder.mergeFrom(a)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          a = subBuilder.buildPartial()

        case 16 :
          i = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestMutualRecursionA : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasBb:Bool = false
    private(set) var bb:ProtobufUnittest.TestMutualRecursionB = ProtobufUnittest.TestMutualRecursionB()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasBb {
        output.writeMessage(1, value:bb)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasBb {
        serialize_size += bb.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestMutualRecursionA {
      return ProtobufUnittest.TestMutualRecursionA.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestMutualRecursionA {
      return ProtobufUnittest.TestMutualRecursionA.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestMutualRecursionA {
      return ProtobufUnittest.TestMutualRecursionA.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestMutualRecursionA {
      return ProtobufUnittest.TestMutualRecursionA.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestMutualRecursionA {
      return ProtobufUnittest.TestMutualRecursionA.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestMutualRecursionA {
      return ProtobufUnittest.TestMutualRecursionA.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestMutualRecursionABuilder {
      return ProtobufUnittest.TestMutualRecursionA.classBuilder() as ProtobufUnittest.TestMutualRecursionABuilder
    }
    internal func builder() -> ProtobufUnittest.TestMutualRecursionABuilder {
      return classBuilder() as ProtobufUnittest.TestMutualRecursionABuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMutualRecursionABuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMutualRecursionA.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestMutualRecursionABuilder {
      return ProtobufUnittest.TestMutualRecursionA.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestMutualRecursionA) -> ProtobufUnittest.TestMutualRecursionABuilder {
      return ProtobufUnittest.TestMutualRecursionA.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasBb {
        output += "\(indent) bb {\n"
        bb.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBb {
              hashCode = (hashCode &* 31) &+ bb.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestMutualRecursionA"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestMutualRecursionA"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestMutualRecursionA.self
    }
    //Meta information declaration end

  }

  final internal class TestMutualRecursionABuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestMutualRecursionA

    required override internal init () {
       builderResult = ProtobufUnittest.TestMutualRecursionA()
       super.init()
    }
    var hasBb:Bool {
         get {
             return builderResult.hasBb
         }
    }
    var bb:ProtobufUnittest.TestMutualRecursionB {
         get {
             return builderResult.bb
         }
         set (value) {
             builderResult.hasBb = true
             builderResult.bb = value
         }
    }
    func setBb(value:ProtobufUnittest.TestMutualRecursionB)-> ProtobufUnittest.TestMutualRecursionABuilder {
      self.bb = value
      return self
    }
    internal func mergeBb(value:ProtobufUnittest.TestMutualRecursionB) -> ProtobufUnittest.TestMutualRecursionABuilder {
      if (builderResult.hasBb) {
        builderResult.bb = ProtobufUnittest.TestMutualRecursionB.builderWithPrototype(builderResult.bb).mergeFrom(value).buildPartial()
      } else {
        builderResult.bb = value
      }
      builderResult.hasBb = true
      return self
    }
    internal func clearBb() -> ProtobufUnittest.TestMutualRecursionABuilder {
      builderResult.hasBb = false
      builderResult.bb = ProtobufUnittest.TestMutualRecursionB()
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestMutualRecursionABuilder {
      builderResult = ProtobufUnittest.TestMutualRecursionA()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestMutualRecursionABuilder {
      return ProtobufUnittest.TestMutualRecursionA.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestMutualRecursionA {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestMutualRecursionA {
      var returnMe:ProtobufUnittest.TestMutualRecursionA = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestMutualRecursionA) -> ProtobufUnittest.TestMutualRecursionABuilder {
      if (other == ProtobufUnittest.TestMutualRecursionA()) {
       return self
      }
      if (other.hasBb) {
          mergeBb(other.bb)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestMutualRecursionABuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestMutualRecursionABuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:ProtobufUnittest.TestMutualRecursionBBuilder = ProtobufUnittest.TestMutualRecursionB.builder()
          if hasBb {
            subBuilder.mergeFrom(bb)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          bb = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestMutualRecursionB : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasA:Bool = false
    private(set) var a:ProtobufUnittest.TestMutualRecursionA = ProtobufUnittest.TestMutualRecursionA()
    private(set) var hasOptionalInt32:Bool = false
    private(set) var optionalInt32:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasA {
        output.writeMessage(1, value:a)
      }
      if hasOptionalInt32 {
        output.writeInt32(2, value:optionalInt32)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeMessageSize(1)
      }
      if hasOptionalInt32 {
        serialize_size += optionalInt32.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestMutualRecursionB {
      return ProtobufUnittest.TestMutualRecursionB.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestMutualRecursionB {
      return ProtobufUnittest.TestMutualRecursionB.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestMutualRecursionB {
      return ProtobufUnittest.TestMutualRecursionB.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestMutualRecursionB {
      return ProtobufUnittest.TestMutualRecursionB.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestMutualRecursionB {
      return ProtobufUnittest.TestMutualRecursionB.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestMutualRecursionB {
      return ProtobufUnittest.TestMutualRecursionB.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestMutualRecursionBBuilder {
      return ProtobufUnittest.TestMutualRecursionB.classBuilder() as ProtobufUnittest.TestMutualRecursionBBuilder
    }
    internal func builder() -> ProtobufUnittest.TestMutualRecursionBBuilder {
      return classBuilder() as ProtobufUnittest.TestMutualRecursionBBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMutualRecursionBBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMutualRecursionB.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestMutualRecursionBBuilder {
      return ProtobufUnittest.TestMutualRecursionB.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestMutualRecursionB) -> ProtobufUnittest.TestMutualRecursionBBuilder {
      return ProtobufUnittest.TestMutualRecursionB.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasA {
        output += "\(indent) a {\n"
        a.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalInt32 {
        output += "\(indent) optionalInt32: \(optionalInt32) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
              hashCode = (hashCode &* 31) &+ a.hashValue
            }
            if hasOptionalInt32 {
               hashCode = (hashCode &* 31) &+ optionalInt32.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestMutualRecursionB"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestMutualRecursionB"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestMutualRecursionB.self
    }
    //Meta information declaration end

  }

  final internal class TestMutualRecursionBBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestMutualRecursionB

    required override internal init () {
       builderResult = ProtobufUnittest.TestMutualRecursionB()
       super.init()
    }
    var hasA:Bool {
         get {
             return builderResult.hasA
         }
    }
    var a:ProtobufUnittest.TestMutualRecursionA {
         get {
             return builderResult.a
         }
         set (value) {
             builderResult.hasA = true
             builderResult.a = value
         }
    }
    func setA(value:ProtobufUnittest.TestMutualRecursionA)-> ProtobufUnittest.TestMutualRecursionBBuilder {
      self.a = value
      return self
    }
    internal func mergeA(value:ProtobufUnittest.TestMutualRecursionA) -> ProtobufUnittest.TestMutualRecursionBBuilder {
      if (builderResult.hasA) {
        builderResult.a = ProtobufUnittest.TestMutualRecursionA.builderWithPrototype(builderResult.a).mergeFrom(value).buildPartial()
      } else {
        builderResult.a = value
      }
      builderResult.hasA = true
      return self
    }
    internal func clearA() -> ProtobufUnittest.TestMutualRecursionBBuilder {
      builderResult.hasA = false
      builderResult.a = ProtobufUnittest.TestMutualRecursionA()
      return self
    }
    var hasOptionalInt32:Bool {
         get {
              return builderResult.hasOptionalInt32
         }
    }
    var optionalInt32:Int32 {
         get {
              return builderResult.optionalInt32
         }
         set (value) {
             builderResult.hasOptionalInt32 = true
             builderResult.optionalInt32 = value
         }
    }
    func setOptionalInt32(value:Int32)-> ProtobufUnittest.TestMutualRecursionBBuilder {
      self.optionalInt32 = value
      return self
    }
    internal func clearOptionalInt32() -> ProtobufUnittest.TestMutualRecursionBBuilder{
         builderResult.hasOptionalInt32 = false
         builderResult.optionalInt32 = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestMutualRecursionBBuilder {
      builderResult = ProtobufUnittest.TestMutualRecursionB()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestMutualRecursionBBuilder {
      return ProtobufUnittest.TestMutualRecursionB.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestMutualRecursionB {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestMutualRecursionB {
      var returnMe:ProtobufUnittest.TestMutualRecursionB = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestMutualRecursionB) -> ProtobufUnittest.TestMutualRecursionBBuilder {
      if (other == ProtobufUnittest.TestMutualRecursionB()) {
       return self
      }
      if (other.hasA) {
          mergeA(other.a)
      }
      if other.hasOptionalInt32 {
           optionalInt32 = other.optionalInt32
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestMutualRecursionBBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestMutualRecursionBBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:ProtobufUnittest.TestMutualRecursionABuilder = ProtobufUnittest.TestMutualRecursionA.builder()
          if hasA {
            subBuilder.mergeFrom(a)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          a = subBuilder.buildPartial()

        case 16 :
          optionalInt32 = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestDupFieldNumber : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class Foo : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(1, value:a)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return ProtobufUnittest.TestDupFieldNumber.Foo.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return ProtobufUnittest.TestDupFieldNumber.Foo.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return ProtobufUnittest.TestDupFieldNumber.Foo.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestDupFieldNumber.Foo {
          return ProtobufUnittest.TestDupFieldNumber.Foo.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return ProtobufUnittest.TestDupFieldNumber.Foo.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDupFieldNumber.Foo {
          return ProtobufUnittest.TestDupFieldNumber.Foo.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestDupFieldNumber.FooBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Foo.classBuilder() as ProtobufUnittest.TestDupFieldNumber.FooBuilder
        }
        internal func builder() -> ProtobufUnittest.TestDupFieldNumber.FooBuilder {
          return classBuilder() as ProtobufUnittest.TestDupFieldNumber.FooBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDupFieldNumber.FooBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Foo.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestDupFieldNumber.FooBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Foo.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestDupFieldNumber.Foo) -> ProtobufUnittest.TestDupFieldNumber.FooBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Foo.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestDupFieldNumber.Foo"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestDupFieldNumber.Foo"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestDupFieldNumber.Foo.self
        }
        //Meta information declaration end

      }

      final internal class FooBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestDupFieldNumber.Foo

        required override internal init () {
           builderResult = ProtobufUnittest.TestDupFieldNumber.Foo()
           super.init()
        }
        var hasA:Bool {
             get {
                  return builderResult.hasA
             }
        }
        var a:Int32 {
             get {
                  return builderResult.a
             }
             set (value) {
                 builderResult.hasA = true
                 builderResult.a = value
             }
        }
        func setA(value:Int32)-> ProtobufUnittest.TestDupFieldNumber.FooBuilder {
          self.a = value
          return self
        }
        internal func clearA() -> ProtobufUnittest.TestDupFieldNumber.FooBuilder{
             builderResult.hasA = false
             builderResult.a = Int32(0)
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestDupFieldNumber.FooBuilder {
          builderResult = ProtobufUnittest.TestDupFieldNumber.Foo()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestDupFieldNumber.FooBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Foo.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestDupFieldNumber.Foo {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestDupFieldNumber.Foo {
          var returnMe:ProtobufUnittest.TestDupFieldNumber.Foo = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestDupFieldNumber.Foo) -> ProtobufUnittest.TestDupFieldNumber.FooBuilder {
          if (other == ProtobufUnittest.TestDupFieldNumber.Foo()) {
           return self
          }
          if other.hasA {
               a = other.a
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestDupFieldNumber.FooBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDupFieldNumber.FooBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 8 :
              a = input.readInt32()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class Bar : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(1, value:a)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return ProtobufUnittest.TestDupFieldNumber.Bar.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return ProtobufUnittest.TestDupFieldNumber.Bar.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return ProtobufUnittest.TestDupFieldNumber.Bar.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestDupFieldNumber.Bar {
          return ProtobufUnittest.TestDupFieldNumber.Bar.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return ProtobufUnittest.TestDupFieldNumber.Bar.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDupFieldNumber.Bar {
          return ProtobufUnittest.TestDupFieldNumber.Bar.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestDupFieldNumber.BarBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Bar.classBuilder() as ProtobufUnittest.TestDupFieldNumber.BarBuilder
        }
        internal func builder() -> ProtobufUnittest.TestDupFieldNumber.BarBuilder {
          return classBuilder() as ProtobufUnittest.TestDupFieldNumber.BarBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDupFieldNumber.BarBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Bar.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestDupFieldNumber.BarBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Bar.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestDupFieldNumber.Bar) -> ProtobufUnittest.TestDupFieldNumber.BarBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Bar.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestDupFieldNumber.Bar"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestDupFieldNumber.Bar"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestDupFieldNumber.Bar.self
        }
        //Meta information declaration end

      }

      final internal class BarBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestDupFieldNumber.Bar

        required override internal init () {
           builderResult = ProtobufUnittest.TestDupFieldNumber.Bar()
           super.init()
        }
        var hasA:Bool {
             get {
                  return builderResult.hasA
             }
        }
        var a:Int32 {
             get {
                  return builderResult.a
             }
             set (value) {
                 builderResult.hasA = true
                 builderResult.a = value
             }
        }
        func setA(value:Int32)-> ProtobufUnittest.TestDupFieldNumber.BarBuilder {
          self.a = value
          return self
        }
        internal func clearA() -> ProtobufUnittest.TestDupFieldNumber.BarBuilder{
             builderResult.hasA = false
             builderResult.a = Int32(0)
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestDupFieldNumber.BarBuilder {
          builderResult = ProtobufUnittest.TestDupFieldNumber.Bar()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestDupFieldNumber.BarBuilder {
          return ProtobufUnittest.TestDupFieldNumber.Bar.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestDupFieldNumber.Bar {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestDupFieldNumber.Bar {
          var returnMe:ProtobufUnittest.TestDupFieldNumber.Bar = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestDupFieldNumber.Bar) -> ProtobufUnittest.TestDupFieldNumber.BarBuilder {
          if (other == ProtobufUnittest.TestDupFieldNumber.Bar()) {
           return self
          }
          if other.hasA {
               a = other.a
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestDupFieldNumber.BarBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDupFieldNumber.BarBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 8 :
              a = input.readInt32()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end

    private(set) var hasA:Bool = false
    private(set) var a:Int32 = Int32(0)

    private(set) var hasFoo:Bool = false
    private(set) var foo:ProtobufUnittest.TestDupFieldNumber.Foo = ProtobufUnittest.TestDupFieldNumber.Foo()
    private(set) var hasBar:Bool = false
    private(set) var bar:ProtobufUnittest.TestDupFieldNumber.Bar = ProtobufUnittest.TestDupFieldNumber.Bar()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasA {
        output.writeInt32(1, value:a)
      }
      if hasFoo {
        output.writeGroup(2, value:foo)
      }
      if hasBar {
        output.writeGroup(3, value:bar)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeInt32Size(1)
      }
      if hasFoo {
        serialize_size += foo.computeGroupSize(2)
      }
      if hasBar {
        serialize_size += bar.computeGroupSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestDupFieldNumber {
      return ProtobufUnittest.TestDupFieldNumber.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDupFieldNumber {
      return ProtobufUnittest.TestDupFieldNumber.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestDupFieldNumber {
      return ProtobufUnittest.TestDupFieldNumber.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestDupFieldNumber {
      return ProtobufUnittest.TestDupFieldNumber.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestDupFieldNumber {
      return ProtobufUnittest.TestDupFieldNumber.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDupFieldNumber {
      return ProtobufUnittest.TestDupFieldNumber.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestDupFieldNumberBuilder {
      return ProtobufUnittest.TestDupFieldNumber.classBuilder() as ProtobufUnittest.TestDupFieldNumberBuilder
    }
    internal func builder() -> ProtobufUnittest.TestDupFieldNumberBuilder {
      return classBuilder() as ProtobufUnittest.TestDupFieldNumberBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDupFieldNumberBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDupFieldNumber.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestDupFieldNumberBuilder {
      return ProtobufUnittest.TestDupFieldNumber.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestDupFieldNumber) -> ProtobufUnittest.TestDupFieldNumberBuilder {
      return ProtobufUnittest.TestDupFieldNumber.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      if hasFoo {
        output += "\(indent) foo {\n"
        foo.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasBar {
        output += "\(indent) bar {\n"
        bar.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            if hasFoo {
              hashCode = (hashCode &* 31) &+ foo.hashValue
            }
            if hasBar {
              hashCode = (hashCode &* 31) &+ bar.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestDupFieldNumber"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestDupFieldNumber"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestDupFieldNumber.self
    }
    //Meta information declaration end

  }

  final internal class TestDupFieldNumberBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestDupFieldNumber

    required override internal init () {
       builderResult = ProtobufUnittest.TestDupFieldNumber()
       super.init()
    }
    var hasA:Bool {
         get {
              return builderResult.hasA
         }
    }
    var a:Int32 {
         get {
              return builderResult.a
         }
         set (value) {
             builderResult.hasA = true
             builderResult.a = value
         }
    }
    func setA(value:Int32)-> ProtobufUnittest.TestDupFieldNumberBuilder {
      self.a = value
      return self
    }
    internal func clearA() -> ProtobufUnittest.TestDupFieldNumberBuilder{
         builderResult.hasA = false
         builderResult.a = Int32(0)
         return self
    }
    var hasFoo:Bool {
         get {
             return builderResult.hasFoo
         }
    }
    var foo:ProtobufUnittest.TestDupFieldNumber.Foo {
         get {
             return builderResult.foo
         }
         set (value) {
             builderResult.hasFoo = true
             builderResult.foo = value
         }
    }
    func setFoo(value:ProtobufUnittest.TestDupFieldNumber.Foo)-> ProtobufUnittest.TestDupFieldNumberBuilder {
      self.foo = value
      return self
    }
    internal func mergeFoo(value:ProtobufUnittest.TestDupFieldNumber.Foo) -> ProtobufUnittest.TestDupFieldNumberBuilder {
      if (builderResult.hasFoo) {
        builderResult.foo = ProtobufUnittest.TestDupFieldNumber.Foo.builderWithPrototype(builderResult.foo).mergeFrom(value).buildPartial()
      } else {
        builderResult.foo = value
      }
      builderResult.hasFoo = true
      return self
    }
    internal func clearFoo() -> ProtobufUnittest.TestDupFieldNumberBuilder {
      builderResult.hasFoo = false
      builderResult.foo = ProtobufUnittest.TestDupFieldNumber.Foo()
      return self
    }
    var hasBar:Bool {
         get {
             return builderResult.hasBar
         }
    }
    var bar:ProtobufUnittest.TestDupFieldNumber.Bar {
         get {
             return builderResult.bar
         }
         set (value) {
             builderResult.hasBar = true
             builderResult.bar = value
         }
    }
    func setBar(value:ProtobufUnittest.TestDupFieldNumber.Bar)-> ProtobufUnittest.TestDupFieldNumberBuilder {
      self.bar = value
      return self
    }
    internal func mergeBar(value:ProtobufUnittest.TestDupFieldNumber.Bar) -> ProtobufUnittest.TestDupFieldNumberBuilder {
      if (builderResult.hasBar) {
        builderResult.bar = ProtobufUnittest.TestDupFieldNumber.Bar.builderWithPrototype(builderResult.bar).mergeFrom(value).buildPartial()
      } else {
        builderResult.bar = value
      }
      builderResult.hasBar = true
      return self
    }
    internal func clearBar() -> ProtobufUnittest.TestDupFieldNumberBuilder {
      builderResult.hasBar = false
      builderResult.bar = ProtobufUnittest.TestDupFieldNumber.Bar()
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestDupFieldNumberBuilder {
      builderResult = ProtobufUnittest.TestDupFieldNumber()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestDupFieldNumberBuilder {
      return ProtobufUnittest.TestDupFieldNumber.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestDupFieldNumber {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestDupFieldNumber {
      var returnMe:ProtobufUnittest.TestDupFieldNumber = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestDupFieldNumber) -> ProtobufUnittest.TestDupFieldNumberBuilder {
      if (other == ProtobufUnittest.TestDupFieldNumber()) {
       return self
      }
      if other.hasA {
           a = other.a
      }
      if (other.hasFoo) {
          mergeFoo(other.foo)
      }
      if (other.hasBar) {
          mergeBar(other.bar)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestDupFieldNumberBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDupFieldNumberBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          a = input.readInt32()

        case 19 :
          var subBuilder:ProtobufUnittest.TestDupFieldNumber.FooBuilder = ProtobufUnittest.TestDupFieldNumber.Foo.builder()
          if hasFoo {
            subBuilder.mergeFrom(foo)
          }
          input.readGroup(2, builder:subBuilder, extensionRegistry:extensionRegistry)
          foo = subBuilder.buildPartial()

        case 27 :
          var subBuilder:ProtobufUnittest.TestDupFieldNumber.BarBuilder = ProtobufUnittest.TestDupFieldNumber.Bar.builder()
          if hasBar {
            subBuilder.mergeFrom(bar)
          }
          input.readGroup(3, builder:subBuilder, extensionRegistry:extensionRegistry)
          bar = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestEagerMessage : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasSubMessage:Bool = false
    private(set) var subMessage:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasSubMessage {
        output.writeMessage(1, value:subMessage)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSubMessage {
        serialize_size += subMessage.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestEagerMessage {
      return ProtobufUnittest.TestEagerMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestEagerMessage {
      return ProtobufUnittest.TestEagerMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestEagerMessage {
      return ProtobufUnittest.TestEagerMessage.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestEagerMessage {
      return ProtobufUnittest.TestEagerMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestEagerMessage {
      return ProtobufUnittest.TestEagerMessage.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestEagerMessage {
      return ProtobufUnittest.TestEagerMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestEagerMessageBuilder {
      return ProtobufUnittest.TestEagerMessage.classBuilder() as ProtobufUnittest.TestEagerMessageBuilder
    }
    internal func builder() -> ProtobufUnittest.TestEagerMessageBuilder {
      return classBuilder() as ProtobufUnittest.TestEagerMessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEagerMessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEagerMessage.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestEagerMessageBuilder {
      return ProtobufUnittest.TestEagerMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestEagerMessage) -> ProtobufUnittest.TestEagerMessageBuilder {
      return ProtobufUnittest.TestEagerMessage.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasSubMessage {
        output += "\(indent) subMessage {\n"
        subMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSubMessage {
              hashCode = (hashCode &* 31) &+ subMessage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestEagerMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestEagerMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestEagerMessage.self
    }
    //Meta information declaration end

  }

  final internal class TestEagerMessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestEagerMessage

    required override internal init () {
       builderResult = ProtobufUnittest.TestEagerMessage()
       super.init()
    }
    var hasSubMessage:Bool {
         get {
             return builderResult.hasSubMessage
         }
    }
    var subMessage:ProtobufUnittest.TestAllTypes {
         get {
             return builderResult.subMessage
         }
         set (value) {
             builderResult.hasSubMessage = true
             builderResult.subMessage = value
         }
    }
    func setSubMessage(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.TestEagerMessageBuilder {
      self.subMessage = value
      return self
    }
    internal func mergeSubMessage(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestEagerMessageBuilder {
      if (builderResult.hasSubMessage) {
        builderResult.subMessage = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.subMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.subMessage = value
      }
      builderResult.hasSubMessage = true
      return self
    }
    internal func clearSubMessage() -> ProtobufUnittest.TestEagerMessageBuilder {
      builderResult.hasSubMessage = false
      builderResult.subMessage = ProtobufUnittest.TestAllTypes()
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestEagerMessageBuilder {
      builderResult = ProtobufUnittest.TestEagerMessage()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestEagerMessageBuilder {
      return ProtobufUnittest.TestEagerMessage.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestEagerMessage {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestEagerMessage {
      var returnMe:ProtobufUnittest.TestEagerMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestEagerMessage) -> ProtobufUnittest.TestEagerMessageBuilder {
      if (other == ProtobufUnittest.TestEagerMessage()) {
       return self
      }
      if (other.hasSubMessage) {
          mergeSubMessage(other.subMessage)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestEagerMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestEagerMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
          if hasSubMessage {
            subBuilder.mergeFrom(subMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          subMessage = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestLazyMessage : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasSubMessage:Bool = false
    private(set) var subMessage:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasSubMessage {
        output.writeMessage(1, value:subMessage)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSubMessage {
        serialize_size += subMessage.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestLazyMessage {
      return ProtobufUnittest.TestLazyMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestLazyMessage {
      return ProtobufUnittest.TestLazyMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestLazyMessage {
      return ProtobufUnittest.TestLazyMessage.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestLazyMessage {
      return ProtobufUnittest.TestLazyMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestLazyMessage {
      return ProtobufUnittest.TestLazyMessage.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestLazyMessage {
      return ProtobufUnittest.TestLazyMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestLazyMessageBuilder {
      return ProtobufUnittest.TestLazyMessage.classBuilder() as ProtobufUnittest.TestLazyMessageBuilder
    }
    internal func builder() -> ProtobufUnittest.TestLazyMessageBuilder {
      return classBuilder() as ProtobufUnittest.TestLazyMessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestLazyMessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestLazyMessage.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestLazyMessageBuilder {
      return ProtobufUnittest.TestLazyMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestLazyMessage) -> ProtobufUnittest.TestLazyMessageBuilder {
      return ProtobufUnittest.TestLazyMessage.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasSubMessage {
        output += "\(indent) subMessage {\n"
        subMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSubMessage {
              hashCode = (hashCode &* 31) &+ subMessage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestLazyMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestLazyMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestLazyMessage.self
    }
    //Meta information declaration end

  }

  final internal class TestLazyMessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestLazyMessage

    required override internal init () {
       builderResult = ProtobufUnittest.TestLazyMessage()
       super.init()
    }
    var hasSubMessage:Bool {
         get {
             return builderResult.hasSubMessage
         }
    }
    var subMessage:ProtobufUnittest.TestAllTypes {
         get {
             return builderResult.subMessage
         }
         set (value) {
             builderResult.hasSubMessage = true
             builderResult.subMessage = value
         }
    }
    func setSubMessage(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.TestLazyMessageBuilder {
      self.subMessage = value
      return self
    }
    internal func mergeSubMessage(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestLazyMessageBuilder {
      if (builderResult.hasSubMessage) {
        builderResult.subMessage = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.subMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.subMessage = value
      }
      builderResult.hasSubMessage = true
      return self
    }
    internal func clearSubMessage() -> ProtobufUnittest.TestLazyMessageBuilder {
      builderResult.hasSubMessage = false
      builderResult.subMessage = ProtobufUnittest.TestAllTypes()
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestLazyMessageBuilder {
      builderResult = ProtobufUnittest.TestLazyMessage()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestLazyMessageBuilder {
      return ProtobufUnittest.TestLazyMessage.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestLazyMessage {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestLazyMessage {
      var returnMe:ProtobufUnittest.TestLazyMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestLazyMessage) -> ProtobufUnittest.TestLazyMessageBuilder {
      if (other == ProtobufUnittest.TestLazyMessage()) {
       return self
      }
      if (other.hasSubMessage) {
          mergeSubMessage(other.subMessage)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestLazyMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestLazyMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
          if hasSubMessage {
            subBuilder.mergeFrom(subMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          subMessage = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestNestedMessageHasBits : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var nestedmessageRepeatedInt32:Array<Int32> = Array<Int32>()
        private(set) var nestedmessageRepeatedForeignmessage:Array<ProtobufUnittest.ForeignMessage>  = Array<ProtobufUnittest.ForeignMessage>()
        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if !nestedmessageRepeatedInt32.isEmpty {
            for oneValuenestedmessageRepeatedInt32 in nestedmessageRepeatedInt32 {
              output.writeInt32(1, value:oneValuenestedmessageRepeatedInt32)
            }
          }
          for oneElementnestedmessageRepeatedForeignmessage in nestedmessageRepeatedForeignmessage {
              output.writeMessage(2, value:oneElementnestedmessageRepeatedForeignmessage)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          var dataSizeNestedmessageRepeatedInt32:Int32 = 0
          for oneValuenestedmessageRepeatedInt32 in nestedmessageRepeatedInt32 {
              dataSizeNestedmessageRepeatedInt32 += oneValuenestedmessageRepeatedInt32.computeInt32SizeNoTag()
          }
          serialize_size += dataSizeNestedmessageRepeatedInt32
          serialize_size += 1 * Int32(nestedmessageRepeatedInt32.count)
          for oneElementnestedmessageRepeatedForeignmessage in nestedmessageRepeatedForeignmessage {
              serialize_size += oneElementnestedmessageRepeatedForeignmessage.computeMessageSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.classBuilder() as ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder
        }
        internal func builder() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          return classBuilder() as ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage) -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          var nestedmessageRepeatedInt32ElementIndex:Int = 0
          for oneValuenestedmessageRepeatedInt32 in nestedmessageRepeatedInt32  {
              output += "\(indent) nestedmessageRepeatedInt32[\(nestedmessageRepeatedInt32ElementIndex)]: \(oneValuenestedmessageRepeatedInt32)\n"
              nestedmessageRepeatedInt32ElementIndex++
          }
          var nestedmessageRepeatedForeignmessageElementIndex:Int = 0
          for oneElementnestedmessageRepeatedForeignmessage in nestedmessageRepeatedForeignmessage {
              output += "\(indent) nestedmessageRepeatedForeignmessage[\(nestedmessageRepeatedForeignmessageElementIndex)] {\n"
              oneElementnestedmessageRepeatedForeignmessage.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              nestedmessageRepeatedForeignmessageElementIndex++
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneValuenestedmessageRepeatedInt32 in nestedmessageRepeatedInt32 {
                    hashCode = (hashCode &* 31) &+ oneValuenestedmessageRepeatedInt32.hashValue
                }
                for oneElementnestedmessageRepeatedForeignmessage in nestedmessageRepeatedForeignmessage {
                    hashCode = (hashCode &* 31) &+ oneElementnestedmessageRepeatedForeignmessage.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestNestedMessageHasBits.NestedMessage"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestNestedMessageHasBits.NestedMessage"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.self
        }
        //Meta information declaration end

      }

      final internal class NestedMessageBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage

        required override internal init () {
           builderResult = ProtobufUnittest.TestNestedMessageHasBits.NestedMessage()
           super.init()
        }
        var nestedmessageRepeatedInt32:Array<Int32> {
             get {
                 return builderResult.nestedmessageRepeatedInt32
             }
             set (array) {
                 builderResult.nestedmessageRepeatedInt32 = array
             }
        }
        func setNestedmessageRepeatedInt32(value:Array<Int32>)-> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          self.nestedmessageRepeatedInt32 = value
          return self
        }
        internal func clearNestedmessageRepeatedInt32() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
           builderResult.nestedmessageRepeatedInt32.removeAll(keepCapacity: false)
           return self
        }
        var nestedmessageRepeatedForeignmessage:Array<ProtobufUnittest.ForeignMessage> {
             get {
                 return builderResult.nestedmessageRepeatedForeignmessage
             }
             set (value) {
                 builderResult.nestedmessageRepeatedForeignmessage = value
             }
        }
        func setNestedmessageRepeatedForeignmessage(value:Array<ProtobufUnittest.ForeignMessage>)-> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          self.nestedmessageRepeatedForeignmessage = value
          return self
        }
        internal func clearNestedmessageRepeatedForeignmessage() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          builderResult.nestedmessageRepeatedForeignmessage.removeAll(keepCapacity: false)
          return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          builderResult = ProtobufUnittest.TestNestedMessageHasBits.NestedMessage()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          return ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
          var returnMe:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage) -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          if (other == ProtobufUnittest.TestNestedMessageHasBits.NestedMessage()) {
           return self
          }
          if !other.nestedmessageRepeatedInt32.isEmpty {
              builderResult.nestedmessageRepeatedInt32 += other.nestedmessageRepeatedInt32
          }
          if !other.nestedmessageRepeatedForeignmessage.isEmpty  {
             builderResult.nestedmessageRepeatedForeignmessage += other.nestedmessageRepeatedForeignmessage
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 8 :
              nestedmessageRepeatedInt32 += [input.readInt32()]

            case 18 :
              var subBuilder = ProtobufUnittest.ForeignMessage.builder()
              input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
              nestedmessageRepeatedForeignmessage += [subBuilder.buildPartial()]

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end

    private(set) var hasOptionalNestedMessage:Bool = false
    private(set) var optionalNestedMessage:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage = ProtobufUnittest.TestNestedMessageHasBits.NestedMessage()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasOptionalNestedMessage {
        output.writeMessage(1, value:optionalNestedMessage)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOptionalNestedMessage {
        serialize_size += optionalNestedMessage.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestNestedMessageHasBits {
      return ProtobufUnittest.TestNestedMessageHasBits.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestNestedMessageHasBits {
      return ProtobufUnittest.TestNestedMessageHasBits.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestNestedMessageHasBits {
      return ProtobufUnittest.TestNestedMessageHasBits.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestNestedMessageHasBits {
      return ProtobufUnittest.TestNestedMessageHasBits.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestNestedMessageHasBits {
      return ProtobufUnittest.TestNestedMessageHasBits.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestNestedMessageHasBits {
      return ProtobufUnittest.TestNestedMessageHasBits.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      return ProtobufUnittest.TestNestedMessageHasBits.classBuilder() as ProtobufUnittest.TestNestedMessageHasBitsBuilder
    }
    internal func builder() -> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      return classBuilder() as ProtobufUnittest.TestNestedMessageHasBitsBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestNestedMessageHasBitsBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestNestedMessageHasBits.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      return ProtobufUnittest.TestNestedMessageHasBits.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestNestedMessageHasBits) -> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      return ProtobufUnittest.TestNestedMessageHasBits.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasOptionalNestedMessage {
        output += "\(indent) optionalNestedMessage {\n"
        optionalNestedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOptionalNestedMessage {
              hashCode = (hashCode &* 31) &+ optionalNestedMessage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestNestedMessageHasBits"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestNestedMessageHasBits"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestNestedMessageHasBits.self
    }
    //Meta information declaration end

  }

  final internal class TestNestedMessageHasBitsBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestNestedMessageHasBits

    required override internal init () {
       builderResult = ProtobufUnittest.TestNestedMessageHasBits()
       super.init()
    }
    var hasOptionalNestedMessage:Bool {
         get {
             return builderResult.hasOptionalNestedMessage
         }
    }
    var optionalNestedMessage:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage {
         get {
             return builderResult.optionalNestedMessage
         }
         set (value) {
             builderResult.hasOptionalNestedMessage = true
             builderResult.optionalNestedMessage = value
         }
    }
    func setOptionalNestedMessage(value:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage)-> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      self.optionalNestedMessage = value
      return self
    }
    internal func mergeOptionalNestedMessage(value:ProtobufUnittest.TestNestedMessageHasBits.NestedMessage) -> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      if (builderResult.hasOptionalNestedMessage) {
        builderResult.optionalNestedMessage = ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builderWithPrototype(builderResult.optionalNestedMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.optionalNestedMessage = value
      }
      builderResult.hasOptionalNestedMessage = true
      return self
    }
    internal func clearOptionalNestedMessage() -> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      builderResult.hasOptionalNestedMessage = false
      builderResult.optionalNestedMessage = ProtobufUnittest.TestNestedMessageHasBits.NestedMessage()
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      builderResult = ProtobufUnittest.TestNestedMessageHasBits()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      return ProtobufUnittest.TestNestedMessageHasBits.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestNestedMessageHasBits {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestNestedMessageHasBits {
      var returnMe:ProtobufUnittest.TestNestedMessageHasBits = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestNestedMessageHasBits) -> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      if (other == ProtobufUnittest.TestNestedMessageHasBits()) {
       return self
      }
      if (other.hasOptionalNestedMessage) {
          mergeOptionalNestedMessage(other.optionalNestedMessage)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestNestedMessageHasBitsBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestNestedMessageHasBitsBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:ProtobufUnittest.TestNestedMessageHasBits.NestedMessageBuilder = ProtobufUnittest.TestNestedMessageHasBits.NestedMessage.builder()
          if hasOptionalNestedMessage {
            subBuilder.mergeFrom(optionalNestedMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          optionalNestedMessage = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestCamelCaseFieldNames : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasPrimitiveField:Bool = false
    private(set) var primitiveField:Int32 = Int32(0)

    private(set) var hasStringField:Bool = false
    private(set) var stringField:String = ""

    private(set) var enumField:ProtobufUnittest.ForeignEnum = ProtobufUnittest.ForeignEnum.ForeignFoo
    private(set) var hasEnumField:Bool = false
    private(set) var hasMessageField:Bool = false
    private(set) var messageField:ProtobufUnittest.ForeignMessage = ProtobufUnittest.ForeignMessage()
    private(set) var hasStringPieceField:Bool = false
    private(set) var stringPieceField:String = ""

    private(set) var hasCordField:Bool = false
    private(set) var cordField:String = ""

    private(set) var repeatedPrimitiveField:Array<Int32> = Array<Int32>()
    private(set) var repeatedStringField:Array<String> = Array<String>()
    private var repeatedEnumFieldMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedEnumField:Array<ProtobufUnittest.ForeignEnum> = Array<ProtobufUnittest.ForeignEnum>()
    private(set) var repeatedMessageField:Array<ProtobufUnittest.ForeignMessage>  = Array<ProtobufUnittest.ForeignMessage>()
    private(set) var repeatedStringPieceField:Array<String> = Array<String>()
    private(set) var repeatedCordField:Array<String> = Array<String>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasPrimitiveField {
        output.writeInt32(1, value:primitiveField)
      }
      if hasStringField {
        output.writeString(2, value:stringField)
      }
      if hasEnumField {
        output.writeEnum(3, value:enumField.rawValue)
      }
      if hasMessageField {
        output.writeMessage(4, value:messageField)
      }
      if hasStringPieceField {
        output.writeString(5, value:stringPieceField)
      }
      if hasCordField {
        output.writeString(6, value:cordField)
      }
      if !repeatedPrimitiveField.isEmpty {
        for oneValuerepeatedPrimitiveField in repeatedPrimitiveField {
          output.writeInt32(7, value:oneValuerepeatedPrimitiveField)
        }
      }
      if !repeatedStringField.isEmpty {
        for oneValuerepeatedStringField in repeatedStringField {
          output.writeString(8, value:oneValuerepeatedStringField)
        }
      }
      for oneValueOfrepeatedEnumField in repeatedEnumField {
          output.writeEnum(9, value:oneValueOfrepeatedEnumField.rawValue)
      }
      for oneElementrepeatedMessageField in repeatedMessageField {
          output.writeMessage(10, value:oneElementrepeatedMessageField)
      }
      if !repeatedStringPieceField.isEmpty {
        for oneValuerepeatedStringPieceField in repeatedStringPieceField {
          output.writeString(11, value:oneValuerepeatedStringPieceField)
        }
      }
      if !repeatedCordField.isEmpty {
        for oneValuerepeatedCordField in repeatedCordField {
          output.writeString(12, value:oneValuerepeatedCordField)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPrimitiveField {
        serialize_size += primitiveField.computeInt32Size(1)
      }
      if hasStringField {
        serialize_size += stringField.computeStringSize(2)
      }
      if (hasEnumField) {
        serialize_size += enumField.rawValue.computeEnumSize(3)
      }
      if hasMessageField {
        serialize_size += messageField.computeMessageSize(4)
      }
      if hasStringPieceField {
        serialize_size += stringPieceField.computeStringSize(5)
      }
      if hasCordField {
        serialize_size += cordField.computeStringSize(6)
      }
      var dataSizeRepeatedPrimitiveField:Int32 = 0
      for oneValuerepeatedPrimitiveField in repeatedPrimitiveField {
          dataSizeRepeatedPrimitiveField += oneValuerepeatedPrimitiveField.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedPrimitiveField
      serialize_size += 1 * Int32(repeatedPrimitiveField.count)
      var dataSizeRepeatedStringField:Int32 = 0
      for oneValuerepeatedStringField in repeatedStringField {
          dataSizeRepeatedStringField += oneValuerepeatedStringField.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedStringField
      serialize_size += 1 * Int32(repeatedStringField.count)
      var dataSizerepeatedEnumField:Int32 = 0
      for oneValueOfrepeatedEnumField in repeatedEnumField {
          dataSizerepeatedEnumField += oneValueOfrepeatedEnumField.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedEnumField
      serialize_size += (1 * Int32(repeatedEnumField.count))
      for oneElementrepeatedMessageField in repeatedMessageField {
          serialize_size += oneElementrepeatedMessageField.computeMessageSize(10)
      }
      var dataSizeRepeatedStringPieceField:Int32 = 0
      for oneValuerepeatedStringPieceField in repeatedStringPieceField {
          dataSizeRepeatedStringPieceField += oneValuerepeatedStringPieceField.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedStringPieceField
      serialize_size += 1 * Int32(repeatedStringPieceField.count)
      var dataSizeRepeatedCordField:Int32 = 0
      for oneValuerepeatedCordField in repeatedCordField {
          dataSizeRepeatedCordField += oneValuerepeatedCordField.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedCordField
      serialize_size += 1 * Int32(repeatedCordField.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestCamelCaseFieldNames {
      return ProtobufUnittest.TestCamelCaseFieldNames.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestCamelCaseFieldNames {
      return ProtobufUnittest.TestCamelCaseFieldNames.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestCamelCaseFieldNames {
      return ProtobufUnittest.TestCamelCaseFieldNames.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestCamelCaseFieldNames {
      return ProtobufUnittest.TestCamelCaseFieldNames.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestCamelCaseFieldNames {
      return ProtobufUnittest.TestCamelCaseFieldNames.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestCamelCaseFieldNames {
      return ProtobufUnittest.TestCamelCaseFieldNames.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      return ProtobufUnittest.TestCamelCaseFieldNames.classBuilder() as ProtobufUnittest.TestCamelCaseFieldNamesBuilder
    }
    internal func builder() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      return classBuilder() as ProtobufUnittest.TestCamelCaseFieldNamesBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestCamelCaseFieldNamesBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestCamelCaseFieldNames.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      return ProtobufUnittest.TestCamelCaseFieldNames.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestCamelCaseFieldNames) -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      return ProtobufUnittest.TestCamelCaseFieldNames.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasPrimitiveField {
        output += "\(indent) primitiveField: \(primitiveField) \n"
      }
      if hasStringField {
        output += "\(indent) stringField: \(stringField) \n"
      }
      if (hasEnumField) {
        output += "\(indent) enumField: \(enumField.rawValue)\n"
      }
      if hasMessageField {
        output += "\(indent) messageField {\n"
        messageField.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasStringPieceField {
        output += "\(indent) stringPieceField: \(stringPieceField) \n"
      }
      if hasCordField {
        output += "\(indent) cordField: \(cordField) \n"
      }
      var repeatedPrimitiveFieldElementIndex:Int = 0
      for oneValuerepeatedPrimitiveField in repeatedPrimitiveField  {
          output += "\(indent) repeatedPrimitiveField[\(repeatedPrimitiveFieldElementIndex)]: \(oneValuerepeatedPrimitiveField)\n"
          repeatedPrimitiveFieldElementIndex++
      }
      var repeatedStringFieldElementIndex:Int = 0
      for oneValuerepeatedStringField in repeatedStringField  {
          output += "\(indent) repeatedStringField[\(repeatedStringFieldElementIndex)]: \(oneValuerepeatedStringField)\n"
          repeatedStringFieldElementIndex++
      }
      var repeatedEnumFieldElementIndex:Int = 0
      for oneValueOfrepeatedEnumField in repeatedEnumField {
          output += "\(indent) repeatedEnumField[\(repeatedEnumFieldElementIndex)]: \(oneValueOfrepeatedEnumField.rawValue)\n"
          repeatedEnumFieldElementIndex++
      }
      var repeatedMessageFieldElementIndex:Int = 0
      for oneElementrepeatedMessageField in repeatedMessageField {
          output += "\(indent) repeatedMessageField[\(repeatedMessageFieldElementIndex)] {\n"
          oneElementrepeatedMessageField.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedMessageFieldElementIndex++
      }
      var repeatedStringPieceFieldElementIndex:Int = 0
      for oneValuerepeatedStringPieceField in repeatedStringPieceField  {
          output += "\(indent) repeatedStringPieceField[\(repeatedStringPieceFieldElementIndex)]: \(oneValuerepeatedStringPieceField)\n"
          repeatedStringPieceFieldElementIndex++
      }
      var repeatedCordFieldElementIndex:Int = 0
      for oneValuerepeatedCordField in repeatedCordField  {
          output += "\(indent) repeatedCordField[\(repeatedCordFieldElementIndex)]: \(oneValuerepeatedCordField)\n"
          repeatedCordFieldElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPrimitiveField {
               hashCode = (hashCode &* 31) &+ primitiveField.hashValue
            }
            if hasStringField {
               hashCode = (hashCode &* 31) &+ stringField.hashValue
            }
            if hasEnumField {
               hashCode = (hashCode &* 31) &+ Int(enumField.rawValue)
            }
            if hasMessageField {
              hashCode = (hashCode &* 31) &+ messageField.hashValue
            }
            if hasStringPieceField {
               hashCode = (hashCode &* 31) &+ stringPieceField.hashValue
            }
            if hasCordField {
               hashCode = (hashCode &* 31) &+ cordField.hashValue
            }
            for oneValuerepeatedPrimitiveField in repeatedPrimitiveField {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedPrimitiveField.hashValue
            }
            for oneValuerepeatedStringField in repeatedStringField {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedStringField.hashValue
            }
            for oneValueOfrepeatedEnumField in repeatedEnumField {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedEnumField.rawValue)
            }
            for oneElementrepeatedMessageField in repeatedMessageField {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedMessageField.hashValue
            }
            for oneValuerepeatedStringPieceField in repeatedStringPieceField {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedStringPieceField.hashValue
            }
            for oneValuerepeatedCordField in repeatedCordField {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedCordField.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestCamelCaseFieldNames"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestCamelCaseFieldNames"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestCamelCaseFieldNames.self
    }
    //Meta information declaration end

  }

  final internal class TestCamelCaseFieldNamesBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestCamelCaseFieldNames

    required override internal init () {
       builderResult = ProtobufUnittest.TestCamelCaseFieldNames()
       super.init()
    }
    var hasPrimitiveField:Bool {
         get {
              return builderResult.hasPrimitiveField
         }
    }
    var primitiveField:Int32 {
         get {
              return builderResult.primitiveField
         }
         set (value) {
             builderResult.hasPrimitiveField = true
             builderResult.primitiveField = value
         }
    }
    func setPrimitiveField(value:Int32)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.primitiveField = value
      return self
    }
    internal func clearPrimitiveField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder{
         builderResult.hasPrimitiveField = false
         builderResult.primitiveField = Int32(0)
         return self
    }
    var hasStringField:Bool {
         get {
              return builderResult.hasStringField
         }
    }
    var stringField:String {
         get {
              return builderResult.stringField
         }
         set (value) {
             builderResult.hasStringField = true
             builderResult.stringField = value
         }
    }
    func setStringField(value:String)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.stringField = value
      return self
    }
    internal func clearStringField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder{
         builderResult.hasStringField = false
         builderResult.stringField = ""
         return self
    }
      var hasEnumField:Bool{
          get {
              return builderResult.hasEnumField
          }
      }
      var enumField:ProtobufUnittest.ForeignEnum {
          get {
              return builderResult.enumField
          }
          set (value) {
              builderResult.hasEnumField = true
              builderResult.enumField = value
          }
      }
      internal func setEnumField(value:ProtobufUnittest.ForeignEnum)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
        self.enumField = value
        return self
      }
      internal func clearEnumField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
         builderResult.hasEnumField = false
         builderResult.enumField = .ForeignFoo
         return self
      }
    var hasMessageField:Bool {
         get {
             return builderResult.hasMessageField
         }
    }
    var messageField:ProtobufUnittest.ForeignMessage {
         get {
             return builderResult.messageField
         }
         set (value) {
             builderResult.hasMessageField = true
             builderResult.messageField = value
         }
    }
    func setMessageField(value:ProtobufUnittest.ForeignMessage)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.messageField = value
      return self
    }
    internal func mergeMessageField(value:ProtobufUnittest.ForeignMessage) -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      if (builderResult.hasMessageField) {
        builderResult.messageField = ProtobufUnittest.ForeignMessage.builderWithPrototype(builderResult.messageField).mergeFrom(value).buildPartial()
      } else {
        builderResult.messageField = value
      }
      builderResult.hasMessageField = true
      return self
    }
    internal func clearMessageField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      builderResult.hasMessageField = false
      builderResult.messageField = ProtobufUnittest.ForeignMessage()
      return self
    }
    var hasStringPieceField:Bool {
         get {
              return builderResult.hasStringPieceField
         }
    }
    var stringPieceField:String {
         get {
              return builderResult.stringPieceField
         }
         set (value) {
             builderResult.hasStringPieceField = true
             builderResult.stringPieceField = value
         }
    }
    func setStringPieceField(value:String)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.stringPieceField = value
      return self
    }
    internal func clearStringPieceField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder{
         builderResult.hasStringPieceField = false
         builderResult.stringPieceField = ""
         return self
    }
    var hasCordField:Bool {
         get {
              return builderResult.hasCordField
         }
    }
    var cordField:String {
         get {
              return builderResult.cordField
         }
         set (value) {
             builderResult.hasCordField = true
             builderResult.cordField = value
         }
    }
    func setCordField(value:String)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.cordField = value
      return self
    }
    internal func clearCordField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder{
         builderResult.hasCordField = false
         builderResult.cordField = ""
         return self
    }
    var repeatedPrimitiveField:Array<Int32> {
         get {
             return builderResult.repeatedPrimitiveField
         }
         set (array) {
             builderResult.repeatedPrimitiveField = array
         }
    }
    func setRepeatedPrimitiveField(value:Array<Int32>)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.repeatedPrimitiveField = value
      return self
    }
    internal func clearRepeatedPrimitiveField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
       builderResult.repeatedPrimitiveField.removeAll(keepCapacity: false)
       return self
    }
    var repeatedStringField:Array<String> {
         get {
             return builderResult.repeatedStringField
         }
         set (array) {
             builderResult.repeatedStringField = array
         }
    }
    func setRepeatedStringField(value:Array<String>)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.repeatedStringField = value
      return self
    }
    internal func clearRepeatedStringField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
       builderResult.repeatedStringField.removeAll(keepCapacity: false)
       return self
    }
    var repeatedEnumField:Array<ProtobufUnittest.ForeignEnum> {
        get {
            return builderResult.repeatedEnumField
        }
        set (value) {
            builderResult.repeatedEnumField = value
        }
    }
    func setRepeatedEnumField(value:Array<ProtobufUnittest.ForeignEnum>)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.repeatedEnumField = value
      return self
    }
    internal func clearRepeatedEnumField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      builderResult.repeatedEnumField.removeAll(keepCapacity: false)
      return self
    }
    var repeatedMessageField:Array<ProtobufUnittest.ForeignMessage> {
         get {
             return builderResult.repeatedMessageField
         }
         set (value) {
             builderResult.repeatedMessageField = value
         }
    }
    func setRepeatedMessageField(value:Array<ProtobufUnittest.ForeignMessage>)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.repeatedMessageField = value
      return self
    }
    internal func clearRepeatedMessageField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      builderResult.repeatedMessageField.removeAll(keepCapacity: false)
      return self
    }
    var repeatedStringPieceField:Array<String> {
         get {
             return builderResult.repeatedStringPieceField
         }
         set (array) {
             builderResult.repeatedStringPieceField = array
         }
    }
    func setRepeatedStringPieceField(value:Array<String>)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.repeatedStringPieceField = value
      return self
    }
    internal func clearRepeatedStringPieceField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
       builderResult.repeatedStringPieceField.removeAll(keepCapacity: false)
       return self
    }
    var repeatedCordField:Array<String> {
         get {
             return builderResult.repeatedCordField
         }
         set (array) {
             builderResult.repeatedCordField = array
         }
    }
    func setRepeatedCordField(value:Array<String>)-> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      self.repeatedCordField = value
      return self
    }
    internal func clearRepeatedCordField() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
       builderResult.repeatedCordField.removeAll(keepCapacity: false)
       return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      builderResult = ProtobufUnittest.TestCamelCaseFieldNames()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      return ProtobufUnittest.TestCamelCaseFieldNames.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestCamelCaseFieldNames {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestCamelCaseFieldNames {
      var returnMe:ProtobufUnittest.TestCamelCaseFieldNames = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestCamelCaseFieldNames) -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      if (other == ProtobufUnittest.TestCamelCaseFieldNames()) {
       return self
      }
      if other.hasPrimitiveField {
           primitiveField = other.primitiveField
      }
      if other.hasStringField {
           stringField = other.stringField
      }
      if other.hasEnumField {
           enumField = other.enumField
      }
      if (other.hasMessageField) {
          mergeMessageField(other.messageField)
      }
      if other.hasStringPieceField {
           stringPieceField = other.stringPieceField
      }
      if other.hasCordField {
           cordField = other.cordField
      }
      if !other.repeatedPrimitiveField.isEmpty {
          builderResult.repeatedPrimitiveField += other.repeatedPrimitiveField
      }
      if !other.repeatedStringField.isEmpty {
          builderResult.repeatedStringField += other.repeatedStringField
      }
      if !other.repeatedEnumField.isEmpty {
         builderResult.repeatedEnumField += other.repeatedEnumField
      }
      if !other.repeatedMessageField.isEmpty  {
         builderResult.repeatedMessageField += other.repeatedMessageField
      }
      if !other.repeatedStringPieceField.isEmpty {
          builderResult.repeatedStringPieceField += other.repeatedStringPieceField
      }
      if !other.repeatedCordField.isEmpty {
          builderResult.repeatedCordField += other.repeatedCordField
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestCamelCaseFieldNamesBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          primitiveField = input.readInt32()

        case 18 :
          stringField = input.readString()

        case 24 :
          let valueIntenumField = input.readEnum()
          if let enumsenumField = ProtobufUnittest.ForeignEnum(rawValue:valueIntenumField){
               enumField = enumsenumField
          } else {
               unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntenumField))
          }

        case 34 :
          var subBuilder:ProtobufUnittest.ForeignMessageBuilder = ProtobufUnittest.ForeignMessage.builder()
          if hasMessageField {
            subBuilder.mergeFrom(messageField)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          messageField = subBuilder.buildPartial()

        case 42 :
          stringPieceField = input.readString()

        case 50 :
          cordField = input.readString()

        case 56 :
          repeatedPrimitiveField += [input.readInt32()]

        case 66 :
          repeatedStringField += [input.readString()]

        case 72 :
          let valueIntrepeatedEnumField = input.readEnum()
          if let enumsrepeatedEnumField = ProtobufUnittest.ForeignEnum(rawValue:valueIntrepeatedEnumField) {
               builderResult.repeatedEnumField += [enumsrepeatedEnumField]
          } else {
               unknownFieldsBuilder.mergeVarintField(9, value:Int64(valueIntrepeatedEnumField))
          }

        case 82 :
          var subBuilder = ProtobufUnittest.ForeignMessage.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          repeatedMessageField += [subBuilder.buildPartial()]

        case 90 :
          repeatedStringPieceField += [input.readString()]

        case 98 :
          repeatedCordField += [input.readString()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestFieldOrderings : ExtendableMessage, GeneratedMessageProtocol {
    private(set) var hasMyString:Bool = false
    private(set) var myString:String = ""

    private(set) var hasMyInt:Bool = false
    private(set) var myInt:Int64 = Int64(0)

    private(set) var hasMyFloat:Bool = false
    private(set) var myFloat:Float = Float(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasMyInt {
        output.writeInt64(1, value:myInt)
      }
      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(2), endExclusive:Int32(11))
      if hasMyString {
        output.writeString(11, value:myString)
      }
      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(12), endExclusive:Int32(101))
      if hasMyFloat {
        output.writeFloat(101, value:myFloat)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMyInt {
        serialize_size += myInt.computeInt64Size(1)
      }
      if hasMyString {
        serialize_size += myString.computeStringSize(11)
      }
      if hasMyFloat {
        serialize_size += myFloat.computeFloatSize(101)
      }
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestFieldOrderings {
      return ProtobufUnittest.TestFieldOrderings.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestFieldOrderings {
      return ProtobufUnittest.TestFieldOrderings.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestFieldOrderings {
      return ProtobufUnittest.TestFieldOrderings.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestFieldOrderings {
      return ProtobufUnittest.TestFieldOrderings.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestFieldOrderings {
      return ProtobufUnittest.TestFieldOrderings.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestFieldOrderings {
      return ProtobufUnittest.TestFieldOrderings.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestFieldOrderingsBuilder {
      return ProtobufUnittest.TestFieldOrderings.classBuilder() as ProtobufUnittest.TestFieldOrderingsBuilder
    }
    internal func builder() -> ProtobufUnittest.TestFieldOrderingsBuilder {
      return classBuilder() as ProtobufUnittest.TestFieldOrderingsBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestFieldOrderingsBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestFieldOrderings.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestFieldOrderingsBuilder {
      return ProtobufUnittest.TestFieldOrderings.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestFieldOrderings) -> ProtobufUnittest.TestFieldOrderingsBuilder {
      return ProtobufUnittest.TestFieldOrderings.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasMyInt {
        output += "\(indent) myInt: \(myInt) \n"
      }
      writeExtensionDescription(&output, startInclusive:Int32(2), endExclusive:Int32(11), indent:indent)
      if hasMyString {
        output += "\(indent) myString: \(myString) \n"
      }
      writeExtensionDescription(&output, startInclusive:Int32(12), endExclusive:Int32(101), indent:indent)
      if hasMyFloat {
        output += "\(indent) myFloat: \(myFloat) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMyInt {
               hashCode = (hashCode &* 31) &+ myInt.hashValue
            }
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(2), endExclusive:Int32(11)))
            if hasMyString {
               hashCode = (hashCode &* 31) &+ myString.hashValue
            }
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(12), endExclusive:Int32(101)))
            if hasMyFloat {
               hashCode = (hashCode &* 31) &+ myFloat.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestFieldOrderings"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestFieldOrderings"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestFieldOrderings.self
    }
    //Meta information declaration end

  }

  final internal class TestFieldOrderingsBuilder : ExtendableMessageBuilder {
    private var builderResult:ProtobufUnittest.TestFieldOrderings

    required override internal init () {
       builderResult = ProtobufUnittest.TestFieldOrderings()
       super.init()
    }
    var hasMyString:Bool {
         get {
              return builderResult.hasMyString
         }
    }
    var myString:String {
         get {
              return builderResult.myString
         }
         set (value) {
             builderResult.hasMyString = true
             builderResult.myString = value
         }
    }
    func setMyString(value:String)-> ProtobufUnittest.TestFieldOrderingsBuilder {
      self.myString = value
      return self
    }
    internal func clearMyString() -> ProtobufUnittest.TestFieldOrderingsBuilder{
         builderResult.hasMyString = false
         builderResult.myString = ""
         return self
    }
    var hasMyInt:Bool {
         get {
              return builderResult.hasMyInt
         }
    }
    var myInt:Int64 {
         get {
              return builderResult.myInt
         }
         set (value) {
             builderResult.hasMyInt = true
             builderResult.myInt = value
         }
    }
    func setMyInt(value:Int64)-> ProtobufUnittest.TestFieldOrderingsBuilder {
      self.myInt = value
      return self
    }
    internal func clearMyInt() -> ProtobufUnittest.TestFieldOrderingsBuilder{
         builderResult.hasMyInt = false
         builderResult.myInt = Int64(0)
         return self
    }
    var hasMyFloat:Bool {
         get {
              return builderResult.hasMyFloat
         }
    }
    var myFloat:Float {
         get {
              return builderResult.myFloat
         }
         set (value) {
             builderResult.hasMyFloat = true
             builderResult.myFloat = value
         }
    }
    func setMyFloat(value:Float)-> ProtobufUnittest.TestFieldOrderingsBuilder {
      self.myFloat = value
      return self
    }
    internal func clearMyFloat() -> ProtobufUnittest.TestFieldOrderingsBuilder{
         builderResult.hasMyFloat = false
         builderResult.myFloat = Float(0)
         return self
    }
    override internal var internalGetResult:ExtendableMessage {
         get {
             return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestFieldOrderingsBuilder {
      builderResult = ProtobufUnittest.TestFieldOrderings()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestFieldOrderingsBuilder {
      return ProtobufUnittest.TestFieldOrderings.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestFieldOrderings {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestFieldOrderings {
      var returnMe:ProtobufUnittest.TestFieldOrderings = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestFieldOrderings) -> ProtobufUnittest.TestFieldOrderingsBuilder {
      if (other == ProtobufUnittest.TestFieldOrderings()) {
       return self
      }
      if other.hasMyString {
           myString = other.myString
      }
      if other.hasMyInt {
           myInt = other.myInt
      }
      if other.hasMyFloat {
           myFloat = other.myFloat
      }
      mergeExtensionFields(other)
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestFieldOrderingsBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestFieldOrderingsBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          myInt = input.readInt64()

        case 90 :
          myString = input.readString()

        case 813 :
          myFloat = input.readFloat()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestExtremeDefaultValues : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasEscapedBytes:Bool = false
    private(set) var escapedBytes:NSData = NSData(bytes:([Byte]() + "testsr".utf8), length:6)

    private(set) var hasLargeUint32:Bool = false
    private(set) var largeUint32:UInt32 = UInt32(65535)

    private(set) var hasLargeUint64:Bool = false
    private(set) var largeUint64:UInt64 = UInt64(16777215)

    private(set) var hasSmallInt32:Bool = false
    private(set) var smallInt32:Int32 = Int32(-2147483647)

    private(set) var hasSmallInt64:Bool = false
    private(set) var smallInt64:Int64 = Int64(-9223372036854775807)

    private(set) var hasReallySmallInt32:Bool = false
    private(set) var reallySmallInt32:Int32 = Int32(-2147483648)

    private(set) var hasReallySmallInt64:Bool = false
    private(set) var reallySmallInt64:Int64 = Int64(-576460752303423488)

    private(set) var hasUtf8String:Bool = false
    private(set) var utf8String:String = "tests"

    private(set) var hasZeroFloat:Bool = false
    private(set) var zeroFloat:Float = Float(0)

    private(set) var hasOneFloat:Bool = false
    private(set) var oneFloat:Float = Float(1)

    private(set) var hasSmallFloat:Bool = false
    private(set) var smallFloat:Float = Float(1.5)

    private(set) var hasNegativeOneFloat:Bool = false
    private(set) var negativeOneFloat:Float = Float(-1)

    private(set) var hasNegativeFloat:Bool = false
    private(set) var negativeFloat:Float = Float(-1.5)

    private(set) var hasLargeFloat:Bool = false
    private(set) var largeFloat:Float = Float(2e+08)

    private(set) var hasSmallNegativeFloat:Bool = false
    private(set) var smallNegativeFloat:Float = Float(-8e-28)

    private(set) var hasInfDouble:Bool = false
    private(set) var infDouble:Double = Double(HUGE)

    private(set) var hasNegInfDouble:Bool = false
    private(set) var negInfDouble:Double = Double(-HUGE)

    private(set) var hasNanDouble:Bool = false
    private(set) var nanDouble:Double = 0.0

    private(set) var hasInfFloat:Bool = false
    private(set) var infFloat:Float = HUGE

    private(set) var hasNegInfFloat:Bool = false
    private(set) var negInfFloat:Float = -HUGE

    private(set) var hasNanFloat:Bool = false
    private(set) var nanFloat:Float = 0.0

    private(set) var hasCppTrigraph:Bool = false
    private(set) var cppTrigraph:String = "teststsrs"

    private(set) var hasStringWithZero:Bool = false
    private(set) var stringWithZero:String = "hel\000lo"

    private(set) var hasBytesWithZero:Bool = false
    private(set) var bytesWithZero:NSData = NSData(bytes:([Byte]() + "wor\000ld".utf8), length:6)

    private(set) var hasStringPieceWithZero:Bool = false
    private(set) var stringPieceWithZero:String = "ab\000c"

    private(set) var hasCordWithZero:Bool = false
    private(set) var cordWithZero:String = "12\0003"

    private(set) var hasReplacementString:Bool = false
    private(set) var replacementString:String = "${unknown}"

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasEscapedBytes {
        output.writeData(1, value:escapedBytes)
      }
      if hasLargeUint32 {
        output.writeUInt32(2, value:largeUint32)
      }
      if hasLargeUint64 {
        output.writeUInt64(3, value:largeUint64)
      }
      if hasSmallInt32 {
        output.writeInt32(4, value:smallInt32)
      }
      if hasSmallInt64 {
        output.writeInt64(5, value:smallInt64)
      }
      if hasUtf8String {
        output.writeString(6, value:utf8String)
      }
      if hasZeroFloat {
        output.writeFloat(7, value:zeroFloat)
      }
      if hasOneFloat {
        output.writeFloat(8, value:oneFloat)
      }
      if hasSmallFloat {
        output.writeFloat(9, value:smallFloat)
      }
      if hasNegativeOneFloat {
        output.writeFloat(10, value:negativeOneFloat)
      }
      if hasNegativeFloat {
        output.writeFloat(11, value:negativeFloat)
      }
      if hasLargeFloat {
        output.writeFloat(12, value:largeFloat)
      }
      if hasSmallNegativeFloat {
        output.writeFloat(13, value:smallNegativeFloat)
      }
      if hasInfDouble {
        output.writeDouble(14, value:infDouble)
      }
      if hasNegInfDouble {
        output.writeDouble(15, value:negInfDouble)
      }
      if hasNanDouble {
        output.writeDouble(16, value:nanDouble)
      }
      if hasInfFloat {
        output.writeFloat(17, value:infFloat)
      }
      if hasNegInfFloat {
        output.writeFloat(18, value:negInfFloat)
      }
      if hasNanFloat {
        output.writeFloat(19, value:nanFloat)
      }
      if hasCppTrigraph {
        output.writeString(20, value:cppTrigraph)
      }
      if hasReallySmallInt32 {
        output.writeInt32(21, value:reallySmallInt32)
      }
      if hasReallySmallInt64 {
        output.writeInt64(22, value:reallySmallInt64)
      }
      if hasStringWithZero {
        output.writeString(23, value:stringWithZero)
      }
      if hasBytesWithZero {
        output.writeData(24, value:bytesWithZero)
      }
      if hasStringPieceWithZero {
        output.writeString(25, value:stringPieceWithZero)
      }
      if hasCordWithZero {
        output.writeString(26, value:cordWithZero)
      }
      if hasReplacementString {
        output.writeString(27, value:replacementString)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEscapedBytes {
        serialize_size += escapedBytes.computeDataSize(1)
      }
      if hasLargeUint32 {
        serialize_size += largeUint32.computeUInt32Size(2)
      }
      if hasLargeUint64 {
        serialize_size += largeUint64.computeUInt64Size(3)
      }
      if hasSmallInt32 {
        serialize_size += smallInt32.computeInt32Size(4)
      }
      if hasSmallInt64 {
        serialize_size += smallInt64.computeInt64Size(5)
      }
      if hasUtf8String {
        serialize_size += utf8String.computeStringSize(6)
      }
      if hasZeroFloat {
        serialize_size += zeroFloat.computeFloatSize(7)
      }
      if hasOneFloat {
        serialize_size += oneFloat.computeFloatSize(8)
      }
      if hasSmallFloat {
        serialize_size += smallFloat.computeFloatSize(9)
      }
      if hasNegativeOneFloat {
        serialize_size += negativeOneFloat.computeFloatSize(10)
      }
      if hasNegativeFloat {
        serialize_size += negativeFloat.computeFloatSize(11)
      }
      if hasLargeFloat {
        serialize_size += largeFloat.computeFloatSize(12)
      }
      if hasSmallNegativeFloat {
        serialize_size += smallNegativeFloat.computeFloatSize(13)
      }
      if hasInfDouble {
        serialize_size += infDouble.computeDoubleSize(14)
      }
      if hasNegInfDouble {
        serialize_size += negInfDouble.computeDoubleSize(15)
      }
      if hasNanDouble {
        serialize_size += nanDouble.computeDoubleSize(16)
      }
      if hasInfFloat {
        serialize_size += infFloat.computeFloatSize(17)
      }
      if hasNegInfFloat {
        serialize_size += negInfFloat.computeFloatSize(18)
      }
      if hasNanFloat {
        serialize_size += nanFloat.computeFloatSize(19)
      }
      if hasCppTrigraph {
        serialize_size += cppTrigraph.computeStringSize(20)
      }
      if hasReallySmallInt32 {
        serialize_size += reallySmallInt32.computeInt32Size(21)
      }
      if hasReallySmallInt64 {
        serialize_size += reallySmallInt64.computeInt64Size(22)
      }
      if hasStringWithZero {
        serialize_size += stringWithZero.computeStringSize(23)
      }
      if hasBytesWithZero {
        serialize_size += bytesWithZero.computeDataSize(24)
      }
      if hasStringPieceWithZero {
        serialize_size += stringPieceWithZero.computeStringSize(25)
      }
      if hasCordWithZero {
        serialize_size += cordWithZero.computeStringSize(26)
      }
      if hasReplacementString {
        serialize_size += replacementString.computeStringSize(27)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestExtremeDefaultValues {
      return ProtobufUnittest.TestExtremeDefaultValues.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestExtremeDefaultValues {
      return ProtobufUnittest.TestExtremeDefaultValues.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestExtremeDefaultValues {
      return ProtobufUnittest.TestExtremeDefaultValues.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestExtremeDefaultValues {
      return ProtobufUnittest.TestExtremeDefaultValues.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestExtremeDefaultValues {
      return ProtobufUnittest.TestExtremeDefaultValues.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestExtremeDefaultValues {
      return ProtobufUnittest.TestExtremeDefaultValues.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      return ProtobufUnittest.TestExtremeDefaultValues.classBuilder() as ProtobufUnittest.TestExtremeDefaultValuesBuilder
    }
    internal func builder() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      return classBuilder() as ProtobufUnittest.TestExtremeDefaultValuesBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestExtremeDefaultValuesBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestExtremeDefaultValues.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      return ProtobufUnittest.TestExtremeDefaultValues.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestExtremeDefaultValues) -> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      return ProtobufUnittest.TestExtremeDefaultValues.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasEscapedBytes {
        output += "\(indent) escapedBytes: \(escapedBytes) \n"
      }
      if hasLargeUint32 {
        output += "\(indent) largeUint32: \(largeUint32) \n"
      }
      if hasLargeUint64 {
        output += "\(indent) largeUint64: \(largeUint64) \n"
      }
      if hasSmallInt32 {
        output += "\(indent) smallInt32: \(smallInt32) \n"
      }
      if hasSmallInt64 {
        output += "\(indent) smallInt64: \(smallInt64) \n"
      }
      if hasUtf8String {
        output += "\(indent) utf8String: \(utf8String) \n"
      }
      if hasZeroFloat {
        output += "\(indent) zeroFloat: \(zeroFloat) \n"
      }
      if hasOneFloat {
        output += "\(indent) oneFloat: \(oneFloat) \n"
      }
      if hasSmallFloat {
        output += "\(indent) smallFloat: \(smallFloat) \n"
      }
      if hasNegativeOneFloat {
        output += "\(indent) negativeOneFloat: \(negativeOneFloat) \n"
      }
      if hasNegativeFloat {
        output += "\(indent) negativeFloat: \(negativeFloat) \n"
      }
      if hasLargeFloat {
        output += "\(indent) largeFloat: \(largeFloat) \n"
      }
      if hasSmallNegativeFloat {
        output += "\(indent) smallNegativeFloat: \(smallNegativeFloat) \n"
      }
      if hasInfDouble {
        output += "\(indent) infDouble: \(infDouble) \n"
      }
      if hasNegInfDouble {
        output += "\(indent) negInfDouble: \(negInfDouble) \n"
      }
      if hasNanDouble {
        output += "\(indent) nanDouble: \(nanDouble) \n"
      }
      if hasInfFloat {
        output += "\(indent) infFloat: \(infFloat) \n"
      }
      if hasNegInfFloat {
        output += "\(indent) negInfFloat: \(negInfFloat) \n"
      }
      if hasNanFloat {
        output += "\(indent) nanFloat: \(nanFloat) \n"
      }
      if hasCppTrigraph {
        output += "\(indent) cppTrigraph: \(cppTrigraph) \n"
      }
      if hasReallySmallInt32 {
        output += "\(indent) reallySmallInt32: \(reallySmallInt32) \n"
      }
      if hasReallySmallInt64 {
        output += "\(indent) reallySmallInt64: \(reallySmallInt64) \n"
      }
      if hasStringWithZero {
        output += "\(indent) stringWithZero: \(stringWithZero) \n"
      }
      if hasBytesWithZero {
        output += "\(indent) bytesWithZero: \(bytesWithZero) \n"
      }
      if hasStringPieceWithZero {
        output += "\(indent) stringPieceWithZero: \(stringPieceWithZero) \n"
      }
      if hasCordWithZero {
        output += "\(indent) cordWithZero: \(cordWithZero) \n"
      }
      if hasReplacementString {
        output += "\(indent) replacementString: \(replacementString) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEscapedBytes {
               hashCode = (hashCode &* 31) &+ escapedBytes.hashValue
            }
            if hasLargeUint32 {
               hashCode = (hashCode &* 31) &+ largeUint32.hashValue
            }
            if hasLargeUint64 {
               hashCode = (hashCode &* 31) &+ largeUint64.hashValue
            }
            if hasSmallInt32 {
               hashCode = (hashCode &* 31) &+ smallInt32.hashValue
            }
            if hasSmallInt64 {
               hashCode = (hashCode &* 31) &+ smallInt64.hashValue
            }
            if hasUtf8String {
               hashCode = (hashCode &* 31) &+ utf8String.hashValue
            }
            if hasZeroFloat {
               hashCode = (hashCode &* 31) &+ zeroFloat.hashValue
            }
            if hasOneFloat {
               hashCode = (hashCode &* 31) &+ oneFloat.hashValue
            }
            if hasSmallFloat {
               hashCode = (hashCode &* 31) &+ smallFloat.hashValue
            }
            if hasNegativeOneFloat {
               hashCode = (hashCode &* 31) &+ negativeOneFloat.hashValue
            }
            if hasNegativeFloat {
               hashCode = (hashCode &* 31) &+ negativeFloat.hashValue
            }
            if hasLargeFloat {
               hashCode = (hashCode &* 31) &+ largeFloat.hashValue
            }
            if hasSmallNegativeFloat {
               hashCode = (hashCode &* 31) &+ smallNegativeFloat.hashValue
            }
            if hasInfDouble {
               hashCode = (hashCode &* 31) &+ infDouble.hashValue
            }
            if hasNegInfDouble {
               hashCode = (hashCode &* 31) &+ negInfDouble.hashValue
            }
            if hasNanDouble {
               hashCode = (hashCode &* 31) &+ nanDouble.hashValue
            }
            if hasInfFloat {
               hashCode = (hashCode &* 31) &+ infFloat.hashValue
            }
            if hasNegInfFloat {
               hashCode = (hashCode &* 31) &+ negInfFloat.hashValue
            }
            if hasNanFloat {
               hashCode = (hashCode &* 31) &+ nanFloat.hashValue
            }
            if hasCppTrigraph {
               hashCode = (hashCode &* 31) &+ cppTrigraph.hashValue
            }
            if hasReallySmallInt32 {
               hashCode = (hashCode &* 31) &+ reallySmallInt32.hashValue
            }
            if hasReallySmallInt64 {
               hashCode = (hashCode &* 31) &+ reallySmallInt64.hashValue
            }
            if hasStringWithZero {
               hashCode = (hashCode &* 31) &+ stringWithZero.hashValue
            }
            if hasBytesWithZero {
               hashCode = (hashCode &* 31) &+ bytesWithZero.hashValue
            }
            if hasStringPieceWithZero {
               hashCode = (hashCode &* 31) &+ stringPieceWithZero.hashValue
            }
            if hasCordWithZero {
               hashCode = (hashCode &* 31) &+ cordWithZero.hashValue
            }
            if hasReplacementString {
               hashCode = (hashCode &* 31) &+ replacementString.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestExtremeDefaultValues"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestExtremeDefaultValues"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestExtremeDefaultValues.self
    }
    //Meta information declaration end

  }

  final internal class TestExtremeDefaultValuesBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestExtremeDefaultValues

    required override internal init () {
       builderResult = ProtobufUnittest.TestExtremeDefaultValues()
       super.init()
    }
    var hasEscapedBytes:Bool {
         get {
              return builderResult.hasEscapedBytes
         }
    }
    var escapedBytes:NSData {
         get {
              return builderResult.escapedBytes
         }
         set (value) {
             builderResult.hasEscapedBytes = true
             builderResult.escapedBytes = value
         }
    }
    func setEscapedBytes(value:NSData)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.escapedBytes = value
      return self
    }
    internal func clearEscapedBytes() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasEscapedBytes = false
         builderResult.escapedBytes = NSData(bytes:([Byte]() + "testsr".utf8), length:6)
         return self
    }
    var hasLargeUint32:Bool {
         get {
              return builderResult.hasLargeUint32
         }
    }
    var largeUint32:UInt32 {
         get {
              return builderResult.largeUint32
         }
         set (value) {
             builderResult.hasLargeUint32 = true
             builderResult.largeUint32 = value
         }
    }
    func setLargeUint32(value:UInt32)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.largeUint32 = value
      return self
    }
    internal func clearLargeUint32() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasLargeUint32 = false
         builderResult.largeUint32 = UInt32(65535)
         return self
    }
    var hasLargeUint64:Bool {
         get {
              return builderResult.hasLargeUint64
         }
    }
    var largeUint64:UInt64 {
         get {
              return builderResult.largeUint64
         }
         set (value) {
             builderResult.hasLargeUint64 = true
             builderResult.largeUint64 = value
         }
    }
    func setLargeUint64(value:UInt64)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.largeUint64 = value
      return self
    }
    internal func clearLargeUint64() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasLargeUint64 = false
         builderResult.largeUint64 = UInt64(16777215)
         return self
    }
    var hasSmallInt32:Bool {
         get {
              return builderResult.hasSmallInt32
         }
    }
    var smallInt32:Int32 {
         get {
              return builderResult.smallInt32
         }
         set (value) {
             builderResult.hasSmallInt32 = true
             builderResult.smallInt32 = value
         }
    }
    func setSmallInt32(value:Int32)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.smallInt32 = value
      return self
    }
    internal func clearSmallInt32() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasSmallInt32 = false
         builderResult.smallInt32 = Int32(-2147483647)
         return self
    }
    var hasSmallInt64:Bool {
         get {
              return builderResult.hasSmallInt64
         }
    }
    var smallInt64:Int64 {
         get {
              return builderResult.smallInt64
         }
         set (value) {
             builderResult.hasSmallInt64 = true
             builderResult.smallInt64 = value
         }
    }
    func setSmallInt64(value:Int64)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.smallInt64 = value
      return self
    }
    internal func clearSmallInt64() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasSmallInt64 = false
         builderResult.smallInt64 = Int64(-9223372036854775807)
         return self
    }
    var hasReallySmallInt32:Bool {
         get {
              return builderResult.hasReallySmallInt32
         }
    }
    var reallySmallInt32:Int32 {
         get {
              return builderResult.reallySmallInt32
         }
         set (value) {
             builderResult.hasReallySmallInt32 = true
             builderResult.reallySmallInt32 = value
         }
    }
    func setReallySmallInt32(value:Int32)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.reallySmallInt32 = value
      return self
    }
    internal func clearReallySmallInt32() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasReallySmallInt32 = false
         builderResult.reallySmallInt32 = Int32(-2147483648)
         return self
    }
    var hasReallySmallInt64:Bool {
         get {
              return builderResult.hasReallySmallInt64
         }
    }
    var reallySmallInt64:Int64 {
         get {
              return builderResult.reallySmallInt64
         }
         set (value) {
             builderResult.hasReallySmallInt64 = true
             builderResult.reallySmallInt64 = value
         }
    }
    func setReallySmallInt64(value:Int64)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.reallySmallInt64 = value
      return self
    }
    internal func clearReallySmallInt64() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasReallySmallInt64 = false
         builderResult.reallySmallInt64 = Int64(-576460752303423488)
         return self
    }
    var hasUtf8String:Bool {
         get {
              return builderResult.hasUtf8String
         }
    }
    var utf8String:String {
         get {
              return builderResult.utf8String
         }
         set (value) {
             builderResult.hasUtf8String = true
             builderResult.utf8String = value
         }
    }
    func setUtf8String(value:String)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.utf8String = value
      return self
    }
    internal func clearUtf8String() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasUtf8String = false
         builderResult.utf8String = "tests"
         return self
    }
    var hasZeroFloat:Bool {
         get {
              return builderResult.hasZeroFloat
         }
    }
    var zeroFloat:Float {
         get {
              return builderResult.zeroFloat
         }
         set (value) {
             builderResult.hasZeroFloat = true
             builderResult.zeroFloat = value
         }
    }
    func setZeroFloat(value:Float)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.zeroFloat = value
      return self
    }
    internal func clearZeroFloat() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasZeroFloat = false
         builderResult.zeroFloat = Float(0)
         return self
    }
    var hasOneFloat:Bool {
         get {
              return builderResult.hasOneFloat
         }
    }
    var oneFloat:Float {
         get {
              return builderResult.oneFloat
         }
         set (value) {
             builderResult.hasOneFloat = true
             builderResult.oneFloat = value
         }
    }
    func setOneFloat(value:Float)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.oneFloat = value
      return self
    }
    internal func clearOneFloat() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasOneFloat = false
         builderResult.oneFloat = Float(1)
         return self
    }
    var hasSmallFloat:Bool {
         get {
              return builderResult.hasSmallFloat
         }
    }
    var smallFloat:Float {
         get {
              return builderResult.smallFloat
         }
         set (value) {
             builderResult.hasSmallFloat = true
             builderResult.smallFloat = value
         }
    }
    func setSmallFloat(value:Float)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.smallFloat = value
      return self
    }
    internal func clearSmallFloat() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasSmallFloat = false
         builderResult.smallFloat = Float(1.5)
         return self
    }
    var hasNegativeOneFloat:Bool {
         get {
              return builderResult.hasNegativeOneFloat
         }
    }
    var negativeOneFloat:Float {
         get {
              return builderResult.negativeOneFloat
         }
         set (value) {
             builderResult.hasNegativeOneFloat = true
             builderResult.negativeOneFloat = value
         }
    }
    func setNegativeOneFloat(value:Float)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.negativeOneFloat = value
      return self
    }
    internal func clearNegativeOneFloat() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasNegativeOneFloat = false
         builderResult.negativeOneFloat = Float(-1)
         return self
    }
    var hasNegativeFloat:Bool {
         get {
              return builderResult.hasNegativeFloat
         }
    }
    var negativeFloat:Float {
         get {
              return builderResult.negativeFloat
         }
         set (value) {
             builderResult.hasNegativeFloat = true
             builderResult.negativeFloat = value
         }
    }
    func setNegativeFloat(value:Float)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.negativeFloat = value
      return self
    }
    internal func clearNegativeFloat() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasNegativeFloat = false
         builderResult.negativeFloat = Float(-1.5)
         return self
    }
    var hasLargeFloat:Bool {
         get {
              return builderResult.hasLargeFloat
         }
    }
    var largeFloat:Float {
         get {
              return builderResult.largeFloat
         }
         set (value) {
             builderResult.hasLargeFloat = true
             builderResult.largeFloat = value
         }
    }
    func setLargeFloat(value:Float)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.largeFloat = value
      return self
    }
    internal func clearLargeFloat() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasLargeFloat = false
         builderResult.largeFloat = Float(2e+08)
         return self
    }
    var hasSmallNegativeFloat:Bool {
         get {
              return builderResult.hasSmallNegativeFloat
         }
    }
    var smallNegativeFloat:Float {
         get {
              return builderResult.smallNegativeFloat
         }
         set (value) {
             builderResult.hasSmallNegativeFloat = true
             builderResult.smallNegativeFloat = value
         }
    }
    func setSmallNegativeFloat(value:Float)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.smallNegativeFloat = value
      return self
    }
    internal func clearSmallNegativeFloat() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasSmallNegativeFloat = false
         builderResult.smallNegativeFloat = Float(-8e-28)
         return self
    }
    var hasInfDouble:Bool {
         get {
              return builderResult.hasInfDouble
         }
    }
    var infDouble:Double {
         get {
              return builderResult.infDouble
         }
         set (value) {
             builderResult.hasInfDouble = true
             builderResult.infDouble = value
         }
    }
    func setInfDouble(value:Double)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.infDouble = value
      return self
    }
    internal func clearInfDouble() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasInfDouble = false
         builderResult.infDouble = Double(HUGE)
         return self
    }
    var hasNegInfDouble:Bool {
         get {
              return builderResult.hasNegInfDouble
         }
    }
    var negInfDouble:Double {
         get {
              return builderResult.negInfDouble
         }
         set (value) {
             builderResult.hasNegInfDouble = true
             builderResult.negInfDouble = value
         }
    }
    func setNegInfDouble(value:Double)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.negInfDouble = value
      return self
    }
    internal func clearNegInfDouble() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasNegInfDouble = false
         builderResult.negInfDouble = Double(-HUGE)
         return self
    }
    var hasNanDouble:Bool {
         get {
              return builderResult.hasNanDouble
         }
    }
    var nanDouble:Double {
         get {
              return builderResult.nanDouble
         }
         set (value) {
             builderResult.hasNanDouble = true
             builderResult.nanDouble = value
         }
    }
    func setNanDouble(value:Double)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.nanDouble = value
      return self
    }
    internal func clearNanDouble() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasNanDouble = false
         builderResult.nanDouble = 0.0
         return self
    }
    var hasInfFloat:Bool {
         get {
              return builderResult.hasInfFloat
         }
    }
    var infFloat:Float {
         get {
              return builderResult.infFloat
         }
         set (value) {
             builderResult.hasInfFloat = true
             builderResult.infFloat = value
         }
    }
    func setInfFloat(value:Float)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.infFloat = value
      return self
    }
    internal func clearInfFloat() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasInfFloat = false
         builderResult.infFloat = HUGE
         return self
    }
    var hasNegInfFloat:Bool {
         get {
              return builderResult.hasNegInfFloat
         }
    }
    var negInfFloat:Float {
         get {
              return builderResult.negInfFloat
         }
         set (value) {
             builderResult.hasNegInfFloat = true
             builderResult.negInfFloat = value
         }
    }
    func setNegInfFloat(value:Float)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.negInfFloat = value
      return self
    }
    internal func clearNegInfFloat() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasNegInfFloat = false
         builderResult.negInfFloat = -HUGE
         return self
    }
    var hasNanFloat:Bool {
         get {
              return builderResult.hasNanFloat
         }
    }
    var nanFloat:Float {
         get {
              return builderResult.nanFloat
         }
         set (value) {
             builderResult.hasNanFloat = true
             builderResult.nanFloat = value
         }
    }
    func setNanFloat(value:Float)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.nanFloat = value
      return self
    }
    internal func clearNanFloat() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasNanFloat = false
         builderResult.nanFloat = 0.0
         return self
    }
    var hasCppTrigraph:Bool {
         get {
              return builderResult.hasCppTrigraph
         }
    }
    var cppTrigraph:String {
         get {
              return builderResult.cppTrigraph
         }
         set (value) {
             builderResult.hasCppTrigraph = true
             builderResult.cppTrigraph = value
         }
    }
    func setCppTrigraph(value:String)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.cppTrigraph = value
      return self
    }
    internal func clearCppTrigraph() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasCppTrigraph = false
         builderResult.cppTrigraph = "teststsrs"
         return self
    }
    var hasStringWithZero:Bool {
         get {
              return builderResult.hasStringWithZero
         }
    }
    var stringWithZero:String {
         get {
              return builderResult.stringWithZero
         }
         set (value) {
             builderResult.hasStringWithZero = true
             builderResult.stringWithZero = value
         }
    }
    func setStringWithZero(value:String)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.stringWithZero = value
      return self
    }
    internal func clearStringWithZero() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasStringWithZero = false
         builderResult.stringWithZero = "hel\000lo"
         return self
    }
    var hasBytesWithZero:Bool {
         get {
              return builderResult.hasBytesWithZero
         }
    }
    var bytesWithZero:NSData {
         get {
              return builderResult.bytesWithZero
         }
         set (value) {
             builderResult.hasBytesWithZero = true
             builderResult.bytesWithZero = value
         }
    }
    func setBytesWithZero(value:NSData)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.bytesWithZero = value
      return self
    }
    internal func clearBytesWithZero() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasBytesWithZero = false
         builderResult.bytesWithZero = NSData(bytes:([Byte]() + "wor\000ld".utf8), length:6)
         return self
    }
    var hasStringPieceWithZero:Bool {
         get {
              return builderResult.hasStringPieceWithZero
         }
    }
    var stringPieceWithZero:String {
         get {
              return builderResult.stringPieceWithZero
         }
         set (value) {
             builderResult.hasStringPieceWithZero = true
             builderResult.stringPieceWithZero = value
         }
    }
    func setStringPieceWithZero(value:String)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.stringPieceWithZero = value
      return self
    }
    internal func clearStringPieceWithZero() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasStringPieceWithZero = false
         builderResult.stringPieceWithZero = "ab\000c"
         return self
    }
    var hasCordWithZero:Bool {
         get {
              return builderResult.hasCordWithZero
         }
    }
    var cordWithZero:String {
         get {
              return builderResult.cordWithZero
         }
         set (value) {
             builderResult.hasCordWithZero = true
             builderResult.cordWithZero = value
         }
    }
    func setCordWithZero(value:String)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.cordWithZero = value
      return self
    }
    internal func clearCordWithZero() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasCordWithZero = false
         builderResult.cordWithZero = "12\0003"
         return self
    }
    var hasReplacementString:Bool {
         get {
              return builderResult.hasReplacementString
         }
    }
    var replacementString:String {
         get {
              return builderResult.replacementString
         }
         set (value) {
             builderResult.hasReplacementString = true
             builderResult.replacementString = value
         }
    }
    func setReplacementString(value:String)-> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      self.replacementString = value
      return self
    }
    internal func clearReplacementString() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder{
         builderResult.hasReplacementString = false
         builderResult.replacementString = "${unknown}"
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      builderResult = ProtobufUnittest.TestExtremeDefaultValues()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      return ProtobufUnittest.TestExtremeDefaultValues.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestExtremeDefaultValues {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestExtremeDefaultValues {
      var returnMe:ProtobufUnittest.TestExtremeDefaultValues = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestExtremeDefaultValues) -> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      if (other == ProtobufUnittest.TestExtremeDefaultValues()) {
       return self
      }
      if other.hasEscapedBytes {
           escapedBytes = other.escapedBytes
      }
      if other.hasLargeUint32 {
           largeUint32 = other.largeUint32
      }
      if other.hasLargeUint64 {
           largeUint64 = other.largeUint64
      }
      if other.hasSmallInt32 {
           smallInt32 = other.smallInt32
      }
      if other.hasSmallInt64 {
           smallInt64 = other.smallInt64
      }
      if other.hasReallySmallInt32 {
           reallySmallInt32 = other.reallySmallInt32
      }
      if other.hasReallySmallInt64 {
           reallySmallInt64 = other.reallySmallInt64
      }
      if other.hasUtf8String {
           utf8String = other.utf8String
      }
      if other.hasZeroFloat {
           zeroFloat = other.zeroFloat
      }
      if other.hasOneFloat {
           oneFloat = other.oneFloat
      }
      if other.hasSmallFloat {
           smallFloat = other.smallFloat
      }
      if other.hasNegativeOneFloat {
           negativeOneFloat = other.negativeOneFloat
      }
      if other.hasNegativeFloat {
           negativeFloat = other.negativeFloat
      }
      if other.hasLargeFloat {
           largeFloat = other.largeFloat
      }
      if other.hasSmallNegativeFloat {
           smallNegativeFloat = other.smallNegativeFloat
      }
      if other.hasInfDouble {
           infDouble = other.infDouble
      }
      if other.hasNegInfDouble {
           negInfDouble = other.negInfDouble
      }
      if other.hasNanDouble {
           nanDouble = other.nanDouble
      }
      if other.hasInfFloat {
           infFloat = other.infFloat
      }
      if other.hasNegInfFloat {
           negInfFloat = other.negInfFloat
      }
      if other.hasNanFloat {
           nanFloat = other.nanFloat
      }
      if other.hasCppTrigraph {
           cppTrigraph = other.cppTrigraph
      }
      if other.hasStringWithZero {
           stringWithZero = other.stringWithZero
      }
      if other.hasBytesWithZero {
           bytesWithZero = other.bytesWithZero
      }
      if other.hasStringPieceWithZero {
           stringPieceWithZero = other.stringPieceWithZero
      }
      if other.hasCordWithZero {
           cordWithZero = other.cordWithZero
      }
      if other.hasReplacementString {
           replacementString = other.replacementString
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestExtremeDefaultValuesBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestExtremeDefaultValuesBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          escapedBytes = input.readData()

        case 16 :
          largeUint32 = input.readUInt32()

        case 24 :
          largeUint64 = input.readUInt64()

        case 32 :
          smallInt32 = input.readInt32()

        case 40 :
          smallInt64 = input.readInt64()

        case 50 :
          utf8String = input.readString()

        case 61 :
          zeroFloat = input.readFloat()

        case 69 :
          oneFloat = input.readFloat()

        case 77 :
          smallFloat = input.readFloat()

        case 85 :
          negativeOneFloat = input.readFloat()

        case 93 :
          negativeFloat = input.readFloat()

        case 101 :
          largeFloat = input.readFloat()

        case 109 :
          smallNegativeFloat = input.readFloat()

        case 113 :
          infDouble = input.readDouble()

        case 121 :
          negInfDouble = input.readDouble()

        case 129 :
          nanDouble = input.readDouble()

        case 141 :
          infFloat = input.readFloat()

        case 149 :
          negInfFloat = input.readFloat()

        case 157 :
          nanFloat = input.readFloat()

        case 162 :
          cppTrigraph = input.readString()

        case 168 :
          reallySmallInt32 = input.readInt32()

        case 176 :
          reallySmallInt64 = input.readInt64()

        case 186 :
          stringWithZero = input.readString()

        case 194 :
          bytesWithZero = input.readData()

        case 202 :
          stringPieceWithZero = input.readString()

        case 210 :
          cordWithZero = input.readString()

        case 218 :
          replacementString = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class SparseEnumMessage : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var sparseEnum:ProtobufUnittest.TestSparseEnum = ProtobufUnittest.TestSparseEnum.SparseA
    private(set) var hasSparseEnum:Bool = false
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasSparseEnum {
        output.writeEnum(1, value:sparseEnum.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasSparseEnum) {
        serialize_size += sparseEnum.rawValue.computeEnumSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.SparseEnumMessage {
      return ProtobufUnittest.SparseEnumMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.SparseEnumMessage {
      return ProtobufUnittest.SparseEnumMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.SparseEnumMessage {
      return ProtobufUnittest.SparseEnumMessage.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.SparseEnumMessage {
      return ProtobufUnittest.SparseEnumMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.SparseEnumMessage {
      return ProtobufUnittest.SparseEnumMessage.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.SparseEnumMessage {
      return ProtobufUnittest.SparseEnumMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.SparseEnumMessageBuilder {
      return ProtobufUnittest.SparseEnumMessage.classBuilder() as ProtobufUnittest.SparseEnumMessageBuilder
    }
    internal func builder() -> ProtobufUnittest.SparseEnumMessageBuilder {
      return classBuilder() as ProtobufUnittest.SparseEnumMessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.SparseEnumMessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.SparseEnumMessage.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.SparseEnumMessageBuilder {
      return ProtobufUnittest.SparseEnumMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.SparseEnumMessage) -> ProtobufUnittest.SparseEnumMessageBuilder {
      return ProtobufUnittest.SparseEnumMessage.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if (hasSparseEnum) {
        output += "\(indent) sparseEnum: \(sparseEnum.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSparseEnum {
               hashCode = (hashCode &* 31) &+ Int(sparseEnum.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.SparseEnumMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.SparseEnumMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.SparseEnumMessage.self
    }
    //Meta information declaration end

  }

  final internal class SparseEnumMessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.SparseEnumMessage

    required override internal init () {
       builderResult = ProtobufUnittest.SparseEnumMessage()
       super.init()
    }
      var hasSparseEnum:Bool{
          get {
              return builderResult.hasSparseEnum
          }
      }
      var sparseEnum:ProtobufUnittest.TestSparseEnum {
          get {
              return builderResult.sparseEnum
          }
          set (value) {
              builderResult.hasSparseEnum = true
              builderResult.sparseEnum = value
          }
      }
      internal func setSparseEnum(value:ProtobufUnittest.TestSparseEnum)-> ProtobufUnittest.SparseEnumMessageBuilder {
        self.sparseEnum = value
        return self
      }
      internal func clearSparseEnum() -> ProtobufUnittest.SparseEnumMessageBuilder {
         builderResult.hasSparseEnum = false
         builderResult.sparseEnum = .SparseA
         return self
      }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.SparseEnumMessageBuilder {
      builderResult = ProtobufUnittest.SparseEnumMessage()
      return self
    }
    internal override func clone() -> ProtobufUnittest.SparseEnumMessageBuilder {
      return ProtobufUnittest.SparseEnumMessage.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.SparseEnumMessage {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.SparseEnumMessage {
      var returnMe:ProtobufUnittest.SparseEnumMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.SparseEnumMessage) -> ProtobufUnittest.SparseEnumMessageBuilder {
      if (other == ProtobufUnittest.SparseEnumMessage()) {
       return self
      }
      if other.hasSparseEnum {
           sparseEnum = other.sparseEnum
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.SparseEnumMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.SparseEnumMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueIntsparseEnum = input.readEnum()
          if let enumssparseEnum = ProtobufUnittest.TestSparseEnum(rawValue:valueIntsparseEnum){
               sparseEnum = enumssparseEnum
          } else {
               unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntsparseEnum))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class OneString : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasData:Bool = false
    private(set) var data:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasData {
        output.writeString(1, value:data)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.OneString {
      return ProtobufUnittest.OneString.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.OneString {
      return ProtobufUnittest.OneString.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.OneString {
      return ProtobufUnittest.OneString.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.OneString {
      return ProtobufUnittest.OneString.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.OneString {
      return ProtobufUnittest.OneString.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.OneString {
      return ProtobufUnittest.OneString.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.OneStringBuilder {
      return ProtobufUnittest.OneString.classBuilder() as ProtobufUnittest.OneStringBuilder
    }
    internal func builder() -> ProtobufUnittest.OneStringBuilder {
      return classBuilder() as ProtobufUnittest.OneStringBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OneStringBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OneString.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.OneStringBuilder {
      return ProtobufUnittest.OneString.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.OneString) -> ProtobufUnittest.OneStringBuilder {
      return ProtobufUnittest.OneString.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.OneString"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.OneString"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.OneString.self
    }
    //Meta information declaration end

  }

  final internal class OneStringBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.OneString

    required override internal init () {
       builderResult = ProtobufUnittest.OneString()
       super.init()
    }
    var hasData:Bool {
         get {
              return builderResult.hasData
         }
    }
    var data:String {
         get {
              return builderResult.data
         }
         set (value) {
             builderResult.hasData = true
             builderResult.data = value
         }
    }
    func setData(value:String)-> ProtobufUnittest.OneStringBuilder {
      self.data = value
      return self
    }
    internal func clearData() -> ProtobufUnittest.OneStringBuilder{
         builderResult.hasData = false
         builderResult.data = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.OneStringBuilder {
      builderResult = ProtobufUnittest.OneString()
      return self
    }
    internal override func clone() -> ProtobufUnittest.OneStringBuilder {
      return ProtobufUnittest.OneString.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.OneString {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.OneString {
      var returnMe:ProtobufUnittest.OneString = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.OneString) -> ProtobufUnittest.OneStringBuilder {
      if (other == ProtobufUnittest.OneString()) {
       return self
      }
      if other.hasData {
           data = other.data
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.OneStringBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.OneStringBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          data = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class MoreString : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var data:Array<String> = Array<String>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if !data.isEmpty {
        for oneValuedata in data {
          output.writeString(1, value:oneValuedata)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeData:Int32 = 0
      for oneValuedata in data {
          dataSizeData += oneValuedata.computeStringSizeNoTag()
      }
      serialize_size += dataSizeData
      serialize_size += 1 * Int32(data.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.MoreString {
      return ProtobufUnittest.MoreString.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.MoreString {
      return ProtobufUnittest.MoreString.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.MoreString {
      return ProtobufUnittest.MoreString.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.MoreString {
      return ProtobufUnittest.MoreString.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.MoreString {
      return ProtobufUnittest.MoreString.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.MoreString {
      return ProtobufUnittest.MoreString.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.MoreStringBuilder {
      return ProtobufUnittest.MoreString.classBuilder() as ProtobufUnittest.MoreStringBuilder
    }
    internal func builder() -> ProtobufUnittest.MoreStringBuilder {
      return classBuilder() as ProtobufUnittest.MoreStringBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.MoreStringBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.MoreString.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.MoreStringBuilder {
      return ProtobufUnittest.MoreString.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.MoreString) -> ProtobufUnittest.MoreStringBuilder {
      return ProtobufUnittest.MoreString.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var dataElementIndex:Int = 0
      for oneValuedata in data  {
          output += "\(indent) data[\(dataElementIndex)]: \(oneValuedata)\n"
          dataElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValuedata in data {
                hashCode = (hashCode &* 31) &+ oneValuedata.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.MoreString"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.MoreString"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.MoreString.self
    }
    //Meta information declaration end

  }

  final internal class MoreStringBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.MoreString

    required override internal init () {
       builderResult = ProtobufUnittest.MoreString()
       super.init()
    }
    var data:Array<String> {
         get {
             return builderResult.data
         }
         set (array) {
             builderResult.data = array
         }
    }
    func setData(value:Array<String>)-> ProtobufUnittest.MoreStringBuilder {
      self.data = value
      return self
    }
    internal func clearData() -> ProtobufUnittest.MoreStringBuilder {
       builderResult.data.removeAll(keepCapacity: false)
       return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.MoreStringBuilder {
      builderResult = ProtobufUnittest.MoreString()
      return self
    }
    internal override func clone() -> ProtobufUnittest.MoreStringBuilder {
      return ProtobufUnittest.MoreString.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.MoreString {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.MoreString {
      var returnMe:ProtobufUnittest.MoreString = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.MoreString) -> ProtobufUnittest.MoreStringBuilder {
      if (other == ProtobufUnittest.MoreString()) {
       return self
      }
      if !other.data.isEmpty {
          builderResult.data += other.data
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.MoreStringBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.MoreStringBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          data += [input.readString()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class OneBytes : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasData:Bool = false
    private(set) var data:NSData = NSData()

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasData {
        output.writeData(1, value:data)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeDataSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.OneBytes {
      return ProtobufUnittest.OneBytes.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.OneBytes {
      return ProtobufUnittest.OneBytes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.OneBytes {
      return ProtobufUnittest.OneBytes.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.OneBytes {
      return ProtobufUnittest.OneBytes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.OneBytes {
      return ProtobufUnittest.OneBytes.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.OneBytes {
      return ProtobufUnittest.OneBytes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.OneBytesBuilder {
      return ProtobufUnittest.OneBytes.classBuilder() as ProtobufUnittest.OneBytesBuilder
    }
    internal func builder() -> ProtobufUnittest.OneBytesBuilder {
      return classBuilder() as ProtobufUnittest.OneBytesBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OneBytesBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.OneBytes.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.OneBytesBuilder {
      return ProtobufUnittest.OneBytes.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.OneBytes) -> ProtobufUnittest.OneBytesBuilder {
      return ProtobufUnittest.OneBytes.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.OneBytes"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.OneBytes"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.OneBytes.self
    }
    //Meta information declaration end

  }

  final internal class OneBytesBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.OneBytes

    required override internal init () {
       builderResult = ProtobufUnittest.OneBytes()
       super.init()
    }
    var hasData:Bool {
         get {
              return builderResult.hasData
         }
    }
    var data:NSData {
         get {
              return builderResult.data
         }
         set (value) {
             builderResult.hasData = true
             builderResult.data = value
         }
    }
    func setData(value:NSData)-> ProtobufUnittest.OneBytesBuilder {
      self.data = value
      return self
    }
    internal func clearData() -> ProtobufUnittest.OneBytesBuilder{
         builderResult.hasData = false
         builderResult.data = NSData()
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.OneBytesBuilder {
      builderResult = ProtobufUnittest.OneBytes()
      return self
    }
    internal override func clone() -> ProtobufUnittest.OneBytesBuilder {
      return ProtobufUnittest.OneBytes.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.OneBytes {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.OneBytes {
      var returnMe:ProtobufUnittest.OneBytes = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.OneBytes) -> ProtobufUnittest.OneBytesBuilder {
      if (other == ProtobufUnittest.OneBytes()) {
       return self
      }
      if other.hasData {
           data = other.data
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.OneBytesBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.OneBytesBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          data = input.readData()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class MoreBytes : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var data:Array<NSData> = Array<NSData>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if !data.isEmpty {
        for oneValuedata in data {
          output.writeData(1, value:oneValuedata)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeData:Int32 = 0
      for oneValuedata in data {
          dataSizeData += oneValuedata.computeDataSizeNoTag()
      }
      serialize_size += dataSizeData
      serialize_size += 1 * Int32(data.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.MoreBytes {
      return ProtobufUnittest.MoreBytes.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.MoreBytes {
      return ProtobufUnittest.MoreBytes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.MoreBytes {
      return ProtobufUnittest.MoreBytes.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.MoreBytes {
      return ProtobufUnittest.MoreBytes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.MoreBytes {
      return ProtobufUnittest.MoreBytes.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.MoreBytes {
      return ProtobufUnittest.MoreBytes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.MoreBytesBuilder {
      return ProtobufUnittest.MoreBytes.classBuilder() as ProtobufUnittest.MoreBytesBuilder
    }
    internal func builder() -> ProtobufUnittest.MoreBytesBuilder {
      return classBuilder() as ProtobufUnittest.MoreBytesBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.MoreBytesBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.MoreBytes.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.MoreBytesBuilder {
      return ProtobufUnittest.MoreBytes.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.MoreBytes) -> ProtobufUnittest.MoreBytesBuilder {
      return ProtobufUnittest.MoreBytes.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var dataElementIndex:Int = 0
      for oneValuedata in data  {
          output += "\(indent) data[\(dataElementIndex)]: \(oneValuedata)\n"
          dataElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValuedata in data {
                hashCode = (hashCode &* 31) &+ oneValuedata.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.MoreBytes"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.MoreBytes"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.MoreBytes.self
    }
    //Meta information declaration end

  }

  final internal class MoreBytesBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.MoreBytes

    required override internal init () {
       builderResult = ProtobufUnittest.MoreBytes()
       super.init()
    }
    var data:Array<NSData> {
         get {
             return builderResult.data
         }
         set (array) {
             builderResult.data = array
         }
    }
    func setData(value:Array<NSData>)-> ProtobufUnittest.MoreBytesBuilder {
      self.data = value
      return self
    }
    internal func clearData() -> ProtobufUnittest.MoreBytesBuilder {
       builderResult.data.removeAll(keepCapacity: false)
       return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.MoreBytesBuilder {
      builderResult = ProtobufUnittest.MoreBytes()
      return self
    }
    internal override func clone() -> ProtobufUnittest.MoreBytesBuilder {
      return ProtobufUnittest.MoreBytes.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.MoreBytes {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.MoreBytes {
      var returnMe:ProtobufUnittest.MoreBytes = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.MoreBytes) -> ProtobufUnittest.MoreBytesBuilder {
      if (other == ProtobufUnittest.MoreBytes()) {
       return self
      }
      if !other.data.isEmpty {
          builderResult.data += other.data
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.MoreBytesBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.MoreBytesBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          data += [input.readData()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class Int32Message : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasData:Bool = false
    private(set) var data:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasData {
        output.writeInt32(1, value:data)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.Int32Message {
      return ProtobufUnittest.Int32Message.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Int32Message {
      return ProtobufUnittest.Int32Message.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.Int32Message {
      return ProtobufUnittest.Int32Message.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.Int32Message {
      return ProtobufUnittest.Int32Message.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.Int32Message {
      return ProtobufUnittest.Int32Message.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Int32Message {
      return ProtobufUnittest.Int32Message.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.Int32MessageBuilder {
      return ProtobufUnittest.Int32Message.classBuilder() as ProtobufUnittest.Int32MessageBuilder
    }
    internal func builder() -> ProtobufUnittest.Int32MessageBuilder {
      return classBuilder() as ProtobufUnittest.Int32MessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Int32MessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Int32Message.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.Int32MessageBuilder {
      return ProtobufUnittest.Int32Message.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.Int32Message) -> ProtobufUnittest.Int32MessageBuilder {
      return ProtobufUnittest.Int32Message.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.Int32Message"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.Int32Message"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.Int32Message.self
    }
    //Meta information declaration end

  }

  final internal class Int32MessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.Int32Message

    required override internal init () {
       builderResult = ProtobufUnittest.Int32Message()
       super.init()
    }
    var hasData:Bool {
         get {
              return builderResult.hasData
         }
    }
    var data:Int32 {
         get {
              return builderResult.data
         }
         set (value) {
             builderResult.hasData = true
             builderResult.data = value
         }
    }
    func setData(value:Int32)-> ProtobufUnittest.Int32MessageBuilder {
      self.data = value
      return self
    }
    internal func clearData() -> ProtobufUnittest.Int32MessageBuilder{
         builderResult.hasData = false
         builderResult.data = Int32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.Int32MessageBuilder {
      builderResult = ProtobufUnittest.Int32Message()
      return self
    }
    internal override func clone() -> ProtobufUnittest.Int32MessageBuilder {
      return ProtobufUnittest.Int32Message.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.Int32Message {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.Int32Message {
      var returnMe:ProtobufUnittest.Int32Message = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.Int32Message) -> ProtobufUnittest.Int32MessageBuilder {
      if (other == ProtobufUnittest.Int32Message()) {
       return self
      }
      if other.hasData {
           data = other.data
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.Int32MessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Int32MessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          data = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class Uint32Message : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasData:Bool = false
    private(set) var data:UInt32 = UInt32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasData {
        output.writeUInt32(1, value:data)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeUInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.Uint32Message {
      return ProtobufUnittest.Uint32Message.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Uint32Message {
      return ProtobufUnittest.Uint32Message.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.Uint32Message {
      return ProtobufUnittest.Uint32Message.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.Uint32Message {
      return ProtobufUnittest.Uint32Message.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.Uint32Message {
      return ProtobufUnittest.Uint32Message.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Uint32Message {
      return ProtobufUnittest.Uint32Message.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.Uint32MessageBuilder {
      return ProtobufUnittest.Uint32Message.classBuilder() as ProtobufUnittest.Uint32MessageBuilder
    }
    internal func builder() -> ProtobufUnittest.Uint32MessageBuilder {
      return classBuilder() as ProtobufUnittest.Uint32MessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Uint32MessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Uint32Message.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.Uint32MessageBuilder {
      return ProtobufUnittest.Uint32Message.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.Uint32Message) -> ProtobufUnittest.Uint32MessageBuilder {
      return ProtobufUnittest.Uint32Message.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.Uint32Message"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.Uint32Message"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.Uint32Message.self
    }
    //Meta information declaration end

  }

  final internal class Uint32MessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.Uint32Message

    required override internal init () {
       builderResult = ProtobufUnittest.Uint32Message()
       super.init()
    }
    var hasData:Bool {
         get {
              return builderResult.hasData
         }
    }
    var data:UInt32 {
         get {
              return builderResult.data
         }
         set (value) {
             builderResult.hasData = true
             builderResult.data = value
         }
    }
    func setData(value:UInt32)-> ProtobufUnittest.Uint32MessageBuilder {
      self.data = value
      return self
    }
    internal func clearData() -> ProtobufUnittest.Uint32MessageBuilder{
         builderResult.hasData = false
         builderResult.data = UInt32(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.Uint32MessageBuilder {
      builderResult = ProtobufUnittest.Uint32Message()
      return self
    }
    internal override func clone() -> ProtobufUnittest.Uint32MessageBuilder {
      return ProtobufUnittest.Uint32Message.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.Uint32Message {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.Uint32Message {
      var returnMe:ProtobufUnittest.Uint32Message = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.Uint32Message) -> ProtobufUnittest.Uint32MessageBuilder {
      if (other == ProtobufUnittest.Uint32Message()) {
       return self
      }
      if other.hasData {
           data = other.data
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.Uint32MessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Uint32MessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          data = input.readUInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class Int64Message : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasData:Bool = false
    private(set) var data:Int64 = Int64(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasData {
        output.writeInt64(1, value:data)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeInt64Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.Int64Message {
      return ProtobufUnittest.Int64Message.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Int64Message {
      return ProtobufUnittest.Int64Message.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.Int64Message {
      return ProtobufUnittest.Int64Message.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.Int64Message {
      return ProtobufUnittest.Int64Message.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.Int64Message {
      return ProtobufUnittest.Int64Message.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Int64Message {
      return ProtobufUnittest.Int64Message.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.Int64MessageBuilder {
      return ProtobufUnittest.Int64Message.classBuilder() as ProtobufUnittest.Int64MessageBuilder
    }
    internal func builder() -> ProtobufUnittest.Int64MessageBuilder {
      return classBuilder() as ProtobufUnittest.Int64MessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Int64MessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Int64Message.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.Int64MessageBuilder {
      return ProtobufUnittest.Int64Message.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.Int64Message) -> ProtobufUnittest.Int64MessageBuilder {
      return ProtobufUnittest.Int64Message.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.Int64Message"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.Int64Message"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.Int64Message.self
    }
    //Meta information declaration end

  }

  final internal class Int64MessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.Int64Message

    required override internal init () {
       builderResult = ProtobufUnittest.Int64Message()
       super.init()
    }
    var hasData:Bool {
         get {
              return builderResult.hasData
         }
    }
    var data:Int64 {
         get {
              return builderResult.data
         }
         set (value) {
             builderResult.hasData = true
             builderResult.data = value
         }
    }
    func setData(value:Int64)-> ProtobufUnittest.Int64MessageBuilder {
      self.data = value
      return self
    }
    internal func clearData() -> ProtobufUnittest.Int64MessageBuilder{
         builderResult.hasData = false
         builderResult.data = Int64(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.Int64MessageBuilder {
      builderResult = ProtobufUnittest.Int64Message()
      return self
    }
    internal override func clone() -> ProtobufUnittest.Int64MessageBuilder {
      return ProtobufUnittest.Int64Message.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.Int64Message {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.Int64Message {
      var returnMe:ProtobufUnittest.Int64Message = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.Int64Message) -> ProtobufUnittest.Int64MessageBuilder {
      if (other == ProtobufUnittest.Int64Message()) {
       return self
      }
      if other.hasData {
           data = other.data
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.Int64MessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Int64MessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          data = input.readInt64()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class Uint64Message : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasData:Bool = false
    private(set) var data:UInt64 = UInt64(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasData {
        output.writeUInt64(1, value:data)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeUInt64Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.Uint64Message {
      return ProtobufUnittest.Uint64Message.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Uint64Message {
      return ProtobufUnittest.Uint64Message.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.Uint64Message {
      return ProtobufUnittest.Uint64Message.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.Uint64Message {
      return ProtobufUnittest.Uint64Message.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.Uint64Message {
      return ProtobufUnittest.Uint64Message.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Uint64Message {
      return ProtobufUnittest.Uint64Message.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.Uint64MessageBuilder {
      return ProtobufUnittest.Uint64Message.classBuilder() as ProtobufUnittest.Uint64MessageBuilder
    }
    internal func builder() -> ProtobufUnittest.Uint64MessageBuilder {
      return classBuilder() as ProtobufUnittest.Uint64MessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Uint64MessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.Uint64Message.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.Uint64MessageBuilder {
      return ProtobufUnittest.Uint64Message.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.Uint64Message) -> ProtobufUnittest.Uint64MessageBuilder {
      return ProtobufUnittest.Uint64Message.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.Uint64Message"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.Uint64Message"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.Uint64Message.self
    }
    //Meta information declaration end

  }

  final internal class Uint64MessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.Uint64Message

    required override internal init () {
       builderResult = ProtobufUnittest.Uint64Message()
       super.init()
    }
    var hasData:Bool {
         get {
              return builderResult.hasData
         }
    }
    var data:UInt64 {
         get {
              return builderResult.data
         }
         set (value) {
             builderResult.hasData = true
             builderResult.data = value
         }
    }
    func setData(value:UInt64)-> ProtobufUnittest.Uint64MessageBuilder {
      self.data = value
      return self
    }
    internal func clearData() -> ProtobufUnittest.Uint64MessageBuilder{
         builderResult.hasData = false
         builderResult.data = UInt64(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.Uint64MessageBuilder {
      builderResult = ProtobufUnittest.Uint64Message()
      return self
    }
    internal override func clone() -> ProtobufUnittest.Uint64MessageBuilder {
      return ProtobufUnittest.Uint64Message.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.Uint64Message {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.Uint64Message {
      var returnMe:ProtobufUnittest.Uint64Message = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.Uint64Message) -> ProtobufUnittest.Uint64MessageBuilder {
      if (other == ProtobufUnittest.Uint64Message()) {
       return self
      }
      if other.hasData {
           data = other.data
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.Uint64MessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.Uint64MessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          data = input.readUInt64()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class BoolMessage : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasData:Bool = false
    private(set) var data:Bool = false

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasData {
        output.writeBool(1, value:data)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasData {
        serialize_size += data.computeBoolSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.BoolMessage {
      return ProtobufUnittest.BoolMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.BoolMessage {
      return ProtobufUnittest.BoolMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.BoolMessage {
      return ProtobufUnittest.BoolMessage.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.BoolMessage {
      return ProtobufUnittest.BoolMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.BoolMessage {
      return ProtobufUnittest.BoolMessage.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.BoolMessage {
      return ProtobufUnittest.BoolMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.BoolMessageBuilder {
      return ProtobufUnittest.BoolMessage.classBuilder() as ProtobufUnittest.BoolMessageBuilder
    }
    internal func builder() -> ProtobufUnittest.BoolMessageBuilder {
      return classBuilder() as ProtobufUnittest.BoolMessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BoolMessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BoolMessage.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.BoolMessageBuilder {
      return ProtobufUnittest.BoolMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.BoolMessage) -> ProtobufUnittest.BoolMessageBuilder {
      return ProtobufUnittest.BoolMessage.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasData {
        output += "\(indent) data: \(data) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasData {
               hashCode = (hashCode &* 31) &+ data.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.BoolMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.BoolMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.BoolMessage.self
    }
    //Meta information declaration end

  }

  final internal class BoolMessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.BoolMessage

    required override internal init () {
       builderResult = ProtobufUnittest.BoolMessage()
       super.init()
    }
    var hasData:Bool {
         get {
              return builderResult.hasData
         }
    }
    var data:Bool {
         get {
              return builderResult.data
         }
         set (value) {
             builderResult.hasData = true
             builderResult.data = value
         }
    }
    func setData(value:Bool)-> ProtobufUnittest.BoolMessageBuilder {
      self.data = value
      return self
    }
    internal func clearData() -> ProtobufUnittest.BoolMessageBuilder{
         builderResult.hasData = false
         builderResult.data = false
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.BoolMessageBuilder {
      builderResult = ProtobufUnittest.BoolMessage()
      return self
    }
    internal override func clone() -> ProtobufUnittest.BoolMessageBuilder {
      return ProtobufUnittest.BoolMessage.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.BoolMessage {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.BoolMessage {
      var returnMe:ProtobufUnittest.BoolMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.BoolMessage) -> ProtobufUnittest.BoolMessageBuilder {
      if (other == ProtobufUnittest.BoolMessage()) {
       return self
      }
      if other.hasData {
           data = other.data
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.BoolMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.BoolMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          data = input.readBool()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestOneof : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class FooGroup : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = Int32(0)

        private(set) var hasB:Bool = false
        private(set) var b:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(5, value:a)
          }
          if hasB {
            output.writeString(6, value:b)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(5)
          }
          if hasB {
            serialize_size += b.computeStringSize(6)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestOneof.FooGroup {
          return ProtobufUnittest.TestOneof.FooGroup.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof.FooGroup {
          return ProtobufUnittest.TestOneof.FooGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestOneof.FooGroup {
          return ProtobufUnittest.TestOneof.FooGroup.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestOneof.FooGroup {
          return ProtobufUnittest.TestOneof.FooGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestOneof.FooGroup {
          return ProtobufUnittest.TestOneof.FooGroup.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof.FooGroup {
          return ProtobufUnittest.TestOneof.FooGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestOneof.FooGroupBuilder {
          return ProtobufUnittest.TestOneof.FooGroup.classBuilder() as ProtobufUnittest.TestOneof.FooGroupBuilder
        }
        internal func builder() -> ProtobufUnittest.TestOneof.FooGroupBuilder {
          return classBuilder() as ProtobufUnittest.TestOneof.FooGroupBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof.FooGroupBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof.FooGroup.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestOneof.FooGroupBuilder {
          return ProtobufUnittest.TestOneof.FooGroup.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestOneof.FooGroup) -> ProtobufUnittest.TestOneof.FooGroupBuilder {
          return ProtobufUnittest.TestOneof.FooGroup.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          if hasB {
            output += "\(indent) b: \(b) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                if hasB {
                   hashCode = (hashCode &* 31) &+ b.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestOneof.FooGroup"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestOneof.FooGroup"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestOneof.FooGroup.self
        }
        //Meta information declaration end

      }

      final internal class FooGroupBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestOneof.FooGroup

        required override internal init () {
           builderResult = ProtobufUnittest.TestOneof.FooGroup()
           super.init()
        }
        var hasA:Bool {
             get {
                  return builderResult.hasA
             }
        }
        var a:Int32 {
             get {
                  return builderResult.a
             }
             set (value) {
                 builderResult.hasA = true
                 builderResult.a = value
             }
        }
        func setA(value:Int32)-> ProtobufUnittest.TestOneof.FooGroupBuilder {
          self.a = value
          return self
        }
        internal func clearA() -> ProtobufUnittest.TestOneof.FooGroupBuilder{
             builderResult.hasA = false
             builderResult.a = Int32(0)
             return self
        }
        var hasB:Bool {
             get {
                  return builderResult.hasB
             }
        }
        var b:String {
             get {
                  return builderResult.b
             }
             set (value) {
                 builderResult.hasB = true
                 builderResult.b = value
             }
        }
        func setB(value:String)-> ProtobufUnittest.TestOneof.FooGroupBuilder {
          self.b = value
          return self
        }
        internal func clearB() -> ProtobufUnittest.TestOneof.FooGroupBuilder{
             builderResult.hasB = false
             builderResult.b = ""
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestOneof.FooGroupBuilder {
          builderResult = ProtobufUnittest.TestOneof.FooGroup()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestOneof.FooGroupBuilder {
          return ProtobufUnittest.TestOneof.FooGroup.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestOneof.FooGroup {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestOneof.FooGroup {
          var returnMe:ProtobufUnittest.TestOneof.FooGroup = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestOneof.FooGroup) -> ProtobufUnittest.TestOneof.FooGroupBuilder {
          if (other == ProtobufUnittest.TestOneof.FooGroup()) {
           return self
          }
          if other.hasA {
               a = other.a
          }
          if other.hasB {
               b = other.b
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestOneof.FooGroupBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof.FooGroupBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 40 :
              a = input.readInt32()

            case 50 :
              b = input.readString()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



    //OneOf declaration start

    internal enum Foo {
      case FooOneOfNotSet

      internal func checkOneOfIsSet() -> Bool {
           switch self {
           case .FooOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case FooInt(Int32)

      internal static func getFooInt(value:Foo) ->Int32? {
           switch value {
           case .FooInt(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooString(String)

      internal static func getFooString(value:Foo) ->String? {
           switch value {
           case .FooString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooMessage(ProtobufUnittest.TestAllTypes)

      internal static func getFooMessage(value:Foo) ->ProtobufUnittest.TestAllTypes? {
           switch value {
           case .FooMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooGroup(ProtobufUnittest.TestOneof.FooGroup)

      internal static func getFooGroup(value:Foo) ->ProtobufUnittest.TestOneof.FooGroup? {
           switch value {
           case .FooGroup(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageFoo:ProtobufUnittest.TestOneof.Foo =  ProtobufUnittest.TestOneof.Foo.FooOneOfNotSet
    private(set) var hasFooInt:Bool {
          get {
               if ProtobufUnittest.TestOneof.Foo.getFooInt(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooInt:Int32!{
         get {
              return ProtobufUnittest.TestOneof.Foo.getFooInt(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof.Foo.FooInt(newvalue)
         }
    }
    private(set) var hasFooString:Bool {
          get {
               if ProtobufUnittest.TestOneof.Foo.getFooString(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooString:String!{
         get {
              return ProtobufUnittest.TestOneof.Foo.getFooString(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof.Foo.FooString(newvalue)
         }
    }
    private(set) var hasFooMessage:Bool {
          get {
               if ProtobufUnittest.TestOneof.Foo.getFooMessage(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooMessage:ProtobufUnittest.TestAllTypes!{
         get {
              return ProtobufUnittest.TestOneof.Foo.getFooMessage(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof.Foo.FooMessage(newvalue)
         }
    }
    private(set) var hasFooGroup:Bool {
          get {
               if ProtobufUnittest.TestOneof.Foo.getFooGroup(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooGroup:ProtobufUnittest.TestOneof.FooGroup!{
         get {
              return ProtobufUnittest.TestOneof.Foo.getFooGroup(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof.Foo.FooGroup(newvalue)
         }
    }
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasFooInt {
        output.writeInt32(1, value:fooInt)
      }
      if hasFooString {
        output.writeString(2, value:fooString)
      }
      if hasFooMessage {
        output.writeMessage(3, value:fooMessage)
      }
      if hasFooGroup {
        output.writeGroup(4, value:fooGroup)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFooInt {
        serialize_size += fooInt.computeInt32Size(1)
      }
      if hasFooString {
        serialize_size += fooString.computeStringSize(2)
      }
      if hasFooMessage {
        serialize_size += fooMessage.computeMessageSize(3)
      }
      if hasFooGroup {
        serialize_size += fooGroup.computeGroupSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestOneof {
      return ProtobufUnittest.TestOneof.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof {
      return ProtobufUnittest.TestOneof.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestOneof {
      return ProtobufUnittest.TestOneof.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestOneof {
      return ProtobufUnittest.TestOneof.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestOneof {
      return ProtobufUnittest.TestOneof.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof {
      return ProtobufUnittest.TestOneof.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestOneofBuilder {
      return ProtobufUnittest.TestOneof.classBuilder() as ProtobufUnittest.TestOneofBuilder
    }
    internal func builder() -> ProtobufUnittest.TestOneofBuilder {
      return classBuilder() as ProtobufUnittest.TestOneofBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneofBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneof.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestOneofBuilder {
      return ProtobufUnittest.TestOneof.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestOneof) -> ProtobufUnittest.TestOneofBuilder {
      return ProtobufUnittest.TestOneof.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasFooInt {
        output += "\(indent) fooInt: \(fooInt) \n"
      }
      if hasFooString {
        output += "\(indent) fooString: \(fooString) \n"
      }
      if hasFooMessage {
        output += "\(indent) fooMessage {\n"
        fooMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasFooGroup {
        output += "\(indent) fooGroup {\n"
        fooGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFooInt {
               hashCode = (hashCode &* 31) &+ fooInt.hashValue
            }
            if hasFooString {
               hashCode = (hashCode &* 31) &+ fooString.hashValue
            }
            if hasFooMessage {
              hashCode = (hashCode &* 31) &+ fooMessage.hashValue
            }
            if hasFooGroup {
              hashCode = (hashCode &* 31) &+ fooGroup.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestOneof"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestOneof"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestOneof.self
    }
    //Meta information declaration end

  }

  final internal class TestOneofBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestOneof

    required override internal init () {
       builderResult = ProtobufUnittest.TestOneof()
       super.init()
    }
    var hasFooInt:Bool {
         get {
              return builderResult.hasFooInt
         }
    }
    var fooInt:Int32 {
         get {
              return builderResult.fooInt
         }
         set (value) {
             builderResult.hasFooInt = true
             builderResult.fooInt = value
         }
    }
    func setFooInt(value:Int32)-> ProtobufUnittest.TestOneofBuilder {
      self.fooInt = value
      return self
    }
    internal func clearFooInt() -> ProtobufUnittest.TestOneofBuilder{
         builderResult.hasFooInt = false
         builderResult.fooInt = Int32(0)
         return self
    }
    var hasFooString:Bool {
         get {
              return builderResult.hasFooString
         }
    }
    var fooString:String {
         get {
              return builderResult.fooString
         }
         set (value) {
             builderResult.hasFooString = true
             builderResult.fooString = value
         }
    }
    func setFooString(value:String)-> ProtobufUnittest.TestOneofBuilder {
      self.fooString = value
      return self
    }
    internal func clearFooString() -> ProtobufUnittest.TestOneofBuilder{
         builderResult.hasFooString = false
         builderResult.fooString = ""
         return self
    }
    var hasFooMessage:Bool {
         get {
             return builderResult.hasFooMessage
         }
    }
    var fooMessage:ProtobufUnittest.TestAllTypes {
         get {
             return builderResult.fooMessage
         }
         set (value) {
             builderResult.hasFooMessage = true
             builderResult.fooMessage = value
         }
    }
    func setFooMessage(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.TestOneofBuilder {
      self.fooMessage = value
      return self
    }
    internal func mergeFooMessage(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestOneofBuilder {
      if (builderResult.hasFooMessage) {
        builderResult.fooMessage = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.fooMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.fooMessage = value
      }
      builderResult.hasFooMessage = true
      return self
    }
    internal func clearFooMessage() -> ProtobufUnittest.TestOneofBuilder {
      builderResult.hasFooMessage = false
      builderResult.fooMessage = ProtobufUnittest.TestAllTypes()
      return self
    }
    var hasFooGroup:Bool {
         get {
             return builderResult.hasFooGroup
         }
    }
    var fooGroup:ProtobufUnittest.TestOneof.FooGroup {
         get {
             return builderResult.fooGroup
         }
         set (value) {
             builderResult.hasFooGroup = true
             builderResult.fooGroup = value
         }
    }
    func setFooGroup(value:ProtobufUnittest.TestOneof.FooGroup)-> ProtobufUnittest.TestOneofBuilder {
      self.fooGroup = value
      return self
    }
    internal func mergeFooGroup(value:ProtobufUnittest.TestOneof.FooGroup) -> ProtobufUnittest.TestOneofBuilder {
      if (builderResult.hasFooGroup) {
        builderResult.fooGroup = ProtobufUnittest.TestOneof.FooGroup.builderWithPrototype(builderResult.fooGroup).mergeFrom(value).buildPartial()
      } else {
        builderResult.fooGroup = value
      }
      builderResult.hasFooGroup = true
      return self
    }
    internal func clearFooGroup() -> ProtobufUnittest.TestOneofBuilder {
      builderResult.hasFooGroup = false
      builderResult.fooGroup = ProtobufUnittest.TestOneof.FooGroup()
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestOneofBuilder {
      builderResult = ProtobufUnittest.TestOneof()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestOneofBuilder {
      return ProtobufUnittest.TestOneof.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestOneof {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestOneof {
      var returnMe:ProtobufUnittest.TestOneof = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestOneof) -> ProtobufUnittest.TestOneofBuilder {
      if (other == ProtobufUnittest.TestOneof()) {
       return self
      }
      if other.hasFooInt {
           fooInt = other.fooInt
      }
      if other.hasFooString {
           fooString = other.fooString
      }
      if (other.hasFooMessage) {
          mergeFooMessage(other.fooMessage)
      }
      if (other.hasFooGroup) {
          mergeFooGroup(other.fooGroup)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestOneofBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneofBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          fooInt = input.readInt32()

        case 18 :
          fooString = input.readString()

        case 26 :
          var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
          if hasFooMessage {
            subBuilder.mergeFrom(fooMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          fooMessage = subBuilder.buildPartial()

        case 35 :
          var subBuilder:ProtobufUnittest.TestOneof.FooGroupBuilder = ProtobufUnittest.TestOneof.FooGroup.builder()
          if hasFooGroup {
            subBuilder.mergeFrom(fooGroup)
          }
          input.readGroup(4, builder:subBuilder, extensionRegistry:extensionRegistry)
          fooGroup = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestOneofBackwardsCompatible : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class FooGroup : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = Int32(0)

        private(set) var hasB:Bool = false
        private(set) var b:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(5, value:a)
          }
          if hasB {
            output.writeString(6, value:b)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(5)
          }
          if hasB {
            serialize_size += b.computeStringSize(6)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.classBuilder() as ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder
        }
        internal func builder() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
          return classBuilder() as ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup) -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          if hasB {
            output += "\(indent) b: \(b) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                if hasB {
                   hashCode = (hashCode &* 31) &+ b.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.self
        }
        //Meta information declaration end

      }

      final internal class FooGroupBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup

        required override internal init () {
           builderResult = ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup()
           super.init()
        }
        var hasA:Bool {
             get {
                  return builderResult.hasA
             }
        }
        var a:Int32 {
             get {
                  return builderResult.a
             }
             set (value) {
                 builderResult.hasA = true
                 builderResult.a = value
             }
        }
        func setA(value:Int32)-> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
          self.a = value
          return self
        }
        internal func clearA() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder{
             builderResult.hasA = false
             builderResult.a = Int32(0)
             return self
        }
        var hasB:Bool {
             get {
                  return builderResult.hasB
             }
        }
        var b:String {
             get {
                  return builderResult.b
             }
             set (value) {
                 builderResult.hasB = true
                 builderResult.b = value
             }
        }
        func setB(value:String)-> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
          self.b = value
          return self
        }
        internal func clearB() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder{
             builderResult.hasB = false
             builderResult.b = ""
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
          builderResult = ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
          return ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
          var returnMe:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup) -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
          if (other == ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup()) {
           return self
          }
          if other.hasA {
               a = other.a
          }
          if other.hasB {
               b = other.b
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 40 :
              a = input.readInt32()

            case 50 :
              b = input.readString()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end

    private(set) var hasFooInt:Bool = false
    private(set) var fooInt:Int32 = Int32(0)

    private(set) var hasFooString:Bool = false
    private(set) var fooString:String = ""

    private(set) var hasFooMessage:Bool = false
    private(set) var fooMessage:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
    private(set) var hasFooGroup:Bool = false
    private(set) var fooGroup:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup = ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasFooInt {
        output.writeInt32(1, value:fooInt)
      }
      if hasFooString {
        output.writeString(2, value:fooString)
      }
      if hasFooMessage {
        output.writeMessage(3, value:fooMessage)
      }
      if hasFooGroup {
        output.writeGroup(4, value:fooGroup)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFooInt {
        serialize_size += fooInt.computeInt32Size(1)
      }
      if hasFooString {
        serialize_size += fooString.computeStringSize(2)
      }
      if hasFooMessage {
        serialize_size += fooMessage.computeMessageSize(3)
      }
      if hasFooGroup {
        serialize_size += fooGroup.computeGroupSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return ProtobufUnittest.TestOneofBackwardsCompatible.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return ProtobufUnittest.TestOneofBackwardsCompatible.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return ProtobufUnittest.TestOneofBackwardsCompatible.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestOneofBackwardsCompatible {
      return ProtobufUnittest.TestOneofBackwardsCompatible.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return ProtobufUnittest.TestOneofBackwardsCompatible.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneofBackwardsCompatible {
      return ProtobufUnittest.TestOneofBackwardsCompatible.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      return ProtobufUnittest.TestOneofBackwardsCompatible.classBuilder() as ProtobufUnittest.TestOneofBackwardsCompatibleBuilder
    }
    internal func builder() -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      return classBuilder() as ProtobufUnittest.TestOneofBackwardsCompatibleBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneofBackwardsCompatibleBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneofBackwardsCompatible.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      return ProtobufUnittest.TestOneofBackwardsCompatible.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestOneofBackwardsCompatible) -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      return ProtobufUnittest.TestOneofBackwardsCompatible.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasFooInt {
        output += "\(indent) fooInt: \(fooInt) \n"
      }
      if hasFooString {
        output += "\(indent) fooString: \(fooString) \n"
      }
      if hasFooMessage {
        output += "\(indent) fooMessage {\n"
        fooMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasFooGroup {
        output += "\(indent) fooGroup {\n"
        fooGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFooInt {
               hashCode = (hashCode &* 31) &+ fooInt.hashValue
            }
            if hasFooString {
               hashCode = (hashCode &* 31) &+ fooString.hashValue
            }
            if hasFooMessage {
              hashCode = (hashCode &* 31) &+ fooMessage.hashValue
            }
            if hasFooGroup {
              hashCode = (hashCode &* 31) &+ fooGroup.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestOneofBackwardsCompatible"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestOneofBackwardsCompatible"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestOneofBackwardsCompatible.self
    }
    //Meta information declaration end

  }

  final internal class TestOneofBackwardsCompatibleBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestOneofBackwardsCompatible

    required override internal init () {
       builderResult = ProtobufUnittest.TestOneofBackwardsCompatible()
       super.init()
    }
    var hasFooInt:Bool {
         get {
              return builderResult.hasFooInt
         }
    }
    var fooInt:Int32 {
         get {
              return builderResult.fooInt
         }
         set (value) {
             builderResult.hasFooInt = true
             builderResult.fooInt = value
         }
    }
    func setFooInt(value:Int32)-> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      self.fooInt = value
      return self
    }
    internal func clearFooInt() -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder{
         builderResult.hasFooInt = false
         builderResult.fooInt = Int32(0)
         return self
    }
    var hasFooString:Bool {
         get {
              return builderResult.hasFooString
         }
    }
    var fooString:String {
         get {
              return builderResult.fooString
         }
         set (value) {
             builderResult.hasFooString = true
             builderResult.fooString = value
         }
    }
    func setFooString(value:String)-> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      self.fooString = value
      return self
    }
    internal func clearFooString() -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder{
         builderResult.hasFooString = false
         builderResult.fooString = ""
         return self
    }
    var hasFooMessage:Bool {
         get {
             return builderResult.hasFooMessage
         }
    }
    var fooMessage:ProtobufUnittest.TestAllTypes {
         get {
             return builderResult.fooMessage
         }
         set (value) {
             builderResult.hasFooMessage = true
             builderResult.fooMessage = value
         }
    }
    func setFooMessage(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      self.fooMessage = value
      return self
    }
    internal func mergeFooMessage(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      if (builderResult.hasFooMessage) {
        builderResult.fooMessage = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.fooMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.fooMessage = value
      }
      builderResult.hasFooMessage = true
      return self
    }
    internal func clearFooMessage() -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      builderResult.hasFooMessage = false
      builderResult.fooMessage = ProtobufUnittest.TestAllTypes()
      return self
    }
    var hasFooGroup:Bool {
         get {
             return builderResult.hasFooGroup
         }
    }
    var fooGroup:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup {
         get {
             return builderResult.fooGroup
         }
         set (value) {
             builderResult.hasFooGroup = true
             builderResult.fooGroup = value
         }
    }
    func setFooGroup(value:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup)-> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      self.fooGroup = value
      return self
    }
    internal func mergeFooGroup(value:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup) -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      if (builderResult.hasFooGroup) {
        builderResult.fooGroup = ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builderWithPrototype(builderResult.fooGroup).mergeFrom(value).buildPartial()
      } else {
        builderResult.fooGroup = value
      }
      builderResult.hasFooGroup = true
      return self
    }
    internal func clearFooGroup() -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      builderResult.hasFooGroup = false
      builderResult.fooGroup = ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup()
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      builderResult = ProtobufUnittest.TestOneofBackwardsCompatible()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      return ProtobufUnittest.TestOneofBackwardsCompatible.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestOneofBackwardsCompatible {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestOneofBackwardsCompatible {
      var returnMe:ProtobufUnittest.TestOneofBackwardsCompatible = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestOneofBackwardsCompatible) -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      if (other == ProtobufUnittest.TestOneofBackwardsCompatible()) {
       return self
      }
      if other.hasFooInt {
           fooInt = other.fooInt
      }
      if other.hasFooString {
           fooString = other.fooString
      }
      if (other.hasFooMessage) {
          mergeFooMessage(other.fooMessage)
      }
      if (other.hasFooGroup) {
          mergeFooGroup(other.fooGroup)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneofBackwardsCompatibleBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          fooInt = input.readInt32()

        case 18 :
          fooString = input.readString()

        case 26 :
          var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
          if hasFooMessage {
            subBuilder.mergeFrom(fooMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          fooMessage = subBuilder.buildPartial()

        case 35 :
          var subBuilder:ProtobufUnittest.TestOneofBackwardsCompatible.FooGroupBuilder = ProtobufUnittest.TestOneofBackwardsCompatible.FooGroup.builder()
          if hasFooGroup {
            subBuilder.mergeFrom(fooGroup)
          }
          input.readGroup(4, builder:subBuilder, extensionRegistry:extensionRegistry)
          fooGroup = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestOneof2 : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class FooGroup : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = Int32(0)

        private(set) var hasB:Bool = false
        private(set) var b:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(9, value:a)
          }
          if hasB {
            output.writeString(10, value:b)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasA {
            serialize_size += a.computeInt32Size(9)
          }
          if hasB {
            serialize_size += b.computeStringSize(10)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestOneof2.FooGroup {
          return ProtobufUnittest.TestOneof2.FooGroup.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof2.FooGroup {
          return ProtobufUnittest.TestOneof2.FooGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestOneof2.FooGroup {
          return ProtobufUnittest.TestOneof2.FooGroup.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestOneof2.FooGroup {
          return ProtobufUnittest.TestOneof2.FooGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestOneof2.FooGroup {
          return ProtobufUnittest.TestOneof2.FooGroup.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof2.FooGroup {
          return ProtobufUnittest.TestOneof2.FooGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestOneof2.FooGroupBuilder {
          return ProtobufUnittest.TestOneof2.FooGroup.classBuilder() as ProtobufUnittest.TestOneof2.FooGroupBuilder
        }
        internal func builder() -> ProtobufUnittest.TestOneof2.FooGroupBuilder {
          return classBuilder() as ProtobufUnittest.TestOneof2.FooGroupBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof2.FooGroupBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof2.FooGroup.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestOneof2.FooGroupBuilder {
          return ProtobufUnittest.TestOneof2.FooGroup.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestOneof2.FooGroup) -> ProtobufUnittest.TestOneof2.FooGroupBuilder {
          return ProtobufUnittest.TestOneof2.FooGroup.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          if hasB {
            output += "\(indent) b: \(b) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasA {
                   hashCode = (hashCode &* 31) &+ a.hashValue
                }
                if hasB {
                   hashCode = (hashCode &* 31) &+ b.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestOneof2.FooGroup"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestOneof2.FooGroup"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestOneof2.FooGroup.self
        }
        //Meta information declaration end

      }

      final internal class FooGroupBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestOneof2.FooGroup

        required override internal init () {
           builderResult = ProtobufUnittest.TestOneof2.FooGroup()
           super.init()
        }
        var hasA:Bool {
             get {
                  return builderResult.hasA
             }
        }
        var a:Int32 {
             get {
                  return builderResult.a
             }
             set (value) {
                 builderResult.hasA = true
                 builderResult.a = value
             }
        }
        func setA(value:Int32)-> ProtobufUnittest.TestOneof2.FooGroupBuilder {
          self.a = value
          return self
        }
        internal func clearA() -> ProtobufUnittest.TestOneof2.FooGroupBuilder{
             builderResult.hasA = false
             builderResult.a = Int32(0)
             return self
        }
        var hasB:Bool {
             get {
                  return builderResult.hasB
             }
        }
        var b:String {
             get {
                  return builderResult.b
             }
             set (value) {
                 builderResult.hasB = true
                 builderResult.b = value
             }
        }
        func setB(value:String)-> ProtobufUnittest.TestOneof2.FooGroupBuilder {
          self.b = value
          return self
        }
        internal func clearB() -> ProtobufUnittest.TestOneof2.FooGroupBuilder{
             builderResult.hasB = false
             builderResult.b = ""
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestOneof2.FooGroupBuilder {
          builderResult = ProtobufUnittest.TestOneof2.FooGroup()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestOneof2.FooGroupBuilder {
          return ProtobufUnittest.TestOneof2.FooGroup.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestOneof2.FooGroup {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestOneof2.FooGroup {
          var returnMe:ProtobufUnittest.TestOneof2.FooGroup = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestOneof2.FooGroup) -> ProtobufUnittest.TestOneof2.FooGroupBuilder {
          if (other == ProtobufUnittest.TestOneof2.FooGroup()) {
           return self
          }
          if other.hasA {
               a = other.a
          }
          if other.hasB {
               b = other.b
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestOneof2.FooGroupBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof2.FooGroupBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 72 :
              a = input.readInt32()

            case 82 :
              b = input.readString()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasQuxInt:Bool = false
        private(set) var quxInt:Int64 = Int64(0)

        private(set) var corgeInt:Array<Int32> = Array<Int32>()
        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasQuxInt {
            output.writeInt64(1, value:quxInt)
          }
          if !corgeInt.isEmpty {
            for oneValuecorgeInt in corgeInt {
              output.writeInt32(2, value:oneValuecorgeInt)
            }
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasQuxInt {
            serialize_size += quxInt.computeInt64Size(1)
          }
          var dataSizeCorgeInt:Int32 = 0
          for oneValuecorgeInt in corgeInt {
              dataSizeCorgeInt += oneValuecorgeInt.computeInt32SizeNoTag()
          }
          serialize_size += dataSizeCorgeInt
          serialize_size += 1 * Int32(corgeInt.count)
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestOneof2.NestedMessage {
          return ProtobufUnittest.TestOneof2.NestedMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof2.NestedMessage {
          return ProtobufUnittest.TestOneof2.NestedMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestOneof2.NestedMessage {
          return ProtobufUnittest.TestOneof2.NestedMessage.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestOneof2.NestedMessage {
          return ProtobufUnittest.TestOneof2.NestedMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestOneof2.NestedMessage {
          return ProtobufUnittest.TestOneof2.NestedMessage.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof2.NestedMessage {
          return ProtobufUnittest.TestOneof2.NestedMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
          return ProtobufUnittest.TestOneof2.NestedMessage.classBuilder() as ProtobufUnittest.TestOneof2.NestedMessageBuilder
        }
        internal func builder() -> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
          return classBuilder() as ProtobufUnittest.TestOneof2.NestedMessageBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof2.NestedMessageBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestOneof2.NestedMessage.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
          return ProtobufUnittest.TestOneof2.NestedMessage.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestOneof2.NestedMessage) -> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
          return ProtobufUnittest.TestOneof2.NestedMessage.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasQuxInt {
            output += "\(indent) quxInt: \(quxInt) \n"
          }
          var corgeIntElementIndex:Int = 0
          for oneValuecorgeInt in corgeInt  {
              output += "\(indent) corgeInt[\(corgeIntElementIndex)]: \(oneValuecorgeInt)\n"
              corgeIntElementIndex++
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasQuxInt {
                   hashCode = (hashCode &* 31) &+ quxInt.hashValue
                }
                for oneValuecorgeInt in corgeInt {
                    hashCode = (hashCode &* 31) &+ oneValuecorgeInt.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestOneof2.NestedMessage"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestOneof2.NestedMessage"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestOneof2.NestedMessage.self
        }
        //Meta information declaration end

      }

      final internal class NestedMessageBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestOneof2.NestedMessage

        required override internal init () {
           builderResult = ProtobufUnittest.TestOneof2.NestedMessage()
           super.init()
        }
        var hasQuxInt:Bool {
             get {
                  return builderResult.hasQuxInt
             }
        }
        var quxInt:Int64 {
             get {
                  return builderResult.quxInt
             }
             set (value) {
                 builderResult.hasQuxInt = true
                 builderResult.quxInt = value
             }
        }
        func setQuxInt(value:Int64)-> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
          self.quxInt = value
          return self
        }
        internal func clearQuxInt() -> ProtobufUnittest.TestOneof2.NestedMessageBuilder{
             builderResult.hasQuxInt = false
             builderResult.quxInt = Int64(0)
             return self
        }
        var corgeInt:Array<Int32> {
             get {
                 return builderResult.corgeInt
             }
             set (array) {
                 builderResult.corgeInt = array
             }
        }
        func setCorgeInt(value:Array<Int32>)-> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
          self.corgeInt = value
          return self
        }
        internal func clearCorgeInt() -> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
           builderResult.corgeInt.removeAll(keepCapacity: false)
           return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
          builderResult = ProtobufUnittest.TestOneof2.NestedMessage()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
          return ProtobufUnittest.TestOneof2.NestedMessage.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestOneof2.NestedMessage {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestOneof2.NestedMessage {
          var returnMe:ProtobufUnittest.TestOneof2.NestedMessage = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestOneof2.NestedMessage) -> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
          if (other == ProtobufUnittest.TestOneof2.NestedMessage()) {
           return self
          }
          if other.hasQuxInt {
               quxInt = other.quxInt
          }
          if !other.corgeInt.isEmpty {
              builderResult.corgeInt += other.corgeInt
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestOneof2.NestedMessageBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof2.NestedMessageBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 8 :
              quxInt = input.readInt64()

            case 16 :
              corgeInt += [input.readInt32()]

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



    //OneOf declaration start

    internal enum Foo {
      case FooOneOfNotSet

      internal func checkOneOfIsSet() -> Bool {
           switch self {
           case .FooOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case FooInt(Int32)

      internal static func getFooInt(value:Foo) ->Int32? {
           switch value {
           case .FooInt(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooString(String)

      internal static func getFooString(value:Foo) ->String? {
           switch value {
           case .FooString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooCord(String)

      internal static func getFooCord(value:Foo) ->String? {
           switch value {
           case .FooCord(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooStringPiece(String)

      internal static func getFooStringPiece(value:Foo) ->String? {
           switch value {
           case .FooStringPiece(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooBytes(NSData)

      internal static func getFooBytes(value:Foo) ->NSData? {
           switch value {
           case .FooBytes(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooEnum(ProtobufUnittest.TestOneof2.NestedEnum)

      internal static func getFooEnum(value:Foo) ->ProtobufUnittest.TestOneof2.NestedEnum? {
           switch value {
           case .FooEnum(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooMessage(ProtobufUnittest.TestOneof2.NestedMessage)

      internal static func getFooMessage(value:Foo) ->ProtobufUnittest.TestOneof2.NestedMessage? {
           switch value {
           case .FooMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooGroup(ProtobufUnittest.TestOneof2.FooGroup)

      internal static func getFooGroup(value:Foo) ->ProtobufUnittest.TestOneof2.FooGroup? {
           switch value {
           case .FooGroup(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooLazyMessage(ProtobufUnittest.TestOneof2.NestedMessage)

      internal static func getFooLazyMessage(value:Foo) ->ProtobufUnittest.TestOneof2.NestedMessage? {
           switch value {
           case .FooLazyMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageFoo:ProtobufUnittest.TestOneof2.Foo =  ProtobufUnittest.TestOneof2.Foo.FooOneOfNotSet


    //OneOf declaration start

    internal enum Bar {
      case BarOneOfNotSet

      internal func checkOneOfIsSet() -> Bool {
           switch self {
           case .BarOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case BarInt(Int32)

      internal static func getBarInt(value:Bar) ->Int32? {
           switch value {
           case .BarInt(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BarString(String)

      internal static func getBarString(value:Bar) ->String? {
           switch value {
           case .BarString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BarCord(String)

      internal static func getBarCord(value:Bar) ->String? {
           switch value {
           case .BarCord(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BarStringPiece(String)

      internal static func getBarStringPiece(value:Bar) ->String? {
           switch value {
           case .BarStringPiece(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BarBytes(NSData)

      internal static func getBarBytes(value:Bar) ->NSData? {
           switch value {
           case .BarBytes(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case BarEnum(ProtobufUnittest.TestOneof2.NestedEnum)

      internal static func getBarEnum(value:Bar) ->ProtobufUnittest.TestOneof2.NestedEnum? {
           switch value {
           case .BarEnum(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageBar:ProtobufUnittest.TestOneof2.Bar =  ProtobufUnittest.TestOneof2.Bar.BarOneOfNotSet


      //Enum type declaration start 

      internal enum NestedEnum:Int32 {
        case Foo = 1
        case Bar = 2
        case Baz = 3

      }

      //Enum type declaration end 

    private(set) var hasFooInt:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Foo.getFooInt(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooInt:Int32!{
         get {
              return ProtobufUnittest.TestOneof2.Foo.getFooInt(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof2.Foo.FooInt(newvalue)
         }
    }
    private(set) var hasFooString:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Foo.getFooString(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooString:String!{
         get {
              return ProtobufUnittest.TestOneof2.Foo.getFooString(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof2.Foo.FooString(newvalue)
         }
    }
    private(set) var hasFooCord:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Foo.getFooCord(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooCord:String!{
         get {
              return ProtobufUnittest.TestOneof2.Foo.getFooCord(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof2.Foo.FooCord(newvalue)
         }
    }
    private(set) var hasFooStringPiece:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Foo.getFooStringPiece(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooStringPiece:String!{
         get {
              return ProtobufUnittest.TestOneof2.Foo.getFooStringPiece(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof2.Foo.FooStringPiece(newvalue)
         }
    }
    private(set) var hasFooBytes:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Foo.getFooBytes(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooBytes:NSData!{
         get {
              return ProtobufUnittest.TestOneof2.Foo.getFooBytes(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof2.Foo.FooBytes(newvalue)
         }
    }
    private(set) var hasFooEnum:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Foo.getFooEnum(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooEnum:ProtobufUnittest.TestOneof2.NestedEnum!{
         get {
              return ProtobufUnittest.TestOneof2.Foo.getFooEnum(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof2.Foo.FooEnum(newvalue)
         }
    }
    private(set) var hasFooMessage:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Foo.getFooMessage(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooMessage:ProtobufUnittest.TestOneof2.NestedMessage!{
         get {
              return ProtobufUnittest.TestOneof2.Foo.getFooMessage(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof2.Foo.FooMessage(newvalue)
         }
    }
    private(set) var hasFooGroup:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Foo.getFooGroup(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooGroup:ProtobufUnittest.TestOneof2.FooGroup!{
         get {
              return ProtobufUnittest.TestOneof2.Foo.getFooGroup(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof2.Foo.FooGroup(newvalue)
         }
    }
    private(set) var hasFooLazyMessage:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Foo.getFooLazyMessage(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooLazyMessage:ProtobufUnittest.TestOneof2.NestedMessage!{
         get {
              return ProtobufUnittest.TestOneof2.Foo.getFooLazyMessage(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestOneof2.Foo.FooLazyMessage(newvalue)
         }
    }
    private(set) var hasBarInt:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Bar.getBarInt(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var barInt:Int32!{
         get {
              return ProtobufUnittest.TestOneof2.Bar.getBarInt(storageBar)
         }
         set (newvalue) {
              storageBar = ProtobufUnittest.TestOneof2.Bar.BarInt(newvalue)
         }
    }
    private(set) var hasBarString:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Bar.getBarString(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var barString:String!{
         get {
              return ProtobufUnittest.TestOneof2.Bar.getBarString(storageBar)
         }
         set (newvalue) {
              storageBar = ProtobufUnittest.TestOneof2.Bar.BarString(newvalue)
         }
    }
    private(set) var hasBarCord:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Bar.getBarCord(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var barCord:String!{
         get {
              return ProtobufUnittest.TestOneof2.Bar.getBarCord(storageBar)
         }
         set (newvalue) {
              storageBar = ProtobufUnittest.TestOneof2.Bar.BarCord(newvalue)
         }
    }
    private(set) var hasBarStringPiece:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Bar.getBarStringPiece(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var barStringPiece:String!{
         get {
              return ProtobufUnittest.TestOneof2.Bar.getBarStringPiece(storageBar)
         }
         set (newvalue) {
              storageBar = ProtobufUnittest.TestOneof2.Bar.BarStringPiece(newvalue)
         }
    }
    private(set) var hasBarBytes:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Bar.getBarBytes(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var barBytes:NSData!{
         get {
              return ProtobufUnittest.TestOneof2.Bar.getBarBytes(storageBar)
         }
         set (newvalue) {
              storageBar = ProtobufUnittest.TestOneof2.Bar.BarBytes(newvalue)
         }
    }
    private(set) var hasBarEnum:Bool {
          get {
               if ProtobufUnittest.TestOneof2.Bar.getBarEnum(storageBar) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var barEnum:ProtobufUnittest.TestOneof2.NestedEnum!{
         get {
              return ProtobufUnittest.TestOneof2.Bar.getBarEnum(storageBar)
         }
         set (newvalue) {
              storageBar = ProtobufUnittest.TestOneof2.Bar.BarEnum(newvalue)
         }
    }
    private(set) var hasBazInt:Bool = false
    private(set) var bazInt:Int32 = Int32(0)

    private(set) var hasBazString:Bool = false
    private(set) var bazString:String = "BAZ"

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasFooInt {
        output.writeInt32(1, value:fooInt)
      }
      if hasFooString {
        output.writeString(2, value:fooString)
      }
      if hasFooCord {
        output.writeString(3, value:fooCord)
      }
      if hasFooStringPiece {
        output.writeString(4, value:fooStringPiece)
      }
      if hasFooBytes {
        output.writeData(5, value:fooBytes)
      }
      if hasFooEnum {
        output.writeEnum(6, value:fooEnum.rawValue)
      }
      if hasFooMessage {
        output.writeMessage(7, value:fooMessage)
      }
      if hasFooGroup {
        output.writeGroup(8, value:fooGroup)
      }
      if hasFooLazyMessage {
        output.writeMessage(11, value:fooLazyMessage)
      }
      if hasBarInt {
        output.writeInt32(12, value:barInt)
      }
      if hasBarString {
        output.writeString(13, value:barString)
      }
      if hasBarCord {
        output.writeString(14, value:barCord)
      }
      if hasBarStringPiece {
        output.writeString(15, value:barStringPiece)
      }
      if hasBarBytes {
        output.writeData(16, value:barBytes)
      }
      if hasBarEnum {
        output.writeEnum(17, value:barEnum.rawValue)
      }
      if hasBazInt {
        output.writeInt32(18, value:bazInt)
      }
      if hasBazString {
        output.writeString(19, value:bazString)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFooInt {
        serialize_size += fooInt.computeInt32Size(1)
      }
      if hasFooString {
        serialize_size += fooString.computeStringSize(2)
      }
      if hasFooCord {
        serialize_size += fooCord.computeStringSize(3)
      }
      if hasFooStringPiece {
        serialize_size += fooStringPiece.computeStringSize(4)
      }
      if hasFooBytes {
        serialize_size += fooBytes.computeDataSize(5)
      }
      if (hasFooEnum) {
        serialize_size += fooEnum.rawValue.computeEnumSize(6)
      }
      if hasFooMessage {
        serialize_size += fooMessage.computeMessageSize(7)
      }
      if hasFooGroup {
        serialize_size += fooGroup.computeGroupSize(8)
      }
      if hasFooLazyMessage {
        serialize_size += fooLazyMessage.computeMessageSize(11)
      }
      if hasBarInt {
        serialize_size += barInt.computeInt32Size(12)
      }
      if hasBarString {
        serialize_size += barString.computeStringSize(13)
      }
      if hasBarCord {
        serialize_size += barCord.computeStringSize(14)
      }
      if hasBarStringPiece {
        serialize_size += barStringPiece.computeStringSize(15)
      }
      if hasBarBytes {
        serialize_size += barBytes.computeDataSize(16)
      }
      if (hasBarEnum) {
        serialize_size += barEnum.rawValue.computeEnumSize(17)
      }
      if hasBazInt {
        serialize_size += bazInt.computeInt32Size(18)
      }
      if hasBazString {
        serialize_size += bazString.computeStringSize(19)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestOneof2 {
      return ProtobufUnittest.TestOneof2.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof2 {
      return ProtobufUnittest.TestOneof2.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestOneof2 {
      return ProtobufUnittest.TestOneof2.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestOneof2 {
      return ProtobufUnittest.TestOneof2.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestOneof2 {
      return ProtobufUnittest.TestOneof2.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof2 {
      return ProtobufUnittest.TestOneof2.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestOneof2Builder {
      return ProtobufUnittest.TestOneof2.classBuilder() as ProtobufUnittest.TestOneof2Builder
    }
    internal func builder() -> ProtobufUnittest.TestOneof2Builder {
      return classBuilder() as ProtobufUnittest.TestOneof2Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneof2Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestOneof2.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestOneof2Builder {
      return ProtobufUnittest.TestOneof2.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestOneof2) -> ProtobufUnittest.TestOneof2Builder {
      return ProtobufUnittest.TestOneof2.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasFooInt {
        output += "\(indent) fooInt: \(fooInt) \n"
      }
      if hasFooString {
        output += "\(indent) fooString: \(fooString) \n"
      }
      if hasFooCord {
        output += "\(indent) fooCord: \(fooCord) \n"
      }
      if hasFooStringPiece {
        output += "\(indent) fooStringPiece: \(fooStringPiece) \n"
      }
      if hasFooBytes {
        output += "\(indent) fooBytes: \(fooBytes) \n"
      }
      if (hasFooEnum) {
        output += "\(indent) fooEnum: \(fooEnum.rawValue)\n"
      }
      if hasFooMessage {
        output += "\(indent) fooMessage {\n"
        fooMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasFooGroup {
        output += "\(indent) fooGroup {\n"
        fooGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasFooLazyMessage {
        output += "\(indent) fooLazyMessage {\n"
        fooLazyMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasBarInt {
        output += "\(indent) barInt: \(barInt) \n"
      }
      if hasBarString {
        output += "\(indent) barString: \(barString) \n"
      }
      if hasBarCord {
        output += "\(indent) barCord: \(barCord) \n"
      }
      if hasBarStringPiece {
        output += "\(indent) barStringPiece: \(barStringPiece) \n"
      }
      if hasBarBytes {
        output += "\(indent) barBytes: \(barBytes) \n"
      }
      if (hasBarEnum) {
        output += "\(indent) barEnum: \(barEnum.rawValue)\n"
      }
      if hasBazInt {
        output += "\(indent) bazInt: \(bazInt) \n"
      }
      if hasBazString {
        output += "\(indent) bazString: \(bazString) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFooInt {
               hashCode = (hashCode &* 31) &+ fooInt.hashValue
            }
            if hasFooString {
               hashCode = (hashCode &* 31) &+ fooString.hashValue
            }
            if hasFooCord {
               hashCode = (hashCode &* 31) &+ fooCord.hashValue
            }
            if hasFooStringPiece {
               hashCode = (hashCode &* 31) &+ fooStringPiece.hashValue
            }
            if hasFooBytes {
               hashCode = (hashCode &* 31) &+ fooBytes.hashValue
            }
            if hasFooEnum {
               hashCode = (hashCode &* 31) &+ Int(fooEnum.rawValue)
            }
            if hasFooMessage {
              hashCode = (hashCode &* 31) &+ fooMessage.hashValue
            }
            if hasFooGroup {
              hashCode = (hashCode &* 31) &+ fooGroup.hashValue
            }
            if hasFooLazyMessage {
              hashCode = (hashCode &* 31) &+ fooLazyMessage.hashValue
            }
            if hasBarInt {
               hashCode = (hashCode &* 31) &+ barInt.hashValue
            }
            if hasBarString {
               hashCode = (hashCode &* 31) &+ barString.hashValue
            }
            if hasBarCord {
               hashCode = (hashCode &* 31) &+ barCord.hashValue
            }
            if hasBarStringPiece {
               hashCode = (hashCode &* 31) &+ barStringPiece.hashValue
            }
            if hasBarBytes {
               hashCode = (hashCode &* 31) &+ barBytes.hashValue
            }
            if hasBarEnum {
               hashCode = (hashCode &* 31) &+ Int(barEnum.rawValue)
            }
            if hasBazInt {
               hashCode = (hashCode &* 31) &+ bazInt.hashValue
            }
            if hasBazString {
               hashCode = (hashCode &* 31) &+ bazString.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestOneof2"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestOneof2"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestOneof2.self
    }
    //Meta information declaration end

  }

  final internal class TestOneof2Builder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestOneof2

    required override internal init () {
       builderResult = ProtobufUnittest.TestOneof2()
       super.init()
    }
    var hasFooInt:Bool {
         get {
              return builderResult.hasFooInt
         }
    }
    var fooInt:Int32 {
         get {
              return builderResult.fooInt
         }
         set (value) {
             builderResult.hasFooInt = true
             builderResult.fooInt = value
         }
    }
    func setFooInt(value:Int32)-> ProtobufUnittest.TestOneof2Builder {
      self.fooInt = value
      return self
    }
    internal func clearFooInt() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasFooInt = false
         builderResult.fooInt = Int32(0)
         return self
    }
    var hasFooString:Bool {
         get {
              return builderResult.hasFooString
         }
    }
    var fooString:String {
         get {
              return builderResult.fooString
         }
         set (value) {
             builderResult.hasFooString = true
             builderResult.fooString = value
         }
    }
    func setFooString(value:String)-> ProtobufUnittest.TestOneof2Builder {
      self.fooString = value
      return self
    }
    internal func clearFooString() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasFooString = false
         builderResult.fooString = ""
         return self
    }
    var hasFooCord:Bool {
         get {
              return builderResult.hasFooCord
         }
    }
    var fooCord:String {
         get {
              return builderResult.fooCord
         }
         set (value) {
             builderResult.hasFooCord = true
             builderResult.fooCord = value
         }
    }
    func setFooCord(value:String)-> ProtobufUnittest.TestOneof2Builder {
      self.fooCord = value
      return self
    }
    internal func clearFooCord() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasFooCord = false
         builderResult.fooCord = ""
         return self
    }
    var hasFooStringPiece:Bool {
         get {
              return builderResult.hasFooStringPiece
         }
    }
    var fooStringPiece:String {
         get {
              return builderResult.fooStringPiece
         }
         set (value) {
             builderResult.hasFooStringPiece = true
             builderResult.fooStringPiece = value
         }
    }
    func setFooStringPiece(value:String)-> ProtobufUnittest.TestOneof2Builder {
      self.fooStringPiece = value
      return self
    }
    internal func clearFooStringPiece() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasFooStringPiece = false
         builderResult.fooStringPiece = ""
         return self
    }
    var hasFooBytes:Bool {
         get {
              return builderResult.hasFooBytes
         }
    }
    var fooBytes:NSData {
         get {
              return builderResult.fooBytes
         }
         set (value) {
             builderResult.hasFooBytes = true
             builderResult.fooBytes = value
         }
    }
    func setFooBytes(value:NSData)-> ProtobufUnittest.TestOneof2Builder {
      self.fooBytes = value
      return self
    }
    internal func clearFooBytes() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasFooBytes = false
         builderResult.fooBytes = NSData()
         return self
    }
      var hasFooEnum:Bool{
          get {
              return builderResult.hasFooEnum
          }
      }
      var fooEnum:ProtobufUnittest.TestOneof2.NestedEnum {
          get {
              return builderResult.fooEnum
          }
          set (value) {
              builderResult.hasFooEnum = true
              builderResult.fooEnum = value
          }
      }
      internal func setFooEnum(value:ProtobufUnittest.TestOneof2.NestedEnum)-> ProtobufUnittest.TestOneof2Builder {
        self.fooEnum = value
        return self
      }
      internal func clearFooEnum() -> ProtobufUnittest.TestOneof2Builder {
         builderResult.hasFooEnum = false
         builderResult.fooEnum = .Foo
         return self
      }
    var hasFooMessage:Bool {
         get {
             return builderResult.hasFooMessage
         }
    }
    var fooMessage:ProtobufUnittest.TestOneof2.NestedMessage {
         get {
             return builderResult.fooMessage
         }
         set (value) {
             builderResult.hasFooMessage = true
             builderResult.fooMessage = value
         }
    }
    func setFooMessage(value:ProtobufUnittest.TestOneof2.NestedMessage)-> ProtobufUnittest.TestOneof2Builder {
      self.fooMessage = value
      return self
    }
    internal func mergeFooMessage(value:ProtobufUnittest.TestOneof2.NestedMessage) -> ProtobufUnittest.TestOneof2Builder {
      if (builderResult.hasFooMessage) {
        builderResult.fooMessage = ProtobufUnittest.TestOneof2.NestedMessage.builderWithPrototype(builderResult.fooMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.fooMessage = value
      }
      builderResult.hasFooMessage = true
      return self
    }
    internal func clearFooMessage() -> ProtobufUnittest.TestOneof2Builder {
      builderResult.hasFooMessage = false
      builderResult.fooMessage = ProtobufUnittest.TestOneof2.NestedMessage()
      return self
    }
    var hasFooGroup:Bool {
         get {
             return builderResult.hasFooGroup
         }
    }
    var fooGroup:ProtobufUnittest.TestOneof2.FooGroup {
         get {
             return builderResult.fooGroup
         }
         set (value) {
             builderResult.hasFooGroup = true
             builderResult.fooGroup = value
         }
    }
    func setFooGroup(value:ProtobufUnittest.TestOneof2.FooGroup)-> ProtobufUnittest.TestOneof2Builder {
      self.fooGroup = value
      return self
    }
    internal func mergeFooGroup(value:ProtobufUnittest.TestOneof2.FooGroup) -> ProtobufUnittest.TestOneof2Builder {
      if (builderResult.hasFooGroup) {
        builderResult.fooGroup = ProtobufUnittest.TestOneof2.FooGroup.builderWithPrototype(builderResult.fooGroup).mergeFrom(value).buildPartial()
      } else {
        builderResult.fooGroup = value
      }
      builderResult.hasFooGroup = true
      return self
    }
    internal func clearFooGroup() -> ProtobufUnittest.TestOneof2Builder {
      builderResult.hasFooGroup = false
      builderResult.fooGroup = ProtobufUnittest.TestOneof2.FooGroup()
      return self
    }
    var hasFooLazyMessage:Bool {
         get {
             return builderResult.hasFooLazyMessage
         }
    }
    var fooLazyMessage:ProtobufUnittest.TestOneof2.NestedMessage {
         get {
             return builderResult.fooLazyMessage
         }
         set (value) {
             builderResult.hasFooLazyMessage = true
             builderResult.fooLazyMessage = value
         }
    }
    func setFooLazyMessage(value:ProtobufUnittest.TestOneof2.NestedMessage)-> ProtobufUnittest.TestOneof2Builder {
      self.fooLazyMessage = value
      return self
    }
    internal func mergeFooLazyMessage(value:ProtobufUnittest.TestOneof2.NestedMessage) -> ProtobufUnittest.TestOneof2Builder {
      if (builderResult.hasFooLazyMessage) {
        builderResult.fooLazyMessage = ProtobufUnittest.TestOneof2.NestedMessage.builderWithPrototype(builderResult.fooLazyMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.fooLazyMessage = value
      }
      builderResult.hasFooLazyMessage = true
      return self
    }
    internal func clearFooLazyMessage() -> ProtobufUnittest.TestOneof2Builder {
      builderResult.hasFooLazyMessage = false
      builderResult.fooLazyMessage = ProtobufUnittest.TestOneof2.NestedMessage()
      return self
    }
    var hasBarInt:Bool {
         get {
              return builderResult.hasBarInt
         }
    }
    var barInt:Int32 {
         get {
              return builderResult.barInt
         }
         set (value) {
             builderResult.hasBarInt = true
             builderResult.barInt = value
         }
    }
    func setBarInt(value:Int32)-> ProtobufUnittest.TestOneof2Builder {
      self.barInt = value
      return self
    }
    internal func clearBarInt() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasBarInt = false
         builderResult.barInt = Int32(5)
         return self
    }
    var hasBarString:Bool {
         get {
              return builderResult.hasBarString
         }
    }
    var barString:String {
         get {
              return builderResult.barString
         }
         set (value) {
             builderResult.hasBarString = true
             builderResult.barString = value
         }
    }
    func setBarString(value:String)-> ProtobufUnittest.TestOneof2Builder {
      self.barString = value
      return self
    }
    internal func clearBarString() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasBarString = false
         builderResult.barString = "STRING"
         return self
    }
    var hasBarCord:Bool {
         get {
              return builderResult.hasBarCord
         }
    }
    var barCord:String {
         get {
              return builderResult.barCord
         }
         set (value) {
             builderResult.hasBarCord = true
             builderResult.barCord = value
         }
    }
    func setBarCord(value:String)-> ProtobufUnittest.TestOneof2Builder {
      self.barCord = value
      return self
    }
    internal func clearBarCord() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasBarCord = false
         builderResult.barCord = "CORD"
         return self
    }
    var hasBarStringPiece:Bool {
         get {
              return builderResult.hasBarStringPiece
         }
    }
    var barStringPiece:String {
         get {
              return builderResult.barStringPiece
         }
         set (value) {
             builderResult.hasBarStringPiece = true
             builderResult.barStringPiece = value
         }
    }
    func setBarStringPiece(value:String)-> ProtobufUnittest.TestOneof2Builder {
      self.barStringPiece = value
      return self
    }
    internal func clearBarStringPiece() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasBarStringPiece = false
         builderResult.barStringPiece = "SPIECE"
         return self
    }
    var hasBarBytes:Bool {
         get {
              return builderResult.hasBarBytes
         }
    }
    var barBytes:NSData {
         get {
              return builderResult.barBytes
         }
         set (value) {
             builderResult.hasBarBytes = true
             builderResult.barBytes = value
         }
    }
    func setBarBytes(value:NSData)-> ProtobufUnittest.TestOneof2Builder {
      self.barBytes = value
      return self
    }
    internal func clearBarBytes() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasBarBytes = false
         builderResult.barBytes = NSData(bytes:([Byte]() + "BYTES".utf8), length:5)
         return self
    }
      var hasBarEnum:Bool{
          get {
              return builderResult.hasBarEnum
          }
      }
      var barEnum:ProtobufUnittest.TestOneof2.NestedEnum {
          get {
              return builderResult.barEnum
          }
          set (value) {
              builderResult.hasBarEnum = true
              builderResult.barEnum = value
          }
      }
      internal func setBarEnum(value:ProtobufUnittest.TestOneof2.NestedEnum)-> ProtobufUnittest.TestOneof2Builder {
        self.barEnum = value
        return self
      }
      internal func clearBarEnum() -> ProtobufUnittest.TestOneof2Builder {
         builderResult.hasBarEnum = false
         builderResult.barEnum = .Bar
         return self
      }
    var hasBazInt:Bool {
         get {
              return builderResult.hasBazInt
         }
    }
    var bazInt:Int32 {
         get {
              return builderResult.bazInt
         }
         set (value) {
             builderResult.hasBazInt = true
             builderResult.bazInt = value
         }
    }
    func setBazInt(value:Int32)-> ProtobufUnittest.TestOneof2Builder {
      self.bazInt = value
      return self
    }
    internal func clearBazInt() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasBazInt = false
         builderResult.bazInt = Int32(0)
         return self
    }
    var hasBazString:Bool {
         get {
              return builderResult.hasBazString
         }
    }
    var bazString:String {
         get {
              return builderResult.bazString
         }
         set (value) {
             builderResult.hasBazString = true
             builderResult.bazString = value
         }
    }
    func setBazString(value:String)-> ProtobufUnittest.TestOneof2Builder {
      self.bazString = value
      return self
    }
    internal func clearBazString() -> ProtobufUnittest.TestOneof2Builder{
         builderResult.hasBazString = false
         builderResult.bazString = "BAZ"
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestOneof2Builder {
      builderResult = ProtobufUnittest.TestOneof2()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestOneof2Builder {
      return ProtobufUnittest.TestOneof2.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestOneof2 {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestOneof2 {
      var returnMe:ProtobufUnittest.TestOneof2 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestOneof2) -> ProtobufUnittest.TestOneof2Builder {
      if (other == ProtobufUnittest.TestOneof2()) {
       return self
      }
      if other.hasFooInt {
           fooInt = other.fooInt
      }
      if other.hasFooString {
           fooString = other.fooString
      }
      if other.hasFooCord {
           fooCord = other.fooCord
      }
      if other.hasFooStringPiece {
           fooStringPiece = other.fooStringPiece
      }
      if other.hasFooBytes {
           fooBytes = other.fooBytes
      }
      if other.hasFooEnum {
           fooEnum = other.fooEnum
      }
      if (other.hasFooMessage) {
          mergeFooMessage(other.fooMessage)
      }
      if (other.hasFooGroup) {
          mergeFooGroup(other.fooGroup)
      }
      if (other.hasFooLazyMessage) {
          mergeFooLazyMessage(other.fooLazyMessage)
      }
      if other.hasBarInt {
           barInt = other.barInt
      }
      if other.hasBarString {
           barString = other.barString
      }
      if other.hasBarCord {
           barCord = other.barCord
      }
      if other.hasBarStringPiece {
           barStringPiece = other.barStringPiece
      }
      if other.hasBarBytes {
           barBytes = other.barBytes
      }
      if other.hasBarEnum {
           barEnum = other.barEnum
      }
      if other.hasBazInt {
           bazInt = other.bazInt
      }
      if other.hasBazString {
           bazString = other.bazString
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestOneof2Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestOneof2Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          fooInt = input.readInt32()

        case 18 :
          fooString = input.readString()

        case 26 :
          fooCord = input.readString()

        case 34 :
          fooStringPiece = input.readString()

        case 42 :
          fooBytes = input.readData()

        case 48 :
          let valueIntfooEnum = input.readEnum()
          if let enumsfooEnum = ProtobufUnittest.TestOneof2.NestedEnum(rawValue:valueIntfooEnum){
               fooEnum = enumsfooEnum
          } else {
               unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntfooEnum))
          }

        case 58 :
          var subBuilder:ProtobufUnittest.TestOneof2.NestedMessageBuilder = ProtobufUnittest.TestOneof2.NestedMessage.builder()
          if hasFooMessage {
            subBuilder.mergeFrom(fooMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          fooMessage = subBuilder.buildPartial()

        case 67 :
          var subBuilder:ProtobufUnittest.TestOneof2.FooGroupBuilder = ProtobufUnittest.TestOneof2.FooGroup.builder()
          if hasFooGroup {
            subBuilder.mergeFrom(fooGroup)
          }
          input.readGroup(8, builder:subBuilder, extensionRegistry:extensionRegistry)
          fooGroup = subBuilder.buildPartial()

        case 90 :
          var subBuilder:ProtobufUnittest.TestOneof2.NestedMessageBuilder = ProtobufUnittest.TestOneof2.NestedMessage.builder()
          if hasFooLazyMessage {
            subBuilder.mergeFrom(fooLazyMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          fooLazyMessage = subBuilder.buildPartial()

        case 96 :
          barInt = input.readInt32()

        case 106 :
          barString = input.readString()

        case 114 :
          barCord = input.readString()

        case 122 :
          barStringPiece = input.readString()

        case 130 :
          barBytes = input.readData()

        case 136 :
          let valueIntbarEnum = input.readEnum()
          if let enumsbarEnum = ProtobufUnittest.TestOneof2.NestedEnum(rawValue:valueIntbarEnum){
               barEnum = enumsbarEnum
          } else {
               unknownFieldsBuilder.mergeVarintField(17, value:Int64(valueIntbarEnum))
          }

        case 144 :
          bazInt = input.readInt32()

        case 154 :
          bazString = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestRequiredOneof : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasRequiredDouble:Bool = false
        private(set) var requiredDouble:Double = Double(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
          if !hasRequiredDouble {
            return false
          }
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasRequiredDouble {
            output.writeDouble(1, value:requiredDouble)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasRequiredDouble {
            serialize_size += requiredDouble.computeDoubleSize(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.classBuilder() as ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder
        }
        internal func builder() -> ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder {
          return classBuilder() as ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestRequiredOneof.NestedMessage) -> ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasRequiredDouble {
            output += "\(indent) requiredDouble: \(requiredDouble) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasRequiredDouble {
                   hashCode = (hashCode &* 31) &+ requiredDouble.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestRequiredOneof.NestedMessage"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestRequiredOneof.NestedMessage"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestRequiredOneof.NestedMessage.self
        }
        //Meta information declaration end

      }

      final internal class NestedMessageBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestRequiredOneof.NestedMessage

        required override internal init () {
           builderResult = ProtobufUnittest.TestRequiredOneof.NestedMessage()
           super.init()
        }
        var hasRequiredDouble:Bool {
             get {
                  return builderResult.hasRequiredDouble
             }
        }
        var requiredDouble:Double {
             get {
                  return builderResult.requiredDouble
             }
             set (value) {
                 builderResult.hasRequiredDouble = true
                 builderResult.requiredDouble = value
             }
        }
        func setRequiredDouble(value:Double)-> ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder {
          self.requiredDouble = value
          return self
        }
        internal func clearRequiredDouble() -> ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder{
             builderResult.hasRequiredDouble = false
             builderResult.requiredDouble = Double(0)
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder {
          builderResult = ProtobufUnittest.TestRequiredOneof.NestedMessage()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder {
          return ProtobufUnittest.TestRequiredOneof.NestedMessage.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestRequiredOneof.NestedMessage {
          var returnMe:ProtobufUnittest.TestRequiredOneof.NestedMessage = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestRequiredOneof.NestedMessage) -> ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder {
          if (other == ProtobufUnittest.TestRequiredOneof.NestedMessage()) {
           return self
          }
          if other.hasRequiredDouble {
               requiredDouble = other.requiredDouble
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 9 :
              requiredDouble = input.readDouble()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



    //OneOf declaration start

    internal enum Foo {
      case FooOneOfNotSet

      internal func checkOneOfIsSet() -> Bool {
           switch self {
           case .FooOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case FooInt(Int32)

      internal static func getFooInt(value:Foo) ->Int32? {
           switch value {
           case .FooInt(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooString(String)

      internal static func getFooString(value:Foo) ->String? {
           switch value {
           case .FooString(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FooMessage(ProtobufUnittest.TestRequiredOneof.NestedMessage)

      internal static func getFooMessage(value:Foo) ->ProtobufUnittest.TestRequiredOneof.NestedMessage? {
           switch value {
           case .FooMessage(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageFoo:ProtobufUnittest.TestRequiredOneof.Foo =  ProtobufUnittest.TestRequiredOneof.Foo.FooOneOfNotSet
    private(set) var hasFooInt:Bool {
          get {
               if ProtobufUnittest.TestRequiredOneof.Foo.getFooInt(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooInt:Int32!{
         get {
              return ProtobufUnittest.TestRequiredOneof.Foo.getFooInt(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestRequiredOneof.Foo.FooInt(newvalue)
         }
    }
    private(set) var hasFooString:Bool {
          get {
               if ProtobufUnittest.TestRequiredOneof.Foo.getFooString(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooString:String!{
         get {
              return ProtobufUnittest.TestRequiredOneof.Foo.getFooString(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestRequiredOneof.Foo.FooString(newvalue)
         }
    }
    private(set) var hasFooMessage:Bool {
          get {
               if ProtobufUnittest.TestRequiredOneof.Foo.getFooMessage(storageFoo) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var fooMessage:ProtobufUnittest.TestRequiredOneof.NestedMessage!{
         get {
              return ProtobufUnittest.TestRequiredOneof.Foo.getFooMessage(storageFoo)
         }
         set (newvalue) {
              storageFoo = ProtobufUnittest.TestRequiredOneof.Foo.FooMessage(newvalue)
         }
    }
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if hasFooMessage {
       if !fooMessage.isInitialized() {
         return false
       }
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasFooInt {
        output.writeInt32(1, value:fooInt)
      }
      if hasFooString {
        output.writeString(2, value:fooString)
      }
      if hasFooMessage {
        output.writeMessage(3, value:fooMessage)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFooInt {
        serialize_size += fooInt.computeInt32Size(1)
      }
      if hasFooString {
        serialize_size += fooString.computeStringSize(2)
      }
      if hasFooMessage {
        serialize_size += fooMessage.computeMessageSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestRequiredOneof {
      return ProtobufUnittest.TestRequiredOneof.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequiredOneof {
      return ProtobufUnittest.TestRequiredOneof.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestRequiredOneof {
      return ProtobufUnittest.TestRequiredOneof.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestRequiredOneof {
      return ProtobufUnittest.TestRequiredOneof.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestRequiredOneof {
      return ProtobufUnittest.TestRequiredOneof.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequiredOneof {
      return ProtobufUnittest.TestRequiredOneof.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestRequiredOneofBuilder {
      return ProtobufUnittest.TestRequiredOneof.classBuilder() as ProtobufUnittest.TestRequiredOneofBuilder
    }
    internal func builder() -> ProtobufUnittest.TestRequiredOneofBuilder {
      return classBuilder() as ProtobufUnittest.TestRequiredOneofBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequiredOneofBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRequiredOneof.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestRequiredOneofBuilder {
      return ProtobufUnittest.TestRequiredOneof.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestRequiredOneof) -> ProtobufUnittest.TestRequiredOneofBuilder {
      return ProtobufUnittest.TestRequiredOneof.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasFooInt {
        output += "\(indent) fooInt: \(fooInt) \n"
      }
      if hasFooString {
        output += "\(indent) fooString: \(fooString) \n"
      }
      if hasFooMessage {
        output += "\(indent) fooMessage {\n"
        fooMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFooInt {
               hashCode = (hashCode &* 31) &+ fooInt.hashValue
            }
            if hasFooString {
               hashCode = (hashCode &* 31) &+ fooString.hashValue
            }
            if hasFooMessage {
              hashCode = (hashCode &* 31) &+ fooMessage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestRequiredOneof"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestRequiredOneof"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestRequiredOneof.self
    }
    //Meta information declaration end

  }

  final internal class TestRequiredOneofBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestRequiredOneof

    required override internal init () {
       builderResult = ProtobufUnittest.TestRequiredOneof()
       super.init()
    }
    var hasFooInt:Bool {
         get {
              return builderResult.hasFooInt
         }
    }
    var fooInt:Int32 {
         get {
              return builderResult.fooInt
         }
         set (value) {
             builderResult.hasFooInt = true
             builderResult.fooInt = value
         }
    }
    func setFooInt(value:Int32)-> ProtobufUnittest.TestRequiredOneofBuilder {
      self.fooInt = value
      return self
    }
    internal func clearFooInt() -> ProtobufUnittest.TestRequiredOneofBuilder{
         builderResult.hasFooInt = false
         builderResult.fooInt = Int32(0)
         return self
    }
    var hasFooString:Bool {
         get {
              return builderResult.hasFooString
         }
    }
    var fooString:String {
         get {
              return builderResult.fooString
         }
         set (value) {
             builderResult.hasFooString = true
             builderResult.fooString = value
         }
    }
    func setFooString(value:String)-> ProtobufUnittest.TestRequiredOneofBuilder {
      self.fooString = value
      return self
    }
    internal func clearFooString() -> ProtobufUnittest.TestRequiredOneofBuilder{
         builderResult.hasFooString = false
         builderResult.fooString = ""
         return self
    }
    var hasFooMessage:Bool {
         get {
             return builderResult.hasFooMessage
         }
    }
    var fooMessage:ProtobufUnittest.TestRequiredOneof.NestedMessage {
         get {
             return builderResult.fooMessage
         }
         set (value) {
             builderResult.hasFooMessage = true
             builderResult.fooMessage = value
         }
    }
    func setFooMessage(value:ProtobufUnittest.TestRequiredOneof.NestedMessage)-> ProtobufUnittest.TestRequiredOneofBuilder {
      self.fooMessage = value
      return self
    }
    internal func mergeFooMessage(value:ProtobufUnittest.TestRequiredOneof.NestedMessage) -> ProtobufUnittest.TestRequiredOneofBuilder {
      if (builderResult.hasFooMessage) {
        builderResult.fooMessage = ProtobufUnittest.TestRequiredOneof.NestedMessage.builderWithPrototype(builderResult.fooMessage).mergeFrom(value).buildPartial()
      } else {
        builderResult.fooMessage = value
      }
      builderResult.hasFooMessage = true
      return self
    }
    internal func clearFooMessage() -> ProtobufUnittest.TestRequiredOneofBuilder {
      builderResult.hasFooMessage = false
      builderResult.fooMessage = ProtobufUnittest.TestRequiredOneof.NestedMessage()
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestRequiredOneofBuilder {
      builderResult = ProtobufUnittest.TestRequiredOneof()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestRequiredOneofBuilder {
      return ProtobufUnittest.TestRequiredOneof.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestRequiredOneof {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestRequiredOneof {
      var returnMe:ProtobufUnittest.TestRequiredOneof = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestRequiredOneof) -> ProtobufUnittest.TestRequiredOneofBuilder {
      if (other == ProtobufUnittest.TestRequiredOneof()) {
       return self
      }
      if other.hasFooInt {
           fooInt = other.fooInt
      }
      if other.hasFooString {
           fooString = other.fooString
      }
      if (other.hasFooMessage) {
          mergeFooMessage(other.fooMessage)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestRequiredOneofBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRequiredOneofBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          fooInt = input.readInt32()

        case 18 :
          fooString = input.readString()

        case 26 :
          var subBuilder:ProtobufUnittest.TestRequiredOneof.NestedMessageBuilder = ProtobufUnittest.TestRequiredOneof.NestedMessage.builder()
          if hasFooMessage {
            subBuilder.mergeFrom(fooMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          fooMessage = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestPackedTypes : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var packedInt32:Array<Int32> = Array<Int32>()
    private var packedInt32MemoizedSerializedSize:Int32 = -1
    private(set) var packedInt64:Array<Int64> = Array<Int64>()
    private var packedInt64MemoizedSerializedSize:Int32 = -1
    private(set) var packedUint32:Array<UInt32> = Array<UInt32>()
    private var packedUint32MemoizedSerializedSize:Int32 = -1
    private(set) var packedUint64:Array<UInt64> = Array<UInt64>()
    private var packedUint64MemoizedSerializedSize:Int32 = -1
    private(set) var packedSint32:Array<Int32> = Array<Int32>()
    private var packedSint32MemoizedSerializedSize:Int32 = -1
    private(set) var packedSint64:Array<Int64> = Array<Int64>()
    private var packedSint64MemoizedSerializedSize:Int32 = -1
    private(set) var packedFixed32:Array<UInt32> = Array<UInt32>()
    private var packedFixed32MemoizedSerializedSize:Int32 = -1
    private(set) var packedFixed64:Array<UInt64> = Array<UInt64>()
    private var packedFixed64MemoizedSerializedSize:Int32 = -1
    private(set) var packedSfixed32:Array<Int32> = Array<Int32>()
    private var packedSfixed32MemoizedSerializedSize:Int32 = -1
    private(set) var packedSfixed64:Array<Int64> = Array<Int64>()
    private var packedSfixed64MemoizedSerializedSize:Int32 = -1
    private(set) var packedFloat:Array<Float> = Array<Float>()
    private var packedFloatMemoizedSerializedSize:Int32 = -1
    private(set) var packedDouble:Array<Double> = Array<Double>()
    private var packedDoubleMemoizedSerializedSize:Int32 = -1
    private(set) var packedBool:Array<Bool> = Array<Bool>()
    private var packedBoolMemoizedSerializedSize:Int32 = -1
    private var packedEnumMemoizedSerializedSize:Int32 = 0
    private(set) var packedEnum:Array<ProtobufUnittest.ForeignEnum> = Array<ProtobufUnittest.ForeignEnum>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if !packedInt32.isEmpty {
        output.writeRawVarint32(722)
        output.writeRawVarint32(packedInt32MemoizedSerializedSize)
        for oneValuepackedInt32 in packedInt32 {
          output.writeInt32NoTag(oneValuepackedInt32)
        }
      }
      if !packedInt64.isEmpty {
        output.writeRawVarint32(730)
        output.writeRawVarint32(packedInt64MemoizedSerializedSize)
        for oneValuepackedInt64 in packedInt64 {
          output.writeInt64NoTag(oneValuepackedInt64)
        }
      }
      if !packedUint32.isEmpty {
        output.writeRawVarint32(738)
        output.writeRawVarint32(packedUint32MemoizedSerializedSize)
        for oneValuepackedUint32 in packedUint32 {
          output.writeUInt32NoTag(oneValuepackedUint32)
        }
      }
      if !packedUint64.isEmpty {
        output.writeRawVarint32(746)
        output.writeRawVarint32(packedUint64MemoizedSerializedSize)
        for oneValuepackedUint64 in packedUint64 {
          output.writeUInt64NoTag(oneValuepackedUint64)
        }
      }
      if !packedSint32.isEmpty {
        output.writeRawVarint32(754)
        output.writeRawVarint32(packedSint32MemoizedSerializedSize)
        for oneValuepackedSint32 in packedSint32 {
          output.writeSInt32NoTag(oneValuepackedSint32)
        }
      }
      if !packedSint64.isEmpty {
        output.writeRawVarint32(762)
        output.writeRawVarint32(packedSint64MemoizedSerializedSize)
        for oneValuepackedSint64 in packedSint64 {
          output.writeSInt64NoTag(oneValuepackedSint64)
        }
      }
      if !packedFixed32.isEmpty {
        output.writeRawVarint32(770)
        output.writeRawVarint32(packedFixed32MemoizedSerializedSize)
        for oneValuepackedFixed32 in packedFixed32 {
          output.writeFixed32NoTag(oneValuepackedFixed32)
        }
      }
      if !packedFixed64.isEmpty {
        output.writeRawVarint32(778)
        output.writeRawVarint32(packedFixed64MemoizedSerializedSize)
        for oneValuepackedFixed64 in packedFixed64 {
          output.writeFixed64NoTag(oneValuepackedFixed64)
        }
      }
      if !packedSfixed32.isEmpty {
        output.writeRawVarint32(786)
        output.writeRawVarint32(packedSfixed32MemoizedSerializedSize)
        for oneValuepackedSfixed32 in packedSfixed32 {
          output.writeSFixed32NoTag(oneValuepackedSfixed32)
        }
      }
      if !packedSfixed64.isEmpty {
        output.writeRawVarint32(794)
        output.writeRawVarint32(packedSfixed64MemoizedSerializedSize)
        for oneValuepackedSfixed64 in packedSfixed64 {
          output.writeSFixed64NoTag(oneValuepackedSfixed64)
        }
      }
      if !packedFloat.isEmpty {
        output.writeRawVarint32(802)
        output.writeRawVarint32(packedFloatMemoizedSerializedSize)
        for oneValuepackedFloat in packedFloat {
          output.writeFloatNoTag(oneValuepackedFloat)
        }
      }
      if !packedDouble.isEmpty {
        output.writeRawVarint32(810)
        output.writeRawVarint32(packedDoubleMemoizedSerializedSize)
        for oneValuepackedDouble in packedDouble {
          output.writeDoubleNoTag(oneValuepackedDouble)
        }
      }
      if !packedBool.isEmpty {
        output.writeRawVarint32(818)
        output.writeRawVarint32(packedBoolMemoizedSerializedSize)
        for oneValuepackedBool in packedBool {
          output.writeBoolNoTag(oneValuepackedBool)
        }
      }
      if !packedEnum.isEmpty {
        output.writeRawVarint32(826)
        output.writeRawVarint32(packedEnumMemoizedSerializedSize)
      }
      for oneValueOfpackedEnum in packedEnum {
          output.writeEnumNoTag(oneValueOfpackedEnum.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizePackedInt32:Int32 = 0
      for oneValuepackedInt32 in packedInt32 {
          dataSizePackedInt32 += oneValuepackedInt32.computeInt32SizeNoTag()
      }
      serialize_size += dataSizePackedInt32
      if !packedInt32.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedInt32.computeInt32SizeNoTag()
      }
      packedInt32MemoizedSerializedSize = dataSizePackedInt32
      var dataSizePackedInt64:Int32 = 0
      for oneValuepackedInt64 in packedInt64 {
          dataSizePackedInt64 += oneValuepackedInt64.computeInt64SizeNoTag()
      }
      serialize_size += dataSizePackedInt64
      if !packedInt64.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedInt64.computeInt32SizeNoTag()
      }
      packedInt64MemoizedSerializedSize = dataSizePackedInt64
      var dataSizePackedUint32:Int32 = 0
      for oneValuepackedUint32 in packedUint32 {
          dataSizePackedUint32 += oneValuepackedUint32.computeUInt32SizeNoTag()
      }
      serialize_size += dataSizePackedUint32
      if !packedUint32.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedUint32.computeInt32SizeNoTag()
      }
      packedUint32MemoizedSerializedSize = dataSizePackedUint32
      var dataSizePackedUint64:Int32 = 0
      for oneValuepackedUint64 in packedUint64 {
          dataSizePackedUint64 += oneValuepackedUint64.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizePackedUint64
      if !packedUint64.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedUint64.computeInt32SizeNoTag()
      }
      packedUint64MemoizedSerializedSize = dataSizePackedUint64
      var dataSizePackedSint32:Int32 = 0
      for oneValuepackedSint32 in packedSint32 {
          dataSizePackedSint32 += oneValuepackedSint32.computeSInt32SizeNoTag()
      }
      serialize_size += dataSizePackedSint32
      if !packedSint32.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedSint32.computeInt32SizeNoTag()
      }
      packedSint32MemoizedSerializedSize = dataSizePackedSint32
      var dataSizePackedSint64:Int32 = 0
      for oneValuepackedSint64 in packedSint64 {
          dataSizePackedSint64 += oneValuepackedSint64.computeSInt64SizeNoTag()
      }
      serialize_size += dataSizePackedSint64
      if !packedSint64.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedSint64.computeInt32SizeNoTag()
      }
      packedSint64MemoizedSerializedSize = dataSizePackedSint64
      var dataSizePackedFixed32:Int32 = 0
      dataSizePackedFixed32 = 4 * Int32(packedFixed32.count)
      serialize_size += dataSizePackedFixed32
      if !packedFixed32.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedFixed32.computeInt32SizeNoTag()
      }
      packedFixed32MemoizedSerializedSize = dataSizePackedFixed32
      var dataSizePackedFixed64:Int32 = 0
      dataSizePackedFixed64 = 8 * Int32(packedFixed64.count)
      serialize_size += dataSizePackedFixed64
      if !packedFixed64.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedFixed64.computeInt32SizeNoTag()
      }
      packedFixed64MemoizedSerializedSize = dataSizePackedFixed64
      var dataSizePackedSfixed32:Int32 = 0
      dataSizePackedSfixed32 = 4 * Int32(packedSfixed32.count)
      serialize_size += dataSizePackedSfixed32
      if !packedSfixed32.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedSfixed32.computeInt32SizeNoTag()
      }
      packedSfixed32MemoizedSerializedSize = dataSizePackedSfixed32
      var dataSizePackedSfixed64:Int32 = 0
      dataSizePackedSfixed64 = 8 * Int32(packedSfixed64.count)
      serialize_size += dataSizePackedSfixed64
      if !packedSfixed64.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedSfixed64.computeInt32SizeNoTag()
      }
      packedSfixed64MemoizedSerializedSize = dataSizePackedSfixed64
      var dataSizePackedFloat:Int32 = 0
      dataSizePackedFloat = 4 * Int32(packedFloat.count)
      serialize_size += dataSizePackedFloat
      if !packedFloat.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedFloat.computeInt32SizeNoTag()
      }
      packedFloatMemoizedSerializedSize = dataSizePackedFloat
      var dataSizePackedDouble:Int32 = 0
      dataSizePackedDouble = 8 * Int32(packedDouble.count)
      serialize_size += dataSizePackedDouble
      if !packedDouble.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedDouble.computeInt32SizeNoTag()
      }
      packedDoubleMemoizedSerializedSize = dataSizePackedDouble
      var dataSizePackedBool:Int32 = 0
      dataSizePackedBool = 1 * Int32(packedBool.count)
      serialize_size += dataSizePackedBool
      if !packedBool.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedBool.computeInt32SizeNoTag()
      }
      packedBoolMemoizedSerializedSize = dataSizePackedBool
      var dataSizepackedEnum:Int32 = 0
      for oneValueOfpackedEnum in packedEnum {
          dataSizepackedEnum += oneValueOfpackedEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizepackedEnum
      if !packedEnum.isEmpty {
        serialize_size += 2
        serialize_size += dataSizepackedEnum.computeRawVarint32Size()
      }
      packedEnumMemoizedSerializedSize = dataSizepackedEnum
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestPackedTypes {
      return ProtobufUnittest.TestPackedTypes.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestPackedTypes {
      return ProtobufUnittest.TestPackedTypes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestPackedTypes {
      return ProtobufUnittest.TestPackedTypes.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestPackedTypes {
      return ProtobufUnittest.TestPackedTypes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestPackedTypes {
      return ProtobufUnittest.TestPackedTypes.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestPackedTypes {
      return ProtobufUnittest.TestPackedTypes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestPackedTypesBuilder {
      return ProtobufUnittest.TestPackedTypes.classBuilder() as ProtobufUnittest.TestPackedTypesBuilder
    }
    internal func builder() -> ProtobufUnittest.TestPackedTypesBuilder {
      return classBuilder() as ProtobufUnittest.TestPackedTypesBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestPackedTypesBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestPackedTypes.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestPackedTypesBuilder {
      return ProtobufUnittest.TestPackedTypes.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestPackedTypes) -> ProtobufUnittest.TestPackedTypesBuilder {
      return ProtobufUnittest.TestPackedTypes.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var packedInt32ElementIndex:Int = 0
      for oneValuepackedInt32 in packedInt32  {
          output += "\(indent) packedInt32[\(packedInt32ElementIndex)]: \(oneValuepackedInt32)\n"
          packedInt32ElementIndex++
      }
      var packedInt64ElementIndex:Int = 0
      for oneValuepackedInt64 in packedInt64  {
          output += "\(indent) packedInt64[\(packedInt64ElementIndex)]: \(oneValuepackedInt64)\n"
          packedInt64ElementIndex++
      }
      var packedUint32ElementIndex:Int = 0
      for oneValuepackedUint32 in packedUint32  {
          output += "\(indent) packedUint32[\(packedUint32ElementIndex)]: \(oneValuepackedUint32)\n"
          packedUint32ElementIndex++
      }
      var packedUint64ElementIndex:Int = 0
      for oneValuepackedUint64 in packedUint64  {
          output += "\(indent) packedUint64[\(packedUint64ElementIndex)]: \(oneValuepackedUint64)\n"
          packedUint64ElementIndex++
      }
      var packedSint32ElementIndex:Int = 0
      for oneValuepackedSint32 in packedSint32  {
          output += "\(indent) packedSint32[\(packedSint32ElementIndex)]: \(oneValuepackedSint32)\n"
          packedSint32ElementIndex++
      }
      var packedSint64ElementIndex:Int = 0
      for oneValuepackedSint64 in packedSint64  {
          output += "\(indent) packedSint64[\(packedSint64ElementIndex)]: \(oneValuepackedSint64)\n"
          packedSint64ElementIndex++
      }
      var packedFixed32ElementIndex:Int = 0
      for oneValuepackedFixed32 in packedFixed32  {
          output += "\(indent) packedFixed32[\(packedFixed32ElementIndex)]: \(oneValuepackedFixed32)\n"
          packedFixed32ElementIndex++
      }
      var packedFixed64ElementIndex:Int = 0
      for oneValuepackedFixed64 in packedFixed64  {
          output += "\(indent) packedFixed64[\(packedFixed64ElementIndex)]: \(oneValuepackedFixed64)\n"
          packedFixed64ElementIndex++
      }
      var packedSfixed32ElementIndex:Int = 0
      for oneValuepackedSfixed32 in packedSfixed32  {
          output += "\(indent) packedSfixed32[\(packedSfixed32ElementIndex)]: \(oneValuepackedSfixed32)\n"
          packedSfixed32ElementIndex++
      }
      var packedSfixed64ElementIndex:Int = 0
      for oneValuepackedSfixed64 in packedSfixed64  {
          output += "\(indent) packedSfixed64[\(packedSfixed64ElementIndex)]: \(oneValuepackedSfixed64)\n"
          packedSfixed64ElementIndex++
      }
      var packedFloatElementIndex:Int = 0
      for oneValuepackedFloat in packedFloat  {
          output += "\(indent) packedFloat[\(packedFloatElementIndex)]: \(oneValuepackedFloat)\n"
          packedFloatElementIndex++
      }
      var packedDoubleElementIndex:Int = 0
      for oneValuepackedDouble in packedDouble  {
          output += "\(indent) packedDouble[\(packedDoubleElementIndex)]: \(oneValuepackedDouble)\n"
          packedDoubleElementIndex++
      }
      var packedBoolElementIndex:Int = 0
      for oneValuepackedBool in packedBool  {
          output += "\(indent) packedBool[\(packedBoolElementIndex)]: \(oneValuepackedBool)\n"
          packedBoolElementIndex++
      }
      var packedEnumElementIndex:Int = 0
      for oneValueOfpackedEnum in packedEnum {
          output += "\(indent) packedEnum[\(packedEnumElementIndex)]: \(oneValueOfpackedEnum.rawValue)\n"
          packedEnumElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValuepackedInt32 in packedInt32 {
                hashCode = (hashCode &* 31) &+ oneValuepackedInt32.hashValue
            }
            for oneValuepackedInt64 in packedInt64 {
                hashCode = (hashCode &* 31) &+ oneValuepackedInt64.hashValue
            }
            for oneValuepackedUint32 in packedUint32 {
                hashCode = (hashCode &* 31) &+ oneValuepackedUint32.hashValue
            }
            for oneValuepackedUint64 in packedUint64 {
                hashCode = (hashCode &* 31) &+ oneValuepackedUint64.hashValue
            }
            for oneValuepackedSint32 in packedSint32 {
                hashCode = (hashCode &* 31) &+ oneValuepackedSint32.hashValue
            }
            for oneValuepackedSint64 in packedSint64 {
                hashCode = (hashCode &* 31) &+ oneValuepackedSint64.hashValue
            }
            for oneValuepackedFixed32 in packedFixed32 {
                hashCode = (hashCode &* 31) &+ oneValuepackedFixed32.hashValue
            }
            for oneValuepackedFixed64 in packedFixed64 {
                hashCode = (hashCode &* 31) &+ oneValuepackedFixed64.hashValue
            }
            for oneValuepackedSfixed32 in packedSfixed32 {
                hashCode = (hashCode &* 31) &+ oneValuepackedSfixed32.hashValue
            }
            for oneValuepackedSfixed64 in packedSfixed64 {
                hashCode = (hashCode &* 31) &+ oneValuepackedSfixed64.hashValue
            }
            for oneValuepackedFloat in packedFloat {
                hashCode = (hashCode &* 31) &+ oneValuepackedFloat.hashValue
            }
            for oneValuepackedDouble in packedDouble {
                hashCode = (hashCode &* 31) &+ oneValuepackedDouble.hashValue
            }
            for oneValuepackedBool in packedBool {
                hashCode = (hashCode &* 31) &+ oneValuepackedBool.hashValue
            }
            for oneValueOfpackedEnum in packedEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfpackedEnum.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestPackedTypes"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestPackedTypes"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestPackedTypes.self
    }
    //Meta information declaration end

  }

  final internal class TestPackedTypesBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestPackedTypes

    required override internal init () {
       builderResult = ProtobufUnittest.TestPackedTypes()
       super.init()
    }
    var packedInt32:Array<Int32> {
         get {
             return builderResult.packedInt32
         }
         set (array) {
             builderResult.packedInt32 = array
         }
    }
    func setPackedInt32(value:Array<Int32>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedInt32 = value
      return self
    }
    internal func clearPackedInt32() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedInt32.removeAll(keepCapacity: false)
       return self
    }
    var packedInt64:Array<Int64> {
         get {
             return builderResult.packedInt64
         }
         set (array) {
             builderResult.packedInt64 = array
         }
    }
    func setPackedInt64(value:Array<Int64>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedInt64 = value
      return self
    }
    internal func clearPackedInt64() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedInt64.removeAll(keepCapacity: false)
       return self
    }
    var packedUint32:Array<UInt32> {
         get {
             return builderResult.packedUint32
         }
         set (array) {
             builderResult.packedUint32 = array
         }
    }
    func setPackedUint32(value:Array<UInt32>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedUint32 = value
      return self
    }
    internal func clearPackedUint32() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedUint32.removeAll(keepCapacity: false)
       return self
    }
    var packedUint64:Array<UInt64> {
         get {
             return builderResult.packedUint64
         }
         set (array) {
             builderResult.packedUint64 = array
         }
    }
    func setPackedUint64(value:Array<UInt64>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedUint64 = value
      return self
    }
    internal func clearPackedUint64() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedUint64.removeAll(keepCapacity: false)
       return self
    }
    var packedSint32:Array<Int32> {
         get {
             return builderResult.packedSint32
         }
         set (array) {
             builderResult.packedSint32 = array
         }
    }
    func setPackedSint32(value:Array<Int32>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedSint32 = value
      return self
    }
    internal func clearPackedSint32() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedSint32.removeAll(keepCapacity: false)
       return self
    }
    var packedSint64:Array<Int64> {
         get {
             return builderResult.packedSint64
         }
         set (array) {
             builderResult.packedSint64 = array
         }
    }
    func setPackedSint64(value:Array<Int64>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedSint64 = value
      return self
    }
    internal func clearPackedSint64() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedSint64.removeAll(keepCapacity: false)
       return self
    }
    var packedFixed32:Array<UInt32> {
         get {
             return builderResult.packedFixed32
         }
         set (array) {
             builderResult.packedFixed32 = array
         }
    }
    func setPackedFixed32(value:Array<UInt32>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedFixed32 = value
      return self
    }
    internal func clearPackedFixed32() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedFixed32.removeAll(keepCapacity: false)
       return self
    }
    var packedFixed64:Array<UInt64> {
         get {
             return builderResult.packedFixed64
         }
         set (array) {
             builderResult.packedFixed64 = array
         }
    }
    func setPackedFixed64(value:Array<UInt64>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedFixed64 = value
      return self
    }
    internal func clearPackedFixed64() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedFixed64.removeAll(keepCapacity: false)
       return self
    }
    var packedSfixed32:Array<Int32> {
         get {
             return builderResult.packedSfixed32
         }
         set (array) {
             builderResult.packedSfixed32 = array
         }
    }
    func setPackedSfixed32(value:Array<Int32>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedSfixed32 = value
      return self
    }
    internal func clearPackedSfixed32() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedSfixed32.removeAll(keepCapacity: false)
       return self
    }
    var packedSfixed64:Array<Int64> {
         get {
             return builderResult.packedSfixed64
         }
         set (array) {
             builderResult.packedSfixed64 = array
         }
    }
    func setPackedSfixed64(value:Array<Int64>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedSfixed64 = value
      return self
    }
    internal func clearPackedSfixed64() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedSfixed64.removeAll(keepCapacity: false)
       return self
    }
    var packedFloat:Array<Float> {
         get {
             return builderResult.packedFloat
         }
         set (array) {
             builderResult.packedFloat = array
         }
    }
    func setPackedFloat(value:Array<Float>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedFloat = value
      return self
    }
    internal func clearPackedFloat() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedFloat.removeAll(keepCapacity: false)
       return self
    }
    var packedDouble:Array<Double> {
         get {
             return builderResult.packedDouble
         }
         set (array) {
             builderResult.packedDouble = array
         }
    }
    func setPackedDouble(value:Array<Double>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedDouble = value
      return self
    }
    internal func clearPackedDouble() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedDouble.removeAll(keepCapacity: false)
       return self
    }
    var packedBool:Array<Bool> {
         get {
             return builderResult.packedBool
         }
         set (array) {
             builderResult.packedBool = array
         }
    }
    func setPackedBool(value:Array<Bool>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedBool = value
      return self
    }
    internal func clearPackedBool() -> ProtobufUnittest.TestPackedTypesBuilder {
       builderResult.packedBool.removeAll(keepCapacity: false)
       return self
    }
    var packedEnum:Array<ProtobufUnittest.ForeignEnum> {
        get {
            return builderResult.packedEnum
        }
        set (value) {
            builderResult.packedEnum = value
        }
    }
    func setPackedEnum(value:Array<ProtobufUnittest.ForeignEnum>)-> ProtobufUnittest.TestPackedTypesBuilder {
      self.packedEnum = value
      return self
    }
    internal func clearPackedEnum() -> ProtobufUnittest.TestPackedTypesBuilder {
      builderResult.packedEnum.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestPackedTypesBuilder {
      builderResult = ProtobufUnittest.TestPackedTypes()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestPackedTypesBuilder {
      return ProtobufUnittest.TestPackedTypes.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestPackedTypes {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestPackedTypes {
      var returnMe:ProtobufUnittest.TestPackedTypes = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestPackedTypes) -> ProtobufUnittest.TestPackedTypesBuilder {
      if (other == ProtobufUnittest.TestPackedTypes()) {
       return self
      }
      if !other.packedInt32.isEmpty {
          builderResult.packedInt32 += other.packedInt32
      }
      if !other.packedInt64.isEmpty {
          builderResult.packedInt64 += other.packedInt64
      }
      if !other.packedUint32.isEmpty {
          builderResult.packedUint32 += other.packedUint32
      }
      if !other.packedUint64.isEmpty {
          builderResult.packedUint64 += other.packedUint64
      }
      if !other.packedSint32.isEmpty {
          builderResult.packedSint32 += other.packedSint32
      }
      if !other.packedSint64.isEmpty {
          builderResult.packedSint64 += other.packedSint64
      }
      if !other.packedFixed32.isEmpty {
          builderResult.packedFixed32 += other.packedFixed32
      }
      if !other.packedFixed64.isEmpty {
          builderResult.packedFixed64 += other.packedFixed64
      }
      if !other.packedSfixed32.isEmpty {
          builderResult.packedSfixed32 += other.packedSfixed32
      }
      if !other.packedSfixed64.isEmpty {
          builderResult.packedSfixed64 += other.packedSfixed64
      }
      if !other.packedFloat.isEmpty {
          builderResult.packedFloat += other.packedFloat
      }
      if !other.packedDouble.isEmpty {
          builderResult.packedDouble += other.packedDouble
      }
      if !other.packedBool.isEmpty {
          builderResult.packedBool += other.packedBool
      }
      if !other.packedEnum.isEmpty {
         builderResult.packedEnum += other.packedEnum
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestPackedTypesBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestPackedTypesBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 722 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedInt32 += [input.readInt32()]
          }
          input.popLimit(limit)

        case 730 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedInt64 += [input.readInt64()]
          }
          input.popLimit(limit)

        case 738 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedUint32 += [input.readUInt32()]
          }
          input.popLimit(limit)

        case 746 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedUint64 += [input.readUInt64()]
          }
          input.popLimit(limit)

        case 754 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedSint32 += [input.readSInt32()]
          }
          input.popLimit(limit)

        case 762 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedSint64 += [input.readSInt64()]
          }
          input.popLimit(limit)

        case 770 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedFixed32 += [input.readFixed32()]
          }
          input.popLimit(limit)

        case 778 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedFixed64 += [input.readFixed64()]
          }
          input.popLimit(limit)

        case 786 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedSfixed32 += [input.readSFixed32()]
          }
          input.popLimit(limit)

        case 794 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedSfixed64 += [input.readSFixed64()]
          }
          input.popLimit(limit)

        case 802 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedFloat += [input.readFloat()]
          }
          input.popLimit(limit)

        case 810 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedDouble += [input.readDouble()]
          }
          input.popLimit(limit)

        case 818 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedBool += [input.readBool()]
          }
          input.popLimit(limit)

        case 826 :
          var length:Int32 = input.readRawVarint32()
          var oldLimit:Int32 = input.pushLimit(length)
          while input.bytesUntilLimit() > 0 {
          let valueIntpackedEnum = input.readEnum()
          if let enumspackedEnum = ProtobufUnittest.ForeignEnum(rawValue:valueIntpackedEnum) {
               builderResult.packedEnum += [enumspackedEnum]
          } else {
               unknownFieldsBuilder.mergeVarintField(103, value:Int64(valueIntpackedEnum))
          }
          }
          input.popLimit(oldLimit)

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestUnpackedTypes : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var unpackedInt32:Array<Int32> = Array<Int32>()
    private(set) var unpackedInt64:Array<Int64> = Array<Int64>()
    private(set) var unpackedUint32:Array<UInt32> = Array<UInt32>()
    private(set) var unpackedUint64:Array<UInt64> = Array<UInt64>()
    private(set) var unpackedSint32:Array<Int32> = Array<Int32>()
    private(set) var unpackedSint64:Array<Int64> = Array<Int64>()
    private(set) var unpackedFixed32:Array<UInt32> = Array<UInt32>()
    private(set) var unpackedFixed64:Array<UInt64> = Array<UInt64>()
    private(set) var unpackedSfixed32:Array<Int32> = Array<Int32>()
    private(set) var unpackedSfixed64:Array<Int64> = Array<Int64>()
    private(set) var unpackedFloat:Array<Float> = Array<Float>()
    private(set) var unpackedDouble:Array<Double> = Array<Double>()
    private(set) var unpackedBool:Array<Bool> = Array<Bool>()
    private var unpackedEnumMemoizedSerializedSize:Int32 = 0
    private(set) var unpackedEnum:Array<ProtobufUnittest.ForeignEnum> = Array<ProtobufUnittest.ForeignEnum>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if !unpackedInt32.isEmpty {
        for oneValueunpackedInt32 in unpackedInt32 {
          output.writeInt32(90, value:oneValueunpackedInt32)
        }
      }
      if !unpackedInt64.isEmpty {
        for oneValueunpackedInt64 in unpackedInt64 {
          output.writeInt64(91, value:oneValueunpackedInt64)
        }
      }
      if !unpackedUint32.isEmpty {
        for oneValueunpackedUint32 in unpackedUint32 {
          output.writeUInt32(92, value:oneValueunpackedUint32)
        }
      }
      if !unpackedUint64.isEmpty {
        for oneValueunpackedUint64 in unpackedUint64 {
          output.writeUInt64(93, value:oneValueunpackedUint64)
        }
      }
      if !unpackedSint32.isEmpty {
        for oneValueunpackedSint32 in unpackedSint32 {
          output.writeSInt32(94, value:oneValueunpackedSint32)
        }
      }
      if !unpackedSint64.isEmpty {
        for oneValueunpackedSint64 in unpackedSint64 {
          output.writeSInt64(95, value:oneValueunpackedSint64)
        }
      }
      if !unpackedFixed32.isEmpty {
        for oneValueunpackedFixed32 in unpackedFixed32 {
          output.writeFixed32(96, value:oneValueunpackedFixed32)
        }
      }
      if !unpackedFixed64.isEmpty {
        for oneValueunpackedFixed64 in unpackedFixed64 {
          output.writeFixed64(97, value:oneValueunpackedFixed64)
        }
      }
      if !unpackedSfixed32.isEmpty {
        for oneValueunpackedSfixed32 in unpackedSfixed32 {
          output.writeSFixed32(98, value:oneValueunpackedSfixed32)
        }
      }
      if !unpackedSfixed64.isEmpty {
        for oneValueunpackedSfixed64 in unpackedSfixed64 {
          output.writeSFixed64(99, value:oneValueunpackedSfixed64)
        }
      }
      if !unpackedFloat.isEmpty {
        for oneValueunpackedFloat in unpackedFloat {
          output.writeFloat(100, value:oneValueunpackedFloat)
        }
      }
      if !unpackedDouble.isEmpty {
        for oneValueunpackedDouble in unpackedDouble {
          output.writeDouble(101, value:oneValueunpackedDouble)
        }
      }
      if !unpackedBool.isEmpty {
        for oneValueunpackedBool in unpackedBool {
          output.writeBool(102, value:oneValueunpackedBool)
        }
      }
      for oneValueOfunpackedEnum in unpackedEnum {
          output.writeEnum(103, value:oneValueOfunpackedEnum.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeUnpackedInt32:Int32 = 0
      for oneValueunpackedInt32 in unpackedInt32 {
          dataSizeUnpackedInt32 += oneValueunpackedInt32.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeUnpackedInt32
      serialize_size += 2 * Int32(unpackedInt32.count)
      var dataSizeUnpackedInt64:Int32 = 0
      for oneValueunpackedInt64 in unpackedInt64 {
          dataSizeUnpackedInt64 += oneValueunpackedInt64.computeInt64SizeNoTag()
      }
      serialize_size += dataSizeUnpackedInt64
      serialize_size += 2 * Int32(unpackedInt64.count)
      var dataSizeUnpackedUint32:Int32 = 0
      for oneValueunpackedUint32 in unpackedUint32 {
          dataSizeUnpackedUint32 += oneValueunpackedUint32.computeUInt32SizeNoTag()
      }
      serialize_size += dataSizeUnpackedUint32
      serialize_size += 2 * Int32(unpackedUint32.count)
      var dataSizeUnpackedUint64:Int32 = 0
      for oneValueunpackedUint64 in unpackedUint64 {
          dataSizeUnpackedUint64 += oneValueunpackedUint64.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizeUnpackedUint64
      serialize_size += 2 * Int32(unpackedUint64.count)
      var dataSizeUnpackedSint32:Int32 = 0
      for oneValueunpackedSint32 in unpackedSint32 {
          dataSizeUnpackedSint32 += oneValueunpackedSint32.computeSInt32SizeNoTag()
      }
      serialize_size += dataSizeUnpackedSint32
      serialize_size += 2 * Int32(unpackedSint32.count)
      var dataSizeUnpackedSint64:Int32 = 0
      for oneValueunpackedSint64 in unpackedSint64 {
          dataSizeUnpackedSint64 += oneValueunpackedSint64.computeSInt64SizeNoTag()
      }
      serialize_size += dataSizeUnpackedSint64
      serialize_size += 2 * Int32(unpackedSint64.count)
      var dataSizeUnpackedFixed32:Int32 = 0
      dataSizeUnpackedFixed32 = 4 * Int32(unpackedFixed32.count)
      serialize_size += dataSizeUnpackedFixed32
      serialize_size += 2 * Int32(unpackedFixed32.count)
      var dataSizeUnpackedFixed64:Int32 = 0
      dataSizeUnpackedFixed64 = 8 * Int32(unpackedFixed64.count)
      serialize_size += dataSizeUnpackedFixed64
      serialize_size += 2 * Int32(unpackedFixed64.count)
      var dataSizeUnpackedSfixed32:Int32 = 0
      dataSizeUnpackedSfixed32 = 4 * Int32(unpackedSfixed32.count)
      serialize_size += dataSizeUnpackedSfixed32
      serialize_size += 2 * Int32(unpackedSfixed32.count)
      var dataSizeUnpackedSfixed64:Int32 = 0
      dataSizeUnpackedSfixed64 = 8 * Int32(unpackedSfixed64.count)
      serialize_size += dataSizeUnpackedSfixed64
      serialize_size += 2 * Int32(unpackedSfixed64.count)
      var dataSizeUnpackedFloat:Int32 = 0
      dataSizeUnpackedFloat = 4 * Int32(unpackedFloat.count)
      serialize_size += dataSizeUnpackedFloat
      serialize_size += 2 * Int32(unpackedFloat.count)
      var dataSizeUnpackedDouble:Int32 = 0
      dataSizeUnpackedDouble = 8 * Int32(unpackedDouble.count)
      serialize_size += dataSizeUnpackedDouble
      serialize_size += 2 * Int32(unpackedDouble.count)
      var dataSizeUnpackedBool:Int32 = 0
      dataSizeUnpackedBool = 1 * Int32(unpackedBool.count)
      serialize_size += dataSizeUnpackedBool
      serialize_size += 2 * Int32(unpackedBool.count)
      var dataSizeunpackedEnum:Int32 = 0
      for oneValueOfunpackedEnum in unpackedEnum {
          dataSizeunpackedEnum += oneValueOfunpackedEnum.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeunpackedEnum
      serialize_size += (2 * Int32(unpackedEnum.count))
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestUnpackedTypes {
      return ProtobufUnittest.TestUnpackedTypes.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestUnpackedTypes {
      return ProtobufUnittest.TestUnpackedTypes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestUnpackedTypes {
      return ProtobufUnittest.TestUnpackedTypes.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestUnpackedTypes {
      return ProtobufUnittest.TestUnpackedTypes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestUnpackedTypes {
      return ProtobufUnittest.TestUnpackedTypes.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestUnpackedTypes {
      return ProtobufUnittest.TestUnpackedTypes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestUnpackedTypesBuilder {
      return ProtobufUnittest.TestUnpackedTypes.classBuilder() as ProtobufUnittest.TestUnpackedTypesBuilder
    }
    internal func builder() -> ProtobufUnittest.TestUnpackedTypesBuilder {
      return classBuilder() as ProtobufUnittest.TestUnpackedTypesBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestUnpackedTypesBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestUnpackedTypes.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestUnpackedTypesBuilder {
      return ProtobufUnittest.TestUnpackedTypes.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestUnpackedTypes) -> ProtobufUnittest.TestUnpackedTypesBuilder {
      return ProtobufUnittest.TestUnpackedTypes.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var unpackedInt32ElementIndex:Int = 0
      for oneValueunpackedInt32 in unpackedInt32  {
          output += "\(indent) unpackedInt32[\(unpackedInt32ElementIndex)]: \(oneValueunpackedInt32)\n"
          unpackedInt32ElementIndex++
      }
      var unpackedInt64ElementIndex:Int = 0
      for oneValueunpackedInt64 in unpackedInt64  {
          output += "\(indent) unpackedInt64[\(unpackedInt64ElementIndex)]: \(oneValueunpackedInt64)\n"
          unpackedInt64ElementIndex++
      }
      var unpackedUint32ElementIndex:Int = 0
      for oneValueunpackedUint32 in unpackedUint32  {
          output += "\(indent) unpackedUint32[\(unpackedUint32ElementIndex)]: \(oneValueunpackedUint32)\n"
          unpackedUint32ElementIndex++
      }
      var unpackedUint64ElementIndex:Int = 0
      for oneValueunpackedUint64 in unpackedUint64  {
          output += "\(indent) unpackedUint64[\(unpackedUint64ElementIndex)]: \(oneValueunpackedUint64)\n"
          unpackedUint64ElementIndex++
      }
      var unpackedSint32ElementIndex:Int = 0
      for oneValueunpackedSint32 in unpackedSint32  {
          output += "\(indent) unpackedSint32[\(unpackedSint32ElementIndex)]: \(oneValueunpackedSint32)\n"
          unpackedSint32ElementIndex++
      }
      var unpackedSint64ElementIndex:Int = 0
      for oneValueunpackedSint64 in unpackedSint64  {
          output += "\(indent) unpackedSint64[\(unpackedSint64ElementIndex)]: \(oneValueunpackedSint64)\n"
          unpackedSint64ElementIndex++
      }
      var unpackedFixed32ElementIndex:Int = 0
      for oneValueunpackedFixed32 in unpackedFixed32  {
          output += "\(indent) unpackedFixed32[\(unpackedFixed32ElementIndex)]: \(oneValueunpackedFixed32)\n"
          unpackedFixed32ElementIndex++
      }
      var unpackedFixed64ElementIndex:Int = 0
      for oneValueunpackedFixed64 in unpackedFixed64  {
          output += "\(indent) unpackedFixed64[\(unpackedFixed64ElementIndex)]: \(oneValueunpackedFixed64)\n"
          unpackedFixed64ElementIndex++
      }
      var unpackedSfixed32ElementIndex:Int = 0
      for oneValueunpackedSfixed32 in unpackedSfixed32  {
          output += "\(indent) unpackedSfixed32[\(unpackedSfixed32ElementIndex)]: \(oneValueunpackedSfixed32)\n"
          unpackedSfixed32ElementIndex++
      }
      var unpackedSfixed64ElementIndex:Int = 0
      for oneValueunpackedSfixed64 in unpackedSfixed64  {
          output += "\(indent) unpackedSfixed64[\(unpackedSfixed64ElementIndex)]: \(oneValueunpackedSfixed64)\n"
          unpackedSfixed64ElementIndex++
      }
      var unpackedFloatElementIndex:Int = 0
      for oneValueunpackedFloat in unpackedFloat  {
          output += "\(indent) unpackedFloat[\(unpackedFloatElementIndex)]: \(oneValueunpackedFloat)\n"
          unpackedFloatElementIndex++
      }
      var unpackedDoubleElementIndex:Int = 0
      for oneValueunpackedDouble in unpackedDouble  {
          output += "\(indent) unpackedDouble[\(unpackedDoubleElementIndex)]: \(oneValueunpackedDouble)\n"
          unpackedDoubleElementIndex++
      }
      var unpackedBoolElementIndex:Int = 0
      for oneValueunpackedBool in unpackedBool  {
          output += "\(indent) unpackedBool[\(unpackedBoolElementIndex)]: \(oneValueunpackedBool)\n"
          unpackedBoolElementIndex++
      }
      var unpackedEnumElementIndex:Int = 0
      for oneValueOfunpackedEnum in unpackedEnum {
          output += "\(indent) unpackedEnum[\(unpackedEnumElementIndex)]: \(oneValueOfunpackedEnum.rawValue)\n"
          unpackedEnumElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueunpackedInt32 in unpackedInt32 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedInt32.hashValue
            }
            for oneValueunpackedInt64 in unpackedInt64 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedInt64.hashValue
            }
            for oneValueunpackedUint32 in unpackedUint32 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedUint32.hashValue
            }
            for oneValueunpackedUint64 in unpackedUint64 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedUint64.hashValue
            }
            for oneValueunpackedSint32 in unpackedSint32 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedSint32.hashValue
            }
            for oneValueunpackedSint64 in unpackedSint64 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedSint64.hashValue
            }
            for oneValueunpackedFixed32 in unpackedFixed32 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedFixed32.hashValue
            }
            for oneValueunpackedFixed64 in unpackedFixed64 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedFixed64.hashValue
            }
            for oneValueunpackedSfixed32 in unpackedSfixed32 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedSfixed32.hashValue
            }
            for oneValueunpackedSfixed64 in unpackedSfixed64 {
                hashCode = (hashCode &* 31) &+ oneValueunpackedSfixed64.hashValue
            }
            for oneValueunpackedFloat in unpackedFloat {
                hashCode = (hashCode &* 31) &+ oneValueunpackedFloat.hashValue
            }
            for oneValueunpackedDouble in unpackedDouble {
                hashCode = (hashCode &* 31) &+ oneValueunpackedDouble.hashValue
            }
            for oneValueunpackedBool in unpackedBool {
                hashCode = (hashCode &* 31) &+ oneValueunpackedBool.hashValue
            }
            for oneValueOfunpackedEnum in unpackedEnum {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfunpackedEnum.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestUnpackedTypes"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestUnpackedTypes"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestUnpackedTypes.self
    }
    //Meta information declaration end

  }

  final internal class TestUnpackedTypesBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestUnpackedTypes

    required override internal init () {
       builderResult = ProtobufUnittest.TestUnpackedTypes()
       super.init()
    }
    var unpackedInt32:Array<Int32> {
         get {
             return builderResult.unpackedInt32
         }
         set (array) {
             builderResult.unpackedInt32 = array
         }
    }
    func setUnpackedInt32(value:Array<Int32>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedInt32 = value
      return self
    }
    internal func clearUnpackedInt32() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedInt32.removeAll(keepCapacity: false)
       return self
    }
    var unpackedInt64:Array<Int64> {
         get {
             return builderResult.unpackedInt64
         }
         set (array) {
             builderResult.unpackedInt64 = array
         }
    }
    func setUnpackedInt64(value:Array<Int64>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedInt64 = value
      return self
    }
    internal func clearUnpackedInt64() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedInt64.removeAll(keepCapacity: false)
       return self
    }
    var unpackedUint32:Array<UInt32> {
         get {
             return builderResult.unpackedUint32
         }
         set (array) {
             builderResult.unpackedUint32 = array
         }
    }
    func setUnpackedUint32(value:Array<UInt32>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedUint32 = value
      return self
    }
    internal func clearUnpackedUint32() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedUint32.removeAll(keepCapacity: false)
       return self
    }
    var unpackedUint64:Array<UInt64> {
         get {
             return builderResult.unpackedUint64
         }
         set (array) {
             builderResult.unpackedUint64 = array
         }
    }
    func setUnpackedUint64(value:Array<UInt64>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedUint64 = value
      return self
    }
    internal func clearUnpackedUint64() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedUint64.removeAll(keepCapacity: false)
       return self
    }
    var unpackedSint32:Array<Int32> {
         get {
             return builderResult.unpackedSint32
         }
         set (array) {
             builderResult.unpackedSint32 = array
         }
    }
    func setUnpackedSint32(value:Array<Int32>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedSint32 = value
      return self
    }
    internal func clearUnpackedSint32() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedSint32.removeAll(keepCapacity: false)
       return self
    }
    var unpackedSint64:Array<Int64> {
         get {
             return builderResult.unpackedSint64
         }
         set (array) {
             builderResult.unpackedSint64 = array
         }
    }
    func setUnpackedSint64(value:Array<Int64>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedSint64 = value
      return self
    }
    internal func clearUnpackedSint64() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedSint64.removeAll(keepCapacity: false)
       return self
    }
    var unpackedFixed32:Array<UInt32> {
         get {
             return builderResult.unpackedFixed32
         }
         set (array) {
             builderResult.unpackedFixed32 = array
         }
    }
    func setUnpackedFixed32(value:Array<UInt32>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedFixed32 = value
      return self
    }
    internal func clearUnpackedFixed32() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedFixed32.removeAll(keepCapacity: false)
       return self
    }
    var unpackedFixed64:Array<UInt64> {
         get {
             return builderResult.unpackedFixed64
         }
         set (array) {
             builderResult.unpackedFixed64 = array
         }
    }
    func setUnpackedFixed64(value:Array<UInt64>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedFixed64 = value
      return self
    }
    internal func clearUnpackedFixed64() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedFixed64.removeAll(keepCapacity: false)
       return self
    }
    var unpackedSfixed32:Array<Int32> {
         get {
             return builderResult.unpackedSfixed32
         }
         set (array) {
             builderResult.unpackedSfixed32 = array
         }
    }
    func setUnpackedSfixed32(value:Array<Int32>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedSfixed32 = value
      return self
    }
    internal func clearUnpackedSfixed32() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedSfixed32.removeAll(keepCapacity: false)
       return self
    }
    var unpackedSfixed64:Array<Int64> {
         get {
             return builderResult.unpackedSfixed64
         }
         set (array) {
             builderResult.unpackedSfixed64 = array
         }
    }
    func setUnpackedSfixed64(value:Array<Int64>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedSfixed64 = value
      return self
    }
    internal func clearUnpackedSfixed64() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedSfixed64.removeAll(keepCapacity: false)
       return self
    }
    var unpackedFloat:Array<Float> {
         get {
             return builderResult.unpackedFloat
         }
         set (array) {
             builderResult.unpackedFloat = array
         }
    }
    func setUnpackedFloat(value:Array<Float>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedFloat = value
      return self
    }
    internal func clearUnpackedFloat() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedFloat.removeAll(keepCapacity: false)
       return self
    }
    var unpackedDouble:Array<Double> {
         get {
             return builderResult.unpackedDouble
         }
         set (array) {
             builderResult.unpackedDouble = array
         }
    }
    func setUnpackedDouble(value:Array<Double>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedDouble = value
      return self
    }
    internal func clearUnpackedDouble() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedDouble.removeAll(keepCapacity: false)
       return self
    }
    var unpackedBool:Array<Bool> {
         get {
             return builderResult.unpackedBool
         }
         set (array) {
             builderResult.unpackedBool = array
         }
    }
    func setUnpackedBool(value:Array<Bool>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedBool = value
      return self
    }
    internal func clearUnpackedBool() -> ProtobufUnittest.TestUnpackedTypesBuilder {
       builderResult.unpackedBool.removeAll(keepCapacity: false)
       return self
    }
    var unpackedEnum:Array<ProtobufUnittest.ForeignEnum> {
        get {
            return builderResult.unpackedEnum
        }
        set (value) {
            builderResult.unpackedEnum = value
        }
    }
    func setUnpackedEnum(value:Array<ProtobufUnittest.ForeignEnum>)-> ProtobufUnittest.TestUnpackedTypesBuilder {
      self.unpackedEnum = value
      return self
    }
    internal func clearUnpackedEnum() -> ProtobufUnittest.TestUnpackedTypesBuilder {
      builderResult.unpackedEnum.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestUnpackedTypesBuilder {
      builderResult = ProtobufUnittest.TestUnpackedTypes()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestUnpackedTypesBuilder {
      return ProtobufUnittest.TestUnpackedTypes.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestUnpackedTypes {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestUnpackedTypes {
      var returnMe:ProtobufUnittest.TestUnpackedTypes = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestUnpackedTypes) -> ProtobufUnittest.TestUnpackedTypesBuilder {
      if (other == ProtobufUnittest.TestUnpackedTypes()) {
       return self
      }
      if !other.unpackedInt32.isEmpty {
          builderResult.unpackedInt32 += other.unpackedInt32
      }
      if !other.unpackedInt64.isEmpty {
          builderResult.unpackedInt64 += other.unpackedInt64
      }
      if !other.unpackedUint32.isEmpty {
          builderResult.unpackedUint32 += other.unpackedUint32
      }
      if !other.unpackedUint64.isEmpty {
          builderResult.unpackedUint64 += other.unpackedUint64
      }
      if !other.unpackedSint32.isEmpty {
          builderResult.unpackedSint32 += other.unpackedSint32
      }
      if !other.unpackedSint64.isEmpty {
          builderResult.unpackedSint64 += other.unpackedSint64
      }
      if !other.unpackedFixed32.isEmpty {
          builderResult.unpackedFixed32 += other.unpackedFixed32
      }
      if !other.unpackedFixed64.isEmpty {
          builderResult.unpackedFixed64 += other.unpackedFixed64
      }
      if !other.unpackedSfixed32.isEmpty {
          builderResult.unpackedSfixed32 += other.unpackedSfixed32
      }
      if !other.unpackedSfixed64.isEmpty {
          builderResult.unpackedSfixed64 += other.unpackedSfixed64
      }
      if !other.unpackedFloat.isEmpty {
          builderResult.unpackedFloat += other.unpackedFloat
      }
      if !other.unpackedDouble.isEmpty {
          builderResult.unpackedDouble += other.unpackedDouble
      }
      if !other.unpackedBool.isEmpty {
          builderResult.unpackedBool += other.unpackedBool
      }
      if !other.unpackedEnum.isEmpty {
         builderResult.unpackedEnum += other.unpackedEnum
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestUnpackedTypesBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestUnpackedTypesBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 720 :
          unpackedInt32 += [input.readInt32()]

        case 728 :
          unpackedInt64 += [input.readInt64()]

        case 736 :
          unpackedUint32 += [input.readUInt32()]

        case 744 :
          unpackedUint64 += [input.readUInt64()]

        case 752 :
          unpackedSint32 += [input.readSInt32()]

        case 760 :
          unpackedSint64 += [input.readSInt64()]

        case 773 :
          unpackedFixed32 += [input.readFixed32()]

        case 777 :
          unpackedFixed64 += [input.readFixed64()]

        case 789 :
          unpackedSfixed32 += [input.readSFixed32()]

        case 793 :
          unpackedSfixed64 += [input.readSFixed64()]

        case 805 :
          unpackedFloat += [input.readFloat()]

        case 809 :
          unpackedDouble += [input.readDouble()]

        case 816 :
          unpackedBool += [input.readBool()]

        case 824 :
          let valueIntunpackedEnum = input.readEnum()
          if let enumsunpackedEnum = ProtobufUnittest.ForeignEnum(rawValue:valueIntunpackedEnum) {
               builderResult.unpackedEnum += [enumsunpackedEnum]
          } else {
               unknownFieldsBuilder.mergeVarintField(103, value:Int64(valueIntunpackedEnum))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestPackedExtensions : ExtendableMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestPackedExtensions {
      return ProtobufUnittest.TestPackedExtensions.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestPackedExtensions {
      return ProtobufUnittest.TestPackedExtensions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestPackedExtensions {
      return ProtobufUnittest.TestPackedExtensions.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestPackedExtensions {
      return ProtobufUnittest.TestPackedExtensions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestPackedExtensions {
      return ProtobufUnittest.TestPackedExtensions.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestPackedExtensions {
      return ProtobufUnittest.TestPackedExtensions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestPackedExtensionsBuilder {
      return ProtobufUnittest.TestPackedExtensions.classBuilder() as ProtobufUnittest.TestPackedExtensionsBuilder
    }
    internal func builder() -> ProtobufUnittest.TestPackedExtensionsBuilder {
      return classBuilder() as ProtobufUnittest.TestPackedExtensionsBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestPackedExtensionsBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestPackedExtensions.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestPackedExtensionsBuilder {
      return ProtobufUnittest.TestPackedExtensions.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestPackedExtensions) -> ProtobufUnittest.TestPackedExtensionsBuilder {
      return ProtobufUnittest.TestPackedExtensions.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      writeExtensionDescription(&output, startInclusive:Int32(1), endExclusive:Int32(536870912), indent:indent)
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestPackedExtensions"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestPackedExtensions"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestPackedExtensions.self
    }
    //Meta information declaration end

  }

  final internal class TestPackedExtensionsBuilder : ExtendableMessageBuilder {
    private var builderResult:ProtobufUnittest.TestPackedExtensions

    required override internal init () {
       builderResult = ProtobufUnittest.TestPackedExtensions()
       super.init()
    }
    override internal var internalGetResult:ExtendableMessage {
         get {
             return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestPackedExtensionsBuilder {
      builderResult = ProtobufUnittest.TestPackedExtensions()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestPackedExtensionsBuilder {
      return ProtobufUnittest.TestPackedExtensions.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestPackedExtensions {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestPackedExtensions {
      var returnMe:ProtobufUnittest.TestPackedExtensions = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestPackedExtensions) -> ProtobufUnittest.TestPackedExtensionsBuilder {
      if (other == ProtobufUnittest.TestPackedExtensions()) {
       return self
      }
      mergeExtensionFields(other)
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestPackedExtensionsBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestPackedExtensionsBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestUnpackedExtensions : ExtendableMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestUnpackedExtensions {
      return ProtobufUnittest.TestUnpackedExtensions.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestUnpackedExtensions {
      return ProtobufUnittest.TestUnpackedExtensions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestUnpackedExtensions {
      return ProtobufUnittest.TestUnpackedExtensions.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestUnpackedExtensions {
      return ProtobufUnittest.TestUnpackedExtensions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestUnpackedExtensions {
      return ProtobufUnittest.TestUnpackedExtensions.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestUnpackedExtensions {
      return ProtobufUnittest.TestUnpackedExtensions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestUnpackedExtensionsBuilder {
      return ProtobufUnittest.TestUnpackedExtensions.classBuilder() as ProtobufUnittest.TestUnpackedExtensionsBuilder
    }
    internal func builder() -> ProtobufUnittest.TestUnpackedExtensionsBuilder {
      return classBuilder() as ProtobufUnittest.TestUnpackedExtensionsBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestUnpackedExtensionsBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestUnpackedExtensions.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestUnpackedExtensionsBuilder {
      return ProtobufUnittest.TestUnpackedExtensions.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestUnpackedExtensions) -> ProtobufUnittest.TestUnpackedExtensionsBuilder {
      return ProtobufUnittest.TestUnpackedExtensions.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      writeExtensionDescription(&output, startInclusive:Int32(1), endExclusive:Int32(536870912), indent:indent)
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestUnpackedExtensions"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestUnpackedExtensions"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestUnpackedExtensions.self
    }
    //Meta information declaration end

  }

  final internal class TestUnpackedExtensionsBuilder : ExtendableMessageBuilder {
    private var builderResult:ProtobufUnittest.TestUnpackedExtensions

    required override internal init () {
       builderResult = ProtobufUnittest.TestUnpackedExtensions()
       super.init()
    }
    override internal var internalGetResult:ExtendableMessage {
         get {
             return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestUnpackedExtensionsBuilder {
      builderResult = ProtobufUnittest.TestUnpackedExtensions()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestUnpackedExtensionsBuilder {
      return ProtobufUnittest.TestUnpackedExtensions.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestUnpackedExtensions {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestUnpackedExtensions {
      var returnMe:ProtobufUnittest.TestUnpackedExtensions = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestUnpackedExtensions) -> ProtobufUnittest.TestUnpackedExtensionsBuilder {
      if (other == ProtobufUnittest.TestUnpackedExtensions()) {
       return self
      }
      mergeExtensionFields(other)
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestUnpackedExtensionsBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestUnpackedExtensionsBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestDynamicExtensions : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class DynamicMessageType : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasDynamicField:Bool = false
        private(set) var dynamicField:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasDynamicField {
            output.writeInt32(2100, value:dynamicField)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasDynamicField {
            serialize_size += dynamicField.computeInt32Size(2100)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.classBuilder() as ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder
        }
        internal func builder() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder {
          return classBuilder() as ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType) -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasDynamicField {
            output += "\(indent) dynamicField: \(dynamicField) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasDynamicField {
                   hashCode = (hashCode &* 31) &+ dynamicField.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestDynamicExtensions.DynamicMessageType"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestDynamicExtensions.DynamicMessageType"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.self
        }
        //Meta information declaration end

      }

      final internal class DynamicMessageTypeBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType

        required override internal init () {
           builderResult = ProtobufUnittest.TestDynamicExtensions.DynamicMessageType()
           super.init()
        }
        var hasDynamicField:Bool {
             get {
                  return builderResult.hasDynamicField
             }
        }
        var dynamicField:Int32 {
             get {
                  return builderResult.dynamicField
             }
             set (value) {
                 builderResult.hasDynamicField = true
                 builderResult.dynamicField = value
             }
        }
        func setDynamicField(value:Int32)-> ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder {
          self.dynamicField = value
          return self
        }
        internal func clearDynamicField() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder{
             builderResult.hasDynamicField = false
             builderResult.dynamicField = Int32(0)
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder {
          builderResult = ProtobufUnittest.TestDynamicExtensions.DynamicMessageType()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder {
          return ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
          var returnMe:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType) -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder {
          if (other == ProtobufUnittest.TestDynamicExtensions.DynamicMessageType()) {
           return self
          }
          if other.hasDynamicField {
               dynamicField = other.dynamicField
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 16800 :
              dynamicField = input.readInt32()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



      //Enum type declaration start 

      internal enum DynamicEnumType:Int32 {
        case DynamicFoo = 2200
        case DynamicBar = 2201
        case DynamicBaz = 2202

      }

      //Enum type declaration end 

    private(set) var hasScalarExtension:Bool = false
    private(set) var scalarExtension:UInt32 = UInt32(0)

    private(set) var enumExtension:ProtobufUnittest.ForeignEnum = ProtobufUnittest.ForeignEnum.ForeignFoo
    private(set) var hasEnumExtension:Bool = false
    private(set) var dynamicEnumExtension:ProtobufUnittest.TestDynamicExtensions.DynamicEnumType = ProtobufUnittest.TestDynamicExtensions.DynamicEnumType.DynamicFoo
    private(set) var hasDynamicEnumExtension:Bool = false
    private(set) var hasMessageExtension:Bool = false
    private(set) var messageExtension:ProtobufUnittest.ForeignMessage = ProtobufUnittest.ForeignMessage()
    private(set) var hasDynamicMessageExtension:Bool = false
    private(set) var dynamicMessageExtension:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType = ProtobufUnittest.TestDynamicExtensions.DynamicMessageType()
    private(set) var repeatedExtension:Array<String> = Array<String>()
    private(set) var packedExtension:Array<Int32> = Array<Int32>()
    private var packedExtensionMemoizedSerializedSize:Int32 = -1
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasScalarExtension {
        output.writeFixed32(2000, value:scalarExtension)
      }
      if hasEnumExtension {
        output.writeEnum(2001, value:enumExtension.rawValue)
      }
      if hasDynamicEnumExtension {
        output.writeEnum(2002, value:dynamicEnumExtension.rawValue)
      }
      if hasMessageExtension {
        output.writeMessage(2003, value:messageExtension)
      }
      if hasDynamicMessageExtension {
        output.writeMessage(2004, value:dynamicMessageExtension)
      }
      if !repeatedExtension.isEmpty {
        for oneValuerepeatedExtension in repeatedExtension {
          output.writeString(2005, value:oneValuerepeatedExtension)
        }
      }
      if !packedExtension.isEmpty {
        output.writeRawVarint32(16050)
        output.writeRawVarint32(packedExtensionMemoizedSerializedSize)
        for oneValuepackedExtension in packedExtension {
          output.writeSInt32NoTag(oneValuepackedExtension)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasScalarExtension {
        serialize_size += scalarExtension.computeFixed32Size(2000)
      }
      if (hasEnumExtension) {
        serialize_size += enumExtension.rawValue.computeEnumSize(2001)
      }
      if (hasDynamicEnumExtension) {
        serialize_size += dynamicEnumExtension.rawValue.computeEnumSize(2002)
      }
      if hasMessageExtension {
        serialize_size += messageExtension.computeMessageSize(2003)
      }
      if hasDynamicMessageExtension {
        serialize_size += dynamicMessageExtension.computeMessageSize(2004)
      }
      var dataSizeRepeatedExtension:Int32 = 0
      for oneValuerepeatedExtension in repeatedExtension {
          dataSizeRepeatedExtension += oneValuerepeatedExtension.computeStringSizeNoTag()
      }
      serialize_size += dataSizeRepeatedExtension
      serialize_size += 2 * Int32(repeatedExtension.count)
      var dataSizePackedExtension:Int32 = 0
      for oneValuepackedExtension in packedExtension {
          dataSizePackedExtension += oneValuepackedExtension.computeSInt32SizeNoTag()
      }
      serialize_size += dataSizePackedExtension
      if !packedExtension.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePackedExtension.computeInt32SizeNoTag()
      }
      packedExtensionMemoizedSerializedSize = dataSizePackedExtension
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestDynamicExtensions {
      return ProtobufUnittest.TestDynamicExtensions.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDynamicExtensions {
      return ProtobufUnittest.TestDynamicExtensions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestDynamicExtensions {
      return ProtobufUnittest.TestDynamicExtensions.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestDynamicExtensions {
      return ProtobufUnittest.TestDynamicExtensions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestDynamicExtensions {
      return ProtobufUnittest.TestDynamicExtensions.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDynamicExtensions {
      return ProtobufUnittest.TestDynamicExtensions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      return ProtobufUnittest.TestDynamicExtensions.classBuilder() as ProtobufUnittest.TestDynamicExtensionsBuilder
    }
    internal func builder() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      return classBuilder() as ProtobufUnittest.TestDynamicExtensionsBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDynamicExtensionsBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestDynamicExtensions.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      return ProtobufUnittest.TestDynamicExtensions.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestDynamicExtensions) -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      return ProtobufUnittest.TestDynamicExtensions.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasScalarExtension {
        output += "\(indent) scalarExtension: \(scalarExtension) \n"
      }
      if (hasEnumExtension) {
        output += "\(indent) enumExtension: \(enumExtension.rawValue)\n"
      }
      if (hasDynamicEnumExtension) {
        output += "\(indent) dynamicEnumExtension: \(dynamicEnumExtension.rawValue)\n"
      }
      if hasMessageExtension {
        output += "\(indent) messageExtension {\n"
        messageExtension.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasDynamicMessageExtension {
        output += "\(indent) dynamicMessageExtension {\n"
        dynamicMessageExtension.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var repeatedExtensionElementIndex:Int = 0
      for oneValuerepeatedExtension in repeatedExtension  {
          output += "\(indent) repeatedExtension[\(repeatedExtensionElementIndex)]: \(oneValuerepeatedExtension)\n"
          repeatedExtensionElementIndex++
      }
      var packedExtensionElementIndex:Int = 0
      for oneValuepackedExtension in packedExtension  {
          output += "\(indent) packedExtension[\(packedExtensionElementIndex)]: \(oneValuepackedExtension)\n"
          packedExtensionElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasScalarExtension {
               hashCode = (hashCode &* 31) &+ scalarExtension.hashValue
            }
            if hasEnumExtension {
               hashCode = (hashCode &* 31) &+ Int(enumExtension.rawValue)
            }
            if hasDynamicEnumExtension {
               hashCode = (hashCode &* 31) &+ Int(dynamicEnumExtension.rawValue)
            }
            if hasMessageExtension {
              hashCode = (hashCode &* 31) &+ messageExtension.hashValue
            }
            if hasDynamicMessageExtension {
              hashCode = (hashCode &* 31) &+ dynamicMessageExtension.hashValue
            }
            for oneValuerepeatedExtension in repeatedExtension {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedExtension.hashValue
            }
            for oneValuepackedExtension in packedExtension {
                hashCode = (hashCode &* 31) &+ oneValuepackedExtension.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestDynamicExtensions"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestDynamicExtensions"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestDynamicExtensions.self
    }
    //Meta information declaration end

  }

  final internal class TestDynamicExtensionsBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestDynamicExtensions

    required override internal init () {
       builderResult = ProtobufUnittest.TestDynamicExtensions()
       super.init()
    }
    var hasScalarExtension:Bool {
         get {
              return builderResult.hasScalarExtension
         }
    }
    var scalarExtension:UInt32 {
         get {
              return builderResult.scalarExtension
         }
         set (value) {
             builderResult.hasScalarExtension = true
             builderResult.scalarExtension = value
         }
    }
    func setScalarExtension(value:UInt32)-> ProtobufUnittest.TestDynamicExtensionsBuilder {
      self.scalarExtension = value
      return self
    }
    internal func clearScalarExtension() -> ProtobufUnittest.TestDynamicExtensionsBuilder{
         builderResult.hasScalarExtension = false
         builderResult.scalarExtension = UInt32(0)
         return self
    }
      var hasEnumExtension:Bool{
          get {
              return builderResult.hasEnumExtension
          }
      }
      var enumExtension:ProtobufUnittest.ForeignEnum {
          get {
              return builderResult.enumExtension
          }
          set (value) {
              builderResult.hasEnumExtension = true
              builderResult.enumExtension = value
          }
      }
      internal func setEnumExtension(value:ProtobufUnittest.ForeignEnum)-> ProtobufUnittest.TestDynamicExtensionsBuilder {
        self.enumExtension = value
        return self
      }
      internal func clearEnumExtension() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
         builderResult.hasEnumExtension = false
         builderResult.enumExtension = .ForeignFoo
         return self
      }
      var hasDynamicEnumExtension:Bool{
          get {
              return builderResult.hasDynamicEnumExtension
          }
      }
      var dynamicEnumExtension:ProtobufUnittest.TestDynamicExtensions.DynamicEnumType {
          get {
              return builderResult.dynamicEnumExtension
          }
          set (value) {
              builderResult.hasDynamicEnumExtension = true
              builderResult.dynamicEnumExtension = value
          }
      }
      internal func setDynamicEnumExtension(value:ProtobufUnittest.TestDynamicExtensions.DynamicEnumType)-> ProtobufUnittest.TestDynamicExtensionsBuilder {
        self.dynamicEnumExtension = value
        return self
      }
      internal func clearDynamicEnumExtension() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
         builderResult.hasDynamicEnumExtension = false
         builderResult.dynamicEnumExtension = .DynamicFoo
         return self
      }
    var hasMessageExtension:Bool {
         get {
             return builderResult.hasMessageExtension
         }
    }
    var messageExtension:ProtobufUnittest.ForeignMessage {
         get {
             return builderResult.messageExtension
         }
         set (value) {
             builderResult.hasMessageExtension = true
             builderResult.messageExtension = value
         }
    }
    func setMessageExtension(value:ProtobufUnittest.ForeignMessage)-> ProtobufUnittest.TestDynamicExtensionsBuilder {
      self.messageExtension = value
      return self
    }
    internal func mergeMessageExtension(value:ProtobufUnittest.ForeignMessage) -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      if (builderResult.hasMessageExtension) {
        builderResult.messageExtension = ProtobufUnittest.ForeignMessage.builderWithPrototype(builderResult.messageExtension).mergeFrom(value).buildPartial()
      } else {
        builderResult.messageExtension = value
      }
      builderResult.hasMessageExtension = true
      return self
    }
    internal func clearMessageExtension() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      builderResult.hasMessageExtension = false
      builderResult.messageExtension = ProtobufUnittest.ForeignMessage()
      return self
    }
    var hasDynamicMessageExtension:Bool {
         get {
             return builderResult.hasDynamicMessageExtension
         }
    }
    var dynamicMessageExtension:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType {
         get {
             return builderResult.dynamicMessageExtension
         }
         set (value) {
             builderResult.hasDynamicMessageExtension = true
             builderResult.dynamicMessageExtension = value
         }
    }
    func setDynamicMessageExtension(value:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType)-> ProtobufUnittest.TestDynamicExtensionsBuilder {
      self.dynamicMessageExtension = value
      return self
    }
    internal func mergeDynamicMessageExtension(value:ProtobufUnittest.TestDynamicExtensions.DynamicMessageType) -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      if (builderResult.hasDynamicMessageExtension) {
        builderResult.dynamicMessageExtension = ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builderWithPrototype(builderResult.dynamicMessageExtension).mergeFrom(value).buildPartial()
      } else {
        builderResult.dynamicMessageExtension = value
      }
      builderResult.hasDynamicMessageExtension = true
      return self
    }
    internal func clearDynamicMessageExtension() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      builderResult.hasDynamicMessageExtension = false
      builderResult.dynamicMessageExtension = ProtobufUnittest.TestDynamicExtensions.DynamicMessageType()
      return self
    }
    var repeatedExtension:Array<String> {
         get {
             return builderResult.repeatedExtension
         }
         set (array) {
             builderResult.repeatedExtension = array
         }
    }
    func setRepeatedExtension(value:Array<String>)-> ProtobufUnittest.TestDynamicExtensionsBuilder {
      self.repeatedExtension = value
      return self
    }
    internal func clearRepeatedExtension() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
       builderResult.repeatedExtension.removeAll(keepCapacity: false)
       return self
    }
    var packedExtension:Array<Int32> {
         get {
             return builderResult.packedExtension
         }
         set (array) {
             builderResult.packedExtension = array
         }
    }
    func setPackedExtension(value:Array<Int32>)-> ProtobufUnittest.TestDynamicExtensionsBuilder {
      self.packedExtension = value
      return self
    }
    internal func clearPackedExtension() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
       builderResult.packedExtension.removeAll(keepCapacity: false)
       return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      builderResult = ProtobufUnittest.TestDynamicExtensions()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      return ProtobufUnittest.TestDynamicExtensions.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestDynamicExtensions {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestDynamicExtensions {
      var returnMe:ProtobufUnittest.TestDynamicExtensions = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestDynamicExtensions) -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      if (other == ProtobufUnittest.TestDynamicExtensions()) {
       return self
      }
      if other.hasScalarExtension {
           scalarExtension = other.scalarExtension
      }
      if other.hasEnumExtension {
           enumExtension = other.enumExtension
      }
      if other.hasDynamicEnumExtension {
           dynamicEnumExtension = other.dynamicEnumExtension
      }
      if (other.hasMessageExtension) {
          mergeMessageExtension(other.messageExtension)
      }
      if (other.hasDynamicMessageExtension) {
          mergeDynamicMessageExtension(other.dynamicMessageExtension)
      }
      if !other.repeatedExtension.isEmpty {
          builderResult.repeatedExtension += other.repeatedExtension
      }
      if !other.packedExtension.isEmpty {
          builderResult.packedExtension += other.packedExtension
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestDynamicExtensionsBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestDynamicExtensionsBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 16005 :
          scalarExtension = input.readFixed32()

        case 16008 :
          let valueIntenumExtension = input.readEnum()
          if let enumsenumExtension = ProtobufUnittest.ForeignEnum(rawValue:valueIntenumExtension){
               enumExtension = enumsenumExtension
          } else {
               unknownFieldsBuilder.mergeVarintField(2001, value:Int64(valueIntenumExtension))
          }

        case 16016 :
          let valueIntdynamicEnumExtension = input.readEnum()
          if let enumsdynamicEnumExtension = ProtobufUnittest.TestDynamicExtensions.DynamicEnumType(rawValue:valueIntdynamicEnumExtension){
               dynamicEnumExtension = enumsdynamicEnumExtension
          } else {
               unknownFieldsBuilder.mergeVarintField(2002, value:Int64(valueIntdynamicEnumExtension))
          }

        case 16026 :
          var subBuilder:ProtobufUnittest.ForeignMessageBuilder = ProtobufUnittest.ForeignMessage.builder()
          if hasMessageExtension {
            subBuilder.mergeFrom(messageExtension)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          messageExtension = subBuilder.buildPartial()

        case 16034 :
          var subBuilder:ProtobufUnittest.TestDynamicExtensions.DynamicMessageTypeBuilder = ProtobufUnittest.TestDynamicExtensions.DynamicMessageType.builder()
          if hasDynamicMessageExtension {
            subBuilder.mergeFrom(dynamicMessageExtension)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          dynamicMessageExtension = subBuilder.buildPartial()

        case 16042 :
          repeatedExtension += [input.readString()]

        case 16050 :
          var length:Int32 = input.readRawVarint32()
          var limit:Int32 = input.pushLimit(length)
          while (input.bytesUntilLimit() > 0) {
            builderResult.packedExtension += [input.readSInt32()]
          }
          input.popLimit(limit)

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestRepeatedScalarDifferentTagSizes : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var repeatedFixed32:Array<UInt32> = Array<UInt32>()
    private(set) var repeatedInt32:Array<Int32> = Array<Int32>()
    private(set) var repeatedFixed64:Array<UInt64> = Array<UInt64>()
    private(set) var repeatedInt64:Array<Int64> = Array<Int64>()
    private(set) var repeatedFloat:Array<Float> = Array<Float>()
    private(set) var repeatedUint64:Array<UInt64> = Array<UInt64>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if !repeatedFixed32.isEmpty {
        for oneValuerepeatedFixed32 in repeatedFixed32 {
          output.writeFixed32(12, value:oneValuerepeatedFixed32)
        }
      }
      if !repeatedInt32.isEmpty {
        for oneValuerepeatedInt32 in repeatedInt32 {
          output.writeInt32(13, value:oneValuerepeatedInt32)
        }
      }
      if !repeatedFixed64.isEmpty {
        for oneValuerepeatedFixed64 in repeatedFixed64 {
          output.writeFixed64(2046, value:oneValuerepeatedFixed64)
        }
      }
      if !repeatedInt64.isEmpty {
        for oneValuerepeatedInt64 in repeatedInt64 {
          output.writeInt64(2047, value:oneValuerepeatedInt64)
        }
      }
      if !repeatedFloat.isEmpty {
        for oneValuerepeatedFloat in repeatedFloat {
          output.writeFloat(262142, value:oneValuerepeatedFloat)
        }
      }
      if !repeatedUint64.isEmpty {
        for oneValuerepeatedUint64 in repeatedUint64 {
          output.writeUInt64(262143, value:oneValuerepeatedUint64)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeRepeatedFixed32:Int32 = 0
      dataSizeRepeatedFixed32 = 4 * Int32(repeatedFixed32.count)
      serialize_size += dataSizeRepeatedFixed32
      serialize_size += 1 * Int32(repeatedFixed32.count)
      var dataSizeRepeatedInt32:Int32 = 0
      for oneValuerepeatedInt32 in repeatedInt32 {
          dataSizeRepeatedInt32 += oneValuerepeatedInt32.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt32
      serialize_size += 1 * Int32(repeatedInt32.count)
      var dataSizeRepeatedFixed64:Int32 = 0
      dataSizeRepeatedFixed64 = 8 * Int32(repeatedFixed64.count)
      serialize_size += dataSizeRepeatedFixed64
      serialize_size += 2 * Int32(repeatedFixed64.count)
      var dataSizeRepeatedInt64:Int32 = 0
      for oneValuerepeatedInt64 in repeatedInt64 {
          dataSizeRepeatedInt64 += oneValuerepeatedInt64.computeInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedInt64
      serialize_size += 2 * Int32(repeatedInt64.count)
      var dataSizeRepeatedFloat:Int32 = 0
      dataSizeRepeatedFloat = 4 * Int32(repeatedFloat.count)
      serialize_size += dataSizeRepeatedFloat
      serialize_size += 3 * Int32(repeatedFloat.count)
      var dataSizeRepeatedUint64:Int32 = 0
      for oneValuerepeatedUint64 in repeatedUint64 {
          dataSizeRepeatedUint64 += oneValuerepeatedUint64.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizeRepeatedUint64
      serialize_size += 3 * Int32(repeatedUint64.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.classBuilder() as ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder
    }
    internal func builder() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      return classBuilder() as ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestRepeatedScalarDifferentTagSizes) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      var repeatedFixed32ElementIndex:Int = 0
      for oneValuerepeatedFixed32 in repeatedFixed32  {
          output += "\(indent) repeatedFixed32[\(repeatedFixed32ElementIndex)]: \(oneValuerepeatedFixed32)\n"
          repeatedFixed32ElementIndex++
      }
      var repeatedInt32ElementIndex:Int = 0
      for oneValuerepeatedInt32 in repeatedInt32  {
          output += "\(indent) repeatedInt32[\(repeatedInt32ElementIndex)]: \(oneValuerepeatedInt32)\n"
          repeatedInt32ElementIndex++
      }
      var repeatedFixed64ElementIndex:Int = 0
      for oneValuerepeatedFixed64 in repeatedFixed64  {
          output += "\(indent) repeatedFixed64[\(repeatedFixed64ElementIndex)]: \(oneValuerepeatedFixed64)\n"
          repeatedFixed64ElementIndex++
      }
      var repeatedInt64ElementIndex:Int = 0
      for oneValuerepeatedInt64 in repeatedInt64  {
          output += "\(indent) repeatedInt64[\(repeatedInt64ElementIndex)]: \(oneValuerepeatedInt64)\n"
          repeatedInt64ElementIndex++
      }
      var repeatedFloatElementIndex:Int = 0
      for oneValuerepeatedFloat in repeatedFloat  {
          output += "\(indent) repeatedFloat[\(repeatedFloatElementIndex)]: \(oneValuerepeatedFloat)\n"
          repeatedFloatElementIndex++
      }
      var repeatedUint64ElementIndex:Int = 0
      for oneValuerepeatedUint64 in repeatedUint64  {
          output += "\(indent) repeatedUint64[\(repeatedUint64ElementIndex)]: \(oneValuerepeatedUint64)\n"
          repeatedUint64ElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValuerepeatedFixed32 in repeatedFixed32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed32.hashValue
            }
            for oneValuerepeatedInt32 in repeatedInt32 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt32.hashValue
            }
            for oneValuerepeatedFixed64 in repeatedFixed64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFixed64.hashValue
            }
            for oneValuerepeatedInt64 in repeatedInt64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedInt64.hashValue
            }
            for oneValuerepeatedFloat in repeatedFloat {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedFloat.hashValue
            }
            for oneValuerepeatedUint64 in repeatedUint64 {
                hashCode = (hashCode &* 31) &+ oneValuerepeatedUint64.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestRepeatedScalarDifferentTagSizes"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestRepeatedScalarDifferentTagSizes"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.self
    }
    //Meta information declaration end

  }

  final internal class TestRepeatedScalarDifferentTagSizesBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestRepeatedScalarDifferentTagSizes

    required override internal init () {
       builderResult = ProtobufUnittest.TestRepeatedScalarDifferentTagSizes()
       super.init()
    }
    var repeatedFixed32:Array<UInt32> {
         get {
             return builderResult.repeatedFixed32
         }
         set (array) {
             builderResult.repeatedFixed32 = array
         }
    }
    func setRepeatedFixed32(value:Array<UInt32>)-> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      self.repeatedFixed32 = value
      return self
    }
    internal func clearRepeatedFixed32() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
       builderResult.repeatedFixed32.removeAll(keepCapacity: false)
       return self
    }
    var repeatedInt32:Array<Int32> {
         get {
             return builderResult.repeatedInt32
         }
         set (array) {
             builderResult.repeatedInt32 = array
         }
    }
    func setRepeatedInt32(value:Array<Int32>)-> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      self.repeatedInt32 = value
      return self
    }
    internal func clearRepeatedInt32() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
       builderResult.repeatedInt32.removeAll(keepCapacity: false)
       return self
    }
    var repeatedFixed64:Array<UInt64> {
         get {
             return builderResult.repeatedFixed64
         }
         set (array) {
             builderResult.repeatedFixed64 = array
         }
    }
    func setRepeatedFixed64(value:Array<UInt64>)-> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      self.repeatedFixed64 = value
      return self
    }
    internal func clearRepeatedFixed64() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
       builderResult.repeatedFixed64.removeAll(keepCapacity: false)
       return self
    }
    var repeatedInt64:Array<Int64> {
         get {
             return builderResult.repeatedInt64
         }
         set (array) {
             builderResult.repeatedInt64 = array
         }
    }
    func setRepeatedInt64(value:Array<Int64>)-> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      self.repeatedInt64 = value
      return self
    }
    internal func clearRepeatedInt64() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
       builderResult.repeatedInt64.removeAll(keepCapacity: false)
       return self
    }
    var repeatedFloat:Array<Float> {
         get {
             return builderResult.repeatedFloat
         }
         set (array) {
             builderResult.repeatedFloat = array
         }
    }
    func setRepeatedFloat(value:Array<Float>)-> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      self.repeatedFloat = value
      return self
    }
    internal func clearRepeatedFloat() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
       builderResult.repeatedFloat.removeAll(keepCapacity: false)
       return self
    }
    var repeatedUint64:Array<UInt64> {
         get {
             return builderResult.repeatedUint64
         }
         set (array) {
             builderResult.repeatedUint64 = array
         }
    }
    func setRepeatedUint64(value:Array<UInt64>)-> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      self.repeatedUint64 = value
      return self
    }
    internal func clearRepeatedUint64() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
       builderResult.repeatedUint64.removeAll(keepCapacity: false)
       return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      builderResult = ProtobufUnittest.TestRepeatedScalarDifferentTagSizes()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      return ProtobufUnittest.TestRepeatedScalarDifferentTagSizes.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizes {
      var returnMe:ProtobufUnittest.TestRepeatedScalarDifferentTagSizes = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestRepeatedScalarDifferentTagSizes) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      if (other == ProtobufUnittest.TestRepeatedScalarDifferentTagSizes()) {
       return self
      }
      if !other.repeatedFixed32.isEmpty {
          builderResult.repeatedFixed32 += other.repeatedFixed32
      }
      if !other.repeatedInt32.isEmpty {
          builderResult.repeatedInt32 += other.repeatedInt32
      }
      if !other.repeatedFixed64.isEmpty {
          builderResult.repeatedFixed64 += other.repeatedFixed64
      }
      if !other.repeatedInt64.isEmpty {
          builderResult.repeatedInt64 += other.repeatedInt64
      }
      if !other.repeatedFloat.isEmpty {
          builderResult.repeatedFloat += other.repeatedFloat
      }
      if !other.repeatedUint64.isEmpty {
          builderResult.repeatedUint64 += other.repeatedUint64
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestRepeatedScalarDifferentTagSizesBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 101 :
          repeatedFixed32 += [input.readFixed32()]

        case 104 :
          repeatedInt32 += [input.readInt32()]

        case 16369 :
          repeatedFixed64 += [input.readFixed64()]

        case 16376 :
          repeatedInt64 += [input.readInt64()]

        case 2097141 :
          repeatedFloat += [input.readFloat()]

        case 2097144 :
          repeatedUint64 += [input.readUInt64()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestParsingMerge : ExtendableMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class RepeatedFieldsGenerator : GeneratedMessage, GeneratedMessageProtocol {


        //Nested type declaration start

          final internal class Group1 : GeneratedMessage, GeneratedMessageProtocol {
            private(set) var hasField1:Bool = false
            private(set) var field1:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
            required internal init() {
                 super.init()
            }
            override internal func isInitialized() -> Bool {
             return true
            }
            override internal func writeToCodedOutputStream(output:CodedOutputStream) {
              if hasField1 {
                output.writeMessage(11, value:field1)
              }
              unknownFields.writeToCodedOutputStream(output)
            }
            override internal func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasField1 {
                serialize_size += field1.computeMessageSize(11)
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
            }
            internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builder().mergeFromInputStream(input).build()
            }
            internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builder().mergeFromCodedInputStream(input).build()
            }
            internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            internal class func builder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.classBuilder() as ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder
            }
            internal func builder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              return classBuilder() as ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder
            }
            internal override class func classBuilder() -> MessageBuilder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder()
            }
            internal override func classBuilder() -> MessageBuilder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builder()
            }
            internal func toBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builderWithPrototype(self)
            }
            internal class func builderWithPrototype(prototype:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builder().mergeFrom(prototype)
            }
            override internal func writeDescriptionTo(inout output:String, indent:String) {
              if hasField1 {
                output += "\(indent) field1 {\n"
                field1.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent) }\n"
              }
              unknownFields.writeDescriptionTo(&output, indent:indent)
            }
            override internal var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasField1 {
                      hashCode = (hashCode &* 31) &+ field1.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override internal class func className() -> String {
                return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1"
            }
            override internal func className() -> String {
                return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1"
            }
            override internal func classMetaType() -> GeneratedMessage.Type {
                return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.self
            }
            //Meta information declaration end

          }

          final internal class Group1Builder : GeneratedMessageBuilder {
            private var builderResult:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1

            required override internal init () {
               builderResult = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1()
               super.init()
            }
            var hasField1:Bool {
                 get {
                     return builderResult.hasField1
                 }
            }
            var field1:ProtobufUnittest.TestAllTypes {
                 get {
                     return builderResult.field1
                 }
                 set (value) {
                     builderResult.hasField1 = true
                     builderResult.field1 = value
                 }
            }
            func setField1(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              self.field1 = value
              return self
            }
            internal func mergeField1(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              if (builderResult.hasField1) {
                builderResult.field1 = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.field1).mergeFrom(value).buildPartial()
              } else {
                builderResult.field1 = value
              }
              builderResult.hasField1 = true
              return self
            }
            internal func clearField1() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              builderResult.hasField1 = false
              builderResult.field1 = ProtobufUnittest.TestAllTypes()
              return self
            }
            override internal var internalGetResult:GeneratedMessage {
                 get {
                    return builderResult
                 }
            }
            internal override func clear() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              builderResult = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1()
              return self
            }
            internal override func clone() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builderWithPrototype(builderResult)
            }
            internal override func build() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
                 checkInitialized()
                 return buildPartial()
            }
            internal func buildPartial() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 {
              var returnMe:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 = builderResult
              return returnMe
            }
            internal func mergeFrom(other:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              if (other == ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1()) {
               return self
              }
              if (other.hasField1) {
                  mergeField1(other.field1)
              }
              mergeUnknownFields(other.unknownFields)
              return self
            }
            internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
            }
            internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1Builder {
              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
              while (true) {
                var tag = input.readTag()
                switch tag {
                case 0: 
                  self.unknownFields = unknownFieldsBuilder.build()
                  return self

                case 90 :
                  var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
                  if hasField1 {
                    subBuilder.mergeFrom(field1)
                  }
                  input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                  field1 = subBuilder.buildPartial()

                default:
                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                     unknownFields = unknownFieldsBuilder.build()
                     return self
                  }
                }
              }
            }
          }

        //Nested type declaration end



        //Nested type declaration start

          final internal class Group2 : GeneratedMessage, GeneratedMessageProtocol {
            private(set) var hasField1:Bool = false
            private(set) var field1:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
            required internal init() {
                 super.init()
            }
            override internal func isInitialized() -> Bool {
             return true
            }
            override internal func writeToCodedOutputStream(output:CodedOutputStream) {
              if hasField1 {
                output.writeMessage(21, value:field1)
              }
              unknownFields.writeToCodedOutputStream(output)
            }
            override internal func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasField1 {
                serialize_size += field1.computeMessageSize(21)
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
            }
            internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builder().mergeFromInputStream(input).build()
            }
            internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builder().mergeFromCodedInputStream(input).build()
            }
            internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            internal class func builder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.classBuilder() as ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder
            }
            internal func builder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              return classBuilder() as ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder
            }
            internal override class func classBuilder() -> MessageBuilder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder()
            }
            internal override func classBuilder() -> MessageBuilder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builder()
            }
            internal func toBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builderWithPrototype(self)
            }
            internal class func builderWithPrototype(prototype:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builder().mergeFrom(prototype)
            }
            override internal func writeDescriptionTo(inout output:String, indent:String) {
              if hasField1 {
                output += "\(indent) field1 {\n"
                field1.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent) }\n"
              }
              unknownFields.writeDescriptionTo(&output, indent:indent)
            }
            override internal var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasField1 {
                      hashCode = (hashCode &* 31) &+ field1.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override internal class func className() -> String {
                return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2"
            }
            override internal func className() -> String {
                return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2"
            }
            override internal func classMetaType() -> GeneratedMessage.Type {
                return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.self
            }
            //Meta information declaration end

          }

          final internal class Group2Builder : GeneratedMessageBuilder {
            private var builderResult:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2

            required override internal init () {
               builderResult = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2()
               super.init()
            }
            var hasField1:Bool {
                 get {
                     return builderResult.hasField1
                 }
            }
            var field1:ProtobufUnittest.TestAllTypes {
                 get {
                     return builderResult.field1
                 }
                 set (value) {
                     builderResult.hasField1 = true
                     builderResult.field1 = value
                 }
            }
            func setField1(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              self.field1 = value
              return self
            }
            internal func mergeField1(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              if (builderResult.hasField1) {
                builderResult.field1 = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.field1).mergeFrom(value).buildPartial()
              } else {
                builderResult.field1 = value
              }
              builderResult.hasField1 = true
              return self
            }
            internal func clearField1() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              builderResult.hasField1 = false
              builderResult.field1 = ProtobufUnittest.TestAllTypes()
              return self
            }
            override internal var internalGetResult:GeneratedMessage {
                 get {
                    return builderResult
                 }
            }
            internal override func clear() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              builderResult = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2()
              return self
            }
            internal override func clone() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builderWithPrototype(builderResult)
            }
            internal override func build() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
                 checkInitialized()
                 return buildPartial()
            }
            internal func buildPartial() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 {
              var returnMe:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 = builderResult
              return returnMe
            }
            internal func mergeFrom(other:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              if (other == ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2()) {
               return self
              }
              if (other.hasField1) {
                  mergeField1(other.field1)
              }
              mergeUnknownFields(other.unknownFields)
              return self
            }
            internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
            }
            internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2Builder {
              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
              while (true) {
                var tag = input.readTag()
                switch tag {
                case 0: 
                  self.unknownFields = unknownFieldsBuilder.build()
                  return self

                case 170 :
                  var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
                  if hasField1 {
                    subBuilder.mergeFrom(field1)
                  }
                  input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                  field1 = subBuilder.buildPartial()

                default:
                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                     unknownFields = unknownFieldsBuilder.build()
                     return self
                  }
                }
              }
            }
          }

        //Nested type declaration end

        private(set) var field1:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
        private(set) var field2:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
        private(set) var field3:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
        private(set) var group1:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1>  = Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1>()
        private(set) var group2:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2>  = Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2>()
        private(set) var ext1:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
        private(set) var ext2:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          for oneElementfield1 in field1 {
              output.writeMessage(1, value:oneElementfield1)
          }
          for oneElementfield2 in field2 {
              output.writeMessage(2, value:oneElementfield2)
          }
          for oneElementfield3 in field3 {
              output.writeMessage(3, value:oneElementfield3)
          }
          for oneElementgroup1 in group1 {
              output.writeGroup(10, value:oneElementgroup1)
          }
          for oneElementgroup2 in group2 {
              output.writeGroup(20, value:oneElementgroup2)
          }
          for oneElementext1 in ext1 {
              output.writeMessage(1000, value:oneElementext1)
          }
          for oneElementext2 in ext2 {
              output.writeMessage(1001, value:oneElementext2)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          for oneElementfield1 in field1 {
              serialize_size += oneElementfield1.computeMessageSize(1)
          }
          for oneElementfield2 in field2 {
              serialize_size += oneElementfield2.computeMessageSize(2)
          }
          for oneElementfield3 in field3 {
              serialize_size += oneElementfield3.computeMessageSize(3)
          }
          for oneElementgroup1 in group1 {
              serialize_size += oneElementgroup1.computeGroupSize(10)
          }
          for oneElementgroup2 in group2 {
              serialize_size += oneElementgroup2.computeGroupSize(20)
          }
          for oneElementext1 in ext1 {
              serialize_size += oneElementext1.computeMessageSize(1000)
          }
          for oneElementext2 in ext2 {
              serialize_size += oneElementext2.computeMessageSize(1001)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.classBuilder() as ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder
        }
        internal func builder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          return classBuilder() as ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          var field1ElementIndex:Int = 0
          for oneElementfield1 in field1 {
              output += "\(indent) field1[\(field1ElementIndex)] {\n"
              oneElementfield1.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              field1ElementIndex++
          }
          var field2ElementIndex:Int = 0
          for oneElementfield2 in field2 {
              output += "\(indent) field2[\(field2ElementIndex)] {\n"
              oneElementfield2.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              field2ElementIndex++
          }
          var field3ElementIndex:Int = 0
          for oneElementfield3 in field3 {
              output += "\(indent) field3[\(field3ElementIndex)] {\n"
              oneElementfield3.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              field3ElementIndex++
          }
          var group1ElementIndex:Int = 0
          for oneElementgroup1 in group1 {
              output += "\(indent) group1[\(group1ElementIndex)] {\n"
              oneElementgroup1.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              group1ElementIndex++
          }
          var group2ElementIndex:Int = 0
          for oneElementgroup2 in group2 {
              output += "\(indent) group2[\(group2ElementIndex)] {\n"
              oneElementgroup2.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              group2ElementIndex++
          }
          var ext1ElementIndex:Int = 0
          for oneElementext1 in ext1 {
              output += "\(indent) ext1[\(ext1ElementIndex)] {\n"
              oneElementext1.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              ext1ElementIndex++
          }
          var ext2ElementIndex:Int = 0
          for oneElementext2 in ext2 {
              output += "\(indent) ext2[\(ext2ElementIndex)] {\n"
              oneElementext2.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent)}\n"
              ext2ElementIndex++
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                for oneElementfield1 in field1 {
                    hashCode = (hashCode &* 31) &+ oneElementfield1.hashValue
                }
                for oneElementfield2 in field2 {
                    hashCode = (hashCode &* 31) &+ oneElementfield2.hashValue
                }
                for oneElementfield3 in field3 {
                    hashCode = (hashCode &* 31) &+ oneElementfield3.hashValue
                }
                for oneElementgroup1 in group1 {
                    hashCode = (hashCode &* 31) &+ oneElementgroup1.hashValue
                }
                for oneElementgroup2 in group2 {
                    hashCode = (hashCode &* 31) &+ oneElementgroup2.hashValue
                }
                for oneElementext1 in ext1 {
                    hashCode = (hashCode &* 31) &+ oneElementext1.hashValue
                }
                for oneElementext2 in ext2 {
                    hashCode = (hashCode &* 31) &+ oneElementext2.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.self
        }
        //Meta information declaration end

      }

      final internal class RepeatedFieldsGeneratorBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator

        required override internal init () {
           builderResult = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator()
           super.init()
        }
        var field1:Array<ProtobufUnittest.TestAllTypes> {
             get {
                 return builderResult.field1
             }
             set (value) {
                 builderResult.field1 = value
             }
        }
        func setField1(value:Array<ProtobufUnittest.TestAllTypes>)-> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          self.field1 = value
          return self
        }
        internal func clearField1() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          builderResult.field1.removeAll(keepCapacity: false)
          return self
        }
        var field2:Array<ProtobufUnittest.TestAllTypes> {
             get {
                 return builderResult.field2
             }
             set (value) {
                 builderResult.field2 = value
             }
        }
        func setField2(value:Array<ProtobufUnittest.TestAllTypes>)-> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          self.field2 = value
          return self
        }
        internal func clearField2() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          builderResult.field2.removeAll(keepCapacity: false)
          return self
        }
        var field3:Array<ProtobufUnittest.TestAllTypes> {
             get {
                 return builderResult.field3
             }
             set (value) {
                 builderResult.field3 = value
             }
        }
        func setField3(value:Array<ProtobufUnittest.TestAllTypes>)-> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          self.field3 = value
          return self
        }
        internal func clearField3() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          builderResult.field3.removeAll(keepCapacity: false)
          return self
        }
        var group1:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1> {
             get {
                 return builderResult.group1
             }
             set (value) {
                 builderResult.group1 = value
             }
        }
        func setGroup1(value:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1>)-> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          self.group1 = value
          return self
        }
        internal func clearGroup1() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          builderResult.group1.removeAll(keepCapacity: false)
          return self
        }
        var group2:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2> {
             get {
                 return builderResult.group2
             }
             set (value) {
                 builderResult.group2 = value
             }
        }
        func setGroup2(value:Array<ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2>)-> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          self.group2 = value
          return self
        }
        internal func clearGroup2() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          builderResult.group2.removeAll(keepCapacity: false)
          return self
        }
        var ext1:Array<ProtobufUnittest.TestAllTypes> {
             get {
                 return builderResult.ext1
             }
             set (value) {
                 builderResult.ext1 = value
             }
        }
        func setExt1(value:Array<ProtobufUnittest.TestAllTypes>)-> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          self.ext1 = value
          return self
        }
        internal func clearExt1() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          builderResult.ext1.removeAll(keepCapacity: false)
          return self
        }
        var ext2:Array<ProtobufUnittest.TestAllTypes> {
             get {
                 return builderResult.ext2
             }
             set (value) {
                 builderResult.ext2 = value
             }
        }
        func setExt2(value:Array<ProtobufUnittest.TestAllTypes>)-> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          self.ext2 = value
          return self
        }
        internal func clearExt2() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          builderResult.ext2.removeAll(keepCapacity: false)
          return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          builderResult = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator {
          var returnMe:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          if (other == ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator()) {
           return self
          }
          if !other.field1.isEmpty  {
             builderResult.field1 += other.field1
          }
          if !other.field2.isEmpty  {
             builderResult.field2 += other.field2
          }
          if !other.field3.isEmpty  {
             builderResult.field3 += other.field3
          }
          if !other.group1.isEmpty  {
             builderResult.group1 += other.group1
          }
          if !other.group2.isEmpty  {
             builderResult.group2 += other.group2
          }
          if !other.ext1.isEmpty  {
             builderResult.ext1 += other.ext1
          }
          if !other.ext2.isEmpty  {
             builderResult.ext2 += other.ext2
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedFieldsGeneratorBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 10 :
              var subBuilder = ProtobufUnittest.TestAllTypes.builder()
              input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
              field1 += [subBuilder.buildPartial()]

            case 18 :
              var subBuilder = ProtobufUnittest.TestAllTypes.builder()
              input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
              field2 += [subBuilder.buildPartial()]

            case 26 :
              var subBuilder = ProtobufUnittest.TestAllTypes.builder()
              input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
              field3 += [subBuilder.buildPartial()]

            case 83 :
              var subBuilder = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.builder()
              input.readGroup(10,builder:subBuilder,extensionRegistry:extensionRegistry)
              group1 += [subBuilder.buildPartial()]

            case 163 :
              var subBuilder = ProtobufUnittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.builder()
              input.readGroup(20,builder:subBuilder,extensionRegistry:extensionRegistry)
              group2 += [subBuilder.buildPartial()]

            case 8002 :
              var subBuilder = ProtobufUnittest.TestAllTypes.builder()
              input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
              ext1 += [subBuilder.buildPartial()]

            case 8010 :
              var subBuilder = ProtobufUnittest.TestAllTypes.builder()
              input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
              ext2 += [subBuilder.buildPartial()]

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class OptionalGroup : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasOptionalGroupAllTypes:Bool = false
        private(set) var optionalGroupAllTypes:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasOptionalGroupAllTypes {
            output.writeMessage(11, value:optionalGroupAllTypes)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasOptionalGroupAllTypes {
            serialize_size += optionalGroupAllTypes.computeMessageSize(11)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.classBuilder() as ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder
        }
        internal func builder() -> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          return classBuilder() as ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestParsingMerge.OptionalGroup) -> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasOptionalGroupAllTypes {
            output += "\(indent) optionalGroupAllTypes {\n"
            optionalGroupAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
            output += "\(indent) }\n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasOptionalGroupAllTypes {
                  hashCode = (hashCode &* 31) &+ optionalGroupAllTypes.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.OptionalGroup"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.OptionalGroup"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestParsingMerge.OptionalGroup.self
        }
        //Meta information declaration end

      }

      final internal class OptionalGroupBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestParsingMerge.OptionalGroup

        required override internal init () {
           builderResult = ProtobufUnittest.TestParsingMerge.OptionalGroup()
           super.init()
        }
        var hasOptionalGroupAllTypes:Bool {
             get {
                 return builderResult.hasOptionalGroupAllTypes
             }
        }
        var optionalGroupAllTypes:ProtobufUnittest.TestAllTypes {
             get {
                 return builderResult.optionalGroupAllTypes
             }
             set (value) {
                 builderResult.hasOptionalGroupAllTypes = true
                 builderResult.optionalGroupAllTypes = value
             }
        }
        func setOptionalGroupAllTypes(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          self.optionalGroupAllTypes = value
          return self
        }
        internal func mergeOptionalGroupAllTypes(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          if (builderResult.hasOptionalGroupAllTypes) {
            builderResult.optionalGroupAllTypes = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.optionalGroupAllTypes).mergeFrom(value).buildPartial()
          } else {
            builderResult.optionalGroupAllTypes = value
          }
          builderResult.hasOptionalGroupAllTypes = true
          return self
        }
        internal func clearOptionalGroupAllTypes() -> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          builderResult.hasOptionalGroupAllTypes = false
          builderResult.optionalGroupAllTypes = ProtobufUnittest.TestAllTypes()
          return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          builderResult = ProtobufUnittest.TestParsingMerge.OptionalGroup()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          return ProtobufUnittest.TestParsingMerge.OptionalGroup.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestParsingMerge.OptionalGroup {
          var returnMe:ProtobufUnittest.TestParsingMerge.OptionalGroup = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestParsingMerge.OptionalGroup) -> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          if (other == ProtobufUnittest.TestParsingMerge.OptionalGroup()) {
           return self
          }
          if (other.hasOptionalGroupAllTypes) {
              mergeOptionalGroupAllTypes(other.optionalGroupAllTypes)
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 90 :
              var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
              if hasOptionalGroupAllTypes {
                subBuilder.mergeFrom(optionalGroupAllTypes)
              }
              input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
              optionalGroupAllTypes = subBuilder.buildPartial()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class RepeatedGroup : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasRepeatedGroupAllTypes:Bool = false
        private(set) var repeatedGroupAllTypes:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasRepeatedGroupAllTypes {
            output.writeMessage(21, value:repeatedGroupAllTypes)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasRepeatedGroupAllTypes {
            serialize_size += repeatedGroupAllTypes.computeMessageSize(21)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.classBuilder() as ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder
        }
        internal func builder() -> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          return classBuilder() as ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.builder()
        }
        internal func toBuilder() -> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:ProtobufUnittest.TestParsingMerge.RepeatedGroup) -> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasRepeatedGroupAllTypes {
            output += "\(indent) repeatedGroupAllTypes {\n"
            repeatedGroupAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
            output += "\(indent) }\n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasRepeatedGroupAllTypes {
                  hashCode = (hashCode &* 31) &+ repeatedGroupAllTypes.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.RepeatedGroup"
        }
        override internal func className() -> String {
            return "ProtobufUnittest.TestParsingMerge.RepeatedGroup"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.TestParsingMerge.RepeatedGroup.self
        }
        //Meta information declaration end

      }

      final internal class RepeatedGroupBuilder : GeneratedMessageBuilder {
        private var builderResult:ProtobufUnittest.TestParsingMerge.RepeatedGroup

        required override internal init () {
           builderResult = ProtobufUnittest.TestParsingMerge.RepeatedGroup()
           super.init()
        }
        var hasRepeatedGroupAllTypes:Bool {
             get {
                 return builderResult.hasRepeatedGroupAllTypes
             }
        }
        var repeatedGroupAllTypes:ProtobufUnittest.TestAllTypes {
             get {
                 return builderResult.repeatedGroupAllTypes
             }
             set (value) {
                 builderResult.hasRepeatedGroupAllTypes = true
                 builderResult.repeatedGroupAllTypes = value
             }
        }
        func setRepeatedGroupAllTypes(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          self.repeatedGroupAllTypes = value
          return self
        }
        internal func mergeRepeatedGroupAllTypes(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          if (builderResult.hasRepeatedGroupAllTypes) {
            builderResult.repeatedGroupAllTypes = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.repeatedGroupAllTypes).mergeFrom(value).buildPartial()
          } else {
            builderResult.repeatedGroupAllTypes = value
          }
          builderResult.hasRepeatedGroupAllTypes = true
          return self
        }
        internal func clearRepeatedGroupAllTypes() -> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          builderResult.hasRepeatedGroupAllTypes = false
          builderResult.repeatedGroupAllTypes = ProtobufUnittest.TestAllTypes()
          return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          builderResult = ProtobufUnittest.TestParsingMerge.RepeatedGroup()
          return self
        }
        internal override func clone() -> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          return ProtobufUnittest.TestParsingMerge.RepeatedGroup.builderWithPrototype(builderResult)
        }
        internal override func build() -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> ProtobufUnittest.TestParsingMerge.RepeatedGroup {
          var returnMe:ProtobufUnittest.TestParsingMerge.RepeatedGroup = builderResult
          return returnMe
        }
        internal func mergeFrom(other:ProtobufUnittest.TestParsingMerge.RepeatedGroup) -> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          if (other == ProtobufUnittest.TestParsingMerge.RepeatedGroup()) {
           return self
          }
          if (other.hasRepeatedGroupAllTypes) {
              mergeRepeatedGroupAllTypes(other.repeatedGroupAllTypes)
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge.RepeatedGroupBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 170 :
              var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
              if hasRepeatedGroupAllTypes {
                subBuilder.mergeFrom(repeatedGroupAllTypes)
              }
              input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
              repeatedGroupAllTypes = subBuilder.buildPartial()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end

    private(set) var hasRequiredAllTypes:Bool = false
    private(set) var requiredAllTypes:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
    private(set) var hasOptionalAllTypes:Bool = false
    private(set) var optionalAllTypes:ProtobufUnittest.TestAllTypes = ProtobufUnittest.TestAllTypes()
    private(set) var hasOptionalGroup:Bool = false
    private(set) var optionalGroup:ProtobufUnittest.TestParsingMerge.OptionalGroup = ProtobufUnittest.TestParsingMerge.OptionalGroup()
    internal class func optionalExt() -> ConcreateExtensionField {
         return TestParsingMergeoptionalExt
    }
    internal class func repeatedExt() -> ConcreateExtensionField {
         return TestParsingMergerepeatedExt
    }
    private(set) var repeatedAllTypes:Array<ProtobufUnittest.TestAllTypes>  = Array<ProtobufUnittest.TestAllTypes>()
    private(set) var repeatedGroup:Array<ProtobufUnittest.TestParsingMerge.RepeatedGroup>  = Array<ProtobufUnittest.TestParsingMerge.RepeatedGroup>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
      if !hasRequiredAllTypes {
        return false
      }
      if !extensionsAreInitialized() {
       return false
      }
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasRequiredAllTypes {
        output.writeMessage(1, value:requiredAllTypes)
      }
      if hasOptionalAllTypes {
        output.writeMessage(2, value:optionalAllTypes)
      }
      for oneElementrepeatedAllTypes in repeatedAllTypes {
          output.writeMessage(3, value:oneElementrepeatedAllTypes)
      }
      if hasOptionalGroup {
        output.writeGroup(10, value:optionalGroup)
      }
      for oneElementrepeatedGroup in repeatedGroup {
          output.writeGroup(20, value:oneElementrepeatedGroup)
      }
      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasRequiredAllTypes {
        serialize_size += requiredAllTypes.computeMessageSize(1)
      }
      if hasOptionalAllTypes {
        serialize_size += optionalAllTypes.computeMessageSize(2)
      }
      for oneElementrepeatedAllTypes in repeatedAllTypes {
          serialize_size += oneElementrepeatedAllTypes.computeMessageSize(3)
      }
      if hasOptionalGroup {
        serialize_size += optionalGroup.computeGroupSize(10)
      }
      for oneElementrepeatedGroup in repeatedGroup {
          serialize_size += oneElementrepeatedGroup.computeGroupSize(20)
      }
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestParsingMerge {
      return ProtobufUnittest.TestParsingMerge.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge {
      return ProtobufUnittest.TestParsingMerge.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestParsingMerge {
      return ProtobufUnittest.TestParsingMerge.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestParsingMerge {
      return ProtobufUnittest.TestParsingMerge.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestParsingMerge {
      return ProtobufUnittest.TestParsingMerge.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMerge {
      return ProtobufUnittest.TestParsingMerge.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestParsingMergeBuilder {
      return ProtobufUnittest.TestParsingMerge.classBuilder() as ProtobufUnittest.TestParsingMergeBuilder
    }
    internal func builder() -> ProtobufUnittest.TestParsingMergeBuilder {
      return classBuilder() as ProtobufUnittest.TestParsingMergeBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestParsingMergeBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestParsingMerge.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestParsingMergeBuilder {
      return ProtobufUnittest.TestParsingMerge.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestParsingMerge) -> ProtobufUnittest.TestParsingMergeBuilder {
      return ProtobufUnittest.TestParsingMerge.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasRequiredAllTypes {
        output += "\(indent) requiredAllTypes {\n"
        requiredAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOptionalAllTypes {
        output += "\(indent) optionalAllTypes {\n"
        optionalAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var repeatedAllTypesElementIndex:Int = 0
      for oneElementrepeatedAllTypes in repeatedAllTypes {
          output += "\(indent) repeatedAllTypes[\(repeatedAllTypesElementIndex)] {\n"
          oneElementrepeatedAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedAllTypesElementIndex++
      }
      if hasOptionalGroup {
        output += "\(indent) optionalGroup {\n"
        optionalGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var repeatedGroupElementIndex:Int = 0
      for oneElementrepeatedGroup in repeatedGroup {
          output += "\(indent) repeatedGroup[\(repeatedGroupElementIndex)] {\n"
          oneElementrepeatedGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          repeatedGroupElementIndex++
      }
      writeExtensionDescription(&output, startInclusive:Int32(1000), endExclusive:Int32(536870912), indent:indent)
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasRequiredAllTypes {
              hashCode = (hashCode &* 31) &+ requiredAllTypes.hashValue
            }
            if hasOptionalAllTypes {
              hashCode = (hashCode &* 31) &+ optionalAllTypes.hashValue
            }
            for oneElementrepeatedAllTypes in repeatedAllTypes {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedAllTypes.hashValue
            }
            if hasOptionalGroup {
              hashCode = (hashCode &* 31) &+ optionalGroup.hashValue
            }
            for oneElementrepeatedGroup in repeatedGroup {
                hashCode = (hashCode &* 31) &+ oneElementrepeatedGroup.hashValue
            }
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestParsingMerge"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestParsingMerge"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestParsingMerge.self
    }
    //Meta information declaration end

  }

  final internal class TestParsingMergeBuilder : ExtendableMessageBuilder {
    private var builderResult:ProtobufUnittest.TestParsingMerge

    required override internal init () {
       builderResult = ProtobufUnittest.TestParsingMerge()
       super.init()
    }
    var hasRequiredAllTypes:Bool {
         get {
             return builderResult.hasRequiredAllTypes
         }
    }
    var requiredAllTypes:ProtobufUnittest.TestAllTypes {
         get {
             return builderResult.requiredAllTypes
         }
         set (value) {
             builderResult.hasRequiredAllTypes = true
             builderResult.requiredAllTypes = value
         }
    }
    func setRequiredAllTypes(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.TestParsingMergeBuilder {
      self.requiredAllTypes = value
      return self
    }
    internal func mergeRequiredAllTypes(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestParsingMergeBuilder {
      if (builderResult.hasRequiredAllTypes) {
        builderResult.requiredAllTypes = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.requiredAllTypes).mergeFrom(value).buildPartial()
      } else {
        builderResult.requiredAllTypes = value
      }
      builderResult.hasRequiredAllTypes = true
      return self
    }
    internal func clearRequiredAllTypes() -> ProtobufUnittest.TestParsingMergeBuilder {
      builderResult.hasRequiredAllTypes = false
      builderResult.requiredAllTypes = ProtobufUnittest.TestAllTypes()
      return self
    }
    var hasOptionalAllTypes:Bool {
         get {
             return builderResult.hasOptionalAllTypes
         }
    }
    var optionalAllTypes:ProtobufUnittest.TestAllTypes {
         get {
             return builderResult.optionalAllTypes
         }
         set (value) {
             builderResult.hasOptionalAllTypes = true
             builderResult.optionalAllTypes = value
         }
    }
    func setOptionalAllTypes(value:ProtobufUnittest.TestAllTypes)-> ProtobufUnittest.TestParsingMergeBuilder {
      self.optionalAllTypes = value
      return self
    }
    internal func mergeOptionalAllTypes(value:ProtobufUnittest.TestAllTypes) -> ProtobufUnittest.TestParsingMergeBuilder {
      if (builderResult.hasOptionalAllTypes) {
        builderResult.optionalAllTypes = ProtobufUnittest.TestAllTypes.builderWithPrototype(builderResult.optionalAllTypes).mergeFrom(value).buildPartial()
      } else {
        builderResult.optionalAllTypes = value
      }
      builderResult.hasOptionalAllTypes = true
      return self
    }
    internal func clearOptionalAllTypes() -> ProtobufUnittest.TestParsingMergeBuilder {
      builderResult.hasOptionalAllTypes = false
      builderResult.optionalAllTypes = ProtobufUnittest.TestAllTypes()
      return self
    }
    var repeatedAllTypes:Array<ProtobufUnittest.TestAllTypes> {
         get {
             return builderResult.repeatedAllTypes
         }
         set (value) {
             builderResult.repeatedAllTypes = value
         }
    }
    func setRepeatedAllTypes(value:Array<ProtobufUnittest.TestAllTypes>)-> ProtobufUnittest.TestParsingMergeBuilder {
      self.repeatedAllTypes = value
      return self
    }
    internal func clearRepeatedAllTypes() -> ProtobufUnittest.TestParsingMergeBuilder {
      builderResult.repeatedAllTypes.removeAll(keepCapacity: false)
      return self
    }
    var hasOptionalGroup:Bool {
         get {
             return builderResult.hasOptionalGroup
         }
    }
    var optionalGroup:ProtobufUnittest.TestParsingMerge.OptionalGroup {
         get {
             return builderResult.optionalGroup
         }
         set (value) {
             builderResult.hasOptionalGroup = true
             builderResult.optionalGroup = value
         }
    }
    func setOptionalGroup(value:ProtobufUnittest.TestParsingMerge.OptionalGroup)-> ProtobufUnittest.TestParsingMergeBuilder {
      self.optionalGroup = value
      return self
    }
    internal func mergeOptionalGroup(value:ProtobufUnittest.TestParsingMerge.OptionalGroup) -> ProtobufUnittest.TestParsingMergeBuilder {
      if (builderResult.hasOptionalGroup) {
        builderResult.optionalGroup = ProtobufUnittest.TestParsingMerge.OptionalGroup.builderWithPrototype(builderResult.optionalGroup).mergeFrom(value).buildPartial()
      } else {
        builderResult.optionalGroup = value
      }
      builderResult.hasOptionalGroup = true
      return self
    }
    internal func clearOptionalGroup() -> ProtobufUnittest.TestParsingMergeBuilder {
      builderResult.hasOptionalGroup = false
      builderResult.optionalGroup = ProtobufUnittest.TestParsingMerge.OptionalGroup()
      return self
    }
    var repeatedGroup:Array<ProtobufUnittest.TestParsingMerge.RepeatedGroup> {
         get {
             return builderResult.repeatedGroup
         }
         set (value) {
             builderResult.repeatedGroup = value
         }
    }
    func setRepeatedGroup(value:Array<ProtobufUnittest.TestParsingMerge.RepeatedGroup>)-> ProtobufUnittest.TestParsingMergeBuilder {
      self.repeatedGroup = value
      return self
    }
    internal func clearRepeatedGroup() -> ProtobufUnittest.TestParsingMergeBuilder {
      builderResult.repeatedGroup.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:ExtendableMessage {
         get {
             return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestParsingMergeBuilder {
      builderResult = ProtobufUnittest.TestParsingMerge()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestParsingMergeBuilder {
      return ProtobufUnittest.TestParsingMerge.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestParsingMerge {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestParsingMerge {
      var returnMe:ProtobufUnittest.TestParsingMerge = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestParsingMerge) -> ProtobufUnittest.TestParsingMergeBuilder {
      if (other == ProtobufUnittest.TestParsingMerge()) {
       return self
      }
      if (other.hasRequiredAllTypes) {
          mergeRequiredAllTypes(other.requiredAllTypes)
      }
      if (other.hasOptionalAllTypes) {
          mergeOptionalAllTypes(other.optionalAllTypes)
      }
      if !other.repeatedAllTypes.isEmpty  {
         builderResult.repeatedAllTypes += other.repeatedAllTypes
      }
      if (other.hasOptionalGroup) {
          mergeOptionalGroup(other.optionalGroup)
      }
      if !other.repeatedGroup.isEmpty  {
         builderResult.repeatedGroup += other.repeatedGroup
      }
      mergeExtensionFields(other)
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestParsingMergeBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestParsingMergeBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
          if hasRequiredAllTypes {
            subBuilder.mergeFrom(requiredAllTypes)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          requiredAllTypes = subBuilder.buildPartial()

        case 18 :
          var subBuilder:ProtobufUnittest.TestAllTypesBuilder = ProtobufUnittest.TestAllTypes.builder()
          if hasOptionalAllTypes {
            subBuilder.mergeFrom(optionalAllTypes)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          optionalAllTypes = subBuilder.buildPartial()

        case 26 :
          var subBuilder = ProtobufUnittest.TestAllTypes.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          repeatedAllTypes += [subBuilder.buildPartial()]

        case 83 :
          var subBuilder:ProtobufUnittest.TestParsingMerge.OptionalGroupBuilder = ProtobufUnittest.TestParsingMerge.OptionalGroup.builder()
          if hasOptionalGroup {
            subBuilder.mergeFrom(optionalGroup)
          }
          input.readGroup(10, builder:subBuilder, extensionRegistry:extensionRegistry)
          optionalGroup = subBuilder.buildPartial()

        case 163 :
          var subBuilder = ProtobufUnittest.TestParsingMerge.RepeatedGroup.builder()
          input.readGroup(20,builder:subBuilder,extensionRegistry:extensionRegistry)
          repeatedGroup += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class TestCommentInjectionMessage : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasA:Bool = false
    private(set) var a:String = "*/ <- Neither should this."

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasA {
        output.writeString(1, value:a)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasA {
        serialize_size += a.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.TestCommentInjectionMessage {
      return ProtobufUnittest.TestCommentInjectionMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestCommentInjectionMessage {
      return ProtobufUnittest.TestCommentInjectionMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.TestCommentInjectionMessage {
      return ProtobufUnittest.TestCommentInjectionMessage.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.TestCommentInjectionMessage {
      return ProtobufUnittest.TestCommentInjectionMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.TestCommentInjectionMessage {
      return ProtobufUnittest.TestCommentInjectionMessage.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestCommentInjectionMessage {
      return ProtobufUnittest.TestCommentInjectionMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.TestCommentInjectionMessageBuilder {
      return ProtobufUnittest.TestCommentInjectionMessage.classBuilder() as ProtobufUnittest.TestCommentInjectionMessageBuilder
    }
    internal func builder() -> ProtobufUnittest.TestCommentInjectionMessageBuilder {
      return classBuilder() as ProtobufUnittest.TestCommentInjectionMessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestCommentInjectionMessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestCommentInjectionMessage.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.TestCommentInjectionMessageBuilder {
      return ProtobufUnittest.TestCommentInjectionMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.TestCommentInjectionMessage) -> ProtobufUnittest.TestCommentInjectionMessageBuilder {
      return ProtobufUnittest.TestCommentInjectionMessage.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasA {
        output += "\(indent) a: \(a) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.TestCommentInjectionMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.TestCommentInjectionMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestCommentInjectionMessage.self
    }
    //Meta information declaration end

  }

  final internal class TestCommentInjectionMessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.TestCommentInjectionMessage

    required override internal init () {
       builderResult = ProtobufUnittest.TestCommentInjectionMessage()
       super.init()
    }
    var hasA:Bool {
         get {
              return builderResult.hasA
         }
    }
    var a:String {
         get {
              return builderResult.a
         }
         set (value) {
             builderResult.hasA = true
             builderResult.a = value
         }
    }
    func setA(value:String)-> ProtobufUnittest.TestCommentInjectionMessageBuilder {
      self.a = value
      return self
    }
    internal func clearA() -> ProtobufUnittest.TestCommentInjectionMessageBuilder{
         builderResult.hasA = false
         builderResult.a = "*/ <- Neither should this."
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.TestCommentInjectionMessageBuilder {
      builderResult = ProtobufUnittest.TestCommentInjectionMessage()
      return self
    }
    internal override func clone() -> ProtobufUnittest.TestCommentInjectionMessageBuilder {
      return ProtobufUnittest.TestCommentInjectionMessage.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.TestCommentInjectionMessage {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.TestCommentInjectionMessage {
      var returnMe:ProtobufUnittest.TestCommentInjectionMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.TestCommentInjectionMessage) -> ProtobufUnittest.TestCommentInjectionMessageBuilder {
      if (other == ProtobufUnittest.TestCommentInjectionMessage()) {
       return self
      }
      if other.hasA {
           a = other.a
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.TestCommentInjectionMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.TestCommentInjectionMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          a = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class FooRequest : GeneratedMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.FooRequest {
      return ProtobufUnittest.FooRequest.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooRequest {
      return ProtobufUnittest.FooRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.FooRequest {
      return ProtobufUnittest.FooRequest.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.FooRequest {
      return ProtobufUnittest.FooRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.FooRequest {
      return ProtobufUnittest.FooRequest.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooRequest {
      return ProtobufUnittest.FooRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.FooRequestBuilder {
      return ProtobufUnittest.FooRequest.classBuilder() as ProtobufUnittest.FooRequestBuilder
    }
    internal func builder() -> ProtobufUnittest.FooRequestBuilder {
      return classBuilder() as ProtobufUnittest.FooRequestBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooRequestBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooRequest.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.FooRequestBuilder {
      return ProtobufUnittest.FooRequest.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.FooRequest) -> ProtobufUnittest.FooRequestBuilder {
      return ProtobufUnittest.FooRequest.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.FooRequest"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.FooRequest"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.FooRequest.self
    }
    //Meta information declaration end

  }

  final internal class FooRequestBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.FooRequest

    required override internal init () {
       builderResult = ProtobufUnittest.FooRequest()
       super.init()
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.FooRequestBuilder {
      builderResult = ProtobufUnittest.FooRequest()
      return self
    }
    internal override func clone() -> ProtobufUnittest.FooRequestBuilder {
      return ProtobufUnittest.FooRequest.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.FooRequest {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.FooRequest {
      var returnMe:ProtobufUnittest.FooRequest = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.FooRequest) -> ProtobufUnittest.FooRequestBuilder {
      if (other == ProtobufUnittest.FooRequest()) {
       return self
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.FooRequestBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooRequestBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class FooResponse : GeneratedMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.FooResponse {
      return ProtobufUnittest.FooResponse.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooResponse {
      return ProtobufUnittest.FooResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.FooResponse {
      return ProtobufUnittest.FooResponse.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.FooResponse {
      return ProtobufUnittest.FooResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.FooResponse {
      return ProtobufUnittest.FooResponse.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooResponse {
      return ProtobufUnittest.FooResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.FooResponseBuilder {
      return ProtobufUnittest.FooResponse.classBuilder() as ProtobufUnittest.FooResponseBuilder
    }
    internal func builder() -> ProtobufUnittest.FooResponseBuilder {
      return classBuilder() as ProtobufUnittest.FooResponseBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooResponseBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooResponse.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.FooResponseBuilder {
      return ProtobufUnittest.FooResponse.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.FooResponse) -> ProtobufUnittest.FooResponseBuilder {
      return ProtobufUnittest.FooResponse.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.FooResponse"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.FooResponse"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.FooResponse.self
    }
    //Meta information declaration end

  }

  final internal class FooResponseBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.FooResponse

    required override internal init () {
       builderResult = ProtobufUnittest.FooResponse()
       super.init()
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.FooResponseBuilder {
      builderResult = ProtobufUnittest.FooResponse()
      return self
    }
    internal override func clone() -> ProtobufUnittest.FooResponseBuilder {
      return ProtobufUnittest.FooResponse.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.FooResponse {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.FooResponse {
      var returnMe:ProtobufUnittest.FooResponse = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.FooResponse) -> ProtobufUnittest.FooResponseBuilder {
      if (other == ProtobufUnittest.FooResponse()) {
       return self
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.FooResponseBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooResponseBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class FooClientMessage : GeneratedMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.FooClientMessage {
      return ProtobufUnittest.FooClientMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooClientMessage {
      return ProtobufUnittest.FooClientMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.FooClientMessage {
      return ProtobufUnittest.FooClientMessage.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.FooClientMessage {
      return ProtobufUnittest.FooClientMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.FooClientMessage {
      return ProtobufUnittest.FooClientMessage.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooClientMessage {
      return ProtobufUnittest.FooClientMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.FooClientMessageBuilder {
      return ProtobufUnittest.FooClientMessage.classBuilder() as ProtobufUnittest.FooClientMessageBuilder
    }
    internal func builder() -> ProtobufUnittest.FooClientMessageBuilder {
      return classBuilder() as ProtobufUnittest.FooClientMessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooClientMessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooClientMessage.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.FooClientMessageBuilder {
      return ProtobufUnittest.FooClientMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.FooClientMessage) -> ProtobufUnittest.FooClientMessageBuilder {
      return ProtobufUnittest.FooClientMessage.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.FooClientMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.FooClientMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.FooClientMessage.self
    }
    //Meta information declaration end

  }

  final internal class FooClientMessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.FooClientMessage

    required override internal init () {
       builderResult = ProtobufUnittest.FooClientMessage()
       super.init()
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.FooClientMessageBuilder {
      builderResult = ProtobufUnittest.FooClientMessage()
      return self
    }
    internal override func clone() -> ProtobufUnittest.FooClientMessageBuilder {
      return ProtobufUnittest.FooClientMessage.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.FooClientMessage {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.FooClientMessage {
      var returnMe:ProtobufUnittest.FooClientMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.FooClientMessage) -> ProtobufUnittest.FooClientMessageBuilder {
      if (other == ProtobufUnittest.FooClientMessage()) {
       return self
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.FooClientMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooClientMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class FooServerMessage : GeneratedMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.FooServerMessage {
      return ProtobufUnittest.FooServerMessage.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooServerMessage {
      return ProtobufUnittest.FooServerMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.FooServerMessage {
      return ProtobufUnittest.FooServerMessage.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.FooServerMessage {
      return ProtobufUnittest.FooServerMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.FooServerMessage {
      return ProtobufUnittest.FooServerMessage.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooServerMessage {
      return ProtobufUnittest.FooServerMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.FooServerMessageBuilder {
      return ProtobufUnittest.FooServerMessage.classBuilder() as ProtobufUnittest.FooServerMessageBuilder
    }
    internal func builder() -> ProtobufUnittest.FooServerMessageBuilder {
      return classBuilder() as ProtobufUnittest.FooServerMessageBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooServerMessageBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.FooServerMessage.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.FooServerMessageBuilder {
      return ProtobufUnittest.FooServerMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.FooServerMessage) -> ProtobufUnittest.FooServerMessageBuilder {
      return ProtobufUnittest.FooServerMessage.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.FooServerMessage"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.FooServerMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.FooServerMessage.self
    }
    //Meta information declaration end

  }

  final internal class FooServerMessageBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.FooServerMessage

    required override internal init () {
       builderResult = ProtobufUnittest.FooServerMessage()
       super.init()
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.FooServerMessageBuilder {
      builderResult = ProtobufUnittest.FooServerMessage()
      return self
    }
    internal override func clone() -> ProtobufUnittest.FooServerMessageBuilder {
      return ProtobufUnittest.FooServerMessage.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.FooServerMessage {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.FooServerMessage {
      var returnMe:ProtobufUnittest.FooServerMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.FooServerMessage) -> ProtobufUnittest.FooServerMessageBuilder {
      if (other == ProtobufUnittest.FooServerMessage()) {
       return self
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.FooServerMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.FooServerMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class BarRequest : GeneratedMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.BarRequest {
      return ProtobufUnittest.BarRequest.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.BarRequest {
      return ProtobufUnittest.BarRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.BarRequest {
      return ProtobufUnittest.BarRequest.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.BarRequest {
      return ProtobufUnittest.BarRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.BarRequest {
      return ProtobufUnittest.BarRequest.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.BarRequest {
      return ProtobufUnittest.BarRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.BarRequestBuilder {
      return ProtobufUnittest.BarRequest.classBuilder() as ProtobufUnittest.BarRequestBuilder
    }
    internal func builder() -> ProtobufUnittest.BarRequestBuilder {
      return classBuilder() as ProtobufUnittest.BarRequestBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BarRequestBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BarRequest.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.BarRequestBuilder {
      return ProtobufUnittest.BarRequest.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.BarRequest) -> ProtobufUnittest.BarRequestBuilder {
      return ProtobufUnittest.BarRequest.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.BarRequest"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.BarRequest"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.BarRequest.self
    }
    //Meta information declaration end

  }

  final internal class BarRequestBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.BarRequest

    required override internal init () {
       builderResult = ProtobufUnittest.BarRequest()
       super.init()
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.BarRequestBuilder {
      builderResult = ProtobufUnittest.BarRequest()
      return self
    }
    internal override func clone() -> ProtobufUnittest.BarRequestBuilder {
      return ProtobufUnittest.BarRequest.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.BarRequest {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.BarRequest {
      var returnMe:ProtobufUnittest.BarRequest = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.BarRequest) -> ProtobufUnittest.BarRequestBuilder {
      if (other == ProtobufUnittest.BarRequest()) {
       return self
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.BarRequestBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.BarRequestBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class BarResponse : GeneratedMessage, GeneratedMessageProtocol {
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> ProtobufUnittest.BarResponse {
      return ProtobufUnittest.BarResponse.builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.BarResponse {
      return ProtobufUnittest.BarResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> ProtobufUnittest.BarResponse {
      return ProtobufUnittest.BarResponse.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProtobufUnittest.BarResponse {
      return ProtobufUnittest.BarResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> ProtobufUnittest.BarResponse {
      return ProtobufUnittest.BarResponse.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.BarResponse {
      return ProtobufUnittest.BarResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> ProtobufUnittest.BarResponseBuilder {
      return ProtobufUnittest.BarResponse.classBuilder() as ProtobufUnittest.BarResponseBuilder
    }
    internal func builder() -> ProtobufUnittest.BarResponseBuilder {
      return classBuilder() as ProtobufUnittest.BarResponseBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BarResponseBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.BarResponse.builder()
    }
    internal func toBuilder() -> ProtobufUnittest.BarResponseBuilder {
      return ProtobufUnittest.BarResponse.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:ProtobufUnittest.BarResponse) -> ProtobufUnittest.BarResponseBuilder {
      return ProtobufUnittest.BarResponse.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "ProtobufUnittest.BarResponse"
    }
    override internal func className() -> String {
        return "ProtobufUnittest.BarResponse"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.BarResponse.self
    }
    //Meta information declaration end

  }

  final internal class BarResponseBuilder : GeneratedMessageBuilder {
    private var builderResult:ProtobufUnittest.BarResponse

    required override internal init () {
       builderResult = ProtobufUnittest.BarResponse()
       super.init()
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> ProtobufUnittest.BarResponseBuilder {
      builderResult = ProtobufUnittest.BarResponse()
      return self
    }
    internal override func clone() -> ProtobufUnittest.BarResponseBuilder {
      return ProtobufUnittest.BarResponse.builderWithPrototype(builderResult)
    }
    internal override func build() -> ProtobufUnittest.BarResponse {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> ProtobufUnittest.BarResponse {
      var returnMe:ProtobufUnittest.BarResponse = builderResult
      return returnMe
    }
    internal func mergeFrom(other:ProtobufUnittest.BarResponse) -> ProtobufUnittest.BarResponseBuilder {
      if (other == ProtobufUnittest.BarResponse()) {
       return self
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ProtobufUnittest.BarResponseBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProtobufUnittest.BarResponseBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
